{"version":3,"sources":["components/Sorts/Sort.js","components/utils/utils.js","components/Controls/Controls.module.scss","components/Sorts/InsertionSort.js","components/classes/Element.js","components/Sorts/HeapSort.js","components/ArrayWindow/ArrayWindow.module.scss","components/ArrayAccess/Delays.js","components/ArrayAccess/Writes.js","components/Sorts/Sorts.js","components/Stats/Stats.module.scss","components/Sorts sync /^/.*/.js$","components/Sorts/BitonicSort.js","components/Sorts/BubbleSort.js","components/Sorts/CombSort.js","components/Sorts/DualPivotQuickSort.js","components/Sorts/GnomeSort.js","components/Sorts/GrailSort.js","components/Sorts/IntroSort.js","components/Sorts/LLQuickSort.js","components/Sorts/LRQuickSort.js","components/Sorts/LSDRadixSort.js","components/Sorts/MergeSort.js","components/Sorts/PseudoTimSort.js","components/Sorts/SelectionSort.js","components/Sorts/ShellSort.js","components/Sorts/SlowSort.js","components/Sorts/StoogeSort.js","components/Sorts/TimSort.js","components/Sorts/TimSortold.js","components/Sorts/WikiSort.js","components/ArrayWindow/ArrayWindow.js","components/Stats/Stats.js","components/utils/initFunctions.js","components/utils/shuffles.js","components/Controls/Controls.js","components/ArrayAccess/Sounds.js","components/ArrayAccess/Marks.js","components/ArrayAccess/Reads.js","components/ArrayVisualizer/ArrayVisualizer.js","reportWebVitals.js","index.js"],"names":["Sort","arrayVisualizer","this","state","getState","Reads","getReads","Writes","getWrites","arrLength","getArrLength","sortName","warnLen","isDisabled","isNeedBucketsNum","low","high","bucketsNum","bufferSize","randomInt","a","b","Math","trunc","random","deepArrayCopy","arr","out","i","value","getValue","type","getType","color","getColor","markColor","getMarkColor","push","Element","objLength","obj","undefined","Object","keys","length","HSL2RGB","h","s","l","r","g","hue2rgb","p","q","t","round","module","exports","InsertionSort","start","end","pos","current","get","compareValues","write","unMark","toString","HeapSort","root","dist","leaf","compareInArr","swap","siftDown","heapify","heapSort","Delays","timeoutArray","delays","Swap","Write","Comp","Unmark","CreateAuxArray","RemoveAuxArray","Other","DELAY_INC_CONST","updateDelayInc","delayIncFactor","delayInc","timeout","func","delayName","delay","args","setTimeout","bind","clearTimeout","sortFinishedTime","operationsCounter","name","inc","time","val","mainWrites","auxWrites","comparisons","setState","sortTime","Sounds","getSounds","getDelays","Marks","getMarks","getPseudoArray","mark","getDelayInc","playSound","swapInArr","updateSortTime","curWrites","incDelay","incOperationsCounter","tmpArr","tmp","copy","markUnmarkMany","swapWithDelay","getMainArray","index","toWrite","writeInArr","writeWithDelay","srcArray","srcPos","destArray","destPos","copyLen","auxWrite","auxGet","len","isPseudo","pseudoAuxArrays","getPseudoAuxArrays","auxArrIndex","initArray","createAuxArrayWithDelay","getAuxArrays","auxArrays","createAuxArray","removeAuxArrayWithDelay","removeAuxArray","arrIndex","auxWriteWithDelay","Sorts","sortsPaths","sortPath","require","resetDelays","nullify","sort","getSortObject","getWarnLen","parseInt","prompt","isNaN","alert","max","window","confirm","isNeedBuffer","initPseudoArray","setSortName","getSortName","backupArray","performance","now","runSort","setSortFinishedTime","checkSort","isSorted","array","clearAllMarks","forceMainArrayUpdate","map","webpackContext","req","id","webpackContextResolve","__webpack_require__","o","e","Error","code","resolve","BitonicSort","sortLength","j","k","m","ij","bitonicSort","BubbleSort","CombSort","step","DualPivotQuickSort","left","right","divisor","third","med1","med2","pivot1","readValue","pivot2","less","great","dualPivot","GnomeSort","Subarray","GrailSort","blockLen","grailSwap","leftLen","rightLen","grailBlockSwap","item","target","middle","idealKeys","keysFound","firstKey","currentKey","insertPos","grailBinarySearchLeft","grailRotate","bufferOffset","buffer","currentMerge","bufferLen","mergeLen","mergeIndex","mergeEnd","grailMergeForwards","leftOver","finalBlock","finalOffset","grailMergeBackwards","externLen","arraycopy","externalBuffer","grailPairwiseWrites","grailMergeOutOfPlace","offset","grailBuildInPlace","externalBufferLen","grailBuildOutOfPlace","grailPairwiseSwaps","medianKey","blockCount","block","compare","resetLen","leftOvers","leftBlocks","firstRightBlock","prevLeftBlock","leftOrigin","currentBlockLen","grailInPlaceBufferRewind","currentBlockOrigin","grailBinarySearchRight","grailOutOfPlaceBufferRewind","finalLeftBlocks","finalLen","currentBlock","blockIndex","grailGetSubarray","keyIndex","grailSmartMerge","grailSmartLazyMerge","grailLazyMerge","grailSmartMergeOutOfPlace","subarrayLen","mergeCount","lastSubarray","grailInsertSort","grailBlockSelectSort","grailMergeBlocks","grailLazyMergeBlocks","rightBlocks","lastFragment","grailCountFinalLeftBlocks","leftLength","grailInPlaceBufferReset","grailMergeBlocksOutOfPlace","grailOutOfPlaceBufferReset","grailCombineOutOfPlace","grailCombineInPlace","leftEnd","extBuf","extBufLen","idealBuffer","keyLen","grailCollectKeys","grailLazyStableSort","bufferEnd","grailBuildBlocks","scrollingBuffer","blockKeysSum","minKeys","calcMinKeys","grailCombineBlocks","grailCommonSort","grailSortInPlace","console","log","numKeys","IntroSort","sizeThreshold","floor","mid","lo","hi","x","depthLimit","partition","medianof3","introsortLoop","floorLogBaseTwo","LLQuickSort","pivot","LRQuickSort","quickSort","LSDRadixSort","highestPower","registers","Array","stabVal","min","tempArray","tempWrite","radix","total","MergeSort","merge","nxt","PseudoTimSort","MIN_MERGE","n","len1","len2","minRun","minRunLength","size","pseudoTimSort","SelectionSort","minIndex","ShellSort","gap","temp","SlowSort","StoogeSort","TimSort","minGallop","tmpStorageLength","stackLength","runStart","runLength","stackSize","runHi","reverseRun","isAux","hint","lastOffset","maxOffset","auxReadValue","mergeAt","start1","length1","start2","length2","gallopRight","gallopLeft","mergeLow","mergeHigh","cursor1","cursor2","dest","count1","count2","exit","customCursor","customDest","remaining","makeAscendingRun","binaryInsertionSort","force","pushRun","mergeRuns","forceMergeRuns","Range","end1","Pull","range","set","from","to","count","Iterator","size2","min_level","power_of_two","FloorPowerOfTwo","denominator","numerator_step","decimal_step","begin","numerator","decimal","WikiSort","cache_size","cache","unique","skip","BinaryFirst","BinaryLast","block_size","amount","use_cache","split","range1","range2","arrayCopy","reverseArrayCopy","Reverse","A","B","into","at_index","tempwrite","A_index","B_index","insert_index","A_last","B_last","A_count","B_count","insert","BlockSwap","Rotate","order","y","iterator","finished","nextRange","NetSwap","buffer1","buffer2","blockA","blockB","lastA","lastB","firstA","pull","A1","B1","A2","B2","MergeInto","A3","B3","nextLevel","MergeExternal","sqrt","buffer_size","last","pull_index","reset","find","find_separately","FindLastForward","FindFirstBackward","indexA","B_split","B_remaining","minA","findA","MergeInternal","MergeInPlace","FindFirstForward","FindLastBackward","ArrayWindow","props","mainArray","height","visualProps","borderEnabled","barsStroke","visualStyle","style","arrayLen","sizeStyle","width","updateCounter","renderedArray","renderArray","updateInterval","setInterval","cancelAndUpdate","cancelAnimationFrame","updateAnimFrame","requestAnimationFrame","nextProps","nextContext","rem","getComputedStyle","document","documentElement","fontSize","canvasArr","getElementsByClassName","styles","canvas","containerArr","arrayContainer","container","containerWidth","clientWidth","containerHeight","clientHeight","ctx","getContext","clearRect","imageSmoothingEnabled","filter","w","fillStyle","getColorForRender","fillRect","strokeStyle","lineWidth","strokeRect","className","React","PureComponent","Stats","statsContainer","toFixed","initFunctions","linear","manySimular","divider","shuffles","FullShuffle","randomIndex","AlmostSorted","randomIndexA","randomIndexB","BlockShuffle","GAP_FACTOR","factor","PipeOrgan","InversedPipeOrgan","Heap","QuickSortKiller","Controls","isControlShow","sorts","updateArrLength","DEFAULT_ARR_LEN","stopSort","slider","getElementById","controlsContainer","controls","btn","showToggleBtn","display","innerHTML","shuffleArray","onClick","sortsNames","getSortsPaths","sortArray","element","setShowAuxArrays","checked","setEnableBarsStroke","setEnableMarks","setVisualStyle","setRainbow","setShowStats","restoreArray","sectionHeader","defaultValue","onChange","justifyContent","textAlign","checkBoxContainer","toggleShowAuxArrays","defaultChecked","htmlFor","toggleBarsStroke","toggleEnableMarks","toggleShowStats","toggleRainbow","toggleVisualStyle","genInitFunctions","getShuffles","abortSort","getSorts","AudioContext","webkitAudioContext","osc","createOscillator","frequency","gainNode","createGain","gain","connect","destination","linearRampToValueAtTime","currentTime","stop","colors","saveArr","getEnableMarks","setType","setMarkColor","indexes","saveOnce","unmark","hsl","rgb","setColor","markIndexes","markArgs","markMany","unmarkMany","toSound","tmpA","tmpB","toMark","findIndex","compareWithDelay","compareStub","curComparisons","ArrayVisualizer","pseudoArray","prevArray","showAuxArrays","showStats","enableBarsStroke","enableMarks","setToState","writes","genStats","genArrayWindows","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render"],"mappings":"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","file":"static/js/main.271820f5.chunk.js","sourcesContent":["export class Sort {\r\n    arrayVisualizer;\r\n\r\n    Reads\r\n    Writes\r\n\r\n    arrLength;\r\n\r\n    sortName;\r\n    warnLen;\r\n    isDisabled;\r\n    isNeedBucketsNum;\r\n    isNeedBuffer;\r\n\r\n\r\n\r\n\r\n    constructor(arrayVisualizer) {\r\n        this.arrayVisualizer = arrayVisualizer\r\n        this.state = this.arrayVisualizer.getState()\r\n\r\n        this.Reads = this.arrayVisualizer.getReads()\r\n        this.Writes = this.arrayVisualizer.getWrites()\r\n\r\n        \r\n        this.arrLength = this.arrayVisualizer.getArrLength();\r\n        this.sortName = \"\"\r\n        this.warnLen = -1;\r\n        this.isDisabled = false;\r\n        this.isNeedBucketsNum = false;\r\n    }\r\n\r\n    getSortName(){\r\n        return this.sortName\r\n    }\r\n\r\n    getWarnLen(){\r\n        return this.warnLen\r\n    }\r\n\r\n    runSort(low, high, bucketsNum, bufferSize){\r\n    }\r\n}","import {Element} from \"../classes/Element\";\r\nexport function random(a, b) {\r\n    return Math.random() * (b - a) + a;\r\n}\r\n\r\nexport function randomInt(a, b) {\r\n    return Math.trunc(random(a, b))\r\n}\r\n\r\nexport function swapObj(json) {\r\n    let ret = {};\r\n    for (let key in json) {\r\n        ret[json[key]] = key;\r\n    }\r\n    return ret;\r\n}\r\n\r\nexport function sleep(ms) {\r\n    ms += new Date().getTime();\r\n    while (new Date() < ms) {\r\n    }\r\n}\r\n\r\nexport function getAllMethods(toCheck) {\r\n    const props = [];\r\n    let obj = toCheck;\r\n    do {\r\n        props.push(...Object.getOwnPropertyNames(obj));\r\n    } while (obj = Object.getPrototypeOf(obj));\r\n\r\n    return props.sort().filter((e, i, arr) => {\r\n        if (e!=arr[i+1] && typeof toCheck[e] == 'function') return true;\r\n    });\r\n}\r\n\r\nexport function deepArrayCopy(arr){\r\n    let out = [];\r\n    for(let i of arr){\r\n        let value = i.getValue();\r\n        let type = i.getType();\r\n        let color = i.getColor();\r\n        let markColor = i.getMarkColor();\r\n        out.push(new Element(value, type, color, markColor))\r\n    }\r\n    return out;\r\n}\r\n\r\nexport function arraysEquals(a, b){\r\n    return a.length === b.length &&\r\n    a.every((v, i) => v === b[i]);\r\n}\r\n\r\nexport function objLength(obj){\r\n    return (obj!==undefined) ? Object.keys(obj).length: 0\r\n}\r\n\r\nexport function HSL2RGB(h, s, l){\r\n    let r, g, b;\r\n\r\n    if(s === 0){\r\n        r = g = b = l;\r\n    }else{\r\n        let hue2rgb = function hue2rgb(p, q, t){\r\n            if(t < 0) t += 1;\r\n            if(t > 1) t -= 1;\r\n            if(t < 1/6) return p + (q - p) * 6 * t;\r\n            if(t < 1/2) return q;\r\n            if(t < 2/3) return p + (q - p) * (2/3 - t) * 6;\r\n            return p;\r\n        }\r\n\r\n        let q = l < 0.5 ? l * (1 + s) : l + s - l * s;\r\n        let p = 2 * l - q;\r\n        r = hue2rgb(p, q, h + 1/3);\r\n        g = hue2rgb(p, q, h);\r\n        b = hue2rgb(p, q, h - 1/3);\r\n    }\r\n\r\n    return [Math.round(r * 255), Math.round(g * 255), Math.round(b * 255)];\r\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"textCenter\":\"Controls_textCenter__3_8jn\",\"controls\":\"Controls_controls__3X5vt\",\"showToggleBtn\":\"Controls_showToggleBtn__2CbSs\",\"slider\":\"Controls_slider__3IxWj\",\"sectionHeader\":\"Controls_sectionHeader__2EvBB\"};","import {Sort} from \"./Sort\";\r\n\r\nexport class InsertionSort extends Sort{\r\n    constructor(arrayVisualizer) {\r\n        super(arrayVisualizer);\r\n        this.sortName = \"InsertionSort\"\r\n        this.warnLen = 350\r\n    }\r\n\r\n    InsertionSort(start, end) {\r\n        let pos;\r\n        let current;\r\n\r\n        for(let i = start; i < end; i++) {\r\n            current = this.Reads.get(i);\r\n            pos = i - 1;\r\n\r\n            while(pos >= start && this.Reads.compareValues(this.Reads.get(pos), current) > 0){\r\n                this.Writes.write(pos + 1,this.Reads.get(pos));\r\n                pos--;\r\n            }\r\n            this.Writes.write(pos + 1, current);\r\n        }\r\n    }\r\n\r\n\r\n    runSort(low, high) {\r\n        this.InsertionSort(low, high)\r\n    }\r\n}","const types = {\r\n\r\n}\r\n\r\nconst colors = {\r\n\r\n}\r\n\r\nexport class Element{\r\n\r\n    value;\r\n    type;\r\n    color;\r\n    markColor;\r\n\r\n    // constructor(args){\r\n    //     this.value = args.value;\r\n    //     this.type = args.type;\r\n    //     this.color = args.color || colors[args.type];\r\n    // }\r\n\r\n    constructor(value, type, color, markColor) {\r\n        this.value = value;\r\n        this.type = type;\r\n        this.color = color;\r\n        this.markColor = markColor;\r\n    }\r\n\r\n\r\n    getValue(){\r\n        return this.value;\r\n    }\r\n    setValue(value){\r\n        this.value = value;\r\n    }\r\n\r\n    getColor(){\r\n        return this.color;\r\n    }\r\n\r\n    setColor(color){\r\n        this.color = color;\r\n    }\r\n\r\n    getMarkColor(){\r\n        return this.markColor;\r\n    }\r\n    setMarkColor(markColor){\r\n        this.markColor = markColor;\r\n    }\r\n\r\n    getColorForRender(){\r\n        // if(this.type === \"Default\"){\r\n        //     return this.markColor\r\n        // }else{\r\n        //     return this.color\r\n        // }\r\n        if(this.type === \"Unmarked\"){\r\n            return this.color\r\n        }else {\r\n            return this.markColor\r\n        }\r\n    }\r\n\r\n    getType(){\r\n        return this.type;\r\n    }\r\n    setType(type){\r\n        this.type = type;\r\n    }\r\n\r\n    copy(unMark = true){\r\n        if(unMark){\r\n            return new Element(this.value, \"Unmarked\", this.color, [0,0,0])\r\n        }else{\r\n            return new Element(this.value, this.type, this.color, this.markColor)\r\n        }\r\n    }\r\n\r\n    toString(){\r\n        return this.value.toString()\r\n    }\r\n}","import {Sort} from \"./Sort\";\r\n\r\nexport class HeapSort extends Sort{\r\n    constructor(arrayVisualizer) {\r\n        super(arrayVisualizer);\r\n        this.sortName = \"HeapSort\"\r\n    }\r\n\r\n    siftDown(root, dist, start) {\r\n\r\n\r\n    while (root <= dist / 2) {\r\n        let leaf = 2 * root;\r\n        if (leaf < dist && this.Reads.compareInArr(start + leaf - 1, start + leaf) < 0) {\r\n        leaf++;\r\n    }\r\n\r\n    if (this.Reads.compareInArr(start + root - 1, start + leaf - 1) < 0) {\r\n        this.Writes.swap(start + root - 1, start + leaf - 1, );\r\n        root = leaf;\r\n    }\r\nelse break;\r\n}\r\n}\r\n\r\nheapify(low, high) {\r\n    let length = high - low;\r\n    for (let i = length / 2; i >= 1; i--) {\r\n        this.siftDown(i, length, low);\r\n    }\r\n}\r\n\r\n// This version of heap sort works for max and min variants, alongside sorting\r\n// partial ranges of an array.\r\nheapSort(start, length) {\r\n    this.heapify(start, length);\r\n\r\n    for (let i = length - start; i > 1; i--) {\r\n        this.Writes.swap(start, start + i - 1);\r\n        this.siftDown(1, i - 1, start);\r\n    }\r\n\r\n    // if(!isMax) {\r\n    //     this.Writes.reversal(arr, start, start + length - 1, 1, true, false);\r\n    // }\r\n}\r\n\r\n    runSort(low, high) {\r\n        this.heapSort(low, high+1)\r\n    }\r\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"arrayContainer\":\"ArrayWindow_arrayContainer__jfaB8\",\"bar\":\"ArrayWindow_bar__30QYB\",\"dotContainer\":\"ArrayWindow_dotContainer__3porX\",\"dot\":\"ArrayWindow_dot__29TqH\",\"canvas\":\"ArrayWindow_canvas__3rwEz\"};","export class Delays {\r\n    arrayVisualizer\r\n    timeoutArray\r\n    delays\r\n    delayIncFactor\r\n    delayInc\r\n    DELAY_INC_CONST\r\n    sortFinishedTime\r\n    operationsCounter\r\n\r\n    constructor(arrayVisualizer) {\r\n        this.arrayVisualizer = arrayVisualizer\r\n        this.timeoutArray = []\r\n        this.delays = {\r\n            Swap: 0,\r\n            Write: 0,\r\n            Comp: 0,\r\n            Unmark: 0,\r\n            CreateAuxArray: 0,\r\n            RemoveAuxArray: 0,\r\n            Other: 0\r\n        }\r\n        this.DELAY_INC_CONST = 5000\r\n        this.updateDelayInc()\r\n        // this.delayIncFactor = this.DELAY_INC_CONST-arrayVisualizer.getArrLength()*3\r\n        // this.delayInc = this.delayIncFactor/arrayVisualizer.getArrLength()\r\n    }\r\n\r\n    updateDelayInc(){\r\n        this.delayIncFactor = this.DELAY_INC_CONST\r\n        this.delayInc = this.delayIncFactor/this.arrayVisualizer.getArrLength()\r\n    }\r\n\r\n    push(timeout){\r\n        this.timeoutArray.push(timeout)\r\n    }\r\n\r\n    pushFunc(func, obj, delayName, delay, args) {\r\n        this.timeoutArray.push(setTimeout(func.bind(obj), this.delays[delayName] += delay, args))\r\n    }\r\n\r\n    resetDelays() {\r\n        this.delays = {\r\n            Swap: 0,\r\n            Write: 0,\r\n            Comp: 0,\r\n            Unmark: 0,\r\n            CreateAuxArray: 0,\r\n            RemoveAuxArray: 0,\r\n            Other: 0\r\n        }\r\n        for (let i of this.timeoutArray) {\r\n            clearTimeout(i);\r\n        }\r\n        this.timeoutArray = []\r\n        this.sortFinishedTime = 0\r\n        this.operationsCounter = 0\r\n    }\r\n\r\n    setDelay(name, value){\r\n        this.delays[name] = value\r\n    }\r\n\r\n    incDelay(name, inc=this.delayInc){\r\n        return this.delays[name]+=inc\r\n    }\r\n\r\n    getDelayInc(){\r\n        return this.delayInc\r\n    }\r\n\r\n    getDelays(){\r\n        return this.delays\r\n    }\r\n\r\n    setSortFinishedTime(time){\r\n        this.sortFinishedTime = time\r\n    }\r\n\r\n    incOperationsCounter(val=1){\r\n        this.operationsCounter+=val;\r\n    }\r\n\r\n    updateSortTime(){\r\n        let state = this.arrayVisualizer.getState()\r\n        let mainWrites = state.mainWrites\r\n        let auxWrites = state.auxWrites\r\n        let comparisons = state.comparisons\r\n        this.arrayVisualizer.setState({\r\n            sortTime: (mainWrites+auxWrites+comparisons)/this.operationsCounter*this.sortFinishedTime\r\n        })\r\n    }\r\n}","\r\nimport {objLength} from \"../utils/utils\";\r\n\r\nexport class Writes{\r\n    arrayVisualizer;\r\n    Sounds\r\n    Delays\r\n    Marks\r\n    Reads\r\n\r\n\r\n    constructor(arrayVisualizer){\r\n        this.arrayVisualizer = arrayVisualizer\r\n        this.Sounds = arrayVisualizer.getSounds()\r\n        this.Delays = arrayVisualizer.getDelays()\r\n        this.Marks = arrayVisualizer.getMarks()\r\n        this.Reads = arrayVisualizer.getReads()\r\n    }\r\n\r\n\r\n\r\n    swapWithDelay(a, b, arr = this.arrayVisualizer.getPseudoArray(), mark, delay = this.Delays.getDelayInc(), playSound) {\r\n        // this.Delays.push(setTimeout(this.swapInArr.bind(this), this.Delays.incDelay(\"Write\", delay), a, b, arr, mark, playSound))\r\n        this.Delays.push(setTimeout(()=>{\r\n            this.swapInArr(a, b, arr, mark, playSound)\r\n            this.Delays.updateSortTime()\r\n            let curWrites = this.arrayVisualizer.getState().mainWrites + 2;\r\n            this.arrayVisualizer.setState({\r\n                mainWrites: curWrites\r\n            })\r\n        }, this.Delays.incDelay(\"Write\", delay)))\r\n    }\r\n\r\n\r\n    swapInArr(a, b, arr = this.arrayVisualizer.getPseudoArray(), mark = true, playSound = false) {\r\n        if(playSound) {\r\n            this.Sounds.playSound(arr[b].getValue());\r\n        }else {\r\n            this.Delays.incOperationsCounter(2)\r\n        }\r\n        let tmpArr = arr\r\n        // let tmp = tmpArr[a]\r\n        // tmpArr[a] = tmpArr[b]\r\n        // tmpArr[b] = tmp\r\n        let tmp = tmpArr[a]\r\n        tmpArr[a] = tmpArr[b].copy(true)\r\n        tmpArr[b] = tmp.copy(true)\r\n        if (mark) {\r\n            this.Marks.markUnmarkMany([a, b], {type: \"Default\"})\r\n        }\r\n        // let curWrites = this.arrayVisualizer.getState().writes + 2;\r\n        // this.arrayVisualizer.setState({\r\n        //     writes: curWrites\r\n        // })\r\n    }\r\n\r\n    swap(a, b, arr = this.arrayVisualizer.getPseudoArray()) {\r\n        this.swapInArr(a, b, arr, false, false)\r\n        this.swapWithDelay(a, b, this.arrayVisualizer.getMainArray(), true, this.Delays.getDelayInc(), true)\r\n    }\r\n\r\n    // writeInArr(index, value, arr = this.arrayVisualizer.getPseudoArray(), mark = true, playSound = false) {\r\n    //     if(playSound) {\r\n    //         this.Sounds.playSound(value)\r\n    //     }\r\n    //     arr[index].setValue(value)\r\n    //     if (mark) {\r\n    //         this.Marks.markUnmarkMany([index], {type: \"Default\"})\r\n    //     }\r\n    //     let curWrites = this.arrayVisualizer.getState().writes;\r\n    //     this.arrayVisualizer.setState({\r\n    //         writes: curWrites + 1\r\n    //     })\r\n    // }\r\n\r\n\r\n    writeInArr(index, toWrite, arr = this.arrayVisualizer.getPseudoArray(), mark = true, playSound = false) {\r\n        if(playSound) {\r\n            this.Sounds.playSound(toWrite.getValue())\r\n        }else{\r\n            this.Delays.incOperationsCounter(1)\r\n        }\r\n        arr[index] = toWrite.copy(true)\r\n        if (mark) {\r\n            this.Marks.markUnmarkMany([index], {type: \"Default\"})\r\n        }\r\n        // let curWrites = this.arrayVisualizer.getState().mainWrites + 1;\r\n        // this.arrayVisualizer.setState({\r\n        //     mainWrites: curWrites\r\n        // })\r\n    }\r\n\r\n    writeWithDelay(index, toWrite, arr = this.arrayVisualizer.getPseudoArray(), mark, delay = this.Delays.getDelayInc(), playSound = true) {\r\n        // this.Delays.push(setTimeout(this.writeInArr.bind(this), this.Delays.incDelay(\"Write\", delay), index, toWrite, arr, mark, playSound))\r\n        this.Delays.push(setTimeout(()=>{\r\n            this.Delays.updateSortTime()\r\n            this.writeInArr(index, toWrite, arr, mark, playSound)\r\n            let curWrites = this.arrayVisualizer.getState().mainWrites + 1;\r\n            this.arrayVisualizer.setState({\r\n                mainWrites: curWrites\r\n            })\r\n        }, this.Delays.incDelay(\"Write\", delay)))\r\n    }\r\n\r\n    write(index, toWrite, arr = this.arrayVisualizer.getPseudoArray()) {\r\n        this.writeInArr(index, toWrite, arr, false, false)\r\n        this.writeWithDelay(index, toWrite, this.arrayVisualizer.getMainArray(), true, this.Delays.getDelayInc(), true)\r\n    }\r\n\r\n\r\n    arrayCopy(srcArray, srcPos, destArray, destPos, copyLen) {\r\n\r\n        if (srcArray === -1 && destArray === -1) {\r\n            for (let i = 0; i < copyLen; i++) {\r\n                this.write(destPos + i, this.Reads.get(srcPos + i))\r\n            }\r\n        } else if (srcArray !== -1 && destArray !== -1) {\r\n            for (let i = 0; i < copyLen; i++) {\r\n                this.auxWrite(destPos + i, this.Reads.auxGet(srcPos + i, srcArray), destArray)\r\n            }\r\n        } else if (srcArray === -1 && destArray !== -1) {\r\n            for (let i = 0; i < copyLen; i++) {\r\n                this.auxWrite(destPos + i, this.Reads.get(srcPos + i), destArray)\r\n            }\r\n        } else if (srcArray !== -1 && destArray === -1) {\r\n            for (let i = 0; i < copyLen; i++) {\r\n                this.write(destPos + i, this.Reads.auxGet(srcPos + i, srcArray))\r\n            }\r\n        }\r\n    }\r\n\r\n    reverseArrayCopy(srcArray, srcPos, destArray, destPos, copyLen){\r\n        if (srcArray === -1 && destArray === -1) {\r\n            for (let i = copyLen - 1; i >= 0; i--) {\r\n                this.write(destPos + i, this.Reads.get(srcPos + i))\r\n            }\r\n        } else if (srcArray !== -1 && destArray !== -1) {\r\n            for (let i = copyLen - 1; i >= 0; i--) {\r\n                this.auxWrite(destPos + i, this.Reads.auxGet(srcPos + i, srcArray), destArray)\r\n            }\r\n        } else if (srcArray === -1 && destArray !== -1) {\r\n            for (let i = copyLen - 1; i >= 0; i--) {\r\n                this.auxWrite(destPos + i, this.Reads.get(srcPos + i), destArray)\r\n            }\r\n        } else if (srcArray !== -1 && destArray === -1) {\r\n            for (let i = copyLen - 1; i >= 0; i--) {\r\n                this.write(destPos + i, this.Reads.auxGet(srcPos + i, srcArray))\r\n            }\r\n        }\r\n    }\r\n\r\n    createAuxArray(len, isPseudo = true){\r\n        if(isPseudo) {\r\n            let pseudoAuxArrays = this.arrayVisualizer.getPseudoAuxArrays()\r\n            let auxArrIndex = objLength(pseudoAuxArrays)\r\n            pseudoAuxArrays[auxArrIndex]=(this.arrayVisualizer.initArray(() => -1, len, false))\r\n            this.createAuxArrayWithDelay(len, this.Delays.getDelayInc(), false)\r\n            return auxArrIndex\r\n        }else{\r\n            let tmpArr = this.arrayVisualizer.getAuxArrays()\r\n            let auxArrIndex = objLength(tmpArr)\r\n\r\n            tmpArr[auxArrIndex]=(this.arrayVisualizer.initArray(() => -1, len, false))\r\n            this.arrayVisualizer.setState({\r\n                    auxArrays: tmpArr\r\n                }\r\n            )\r\n        }\r\n    }\r\n\r\n    createAuxArrayWithDelay(len, delay, isPseudo = false){\r\n        this.Delays.push(setTimeout(this.createAuxArray.bind(this), this.Delays.incDelay(\"Write\", delay), len, isPseudo))\r\n    }\r\n\r\n    removeAuxArray(index, isPseudo = true){\r\n        if(isPseudo) {\r\n            // this.arrayVisualizer.getPseudoAuxArrays().splice(index, 1)\r\n            delete this.arrayVisualizer.getPseudoAuxArrays()[index]\r\n            this.removeAuxArrayWithDelay(index, this.Delays.getDelayInc(), false)\r\n        }else{\r\n            let tmp = this.arrayVisualizer.getAuxArrays()\r\n            // tmp.splice(index, 1)\r\n            delete tmp[index]\r\n            this.arrayVisualizer.setState({\r\n                auxArrays: tmp\r\n            })\r\n        }\r\n    }\r\n\r\n    removeAuxArrayWithDelay(index, delay, isPseudo = false){\r\n        this.Delays.push(setTimeout(this.removeAuxArray.bind(this), this.Delays.incDelay(\"Write\", delay), index, isPseudo))\r\n    }\r\n\r\n\r\n    auxWrite(index, toWrite, arrIndex, isPseudo = true, playSound = false){\r\n        if(playSound){\r\n            this.Sounds.playSound(toWrite.getValue())\r\n        }\r\n        if(isPseudo){\r\n            this.Delays.incOperationsCounter(1)\r\n            this.arrayVisualizer.getPseudoAuxArrays()[arrIndex][index] = toWrite.copy()\r\n            this.auxWriteWithDelay(index, toWrite, arrIndex, this.Delays.getDelayInc(), false, true)\r\n        }else{\r\n            this.arrayVisualizer.getAuxArrays()[arrIndex][index] = toWrite.copy()\r\n            let tmp = this.arrayVisualizer.getAuxArrays()\r\n            let curWrites = this.arrayVisualizer.getState().auxWrites + 1;\r\n            this.arrayVisualizer.setState({\r\n                auxWrites: curWrites,\r\n                auxArrays: tmp\r\n            })\r\n            this.Delays.updateSortTime()\r\n        }\r\n    }\r\n\r\n    auxWriteWithDelay(index, value, arrIndex, delay, isPseudo = false, playSound = true, ){\r\n        this.Delays.push(setTimeout(this.auxWrite.bind(this), this.Delays.incDelay(\"Write\", delay), index, value, arrIndex, isPseudo, playSound))\r\n    }\r\n\r\n}","import {Delays} from \"../ArrayAccess/Delays\";\r\n\r\nexport class Sorts {\r\n    arrayVisualizer;\r\n    sortsPaths\r\n    Delays\r\n    Sounds\r\n    Marks\r\n\r\n\r\n    constructor(arrayVisualizer) {\r\n        this.arrayVisualizer = arrayVisualizer\r\n\r\n        this.Delays = arrayVisualizer.getDelays()\r\n        this.Sounds = arrayVisualizer.getSounds()\r\n        this.Marks = arrayVisualizer.getMarks()\r\n\r\n        this.sortsPaths = [\"BubbleSort\", \"CombSort\", \"MergeSort\", \"LLQuickSort\", \"LRQuickSort\", \"HeapSort\",\r\n            \"DualPivotQuickSort\", \"GnomeSort\", \"InsertionSort\", \"ShellSort\", \"SelectionSort\", \"TimSort\", \"PseudoTimSort\",\r\n            \"IntroSort\", \"LSDRadixSort\", \"BitonicSort\", \"SlowSort\", \"StoogeSort\", \"GrailSort\", \"WikiSort\"]\r\n\r\n    }\r\n\r\n    getSortsPaths() {\r\n        return this.sortsPaths;\r\n    }\r\n\r\n    getSortObject(sortPath) {\r\n        let Sort = require(\"./\" + sortPath + \".js\")[sortPath]\r\n        return new Sort(this.arrayVisualizer)\r\n    }\r\n\r\n    runSort(sortName, low, high) {\r\n        this.Delays.resetDelays()\r\n        this.arrayVisualizer.nullify()\r\n        let sort = this.getSortObject(sortName)\r\n        let warnLen = sort.getWarnLen()\r\n        let bucketsNum = 4\r\n        if (sort.isNeedBucketsNum) {\r\n            bucketsNum = parseInt(prompt(\"Enter the buckets num:\", \"4\"))\r\n            if (isNaN(bucketsNum)) {\r\n                return;\r\n            }\r\n            if (bucketsNum < 2){\r\n                alert(\"WARNING!!!\\nUncorrected buckets num was entered!\\nThe buckets num will be set to 2\")\r\n            }\r\n        }\r\n        bucketsNum = Math.max(2, bucketsNum)\r\n\r\n        if (warnLen !== -1 && this.arrayVisualizer.getArrLength() > warnLen &&\r\n            !window.confirm(\"WARNING!!!\\nThe array size(\" + this.arrayVisualizer.getArrLength() + \") \" +\r\n                \"more than recommended(\" + warnLen + \")\\nApplication may freeze\\nDo you want continue?\")) {\r\n            return\r\n\r\n        }\r\n\r\n        let bufferSize = 0\r\n        if (sort.isNeedBuffer) {\r\n            bufferSize = parseInt(prompt(\"Enter the buffer size:\", \"0\"))\r\n            if (isNaN(bufferSize)) {\r\n                return;\r\n            }\r\n        }\r\n        bufferSize = Math.max(0, bufferSize)\r\n\r\n        this.arrayVisualizer.initPseudoArray()\r\n        this.arrayVisualizer.setSortName(sort.getSortName())\r\n        this.arrayVisualizer.backupArray()\r\n\r\n        let start = performance.now()\r\n        sort.runSort(low, high, bucketsNum, bufferSize)\r\n        let end = performance.now()\r\n\r\n        // console.log(\"Sort time: \" + (end-start).toFixed(2)+\" ms\")\r\n\r\n        this.Delays.setSortFinishedTime(end-start)\r\n\r\n        // this.arrayVisualizer.sortClickEvent()\r\n        // console.log(this.Delays.getDelays().Write)\r\n        this.Delays.push(setTimeout(() => (this.checkSort()), this.Delays.getDelays().Write + this.Delays.getDelayInc() * 5))\r\n    }\r\n\r\n    checkSort() {\r\n        let isSorted = true\r\n        let array = this.arrayVisualizer.getMainArray()\r\n        for (let i = 1; i < array.length; ++i) {\r\n            if (array[i - 1].getValue() > array[i].getValue()) {\r\n                isSorted = false\r\n                break;\r\n            }\r\n        }\r\n        for (let i = 0; i < array.length; ++i) {\r\n            this.Delays.push(setTimeout(() => {\r\n                if (isSorted) {\r\n                    this.Sounds.playSound(array[i].getValue())\r\n                    this.Marks.mark(i, {type: \"Sorted\", color: [0, 255, 0]}, true)\r\n                } else {\r\n                    this.Marks.mark(i, {type: \"Default\", color: [255, 0, 0]}, true)\r\n                }\r\n            }, this.Delays.incDelay(\"Other\", this.Delays.getDelayInc() / 3)))\r\n        }\r\n        this.Delays.push(setTimeout(() => {\r\n            this.Marks.clearAllMarks()\r\n            this.Delays.resetDelays()\r\n            this.arrayVisualizer.forceMainArrayUpdate()\r\n        }, (this.Delays.getDelayInc()) * (array.length + 2) / 3))\r\n\r\n    }\r\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"statsContainer\":\"Stats_statsContainer__1qOnq\"};","var map = {\n\t\"./BitonicSort.js\": 30,\n\t\"./BubbleSort.js\": 31,\n\t\"./CombSort.js\": 32,\n\t\"./DualPivotQuickSort.js\": 33,\n\t\"./GnomeSort.js\": 34,\n\t\"./GrailSort.js\": 35,\n\t\"./HeapSort.js\": 13,\n\t\"./InsertionSort.js\": 11,\n\t\"./IntroSort.js\": 36,\n\t\"./LLQuickSort.js\": 37,\n\t\"./LRQuickSort.js\": 38,\n\t\"./LSDRadixSort.js\": 39,\n\t\"./MergeSort.js\": 40,\n\t\"./PseudoTimSort.js\": 41,\n\t\"./SelectionSort.js\": 42,\n\t\"./ShellSort.js\": 43,\n\t\"./SlowSort.js\": 44,\n\t\"./Sort.js\": 5,\n\t\"./Sorts.js\": 20,\n\t\"./StoogeSort.js\": 45,\n\t\"./TimSort.js\": 46,\n\t\"./TimSortold.js\": 47,\n\t\"./WikiSort.js\": 48\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 29;","import {Sort} from \"./Sort\";\r\n\r\nexport class BitonicSort extends Sort{\r\n    constructor(arrayVisualizer) {\r\n        super(arrayVisualizer);\r\n        this.sortName = \"BitonicSort\"\r\n    }\r\n    // kernel(p, q) {\r\n    //     const d = 1 << (p - q);\r\n    //\r\n    //     for (let i = 0; i < this.arrLength; i++) {\r\n    //         const up = ((i >> p) & 2) === 0;\r\n    //         // if ((i & d) === 0 && (x[i] > x[i | d]) === up) {\r\n    //         if ((i & d) === 0 && ((this.Reads.compare(i, i | d, \">\")) === up)) {\r\n    //             // const tmp = x[i];\r\n    //             // x[i] = x[i | d];\r\n    //             // x[i | d] = tmp;\r\n    //             this.Writes.swap(i, i | d)\r\n    //         }\r\n    //     }\r\n    // }\r\n    //\r\n    // bitonicSort(n) {\r\n    //     for (let i = 0; i < n; i++) {\r\n    //         for(let j = 0; j <= i; j++) {\r\n    //             this.kernel(i, j);\r\n    //         }\r\n    //     }\r\n    // }\r\n    bitonicSort(sortLength){\r\n        let i, j, k;\r\n\r\n        for(k = 2; k < sortLength*2; k = 2 * k) {\r\n            let m = (Math.trunc((sortLength + (k - 1)) / k) % 2) !== 0;\r\n\r\n            for(j = k >> 1; j > 0; j = j >> 1) {\r\n                for(i = 0; i < sortLength; i++) {\r\n                    let ij = i ^ j;\r\n\r\n                    if((ij) > i && ij < sortLength) {\r\n                        if((((i & k) === 0) === m) && this.Reads.compareInArr(i, ij) > 0)\r\n                            this.Writes.swap(i, ij);\r\n                        if((((i & k) !== 0) === m) && this.Reads.compareInArr(i, ij) < 0)\r\n                            this.Writes.swap(i, ij);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n    runSort(low, high, bucketsNum) {\r\n        // this.bitonicSort(Math.trunc(Math.log2(high-1)))\r\n        this.bitonicSort(high+1)\r\n    }\r\n\r\n}\r\n","import {Sort} from \"./Sort\";\r\n\r\nexport class BubbleSort extends Sort{\r\n    constructor(arrayVisualizer) {\r\n        super(arrayVisualizer);\r\n        this.sortName = \"BubbleSort\"\r\n        this.warnLen = 200\r\n    }\r\n    BubbleSort() {\r\n        let len = this.arrLength;\r\n        for (let i = 0; i < len; i++) {\r\n            for (let j = 0; j < len - i - 1; j++) {\r\n                if (this.Reads.compareInArr(j, j + 1) > 0) {\r\n                    this.Writes.swap(j, j + 1)\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    runSort(low, high) {\r\n        this.BubbleSort(low, high)\r\n    }\r\n}","import {Sort} from \"./Sort\";\r\n\r\nexport class CombSort extends Sort{\r\n    constructor(arrayVisualizer) {\r\n        super(arrayVisualizer);\r\n        this.sortName = \"CombSort\"\r\n    }\r\n    CombSort() {\r\n        let len = this.arrLength;\r\n        let factor = 1.2473309\r\n        let step = len - 1\r\n        while(step>=1){\r\n            for (let i = 0; i + step < len; i++) {\r\n                if (this.Reads.compareInArr(i, i+step)>0)\r\n                {\r\n                    this.Writes.swap(i, i+step)\r\n                }\r\n            }\r\n            step = Math.trunc(step/factor);\r\n        }\r\n\r\n    }\r\n\r\n    runSort(low, high) {\r\n        this.CombSort(low, high)\r\n    }\r\n}","import {Sort} from \"./Sort\";\r\nimport {InsertionSort} from \"./InsertionSort\";\r\n\r\nexport class DualPivotQuickSort extends Sort {\r\n    constructor(arrayVisualizer) {\r\n        super(arrayVisualizer);\r\n        this.sortName = \"Dual Pivot QuickSort\"\r\n    }\r\n\r\n    dualPivot(left, right, divisor) {\r\n        let length = right - left;\r\n\r\n        // insertion sort for tiny array\r\n        if (length < 4) {\r\n            let insertSorter = new InsertionSort(this.arrayVisualizer)\r\n            insertSorter.runSort(left, right+1)\r\n            return;\r\n        }\r\n        // if(length === 1){\r\n        //     return\r\n        // }\r\n\r\n        let third = Math.trunc(length / divisor);\r\n\r\n// \"medians\"\r\n        let med1 = left + third;\r\n        let med2 = right - third;\r\n\r\n        if (med1 <= left) {\r\n            med1 = left + 1;\r\n        }\r\n        if (med2 >= right) {\r\n            med2 = right - 1;\r\n        }\r\n\r\n\r\n        // if(Reads.compareValues(array[med1], array[med2]) == -1) {\r\n        if (this.Reads.compareInArr(med1, med2) < 0) {\r\n            this.Writes.swap(med1, left);\r\n            this.Writes.swap(med2, right);\r\n        } else {\r\n            this.Writes.swap(med1, right);\r\n            this.Writes.swap(med2, left);\r\n        }\r\n\r\n// pivots\r\n        let pivot1 = this.Reads.readValue(left);\r\n        let pivot2 = this.Reads.readValue(right);\r\n\r\n// pointers\r\n        let less = left + 1;\r\n        let great = right - 1;\r\n\r\n// sorting\r\n        for (let k = less; k <= great; k++) {\r\n\r\n            // if (this.Reads.read(k) < pivot1) {\r\n            if (this.Reads.compareValues(this.Reads.get(k), pivot1) < 0) {\r\n\r\n                this.Writes.swap(k, less++);\r\n            // } else if (this.Reads.read(k) > pivot2) {\r\n            } else if (this.Reads.compareValues(this.Reads.get(k), pivot2) > 0) {\r\n                // while (k < great && this.Reads.read(great) > pivot2) {\r\n                while (k < great && this.Reads.compareValues(this.Reads.get(great), pivot2) > 0) {\r\n                    great--;\r\n                }\r\n                this.Writes.swap(k, great--);\r\n\r\n                // if (this.Reads.read(k) < pivot1) {\r\n                if (this.Reads.compareValues(this.Reads.get(k), pivot1) < 0) {\r\n                    this.Writes.swap(k, less++);\r\n                }\r\n            }\r\n        }\r\n\r\n// swaps\r\n        let dist = great - less;\r\n\r\n        if (dist < 13) {\r\n            divisor++;\r\n        }\r\n        this.Writes.swap(less - 1, left);\r\n        this.Writes.swap(great + 1, right);\r\n\r\n// subarrays\r\n        this.dualPivot(left, less - 2, divisor);\r\n        if (pivot1 < pivot2) {\r\n            this.dualPivot(less, great, divisor);\r\n        }\r\n        this.dualPivot(great + 2, right, divisor);\r\n    }\r\n\r\n    runSort(low, high) {\r\n        this.dualPivot(low, high, 3)\r\n    }\r\n}","import {Sort} from \"./Sort\";\r\nimport {Writes} from \"../ArrayAccess/Writes\";\r\n\r\nexport class GnomeSort extends Sort {\r\n    constructor(arrayVisualizer) {\r\n        super(arrayVisualizer);\r\n        this.sortName = \"GnomeSort\"\r\n        this.warnLen = 250\r\n    }\r\n\r\n    GnomeSort() {\r\n        let len = this.arrLength;\r\n        for (let i = 1; i < len;) {\r\n            if (this.Reads.compareInArr(i, i - 1) >= 0) {\r\n                i++\r\n            } else {\r\n                this.Writes.swap(i, i - 1)\r\n                if (i > 1) {\r\n                    i--;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    runSort(low, high) {\r\n        this.GnomeSort(low, high)\r\n    }\r\n}","/*\r\n * MIT License\r\n * \r\n * Copyright (c) 2013 Andrey Astrelin\r\n * Copyright (c) 2020 The Holy Grail Sort Project\r\n * \r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal\r\n * in the Software without restriction, including without limitation the rights\r\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n * copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n * \r\n * The above copyright notice and this permission notice shall be included in all\r\n * copies or substantial portions of the Software.\r\n * \r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n * SOFTWARE.\r\n */\r\n\r\n/*\r\n * The Holy Grail Sort Project\r\n * Project Manager:      Summer Dragonfly\r\n * Project Contributors: 666666t\r\n *                       Anonymous0726\r\n *                       aphitorite\r\n *                       dani_dlg\r\n *                       EilrahcF\r\n *                       Enver\r\n *                       lovebuny\r\n *                       MP\r\n *                       phoenixbound\r\n *                       thatsOven\r\n *                       \r\n * Special thanks to \"The Studio\" Discord community!\r\n */\r\n\r\n// Credit to phoenixbound for this clever idea\r\n\r\nimport {Sort} from \"./Sort\";\r\n\r\nconst Subarray = {\r\n    LEFT: 1,\r\n    RIGHT: 2,\r\n};\r\n\r\n// REWRITTEN GRAILSORT FOR JAVASCRIPT - A heavily refactored C/C++-to-JavaScript version of\r\n//                                      Andrey Astrelin's GrailSort.h, aiming to be as\r\n//                                      readable and intuitive as possible.\r\n//\r\n// ** Written and maintained by The Holy Grail Sort Project\r\n//\r\n// Primary author: Enver\r\n//\r\n// Current status: Finished. Potentially 100% working... Passing most tests, some tests capped by V8 Engine memory allocation limits\r\n\r\nexport class GrailSort extends Sort {\r\n    // static GRAIL_STATIC_EXT_BUF_LEN = 512;\r\n\r\n    externalBuffer\r\n    externalBufferLen\r\n\r\n    constructor(arrayVisualizer) {\r\n        super(arrayVisualizer);\r\n        this.sortName = \"GrailSort\"\r\n        this.isNeedBuffer = true;\r\n    }\r\n\r\n    grailSwap(a, b) {\r\n        // let temp = array[a];\r\n        // array[a] = array[b];\r\n        // array[b] = temp;\r\n        this.Writes.swap(a, b)\r\n    }\r\n\r\n    grailBlockSwap(a, b, blockLen) {\r\n        for (let i = 0; i < blockLen; i++) {\r\n            this.grailSwap(a + i, b + i);\r\n        }\r\n    }\r\n\r\n    // Object src, int srcPos, Object dest, int destPos, int length\r\n    // Custom method for copying parts of the array either:\r\n    //      within itself to a different destination, or\r\n    //      to another array\r\n    arraycopy(srcArray, srcPos, destArray, destPos, copyLen) {\r\n\r\n        if (srcArray === -1 && destArray === -1) {\r\n            for (let i = 0; i < copyLen; i++) {\r\n                this.Writes.write(destPos + i, this.Reads.get(srcPos + i))\r\n            }\r\n        } else if (srcArray !== -1 && destArray !== -1) {\r\n            for (let i = 0; i < copyLen; i++) {\r\n                this.Writes.auxWrite(destPos + i, this.Reads.auxGet(srcPos + i, srcArray), destArray)\r\n            }\r\n        } else if (srcArray === -1 && destArray !== -1) {\r\n            for (let i = 0; i < copyLen; i++) {\r\n                this.Writes.auxWrite(destPos + i, this.Reads.get(srcPos + i), destArray)\r\n            }\r\n        } else if (srcArray !== -1 && destArray === -1) {\r\n            for (let i = 0; i < copyLen; i++) {\r\n                this.Writes.write(destPos + i, this.Reads.auxGet(srcPos + i, srcArray))\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    grailRotate(start, leftLen, rightLen) {\r\n        while (leftLen > 0 && rightLen > 0) {\r\n            if (leftLen <= rightLen) {\r\n                this.grailBlockSwap(start, start + leftLen, leftLen);\r\n                start += leftLen;\r\n                rightLen -= leftLen;\r\n            } else {\r\n                this.grailBlockSwap(start + leftLen - rightLen, start + leftLen, rightLen);\r\n                leftLen -= rightLen;\r\n            }\r\n        }\r\n    }\r\n\r\n    // Variant of Insertion Sort that utilizes swaps instead of overwrites.\r\n    // Also known as \"Optimized Gnomesort\".\r\n    grailInsertSort(start, length) {\r\n        for (let item = 1; item < length; item++) {\r\n            let left = start + item - 1;\r\n            let right = start + item;\r\n\r\n            while (left >= start && this.Reads.compareInArr(left,\r\n                right) > 0) {\r\n                this.grailSwap(left, right);\r\n                left--;\r\n                right--;\r\n            }\r\n        }\r\n    }\r\n\r\n    grailBinarySearchLeft(start, length, target) {\r\n        let left = 0;\r\n        let right = length;\r\n        while (left < right) {\r\n            let middle = left + parseInt((right - left) / 2);\r\n            if (this.Reads.compareValues(this.Reads.readValue(start + middle), target) < 0) {\r\n                left = middle + 1;\r\n            } else {\r\n                right = middle;\r\n            }\r\n        }\r\n        return left;\r\n    }\r\n\r\n    // Credit to Anonymous0726 for debugging\r\n    grailBinarySearchRight(start, length, target) {\r\n        let left = 0;\r\n        let right = length;\r\n        while (left < right) {\r\n            let middle = left + parseInt((right - left) / 2);\r\n            if (this.Reads.compareValues(this.Reads.readValue(start + middle), target) > 0) {\r\n                right = middle;\r\n            } else {\r\n                left = middle + 1;\r\n            }\r\n        }\r\n        // OFF-BY-ONE BUG FIXED: used to be `return right - 1;`\r\n        return right;\r\n    }\r\n\r\n    // cost: 2 * length + idealKeys^2 / 2\r\n    grailCollectKeys(start, length, idealKeys) {\r\n        let keysFound = 1; // by itself, the first item in the array is our first unique key\r\n        let firstKey = 0; // the first item in the array is at the first position in the array\r\n        let currentKey = 1; // the index used for finding potentially unique items (\"keys\") in the array\r\n\r\n        while (currentKey < length && keysFound < idealKeys) {\r\n\r\n            // Find the location in the key-buffer where our current key can be inserted in sorted order.\r\n            // If the key at insertPos is equal to currentKey, then currentKey isn't unique and we move on.\r\n            let insertPos = this.grailBinarySearchLeft(start + firstKey, keysFound, this.Reads.readValue(start + currentKey));\r\n\r\n            // The second part of this conditional does the equal check we were just talking about; however,\r\n            // if currentKey is larger than everything in the key-buffer (meaning insertPos == keysFound),\r\n            // then that also tells us it wasn't *equal* to anything in the key-buffer. Magic! :) \r\n            if (insertPos == keysFound || this.Reads.compareInArr(start + currentKey,\r\n                start + firstKey + insertPos) != 0) {\r\n\r\n                // First, rotate the key-buffer over to currentKey's immediate left...\r\n                // (this helps save a TON of swaps/writes!!!)\r\n                this.grailRotate(start + firstKey, keysFound, currentKey - (firstKey + keysFound));\r\n\r\n                // Update the new position of firstKey...\r\n                firstKey = currentKey - keysFound;\r\n\r\n                // Then, \"insertion sort\" currentKey to its spot in the key-buffer!\r\n                this.grailRotate(start + firstKey + insertPos, keysFound - insertPos, 1);\r\n\r\n                // One step closer to idealKeys.\r\n                keysFound++;\r\n            }\r\n            // Move on and test the next key...\r\n            currentKey++;\r\n        }\r\n\r\n        // Bring however many keys we found back to the beginning of our array,\r\n        // and return the number of keys collected.\r\n        this.grailRotate(start, firstKey, keysFound);\r\n        return keysFound;\r\n    }\r\n\r\n    grailPairwiseSwaps(start, length) {\r\n        let index;\r\n        for (index = 1; index < length; index += 2) {\r\n            let left = start + index - 1;\r\n            let right = start + index;\r\n\r\n            if (this.Reads.compareInArr(left, right) > 0) {\r\n                this.grailSwap(left - 2, right);\r\n                this.grailSwap(right - 2, left);\r\n            } else {\r\n                this.grailSwap(left - 2, left);\r\n                this.grailSwap(right - 2, right);\r\n            }\r\n        }\r\n\r\n        let left = start + index - 1;\r\n        if (left < start + length) {\r\n            this.grailSwap(left - 2, left);\r\n        }\r\n    }\r\n\r\n    grailPairwiseWrites(start, length) {\r\n        let index;\r\n        for (index = 1; index < length; index += 2) {\r\n            let left = start + index - 1;\r\n            let right = start + index;\r\n\r\n            if (this.Reads.compareInArr(left, right) > 0) {\r\n                this.Writes.write(left - 2, this.Reads.get(right))\r\n                this.Writes.write(right - 2, this.Reads.get(left))\r\n            } else {\r\n                this.Writes.write(left - 2, this.Reads.get(left))\r\n                this.Writes.write(right - 2, this.Reads.get(right))\r\n            }\r\n        }\r\n\r\n        let left = start + index - 1;\r\n        if (left < start + length) {\r\n            this.Writes.write(left - 2, this.Reads.get(left))\r\n        }\r\n    }\r\n\r\n    // array[buffer .. start - 1] <=> \"scrolling buffer\"\r\n    // \r\n    // \"scrolling buffer\" + array[start, middle - 1] + array[middle, end - 1]\r\n    // --> array[buffer, buffer + end - 1] + \"scrolling buffer\"\r\n    grailMergeForwards(start, leftLen, rightLen, bufferOffset) {\r\n        let left = start;\r\n        let middle = start + leftLen;\r\n        let right = middle;\r\n        let end = middle + rightLen;\r\n        let buffer = start - bufferOffset;\r\n\r\n        while (right < end) {\r\n            if (left == middle || this.Reads.compareInArr(left,\r\n                right) > 0) {\r\n\r\n                this.grailSwap(buffer, right);\r\n                right++;\r\n            } else {\r\n                this.grailSwap(buffer, left);\r\n                left++;\r\n            }\r\n            buffer++;\r\n        }\r\n\r\n        if (buffer != left) {\r\n            this.grailBlockSwap(buffer, left, middle - left);\r\n        }\r\n    }\r\n\r\n    // credit to 666666t for thorough bug-checking/fixing\r\n    grailMergeBackwards(start, leftLen, rightLen, bufferOffset) {\r\n        let left = start + leftLen - 1;\r\n        let middle = left;\r\n        // OFF-BY-ONE BUG FIXED: used to be `let  right = middle + rightLen - 1;`\r\n        let right = middle + rightLen;\r\n        let end = start;\r\n        // OFF-BY-ONE BUG FIXED: used to be `let buffer = right  + bufferOffset - 1;`\r\n        let buffer = right + bufferOffset;\r\n\r\n        while (left >= end) {\r\n            if (right == middle || this.Reads.compareInArr(left,\r\n                right) > 0) {\r\n\r\n                this.grailSwap(buffer, left);\r\n                left--;\r\n            } else {\r\n                this.grailSwap(buffer, right);\r\n                right--;\r\n            }\r\n            buffer--;\r\n        }\r\n\r\n        if (right != buffer) {\r\n            while (right > middle) {\r\n                this.grailSwap(buffer, right);\r\n                buffer--;\r\n                right--;\r\n            }\r\n        }\r\n    }\r\n\r\n    // array[buffer .. start - 1] <=> \"free space\"    \r\n    //\r\n    // \"free space\" + array[start, middle - 1] + array[middle, end - 1]\r\n    // --> array[buffer, buffer + end - 1] + \"free space\"\r\n    //\r\n    // FUNCTION RENAMED: More consistent with \"out-of-place\" being at the end\r\n    grailMergeOutOfPlace(start, leftLen, rightLen, bufferOffset) {\r\n        let left = start;\r\n        let middle = start + leftLen;\r\n        let right = middle;\r\n        let end = middle + rightLen;\r\n        let buffer = start - bufferOffset;\r\n\r\n        while (right < end) {\r\n            if (left == middle || this.Reads.compareInArr(left,\r\n                right) > 0) {\r\n\r\n                this.Writes.write(buffer, this.Reads.get(right))\r\n                right++;\r\n            } else {\r\n                this.Writes.write(buffer, this.Reads.get(left))\r\n                left++;\r\n            }\r\n            buffer++;\r\n        }\r\n\r\n        if (buffer != left) {\r\n            while (left < middle) {\r\n                this.Writes.write(buffer, this.Reads.get(left))\r\n                buffer++;\r\n                left++;\r\n            }\r\n        }\r\n    }\r\n\r\n    grailBuildInPlace(start, length, currentMerge, bufferLen) {\r\n        for (let mergeLen = currentMerge; mergeLen < bufferLen; mergeLen *= 2) {\r\n            let mergeIndex;\r\n            let mergeEnd = start + length - (2 * mergeLen);\r\n            let bufferOffset = mergeLen;\r\n\r\n            for (mergeIndex = start; mergeIndex <= mergeEnd; mergeIndex += (2 * mergeLen)) {\r\n                this.grailMergeForwards(mergeIndex, mergeLen, mergeLen, bufferOffset);\r\n            }\r\n\r\n            let leftOver = length - (mergeIndex - start);\r\n\r\n            if (leftOver > mergeLen) {\r\n                this.grailMergeForwards(mergeIndex, mergeLen, leftOver - mergeLen, bufferOffset);\r\n            } else {\r\n                this.grailRotate(mergeIndex - mergeLen, mergeLen, leftOver);\r\n            }\r\n\r\n            start -= mergeLen;\r\n        }\r\n\r\n        let finalBlock = length % (2 * bufferLen);\r\n        let finalOffset = start + length - finalBlock;\r\n\r\n        if (finalBlock <= bufferLen) {\r\n            this.grailRotate(finalOffset, finalBlock, bufferLen);\r\n        } else {\r\n            this.grailMergeBackwards(finalOffset, bufferLen, finalBlock - bufferLen, bufferLen);\r\n        }\r\n\r\n        for (let mergeIndex = finalOffset - (2 * bufferLen); mergeIndex >= start; mergeIndex -= (2 * bufferLen)) {\r\n            this.grailMergeBackwards(mergeIndex, bufferLen, bufferLen, bufferLen);\r\n        }\r\n    }\r\n\r\n    grailBuildOutOfPlace(start, length, bufferLen, externLen) {\r\n        this.arraycopy(-1, start - externLen, this.externalBuffer, 0, externLen);\r\n\r\n        this.grailPairwiseWrites(start, length);\r\n        start -= 2;\r\n\r\n        let mergeLen;\r\n        for (mergeLen = 2; mergeLen < externLen; mergeLen *= 2) {\r\n            let mergeIndex;\r\n            let mergeEnd = start + length - (2 * mergeLen);\r\n            let bufferOffset = mergeLen;\r\n\r\n            for (mergeIndex = start; mergeIndex <= mergeEnd; mergeIndex += (2 * mergeLen)) {\r\n                this.grailMergeOutOfPlace(mergeIndex, mergeLen, mergeLen, bufferOffset);\r\n            }\r\n\r\n            let leftOver = length - (mergeIndex - start);\r\n\r\n            if (leftOver > mergeLen) {\r\n                this.grailMergeOutOfPlace(mergeIndex, mergeLen, leftOver - mergeLen, bufferOffset);\r\n            } else {\r\n                // TODO: Is this correct??\r\n                for (let offset = 0; offset < leftOver; offset++) {\r\n                    // array[mergeIndex + offset - mergeLen] = array[mergeIndex + offset];\r\n                    this.Writes.write(mergeIndex + offset - mergeLen, this.Reads.get(mergeIndex + offset))\r\n                }\r\n            }\r\n\r\n            start -= mergeLen;\r\n        }\r\n\r\n        this.arraycopy(this.externalBuffer, 0, -1, start + length, externLen);\r\n        this.grailBuildInPlace(start, length, mergeLen, bufferLen);\r\n    }\r\n\r\n    // build blocks of length 'bufferLen'\r\n    // input: [start - mergeLen, start - 1] elements are buffer\r\n    // output: first 'bufferLen' elements are buffer, blocks (2 * bufferLen) and last subblock sorted\r\n    grailBuildBlocks(start, length, bufferLen) {\r\n        if (this.externalBuffer != null) {\r\n            let externLen;\r\n\r\n            if (bufferLen < this.externalBufferLen) {\r\n                externLen = bufferLen;\r\n            } else {\r\n                // max power of 2 -- just in case\r\n                externLen = 1;\r\n                while ((externLen * 2) <= this.externalBufferLen) {\r\n                    externLen *= 2;\r\n                }\r\n            }\r\n\r\n            this.grailBuildOutOfPlace(start, length, bufferLen, externLen);\r\n        } else {\r\n            this.grailPairwiseSwaps(start, length);\r\n            this.grailBuildInPlace(start - 2, length, 2, bufferLen);\r\n        }\r\n    }\r\n\r\n    // Returns the final position of 'medianKey'.\r\n    grailBlockSelectSort(keys, start, medianKey, blockCount, blockLen) {\r\n        for (let block = 1; block < blockCount; block++) {\r\n            let left = block - 1;\r\n            let right = left;\r\n\r\n            for (let index = block; index < blockCount; index++) {\r\n                let compare = this.Reads.compareInArr(start + (right * blockLen),\r\n                    start + (index * blockLen));\r\n\r\n                if (compare > 0 || (compare == 0 && this.Reads.compareInArr(keys + right,\r\n                    keys + index) > 0)) {\r\n                    right = index;\r\n                }\r\n            }\r\n\r\n            if (right != left) {\r\n                // Swap the left and right selected blocks...\r\n                this.grailBlockSwap(start + (left * blockLen), start + (right * blockLen), blockLen);\r\n\r\n                // Swap the keys...\r\n                this.grailSwap(keys + left, keys + right);\r\n\r\n                // ...and follow the 'medianKey' if it was swapped\r\n\r\n                // ORIGINAL LOC: if(midkey==u-1 || midkey==p) midkey^=(u-1)^p;\r\n                // MASSIVE, MASSIVE credit to lovebuny for figuring this one out!\r\n                if (medianKey == left) {\r\n                    medianKey = right;\r\n                } else if (medianKey == right) {\r\n                    medianKey = left;\r\n                }\r\n            }\r\n        }\r\n\r\n        return medianKey;\r\n    }\r\n\r\n    // Swaps Grailsort's \"scrolling buffer\" from the right side of the array all the way back to 'start'.\r\n    // Costs O(n) operations.\r\n    //\r\n    // OFF-BY-ONE BUG FIXED: used to be `int index = start + resetLen`; credit to 666666t for debugging\r\n    grailInPlaceBufferReset(start, resetLen, bufferLen) {\r\n        for (let index = start + resetLen - 1; index >= start; index--) {\r\n            this.grailSwap(index, index - bufferLen);\r\n        }\r\n    }\r\n\r\n    // Shifts entire array over 'bufferSize' spaces to make room for the out-of-place merging buffer.\r\n    // Costs O(n) operations.\r\n    //\r\n    // OFF-BY-ONE BUG FIXED: used to be `int index = start + resetLen`; credit to 666666t for debugging\r\n    grailOutOfPlaceBufferReset(start, resetLen, bufferLen) {\r\n        for (let index = start + resetLen - 1; index >= start; index--) {\r\n            this.Writes.write(index, this.Reads.get(index - bufferLen))\r\n        }\r\n    }\r\n\r\n    // Rewinds Grailsort's \"scrolling buffer\" such that any items from a left subarray block left over by a \"smart merge\" are moved to\r\n    // the right of the buffer. This is used to maintain stability and to continue an ongoing merge that has run out of buffer space.\r\n    // Costs O(sqrt n) swaps in the *absolute* worst-case. \r\n    //\r\n    // NAMING IMPROVED: the left over items are in the middle of the merge while the buffer is at the end\r\n    grailInPlaceBufferRewind(start, leftOvers, buffer) {\r\n        while (leftOvers > start) {\r\n            leftOvers--;\r\n            buffer--;\r\n            this.grailSwap(buffer, leftOvers);\r\n        }\r\n    }\r\n\r\n    // Rewinds Grailsort's out-of-place buffer such that any items from a left subarray block left over by a \"smart merge\" are moved to\r\n    // the right of the buffer. This is used to maintain stability and to continue an ongoing merge that has run out of buffer space.\r\n    // Costs O(sqrt n) writes in the *absolute* worst-case.\r\n    //\r\n    // INCORRECT ORDER OF PARAMETERS BUG FIXED: `leftOvers` should be the middle, and `buffer` should be the end\r\n    grailOutOfPlaceBufferRewind(start, leftOvers, buffer) {\r\n        while (leftOvers > start) {\r\n            leftOvers--;\r\n            buffer--;\r\n            // array[buffer] = array[leftOvers];\r\n            this.Writes.write(buffer, this.Reads.get(leftOvers))\r\n        }\r\n    }\r\n\r\n    grailGetSubarray(currentKey, medianKey) {\r\n        if (this.Reads.compareInArr(currentKey, medianKey) < 0) {\r\n            return Subarray.LEFT;\r\n        } else {\r\n            return Subarray.RIGHT;\r\n        }\r\n    }\r\n\r\n    // FUNCTION RENAMED: more clear *which* left blocks are being counted\r\n    grailCountFinalLeftBlocks(offset, blockCount, blockLen) {\r\n        let leftBlocks = 0;\r\n\r\n        let firstRightBlock = offset + (blockCount * blockLen);\r\n        let prevLeftBlock = firstRightBlock - blockLen;\r\n\r\n        while (leftBlocks < blockCount && this.Reads.compareInArr(firstRightBlock,\r\n            prevLeftBlock) < 0) {\r\n            leftBlocks++;\r\n            prevLeftBlock -= blockLen;\r\n        }\r\n\r\n        return leftBlocks;\r\n    }\r\n\r\n    grailSmartMerge(start, leftLen, leftOrigin, rightLen, bufferOffset) {\r\n        let left = start;\r\n        let middle = start + leftLen;\r\n        let right = middle;\r\n        let end = middle + rightLen;\r\n        let buffer = start - bufferOffset;\r\n\r\n        if (leftOrigin == Subarray.LEFT) {\r\n            while (left < middle && right < end) {\r\n                if (this.Reads.compareInArr(left, right) <= 0) {\r\n                    this.grailSwap(buffer, left);\r\n                    left++;\r\n                } else {\r\n                    this.grailSwap(buffer, right);\r\n                    right++;\r\n                }\r\n                buffer++;\r\n            }\r\n        } else {\r\n            while (left < middle && right < end) {\r\n                if (this.Reads.compareInArr(left, right) < 0) {\r\n                    this.grailSwap(buffer, left);\r\n                    left++;\r\n                } else {\r\n                    this.grailSwap(buffer, right);\r\n                    right++;\r\n                }\r\n                buffer++;\r\n            }\r\n        }\r\n\r\n        if (left < middle) {\r\n            this.currentBlockLen = middle - left;\r\n            this.grailInPlaceBufferRewind(left, middle, end);\r\n        } else {\r\n            this.currentBlockLen = end - right;\r\n            if (leftOrigin == Subarray.LEFT) {\r\n                this.currentBlockOrigin = Subarray.RIGHT;\r\n            } else {\r\n                this.currentBlockOrigin = Subarray.LEFT;\r\n            }\r\n        }\r\n    }\r\n\r\n    grailSmartLazyMerge(start, leftLen, leftOrigin, rightLen) {\r\n        if (leftOrigin == Subarray.LEFT) {\r\n            if (this.Reads.compareInArr(start + leftLen - 1, start + leftLen) > 0) {\r\n                while (leftLen != 0) {\r\n                    let insertPos = this.grailBinarySearchLeft(start + leftLen, rightLen, this.Reads.readValue(start));\r\n\r\n                    if (insertPos != 0) {\r\n                        this.grailRotate(start, leftLen, insertPos);\r\n                        start += insertPos;\r\n                        rightLen -= insertPos;\r\n                    }\r\n\r\n                    if (rightLen == 0) {\r\n                        this.currentBlockLen = leftLen;\r\n                        return;\r\n                    } else {\r\n                        do {\r\n                            start++;\r\n                            leftLen--;\r\n                        } while (leftLen != 0 && this.Reads.compareInArr(start,\r\n                            start + leftLen) <= 0);\r\n                    }\r\n                }\r\n            }\r\n        } else {\r\n            if (this.Reads.compareInArr(start + leftLen - 1, start + leftLen) >= 0) {\r\n                while (leftLen != 0) {\r\n                    let insertPos = this.grailBinarySearchRight(start + leftLen, rightLen, this.Reads.readValue(start));\r\n\r\n                    if (insertPos != 0) {\r\n                        this.grailRotate(start, leftLen, insertPos);\r\n                        start += insertPos;\r\n                        rightLen -= insertPos;\r\n                    }\r\n\r\n                    if (rightLen == 0) {\r\n                        this.currentBlockLen = leftLen;\r\n                        return;\r\n                    } else {\r\n                        do {\r\n                            start++;\r\n                            leftLen--;\r\n                        } while (leftLen != 0 && this.Reads.compareInArr(start,\r\n                            start + leftLen) < 0);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        this.currentBlockLen = rightLen;\r\n        if (leftOrigin == Subarray.LEFT) {\r\n            this.currentBlockOrigin = Subarray.RIGHT;\r\n        } else {\r\n            this.currentBlockOrigin = Subarray.LEFT;\r\n        }\r\n    }\r\n\r\n    // FUNCTION RENAMED: more consistent with other \"out-of-place\" merges\r\n    grailSmartMergeOutOfPlace(start, leftLen, leftOrigin, rightLen, bufferOffset) {\r\n        let left = start;\r\n        let middle = start + leftLen;\r\n        let right = middle;\r\n        let end = middle + rightLen;\r\n        let buffer = start - bufferOffset;\r\n\r\n        if (leftOrigin == Subarray.LEFT) {\r\n            while (left < middle && right < end) {\r\n                if (this.Reads.compareInArr(left, right) <= 0) {\r\n                    this.Writes.write(buffer, this.Reads.get(left))\r\n                    left++;\r\n                } else {\r\n                    this.Writes.write(buffer, this.Reads.get(right))\r\n                    right++;\r\n                }\r\n                buffer++;\r\n            }\r\n        } else {\r\n            while (left < middle && right < end) {\r\n                if (this.Reads.compareInArr(left, right) < 0) {\r\n                    this.Writes.write(buffer, this.Reads.get(left))\r\n                    left++;\r\n                } else {\r\n                    this.Writes.write(buffer, this.Reads.get(right))\r\n                    right++;\r\n                }\r\n                buffer++;\r\n            }\r\n        }\r\n\r\n        if (left < middle) {\r\n            this.currentBlockLen = middle - left;\r\n            this.grailOutOfPlaceBufferRewind(left, middle, end);\r\n        } else {\r\n            this.currentBlockLen = end - right;\r\n            if (leftOrigin == Subarray.LEFT) {\r\n                this.currentBlockOrigin = Subarray.RIGHT;\r\n            } else {\r\n                this.currentBlockOrigin = Subarray.LEFT;\r\n            }\r\n        }\r\n    }\r\n\r\n    grailMergeBlocks(keys, medianKey, start, blockCount, blockLen, finalLeftBlocks, finalLen) {\r\n        let currentBlock;\r\n        let blockIndex = blockLen;\r\n\r\n        this.currentBlockLen = blockLen;\r\n        this.currentBlockOrigin = this.grailGetSubarray(keys, medianKey);\r\n\r\n        for (let keyIndex = 1; keyIndex < blockCount; keyIndex++, blockIndex += blockLen) {\r\n            currentBlock = blockIndex - this.currentBlockLen;\r\n\r\n            let nextBlockOrigin = this.grailGetSubarray(keys + keyIndex, medianKey);\r\n\r\n            if (nextBlockOrigin == this.currentBlockOrigin) {\r\n                this.grailBlockSwap(start + currentBlock - blockLen, start + currentBlock, this.currentBlockLen);\r\n                currentBlock = blockIndex;\r\n\r\n                this.currentBlockLen = blockLen;\r\n            } else {\r\n                this.grailSmartMerge(start + currentBlock, this.currentBlockLen, this.currentBlockOrigin, blockLen, blockLen);\r\n            }\r\n        }\r\n\r\n        currentBlock = blockIndex - this.currentBlockLen;\r\n\r\n        if (finalLen != 0) {\r\n            if (this.currentBlockOrigin == Subarray.RIGHT) {\r\n                this.grailBlockSwap(start + currentBlock - blockLen, start + currentBlock, this.currentBlockLen);\r\n                currentBlock = blockIndex;\r\n\r\n                this.currentBlockLen = blockLen * finalLeftBlocks;\r\n                this.currentBlockOrigin = Subarray.LEFT;\r\n            } else {\r\n                this.currentBlockLen += blockLen * finalLeftBlocks;\r\n            }\r\n\r\n            this.grailMergeForwards(start + currentBlock, this.currentBlockLen, finalLen, blockLen);\r\n        } else {\r\n            this.grailBlockSwap(start + currentBlock, start + currentBlock - blockLen, this.currentBlockLen);\r\n        }\r\n    }\r\n\r\n    grailLazyMergeBlocks(keys, medianKey, start, blockCount, blockLen, finalLeftBlocks, finalLen) {\r\n        let currentBlock;\r\n        let blockIndex = blockLen;\r\n\r\n        this.currentBlockLen = blockLen;\r\n        this.currentBlockOrigin = this.grailGetSubarray(keys, medianKey);\r\n\r\n        for (let keyIndex = 1; keyIndex < blockCount; keyIndex++, blockIndex += blockLen) {\r\n            currentBlock = blockIndex - this.currentBlockLen;\r\n\r\n            let nextBlockOrigin = this.grailGetSubarray(keys + keyIndex, medianKey);\r\n\r\n            if (nextBlockOrigin == this.currentBlockOrigin) {\r\n                currentBlock = blockIndex;\r\n\r\n                this.currentBlockLen = blockLen;\r\n            } else {\r\n                // These checks were included in the original code... but why???\r\n                if (blockLen != 0 && this.currentBlockLen != 0) {\r\n                    this.grailSmartLazyMerge(start + currentBlock, this.currentBlockLen, this.currentBlockOrigin, blockLen);\r\n                }\r\n            }\r\n        }\r\n\r\n        currentBlock = blockIndex - this.currentBlockLen;\r\n\r\n        if (finalLen != 0) {\r\n            if (this.currentBlockOrigin == Subarray.RIGHT) {\r\n                currentBlock = blockIndex;\r\n\r\n                this.currentBlockLen = blockLen * finalLeftBlocks;\r\n                this.currentBlockOrigin = Subarray.LEFT;\r\n            } else {\r\n                this.currentBlockLen += blockLen * finalLeftBlocks;\r\n            }\r\n\r\n            this.grailLazyMerge(start + currentBlock, this.currentBlockLen, finalLen);\r\n        }\r\n    }\r\n\r\n    grailMergeBlocksOutOfPlace(keys, medianKey, start, blockCount, blockLen, finalLeftBlocks, finalLen) {\r\n        let currentBlock;\r\n        let blockIndex = blockLen;\r\n\r\n        this.currentBlockLen = blockLen;\r\n        this.currentBlockOrigin = this.grailGetSubarray(keys, medianKey);\r\n\r\n        for (let keyIndex = 1; keyIndex < blockCount; keyIndex++, blockIndex += blockLen) {\r\n            currentBlock = blockIndex - this.currentBlockLen;\r\n\r\n            let nextBlockOrigin = this.grailGetSubarray(keys + keyIndex, medianKey);\r\n\r\n            if (nextBlockOrigin == this.currentBlockOrigin) {\r\n                this.arraycopy(-1, start + currentBlock, -1, start + currentBlock - blockLen, this.currentBlockLen);\r\n                currentBlock = blockIndex;\r\n\r\n                this.currentBlockLen = blockLen;\r\n            } else {\r\n                this.grailSmartMergeOutOfPlace(start + currentBlock, this.currentBlockLen, this.currentBlockOrigin, blockLen, blockLen);\r\n            }\r\n        }\r\n\r\n        currentBlock = blockIndex - this.currentBlockLen;\r\n\r\n        if (finalLen != 0) {\r\n            if (this.currentBlockOrigin == Subarray.RIGHT) {\r\n                this.arraycopy(-1, start + currentBlock, -1, start + currentBlock - blockLen, this.currentBlockLen);\r\n                currentBlock = blockIndex;\r\n\r\n                this.currentBlockLen = blockLen * finalLeftBlocks;\r\n                this.currentBlockOrigin = Subarray.LEFT;\r\n            } else {\r\n                this.currentBlockLen += blockLen * finalLeftBlocks;\r\n            }\r\n\r\n            this.grailMergeOutOfPlace(start + currentBlock, this.currentBlockLen, finalLen, blockLen);\r\n        } else {\r\n            this.arraycopy(-1, start + currentBlock, -1, start + currentBlock - blockLen, this.currentBlockLen);\r\n        }\r\n    }\r\n\r\n    //TODO: Double-check \"Merge Blocks\" arguments\r\n    grailCombineInPlace(keys, start, length, subarrayLen, blockLen, mergeCount, lastSubarray, buffer) {\r\n        for (let mergeIndex = 0; mergeIndex < mergeCount; mergeIndex++) {\r\n            let offset = start + (mergeIndex * (2 * subarrayLen));\r\n            let blockCount = parseInt((2 * subarrayLen) / blockLen);\r\n\r\n            this.grailInsertSort(keys, blockCount);\r\n\r\n            // INCORRECT PARAMETER BUG FIXED: `block select sort` should be using `offset`, not `start`\r\n            let medianKey = parseInt(subarrayLen / blockLen);\r\n            medianKey = this.grailBlockSelectSort(keys, offset, medianKey, blockCount, blockLen);\r\n\r\n            if (buffer) {\r\n                this.grailMergeBlocks(keys, keys + medianKey, offset, blockCount, blockLen, 0, 0);\r\n            } else {\r\n                this.grailLazyMergeBlocks(keys, keys + medianKey, offset, blockCount, blockLen, 0, 0);\r\n            }\r\n        }\r\n\r\n        // INCORRECT CONDITIONAL/PARAMETER BUG FIXED: Credit to 666666t for debugging.\r\n        if (lastSubarray != 0) {\r\n            let offset = start + (mergeCount * (2 * subarrayLen));\r\n            let rightBlocks = parseInt(lastSubarray / blockLen);\r\n\r\n            this.grailInsertSort(keys, rightBlocks + 1);\r\n\r\n            // INCORRECT PARAMETER BUG FIXED: `block select sort` should be using `offset`, not `start`\r\n            let medianKey = parseInt(subarrayLen / blockLen);\r\n            medianKey = this.grailBlockSelectSort(keys, offset, medianKey, rightBlocks, blockLen);\r\n\r\n            // MISSING BOUNDS CHECK BUG FIXED: `lastFragment` *can* be 0 if the `lastSubarray` is evenly\r\n            //                                 divided into blocks. This prevents Grailsort from going\r\n            //                                 out of bounds.\r\n            let lastFragment = lastSubarray % blockLen;\r\n            let leftBlocks;\r\n            if (lastFragment != 0) {\r\n                leftBlocks = this.grailCountFinalLeftBlocks(offset, rightBlocks, blockLen);\r\n            } else {\r\n                leftBlocks = 0;\r\n            }\r\n\r\n            let blockCount = rightBlocks - leftBlocks;\r\n\r\n            //TODO: Double-check if this micro-optimization works correctly like the original\r\n            if (blockCount == 0) {\r\n                let leftLength = leftBlocks * blockLen;\r\n\r\n                // INCORRECT PARAMETER BUG FIXED: these merges should be using `offset`, not `start`\r\n                if (buffer) {\r\n                    this.grailMergeForwards(offset, leftLength, lastFragment, blockLen);\r\n                } else {\r\n                    this.grailLazyMerge(offset, leftLength, lastFragment);\r\n                }\r\n            } else {\r\n                if (buffer) {\r\n                    this.grailMergeBlocks(keys, keys + medianKey, offset, blockCount, blockLen, leftBlocks, lastFragment);\r\n                } else {\r\n                    this.grailLazyMergeBlocks(keys, keys + medianKey, offset, blockCount, blockLen, leftBlocks, lastFragment);\r\n                }\r\n            }\r\n        }\r\n\r\n        if (buffer) {\r\n            this.grailInPlaceBufferReset(start, length, blockLen);\r\n        }\r\n    }\r\n\r\n    grailCombineOutOfPlace(keys, start, length, subarrayLen, blockLen, mergeCount, lastSubarray) {\r\n        this.arraycopy(-1, start - blockLen, this.externalBuffer, 0, blockLen);\r\n\r\n        for (let mergeIndex = 0; mergeIndex < mergeCount; mergeIndex++) {\r\n            let offset = start + (mergeIndex * (2 * subarrayLen));\r\n            let blockCount = parseInt((2 * subarrayLen) / blockLen);\r\n\r\n            this.grailInsertSort(keys, blockCount);\r\n\r\n            // INCORRECT PARAMETER BUG FIXED: `block select sort` should be using `offset`, not `start`\r\n            let medianKey = parseInt(subarrayLen / blockLen);\r\n            medianKey = this.grailBlockSelectSort(keys, offset, medianKey, blockCount, blockLen);\r\n\r\n            this.grailMergeBlocksOutOfPlace(keys, keys + medianKey, offset, blockCount, blockLen, 0, 0);\r\n        }\r\n\r\n        // INCORRECT CONDITIONAL/PARAMETER BUG FIXED: Credit to 666666t for debugging.\r\n        if (lastSubarray != 0) {\r\n            let offset = start + (mergeCount * (2 * subarrayLen));\r\n            let rightBlocks = parseInt(lastSubarray / blockLen);\r\n\r\n            this.grailInsertSort(keys, rightBlocks + 1);\r\n\r\n            // INCORRECT PARAMETER BUG FIXED: `block select sort` should be using `offset`, not `start`\r\n            let medianKey = subarrayLen / blockLen;\r\n            medianKey = this.grailBlockSelectSort(keys, offset, medianKey, rightBlocks, blockLen);\r\n\r\n            // MISSING BOUNDS CHECK BUG FIXED: `lastFragment` *can* be 0 if the `lastSubarray` is evenly\r\n            //                                 divided into blocks. This prevents Grailsort from going\r\n            //                                 out of bounds.\r\n            let lastFragment = lastSubarray % blockLen;\r\n            let leftBlocks;\r\n            if (lastFragment != 0) {\r\n                leftBlocks = this.grailCountFinalLeftBlocks(offset, rightBlocks, blockLen);\r\n            } else {\r\n                leftBlocks = 0;\r\n            }\r\n\r\n            let blockCount = rightBlocks - leftBlocks;\r\n\r\n            if (blockCount == 0) {\r\n                // INCORRECT PARAMETER BUG FIXED: this merge should be using `offset`, not `start`\r\n                let leftLength = leftBlocks * blockLen;\r\n                this.grailMergeOutOfPlace(offset, leftLength, lastFragment, blockLen);\r\n            } else {\r\n                this.grailMergeBlocksOutOfPlace(keys, keys + medianKey, offset, blockCount, blockLen, leftBlocks, lastFragment);\r\n            }\r\n        }\r\n\r\n        this.grailOutOfPlaceBufferReset(start, length, blockLen);\r\n        this.arraycopy(this.externalBuffer, 0, -1, start - blockLen, blockLen);\r\n    }\r\n\r\n    // 'keys' are on the left side of array. Blocks of length 'subarrayLen' combined. We'll combine them in pairs\r\n    // 'subarrayLen' is a power of 2. (2 * subarrayLen / blockLen) keys are guaranteed\r\n    grailCombineBlocks(keys, start, length, subarrayLen, blockLen, buffer) {\r\n        let mergeCount = parseInt(length / (2 * subarrayLen));\r\n        let lastSubarray = parseInt(length % (2 * subarrayLen));\r\n\r\n        if (lastSubarray <= subarrayLen) {\r\n            length -= lastSubarray;\r\n            lastSubarray = 0;\r\n        }\r\n\r\n        // INCOMPLETE CONDITIONAL BUG FIXED: In order to combine blocks out-of-place, we must check if a full-sized\r\n        //                                   block fits into our external buffer.\r\n        if (buffer && blockLen <= this.externalBufferLen) {\r\n            this.grailCombineOutOfPlace(keys, start, length, subarrayLen, blockLen, mergeCount, lastSubarray);\r\n        } else {\r\n            this.grailCombineInPlace(keys, start, length, subarrayLen, blockLen, mergeCount, lastSubarray, buffer);\r\n        }\r\n    }\r\n\r\n    // \"Classic\" in-place merge sort using binary searches and rotations\r\n    //\r\n    // cost: min(leftLen, rightLen)^2 + max(leftLen, rightLen)\r\n    grailLazyMerge(start, leftLen, rightLen) {\r\n        if (leftLen < rightLen) {\r\n            while (leftLen != 0) {\r\n                let insertPos = this.grailBinarySearchLeft(start + leftLen, rightLen, this.Reads.readValue(start));\r\n\r\n                if (insertPos != 0) {\r\n                    this.grailRotate(start, leftLen, insertPos);\r\n                    start += insertPos;\r\n                    rightLen -= insertPos;\r\n                }\r\n\r\n                if (rightLen == 0) {\r\n                    break;\r\n                } else {\r\n                    do {\r\n                        start++;\r\n                        leftLen--;\r\n                    } while (leftLen != 0 && this.Reads.compareInArr(start,\r\n                        start + leftLen) <= 0);\r\n                }\r\n            }\r\n        } else {\r\n            let end = start + leftLen + rightLen - 1;\r\n            while (rightLen != 0) {\r\n                let insertPos = this.grailBinarySearchRight(start, leftLen, this.Reads.readValue(end));\r\n\r\n                if (insertPos != leftLen) {\r\n                    this.grailRotate(start + insertPos, leftLen - insertPos, rightLen);\r\n                    end -= leftLen - insertPos;\r\n                    leftLen = insertPos;\r\n                }\r\n\r\n                if (leftLen == 0) {\r\n                    break;\r\n                } else {\r\n                    let leftEnd = start + leftLen - 1;\r\n                    do {\r\n                        rightLen--;\r\n                        end--;\r\n                    } while (rightLen != 0 && this.Reads.compareInArr(leftEnd,\r\n                        end) <= 0);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    grailLazyStableSort(start, length) {\r\n        for (let index = 1; index < length; index += 2) {\r\n            let left = start + index - 1;\r\n            let right = start + index;\r\n\r\n            if (this.Reads.compareInArr(left, right) > 0) {\r\n                this.grailSwap(left, right);\r\n            }\r\n        }\r\n        for (let mergeLen = 2; mergeLen < length; mergeLen *= 2) {\r\n            let mergeIndex;\r\n            let mergeEnd = length - (2 * mergeLen);\r\n\r\n            for (mergeIndex = 0; mergeIndex <= mergeEnd; mergeIndex += (2 * mergeLen)) {\r\n                this.grailLazyMerge(start + mergeIndex, mergeLen, mergeLen);\r\n            }\r\n\r\n            let leftOver = length - mergeIndex;\r\n            if (leftOver > mergeLen) {\r\n                this.grailLazyMerge(start + mergeIndex, mergeLen, leftOver - mergeLen);\r\n            }\r\n        }\r\n    }\r\n\r\n    static calcMinKeys(numKeys, blockKeysSum) {\r\n        let minKeys = 1;\r\n        while (minKeys < numKeys && blockKeysSum != 0) {\r\n            minKeys *= 2;\r\n            blockKeysSum = parseInt(blockKeysSum / 8);\r\n        }\r\n        return minKeys;\r\n    }\r\n\r\n    grailCommonSort(start, length, extBuf, extBufLen) {\r\n        if (length < 16) {\r\n            this.grailInsertSort(start, length);\r\n            return;\r\n        } else {\r\n            let blockLen = 1;\r\n\r\n            // find the smallest power of two greater than or equal to\r\n            // the square root of the input's length\r\n            while ((blockLen * blockLen) < length) {\r\n                blockLen *= 2;\r\n            }\r\n\r\n            // '((a - 1) / b) + 1' is actually a clever and very efficient\r\n            // formula for the ceiling of (a / b)\r\n            //\r\n            // credit to Anonymous0726 for figuring this out!\r\n            let keyLen = parseInt((length - 1) / blockLen) + 1;\r\n\r\n            // Grailsort is hoping to find `2 * sqrt(n)` unique items\r\n            // throughout the array\r\n            let idealKeys = keyLen + blockLen;\r\n\r\n            //TODO: Clean up `start +` offsets\r\n            let keysFound = this.grailCollectKeys(start, length, idealKeys);\r\n\r\n            let idealBuffer;\r\n            if (keysFound < idealKeys) {\r\n                if (keysFound < 4) {\r\n                    // GRAILSORT STRATEGY 3 -- No block swaps or scrolling buffer; resort to Lazy Stable Sort\r\n                    this.grailLazyStableSort(start, length);\r\n                    return;\r\n                } else {\r\n                    // GRAILSORT STRATEGY 2 -- Block swaps with small scrolling buffer and/or lazy merges\r\n                    keyLen = blockLen;\r\n                    blockLen = 0;\r\n                    idealBuffer = false;\r\n\r\n                    while (keyLen > keysFound) {\r\n                        keyLen = parseInt(keyLen / 2);\r\n                    }\r\n                }\r\n            } else {\r\n                // GRAILSORT STRATEGY 1 -- Block swaps with scrolling buffer\r\n                idealBuffer = true;\r\n            }\r\n\r\n            let bufferEnd = blockLen + keyLen;\r\n            let bufferLen;\r\n            if (idealBuffer) {\r\n                bufferLen = blockLen;\r\n            } else {\r\n                bufferLen = keyLen;\r\n            }\r\n\r\n            if (idealBuffer && extBuf != null) {\r\n                // GRAILSORT + EXTRA SPACE\r\n                this.externalBuffer = extBuf;\r\n                this.externalBufferLen = extBufLen;\r\n            }\r\n\r\n            this.grailBuildBlocks(start + bufferEnd, length - bufferEnd, bufferLen);\r\n\r\n            while ((length - bufferEnd) > (2 * bufferLen)) {\r\n                bufferLen *= 2;\r\n\r\n                let currentBlockLen = blockLen;\r\n                let scrollingBuffer = idealBuffer;\r\n\r\n                if (!scrollingBuffer) {\r\n                    if (keyLen > 4 && (parseInt(keyLen / 8) * keyLen) >= bufferLen) {\r\n                        currentBlockLen = parseInt(keyLen / 2);\r\n                        scrollingBuffer = true;\r\n                    } else {\r\n                        let blockKeysSum = parseInt(bufferLen * keysFound) / 2;\r\n                        let minKeys = GrailSort.calcMinKeys(keyLen, blockKeysSum);\r\n\r\n                        currentBlockLen = parseInt(2 * bufferLen) / minKeys;\r\n                    }\r\n                }\r\n\r\n                this.grailCombineBlocks(start, start + bufferEnd, length - bufferEnd, bufferLen, currentBlockLen, scrollingBuffer);\r\n            }\r\n\r\n            this.grailInsertSort(start, bufferEnd);\r\n            this.grailLazyMerge(start, bufferEnd, length - bufferEnd);\r\n        }\r\n    }\r\n\r\n    grailSortInPlace(start, length) {\r\n        this.grailCommonSort(start, length, null, 0);\r\n    }\r\n\r\n    /*\r\n    grailSortStaticOOP(array, start, length) {\r\n        let buffer = Array.newInstance(array[0].getClass(), GRAIL_STATIC_EXT_BUF_LEN);\r\n        this.grailCommonSort(array, start, length, buffer, GRAIL_STATIC_EXT_BUF_LEN);\r\n    }\r\n    \r\n    grailSortDynamicOOP(array, start, length) {\r\n        let bufferLen = 1;\r\n        while((bufferLen * bufferLen) < length) {\r\n            bufferLen *= 2;\r\n        }\r\n\r\n        let buffer = Array.newInstance(array[0].getClass(), bufferLen);\r\n\r\n        this.grailCommonSort(array, start, length, buffer, bufferLen);\r\n    }*/\r\n    runSort(low, high, bucketsNum, bufferSize) {\r\n        // this.grailSortInPlace(low, high + 1)\r\n        if(bufferSize === 0){\r\n            this.grailSortInPlace(low, high + 1)\r\n        }else{\r\n            let buffer = this.Writes.createAuxArray(bufferSize)\r\n            console.log(\"WITH BUFFER!!!\")\r\n            this.grailCommonSort(low, high + 1, buffer, bufferSize)\r\n            this.Writes.removeAuxArray(buffer)\r\n        }\r\n    }\r\n}\r\n\r\n","import {Sort} from \"./Sort\";\r\nimport {HeapSort} from \"./HeapSort\";\r\nimport {InsertionSort} from \"./InsertionSort\";\r\n\r\nexport class IntroSort extends Sort {\r\n    middle\r\n    sizeThreshold = 16;\r\n\r\n    constructor(arrayVisualizer) {\r\n        super(arrayVisualizer);\r\n        this.sortName = \"IntroSort\"\r\n    }\r\n\r\n    floorLogBaseTwo(a) {\r\n        return (Math.floor(Math.log(a) / Math.log(2)));\r\n    }\r\n\r\n// Swaps the median of arr[left], arr[mid], and arr[right] to index left.\r\n// taken from gcc source code found here: https://gcc.gnu.org/onlinedocs/gcc-4.7.2/libstdc++/api/a01462_source.html\r\n// gccmedianof3(left, mid, right) {\r\n//     if (this.Reads.compareInArr(left, mid) < 0) {\r\n//         if (this.Reads.compareInArr(mid, right)  < 0) {\r\n//             this.Writes.swap(left, mid);\r\n//         }\r\n//         else if (this.Reads.compareInArr(left, right) < 0) {\r\n//             this.Writes.swap(left, right);\r\n//         }\r\n//     }\r\n//     else if (this.Reads.compareInArr(left, right) < 0) {\r\n//         this.middle = left;\r\n//         // return arr[left];\r\n//         return this.Reads.getValue(left);\r\n//     }\r\n//     else if (this.Reads.compareInArr(mid, right)  < 0) {\r\n//         this.Writes.swap(left, right);\r\n//     }\r\n//     else {\r\n//         this.Writes.swap(left, mid);\r\n//     }\r\n//     this.middle = left;\r\n//     // Highlights.markArray(3, left);\r\n//     return this.Reads.readValue(left);\r\n// }\r\n\r\n    medianof3(left, mid, right) {\r\n        if (this.Reads.compareInArr(right, left) < 0) {\r\n            this.Writes.swap(left, right);\r\n        }\r\n        if (this.Reads.compareInArr(mid, left) < 0) {\r\n            this.Writes.swap(mid, left);\r\n        }\r\n        if (this.Reads.compareInArr(right, mid) < 0) {\r\n            this.Writes.swap(right, mid);\r\n        }\r\n        this.middle = mid;\r\n        return this.Reads.readValue(mid);\r\n    }\r\n\r\n    partition(lo, hi, x) {\r\n        let i = lo, j = hi;\r\n        while (true) {\r\n            // console.log(\"PARTITION LOOP!\")\r\n            // while (Reads.compareValues(a[i], x) == -1) {\r\n            while (this.Reads.compareValues(this.Reads.get(i), x) < 0) {\r\n                i++;\r\n            }\r\n\r\n            j--;\r\n\r\n            // while (Reads.compareValues(x, a[j]) == -1) {\r\n            while (this.Reads.compareValues(x, this.Reads.get(j)) < 0) {\r\n                // Highlights.markArray(2, j);\r\n                // Delays.sleep(0.5);\r\n                j--;\r\n            }\r\n\r\n            if (!(i < j)) {\r\n                // Highlights.markArray(1, i);\r\n                // Delays.sleep(0.5);\r\n                return i;\r\n            }\r\n\r\n            // Follow the pivot and highlight it.\r\n            // if(i == middle) {\r\n            //     Highlights.markArray(3, j);\r\n            // }\r\n            // if(j == middle) {\r\n            //     Highlights.markArray(3, i);\r\n            // }\r\n\r\n            this.Writes.swap(i, j);\r\n            i++;\r\n        }\r\n    }\r\n\r\n    introsortLoop(lo, hi, depthLimit) {\r\n        while (hi - lo > this.sizeThreshold) {\r\n            // console.log(\"INTROSORT LOOP!!!\")\r\n            // while (hi - lo > 1) {\r\n            if (depthLimit === 0) {\r\n                // this.Marks.clearAllMarks();\r\n                let heapSort = new HeapSort(this.arrayVisualizer)\r\n\r\n                heapSort.heapSort(lo, hi);\r\n                return;\r\n            }\r\n            depthLimit--;\r\n            let p = this.partition(lo, hi, this.medianof3(lo, lo + Math.trunc((hi - lo) / 2), hi - 1));\r\n            this.introsortLoop(p, hi, depthLimit);\r\n            hi = p;\r\n        }\r\n        return;\r\n    }\r\n\r\n\r\n    runSort(low, high) {\r\n        this.introsortLoop(low, high + 1, this.floorLogBaseTwo(high-low+1))\r\n        let insertionSort = new InsertionSort(this.arrayVisualizer)\r\n        insertionSort.runSort(low, high + 1)\r\n    }\r\n}","import {Sort} from \"./Sort\";\r\n\r\nexport class LLQuickSort extends Sort{\r\n    constructor(arrayVisualizer) {\r\n        super(arrayVisualizer);\r\n        this.sortName = \"LLQuickSort\"\r\n    }\r\n    partition(lo, hi) {\r\n        let pivot = hi;\r\n        let i = lo;\r\n        for (let j = lo; j < hi; j++) {\r\n            if (this.Reads.compareInArr(j, pivot) < 0) {\r\n                this.Writes.swap(i, j);\r\n                i++;\r\n            }\r\n        }\r\n        this.Writes.swap(i, hi);\r\n        return i;\r\n    }\r\n\r\n    LLQuickSort(lo, hi) {\r\n        if (lo < hi) {\r\n            let p = this.partition(lo, hi);\r\n            this.LLQuickSort(lo, p - 1);\r\n            this.LLQuickSort(p + 1, hi);\r\n        }\r\n    }\r\n    runSort(low, high) {\r\n        this.LLQuickSort(low, high)\r\n    }\r\n}","import {Sort} from \"./Sort\";\r\n\r\nexport class LRQuickSort extends Sort{\r\n    constructor(arrayVisualizer) {\r\n        super(arrayVisualizer);\r\n        this.sortName=\"LRQuickSort\"\r\n    }\r\n\r\n    quickSort(p, r){\r\n        let pivot = Math.trunc(p + (r - p + 1) / 2);\r\n        let x = this.Reads.readValue(pivot);\r\n\r\n        let i = p;\r\n        let j = r;\r\n\r\n        while (i <= j) {\r\n            // while (this.Reads.readValue(i) < x){\r\n            while (this.Reads.compareValues(this.Reads.get(i), x) < 0){\r\n                i++;\r\n            }\r\n            // while (this.Reads.get(j) > x){\r\n            while (this.Reads.compareValues(this.Reads.get(j), x) > 0){\r\n                j--;\r\n            }\r\n\r\n            if (i <= j) {\r\n                this.Writes.swap(i, j);\r\n                i++;\r\n                j--;\r\n            }\r\n        }\r\n\r\n        if(p < j) {\r\n            this.quickSort(p, j);\r\n        }\r\n        if(i < r) {\r\n            this.quickSort(i, r);\r\n        }\r\n    }\r\n\r\n    runSort(low, high) {\r\n        this.quickSort(low, high)\r\n    }\r\n}","import {Sort} from \"./Sort\";\r\nimport {Element} from \"../classes/Element\";\r\n\r\nexport class LSDRadixSort extends Sort {\r\n    constructor(arrayVisualizer) {\r\n        super(arrayVisualizer);\r\n        this.sortName = \"LSD RadixSort\"\r\n        this.isNeedBucketsNum = true;\r\n    }\r\n\r\n    LSDRadixSort(bucketsNum) {\r\n        let len = this.arrayVisualizer.getArrLength()\r\n        let max = this.Reads.readValue(0);\r\n        for (let i = 1; i < len; ++i) {\r\n            let tmp = this.Reads.readValue(i)\r\n            if (max < tmp) {\r\n                max = tmp\r\n            }\r\n        }\r\n        let highestPower = Math.log(max) / Math.log(bucketsNum);\r\n\r\n        let registers = new Array(bucketsNum)\r\n        for (let i = 0; i < bucketsNum; i++) {\r\n            registers[i] = [];\r\n        }\r\n\r\n        for (let p = 0; p <= highestPower; p++) {\r\n            for (let i = 0; i < len; i++) {\r\n                let stabVal = Math.max(0, Math.min(this.Reads.readValue(i), len - 1))\r\n                let digit = Math.trunc(stabVal / (bucketsNum ** p) % bucketsNum)\r\n                // console.log(digit)\r\n                registers[digit].push(this.Reads.get(i))\r\n                //PseudoWrite\r\n            }\r\n\r\n\r\n            let tempArray = this.Writes.createAuxArray(len)\r\n            let tempWrite = new Array(len)\r\n            let radix = registers.length\r\n\r\n\r\n            let total = 0;\r\n            for (let index = 0; index < registers.length; index++) {\r\n                for (let i = 0; i < registers[index].length; i++) {\r\n                    this.Writes.auxWrite(total++, registers[index][i], tempArray)\r\n                }\r\n                registers[index] = []\r\n            }\r\n\r\n            for (let i = 0; i < len; i++) {\r\n                let register = i % radix\r\n                let pos = (register * Math.trunc(len / radix) + Math.trunc(i / radix))\r\n\r\n                this.Writes.write(pos, this.Reads.auxGet(pos, tempArray))\r\n                tempWrite[pos] = true\r\n            }\r\n            for (let i = 0; i < len; i++) {\r\n                if (!tempWrite[i]) {\r\n                    this.Writes.write(i, this.Reads.auxGet(i, tempArray))\r\n                }\r\n            }\r\n\r\n            this.Writes.removeAuxArray(tempArray)\r\n\r\n        }\r\n\r\n    }\r\n\r\n    runSort(low, high, bucketsNum) {\r\n        this.LSDRadixSort(bucketsNum)\r\n    }\r\n}","import {Sort} from \"./Sort\";\r\nimport {Writes} from \"../ArrayAccess/Writes\";\r\n\r\nexport class MergeSort extends Sort {\r\n    constructor(arrayVisualizer) {\r\n        super(arrayVisualizer);\r\n        this.sortName = \"MergeSort\"\r\n    }\r\n\r\n    merge(tmp, start, mid, end) {\r\n        if (start === mid) {\r\n            return\r\n        }\r\n\r\n        this.merge(tmp, start, Math.trunc((mid + start) / 2), mid);\r\n        this.merge(tmp, mid, Math.trunc((mid + end) / 2), end);\r\n\r\n        let low = start\r\n        let high = mid\r\n\r\n        for (let nxt = 0; nxt < end - start; nxt++) {\r\n            if (low >= mid && high >= end) break;\r\n\r\n            if (low < mid && high >= end) {\r\n                this.Writes.auxWrite(nxt, this.Reads.get(low++), tmp)\r\n            } else if (low >= mid && high < end) {\r\n                this.Writes.auxWrite(nxt, this.Reads.get(high++), tmp)\r\n            } else if (this.Reads.compareInArr(low, high) <= 0) {\r\n                this.Writes.auxWrite(nxt, this.Reads.get(low++), tmp)\r\n            } else {\r\n                this.Writes.auxWrite(nxt, this.Reads.get(high++), tmp)\r\n            }\r\n        }\r\n        for (let i = 0; i < end - start; i++) {\r\n            this.Writes.write(start + i, this.Reads.auxGet(i, tmp))\r\n        }\r\n\r\n    }\r\n\r\n    MergeSort(low, high) {\r\n        let tmp = this.Writes.createAuxArray(low - high)\r\n\r\n        let mid = low + (Math.trunc((high - low) / 2))\r\n\r\n        this.merge(tmp, low, mid, high+1)\r\n\r\n        this.Writes.removeAuxArray(tmp)\r\n    }\r\n\r\n    runSort(low, high) {\r\n        this.MergeSort(low, high)\r\n    }\r\n}","import {Sort} from \"./Sort\";\r\nimport {InsertionSort} from \"./InsertionSort\";\r\n\r\nexport class PseudoTimSort extends Sort {\r\n    MIN_MERGE\r\n    constructor(arrayVisualizer) {\r\n        super(arrayVisualizer);\r\n        this.sortName = \"PseudoTimSort\"\r\n        this.MIN_MERGE = 32\r\n    }\r\n\r\n    minRunLength(n) {\r\n        let r = 0;\r\n        while (n >= this.MIN_MERGE)\r\n        {\r\n            r |= (n & 1);\r\n            n >>= 1;\r\n        }\r\n        return n + r;\r\n    }\r\n    merge(l, m, r) {\r\n        let len1 = m - l + 1, len2 = r - m;\r\n        let left = this.Writes.createAuxArray(len1);\r\n        let right = this.Writes.createAuxArray(len2);\r\n        for(let x = 0; x < len1; x++)\r\n        {\r\n            // left[x] = arr[l + x];\r\n            this.Writes.auxWrite(x, this.Reads.get(l + x), left)\r\n        }\r\n        for(let x = 0; x < len2; x++)\r\n        {\r\n            // right[x] = arr[m + 1 + x];\r\n            this.Writes.auxWrite(x, this.Reads.get(m + 1 + x), right)\r\n        }\r\n\r\n        let i = 0;\r\n        let j = 0;\r\n        let k = l;\r\n\r\n        while (i < len1 && j < len2)\r\n        {\r\n            // if (left[i] <= right[j])\r\n            if(this.Reads.compareValues(this.Reads.auxGet(i, left), this.Reads.auxGet(j, right))<=0)\r\n            {\r\n                // arr[k] = left[i];\r\n                this.Writes.write(k, this.Reads.auxGet(i, left))\r\n                i++;\r\n            }\r\n            else\r\n            {\r\n                // arr[k] = right[j];\r\n                this.Writes.write(k, this.Reads.auxGet(j, right))\r\n                j++;\r\n            }\r\n            k++;\r\n        }\r\n\r\n        while (i < len1) {\r\n            // arr[k] = left[i];\r\n            this.Writes.write(k, this.Reads.auxGet(i, left))\r\n            k++;\r\n            i++;\r\n        }\r\n\r\n        while (j < len2) {\r\n            this.Writes.write(k, this.Reads.auxGet(j, right))\r\n            k++;\r\n            j++;\r\n        }\r\n        this.Writes.removeAuxArray(right)\r\n        this.Writes.removeAuxArray(left)\r\n    }\r\n\r\n    pseudoTimSort(n)\r\n    {\r\n        let minRun = this.minRunLength(this.MIN_MERGE);\r\n\r\n        for(let i = 0; i < n; i += minRun)\r\n        {\r\n            let insertionSort = new InsertionSort(this.arrayVisualizer)\r\n\r\n            insertionSort.runSort(i, Math.min(\r\n                (i + this.MIN_MERGE - 1), (n - 1)));\r\n        }\r\n\r\n        for(let size = minRun; size < n; size = 2 * size) {\r\n            for(let left = 0; left < n; left += 2 * size) {\r\n                let mid = left + size - 1;\r\n                let right = Math.min((left + 2 * size - 1), (n - 1));\r\n                if(mid < right) {\r\n                    this.merge(left, mid, right);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    runSort(low, high) {\r\n        this.pseudoTimSort(high+1)\r\n    }\r\n}","import {Sort} from \"./Sort\";\r\n\r\nexport class SelectionSort extends Sort{\r\n    constructor(arrayVisualizer) {\r\n        super(arrayVisualizer);\r\n        this.sortName = \"SelectionSort\"\r\n    }\r\n\r\n    SelectionSort() {\r\n        for (let i=0; i < this.arrLength; i++) {\r\n            let minIndex = i\r\n            for (let j=i; j < this.arrLength; j++) {\r\n                if (this.Reads.compareInArr(j, minIndex) < 0) {\r\n                    minIndex = j\r\n                }\r\n            }\r\n\r\n            if (this.Reads.compareInArr(i, minIndex) > 0) {\r\n                this.Writes.swap(i, minIndex);\r\n            }\r\n        }\r\n    }\r\n\r\n    runSort(low, high) {\r\n        this.SelectionSort(low, high)\r\n    }\r\n}","import {Sort} from \"./Sort\";\r\n\r\nexport class ShellSort extends Sort {\r\n    constructor(arrayVisualizer) {\r\n        super(arrayVisualizer);\r\n        this.sortName = \"ShellSort\"\r\n    }\r\n\r\n    ShellSort() {\r\n        let n = this.arrLength;\r\n\r\n        for (let gap = Math.trunc(n / 2); gap > 0; gap = Math.trunc(gap / 2)) {\r\n            for (let i = gap; i < n; i++) {\r\n                let temp = this.Reads.get(i);\r\n\r\n                let j;\r\n                for (j = i; j >= gap && (this.Reads.compareValues(this.Reads.get(j - gap), temp) > 0); j -= gap) {\r\n                    this.Writes.write(j, this.Reads.get(j - gap))\r\n                }\r\n\r\n                this.Writes.write(j, temp)\r\n\r\n            }\r\n        }\r\n\r\n\r\n    }\r\n\r\n    runSort(low, high) {\r\n        this.ShellSort(low, high)\r\n    }\r\n}","import {Sort} from \"./Sort\";\r\n\r\nexport class SlowSort extends Sort{\r\n    constructor(arrayVisualizer) {\r\n        super(arrayVisualizer);\r\n        this.sortName = \"SlowSort\"\r\n        this.warnLen = 50\r\n    }\r\n\r\n    SlowSort(i, j) {\r\n        if (i >= j) {\r\n            return;\r\n        }\r\n        let m = Math.floor((i + j) / 2);\r\n        this.SlowSort(i, m);\r\n        this.SlowSort(m + 1, j);\r\n        if (this.Reads.compareInArr(j, m) < 0) {\r\n            this.Writes.swap(j, m)\r\n        }\r\n        this.SlowSort(i, j - 1)\r\n    }\r\n\r\n    runSort(low, high) {\r\n        this.SlowSort(low, high)\r\n    }\r\n}","import {Sort} from \"./Sort\";\r\n\r\nexport class StoogeSort extends Sort{\r\n    constructor(arrayVisualizer) {\r\n        super(arrayVisualizer);\r\n        this.sortName = \"StoogeSort\"\r\n        this.warnLen = 60\r\n    }\r\n\r\n    StoogeSort(i, j) {\r\n        if (this.Reads.compareInArr(i, j) > 0) {\r\n            this.Writes.swap(i, j)\r\n        }\r\n        if (j - i > 1) {\r\n            let t = Math.trunc((j - i + 1) / 3)\r\n            this.StoogeSort(i, j - t)\r\n            this.StoogeSort(i + t, j)\r\n            this.StoogeSort(i, j - t)\r\n        }\r\n    }\r\n\r\n    runSort(low, high) {\r\n        this.StoogeSort(low, high)\r\n    }\r\n}","import {Sort} from \"./Sort\";\r\n\r\n/**\r\n * Default minimum size of a run.\r\n */\r\nconst DEFAULT_MIN_MERGE = 32\r\n\r\n/**\r\n * Minimum ordered subsequece required to do galloping.\r\n */\r\nconst DEFAULT_MIN_GALLOPING = 7\r\n\r\n/**\r\n * Default tmp storage length. Can increase depending on the size of the\r\n * smallest run to merge.\r\n */\r\nconst DEFAULT_TMP_STORAGE_LENGTH = 256\r\n\r\n/**\r\n * Pre-computed powers of 10 for efficient lexicographic comparison of\r\n * small integers.\r\n */\r\nconst POWERS_OF_TEN = [1e0, 1e1, 1e2, 1e3, 1e4, 1e5, 1e6, 1e7, 1e8, 1e9]\r\n\r\nlet results\r\n\r\n/**\r\n * Estimate the logarithm base 10 of a small integer.\r\n *\r\n * @param {number} x - The integer to estimate the logarithm of.\r\n * @return {number} - The estimated logarithm of the integer.\r\n */\r\nconst log10 = x => x < 1e5\r\n    ? x < 1e2\r\n        ? x < 1e1\r\n            ? 0\r\n            : 1\r\n        : x < 1e4\r\n            ? x < 1e3\r\n                ? 2\r\n                : 3\r\n            : 4\r\n    : x < 1e7\r\n        ? x < 1e6\r\n            ? 5\r\n            : 6\r\n        : x < 1e9\r\n            ? x < 1e8\r\n                ? 7\r\n                : 8\r\n            : 9\r\n\r\n/**\r\n * Default alphabetical comparison of items.\r\n *\r\n * @param {string|object|number} a - First element to compare.\r\n * @param {string|object|number} b - Second element to compare.\r\n * @return {number} - A positive number if a.toString() > b.toString(), a\r\n * negative number if .toString() < b.toString(), 0 otherwise.\r\n */\r\nfunction alphabeticalCompare(a, b) {\r\n    if (a === b) {\r\n        return 0\r\n    }\r\n\r\n    if (~~a === a && ~~b === b) {\r\n        if (a === 0 || b === 0) {\r\n            return a < b ? -1 : 1\r\n        }\r\n\r\n        if (a < 0 || b < 0) {\r\n            if (b >= 0) {\r\n                return -1\r\n            }\r\n\r\n            if (a >= 0) {\r\n                return 1\r\n            }\r\n\r\n            a = -a\r\n            b = -b\r\n        }\r\n\r\n        const al = log10(a)\r\n        const bl = log10(b)\r\n\r\n        let t = 0\r\n\r\n        if (al < bl) {\r\n            a *= POWERS_OF_TEN[bl - al - 1]\r\n            b /= 10\r\n            t = -1\r\n        } else if (al > bl) {\r\n            b *= POWERS_OF_TEN[al - bl - 1]\r\n            a /= 10\r\n            t = 1\r\n        }\r\n\r\n        if (a === b) {\r\n            return t\r\n        }\r\n\r\n        return a < b ? -1 : 1\r\n    }\r\n\r\n    const aStr = String(a)\r\n    const bStr = String(b)\r\n\r\n    if (aStr === bStr) {\r\n        return 0\r\n    }\r\n\r\n    return aStr < bStr ? -1 : 1\r\n}\r\n\r\n/**\r\n * Compute minimum run length for TimSort\r\n *\r\n * @param {number} n - The size of the array to sort.\r\n */\r\nfunction minRunLength(n) {\r\n    let r = 0\r\n\r\n    while (n >= DEFAULT_MIN_MERGE) {\r\n        r |= (n & 1)\r\n        n >>= 1\r\n    }\r\n\r\n    return n + r\r\n}\r\n\r\n/**\r\n * Counts the length of a monotonically ascending or strictly monotonically\r\n * descending sequence (run) starting at array[lo] in the range [lo, hi). If\r\n * the run is descending it is made ascending.\r\n *\r\n * @param {array} array - The array to reverse.\r\n * @param {number} lo - First element in the range (inclusive).\r\n * @param {number} hi - Last element in the range.\r\n * @param {function} compare - Item comparison function.\r\n * @return {number} - The length of the run.\r\n */\r\n\r\nexport class TimSort extends Sort {\r\n    constructor(arrayVisualizer) {\r\n        super(arrayVisualizer);\r\n\r\n        this.minGallop = DEFAULT_MIN_GALLOPING\r\n\r\n        this.tmpStorageLength = this.arrLength < 2 * DEFAULT_TMP_STORAGE_LENGTH\r\n            ? this.arrLength >>> 1\r\n            : DEFAULT_TMP_STORAGE_LENGTH\r\n\r\n        // this.tmp = new Array(this.tmpStorageLength)\r\n        this.tmp = this.Writes.createAuxArray(this.tmpStorageLength)\r\n\r\n        this.stackLength = this.arrLength < 120\r\n            ? 5\r\n            : this.arrLength < 1542\r\n                ? 10\r\n                : this.arrLength < 119151\r\n                    ? 19\r\n                    : 40\r\n\r\n        this.runStart = new Array(this.stackLength)\r\n        this.runLength = new Array(this.stackLength)\r\n\r\n        this.stackSize = 0\r\n        this.sortName = \"TimSort\"\r\n    }\r\n\r\n    makeAscendingRun(lo, hi) {\r\n        let runHi = lo + 1\r\n\r\n        if (runHi === hi) {\r\n            return 1\r\n        }\r\n\r\n        // Descending\r\n        // if (compare(array[runHi++], array[lo]) < 0) {\r\n        if (this.Reads.compareInArr(runHi++, lo)<0) {\r\n            // while (runHi < hi && compare(array[runHi], array[runHi - 1]) < 0) {\r\n            while (runHi < hi && this.Reads.compareInArr(runHi, runHi - 1)<0) {\r\n                runHi++\r\n            }\r\n\r\n            // this.reverseRun(array, lo, runHi)\r\n            this.reverseRun(lo, runHi)\r\n            // reverseRun(results, lo, runHi)\r\n            // Ascending\r\n        } else {\r\n            // while (runHi < hi && compare(array[runHi], array[runHi - 1]) >= 0) {\r\n            while (runHi < hi && this.Reads.compareInArr(runHi, runHi - 1)>=0) {\r\n                runHi++\r\n            }\r\n        }\r\n\r\n        return runHi - lo\r\n    }\r\n\r\n    /**\r\n     * Reverse an array in the range [lo, hi).\r\n     *\r\n     * @param {array} array - The array to reverse.\r\n     * @param {number} lo - First element in the range (inclusive).\r\n     * @param {number} hi - Last element in the range.\r\n     */\r\n\r\n\r\n    reverseRun(lo, hi) {\r\n        hi--\r\n\r\n        while (lo < hi) {\r\n            // const t = array[lo]\r\n            // array[lo++] = array[hi]\r\n            // array[hi--] = t\r\n            const t = this.Reads.get(lo)\r\n            this.Writes.write(lo++, this.Reads.get(hi))\r\n            this.Writes.write(hi--, t)\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Perform the binary sort of the array in the range [lo, hi) where start is\r\n     * the first element possibly out of order.\r\n     *\r\n     * @param {array} array - The array to sort.\r\n     * @param {number} lo - First element in the range (inclusive).\r\n     * @param {number} hi - Last element in the range.\r\n     * @param {number} start - First element possibly out of order.\r\n     * @param {} compare - Item comparison function.\r\n     */\r\n\r\n\r\n    binaryInsertionSort(lo, hi, start) {\r\n        if (start === lo) {\r\n            start++\r\n        }\r\n\r\n        for (; start < hi; start++) {\r\n            // const pivot = array[start]\r\n            const pivot = this.Reads.get(start)\r\n\r\n            // const pivotIndex = results[start]\r\n\r\n            // Ranges of the array where pivot belongs\r\n            let left = lo\r\n            let right = start\r\n\r\n            /*\r\n             *   pivot >= array[i] for i in [lo, left)\r\n             *   pivot <  array[i] for i in  in [right, start)\r\n             */\r\n            while (left < right) {\r\n                const mid = (left + right) >>> 1\r\n\r\n                // if (compare(pivot, array[mid]) < 0) {\r\n                if (pivot.getValue() < this.Reads.readValue(mid)) {\r\n                    right = mid\r\n                } else {\r\n                    left = mid + 1\r\n                }\r\n            }\r\n\r\n            /*\r\n             * Move elements right to make room for the pivot. If there are elements\r\n             * equal to pivot, left points to the first slot after them: this is also\r\n             * a reason for which TimSort is stable\r\n             */\r\n            let n = start - left\r\n            // Switch is just an optimization for small arrays\r\n            switch (n) {\r\n                case 3:\r\n                    // array[left + 3] = array[left + 2]\r\n                    this.Writes.write(left + 3, this.Reads.get(left + 2))\r\n                /* falls through */\r\n                case 2:\r\n                    // array[left + 2] = array[left + 1]\r\n                    this.Writes.write(left + 2, this.Reads.get(left + 1))\r\n                /* falls through */\r\n                case 1:\r\n                    // array[left + 1] = array[left]\r\n                    this.Writes.write(left + 1, this.Reads.get(left))\r\n                    break\r\n                default:\r\n                    while (n > 0) {\r\n                        // array[left + n] = array[left + n - 1]\r\n                        this.Writes.write(left + n, this.Reads.get(left + n - 1))\r\n                        n--\r\n                    }\r\n            }\r\n\r\n            // array[left] = pivot\r\n            this.Writes.write(left, pivot)\r\n            // results[left] = pivotIndex\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Find the position at which to insert a value in a sorted range. If the range\r\n     * contains elements equal to the value the leftmost element index is returned\r\n     * (for stability).\r\n     *\r\n     * @param {number} value - Value to insert.\r\n     * @param {array} array - The array in which to insert value.\r\n     * @param {number} start - First element in the range.\r\n     * @param {number} length - Length of the range.\r\n     * @param {number} hint - The index at which to begin the search.\r\n     * @param {function} compare - Item comparison function.\r\n     * @return {number} - The index where to insert value.\r\n     */\r\n\r\n\r\n    gallopLeft(value, isAux, start, length, hint) {\r\n        let lastOffset = 0\r\n        let maxOffset = 0\r\n        let offset = 1\r\n        if (!isAux) {\r\n            // if (compare(value, array[start + hint]) > 0) {\r\n            if (value > this.Reads.readValue(start + hint)) {\r\n                maxOffset = length - hint\r\n\r\n                while (\r\n                    offset < maxOffset\r\n                    // && compare(value, array[start + hint + offset]) > 0\r\n                    && value > this.Reads.readValue(start + hint + offset)\r\n                    ) {\r\n                    lastOffset = offset\r\n                    offset = (offset << 1) + 1\r\n\r\n                    if (offset <= 0) {\r\n                        offset = maxOffset\r\n                    }\r\n                }\r\n\r\n                if (offset > maxOffset) {\r\n                    offset = maxOffset\r\n                }\r\n\r\n                // Make offsets relative to start\r\n                lastOffset += hint\r\n                offset += hint\r\n\r\n                // value <= array[start + hint]\r\n            } else {\r\n                maxOffset = hint + 1\r\n                while (\r\n                    offset < maxOffset\r\n                    // && compare(value, array[start + hint - offset]) <= 0\r\n                    // && value <= this.Reads.readValue(start + hint + offset)\r\n                    && value <= this.Reads.readValue(start + hint - offset)\r\n                    ) {\r\n                    lastOffset = offset\r\n                    offset = (offset << 1) + 1\r\n\r\n                    if (offset <= 0) {\r\n                        offset = maxOffset\r\n                    }\r\n                }\r\n                if (offset > maxOffset) {\r\n                    offset = maxOffset\r\n                }\r\n\r\n                // Make offsets relative to start\r\n                const tmp = lastOffset\r\n                lastOffset = hint - offset\r\n                offset = hint - tmp\r\n            }\r\n\r\n            /*\r\n             * Now array[start+lastOffset] < value <= array[start+offset], so value\r\n             * belongs somewhere in the range (start + lastOffset, start + offset]. Do a\r\n             * binary search, with invariant array[start + lastOffset - 1] < value <=\r\n             * array[start + offset].\r\n             */\r\n            lastOffset++\r\n            while (lastOffset < offset) {\r\n                const m = lastOffset + ((offset - lastOffset) >>> 1)\r\n\r\n                // if (compare(value, array[start + m]) > 0) {\r\n                if (value > this.Reads.readValue(start + m)) {\r\n                    lastOffset = m + 1\r\n                } else {\r\n                    offset = m\r\n                }\r\n            }\r\n        } else {\r\n            // if (compare(value, array[start + hint]) > 0) {\r\n            if (value > this.Reads.auxReadValue(start + hint, this.tmp)) {\r\n                maxOffset = length - hint\r\n\r\n                while (\r\n                    offset < maxOffset\r\n                    // && compare(value, array[start + hint + offset]) > 0\r\n                    && value > this.Reads.auxReadValue(start + hint + offset, this.tmp)\r\n                    ) {\r\n                    lastOffset = offset\r\n                    offset = (offset << 1) + 1\r\n\r\n                    if (offset <= 0) {\r\n                        offset = maxOffset\r\n                    }\r\n                }\r\n\r\n                if (offset > maxOffset) {\r\n                    offset = maxOffset\r\n                }\r\n\r\n                // Make offsets relative to start\r\n                lastOffset += hint\r\n                offset += hint\r\n\r\n                // value <= array[start + hint]\r\n            } else {\r\n                maxOffset = hint + 1\r\n                while (\r\n                    offset < maxOffset\r\n                    // && compare(value, array[start + hint - offset]) <= 0\r\n                    // && value <= this.Reads.auxRead(start + hint + offset, this.tmp)\r\n                    && value <= this.Reads.auxReadValue(start + hint - offset, this.tmp)\r\n                    ) {\r\n                    lastOffset = offset\r\n                    offset = (offset << 1) + 1\r\n\r\n                    if (offset <= 0) {\r\n                        offset = maxOffset\r\n                    }\r\n                }\r\n                if (offset > maxOffset) {\r\n                    offset = maxOffset\r\n                }\r\n\r\n                // Make offsets relative to start\r\n                const tmp = lastOffset\r\n                lastOffset = hint - offset\r\n                offset = hint - tmp\r\n            }\r\n\r\n            /*\r\n             * Now array[start+lastOffset] < value <= array[start+offset], so value\r\n             * belongs somewhere in the range (start + lastOffset, start + offset]. Do a\r\n             * binary search, with invariant array[start + lastOffset - 1] < value <=\r\n             * array[start + offset].\r\n             */\r\n            lastOffset++\r\n            while (lastOffset < offset) {\r\n                const m = lastOffset + ((offset - lastOffset) >>> 1)\r\n\r\n                // if (compare(value, array[start + m]) > 0) {\r\n                if (value > this.Reads.auxReadValue(start + m, this.tmp)) {\r\n                    lastOffset = m + 1\r\n                } else {\r\n                    offset = m\r\n                }\r\n            }\r\n        }\r\n        return offset\r\n    }\r\n\r\n    /**\r\n     * Find the position at which to insert a value in a sorted range. If the range\r\n     * contains elements equal to the value the rightmost element index is returned\r\n     * (for stability).\r\n     *\r\n     * @param {number} value - Value to insert.\r\n     * @param {array} array - The array in which to insert value.\r\n     * @param {number} start - First element in the range.\r\n     * @param {number} length - Length of the range.\r\n     * @param {number} hint - The index at which to begin the search.\r\n     * @param {function} compare - Item comparison function.\r\n     * @return {number} - The index where to insert value.\r\n     */\r\n\r\n\r\n    gallopRight(value, isAux, start, length, hint) {\r\n        let lastOffset = 0\r\n        let maxOffset = 0\r\n        let offset = 1\r\n\r\n        if (!isAux) {\r\n            // if (compare(value, array[start + hint]) < 0) {\r\n            if (value < this.Reads.readValue(start + hint)) {\r\n                maxOffset = hint + 1\r\n\r\n                while (\r\n                    offset < maxOffset\r\n                    // && compare(value, array[start + hint - offset]) < 0\r\n                    && value < this.Reads.readValue(start + hint - offset)\r\n                    ) {\r\n                    lastOffset = offset\r\n                    offset = (offset << 1) + 1\r\n\r\n                    if (offset <= 0) {\r\n                        offset = maxOffset\r\n                    }\r\n                }\r\n\r\n                if (offset > maxOffset) {\r\n                    offset = maxOffset\r\n                }\r\n\r\n                // Make offsets relative to start\r\n                const tmp = lastOffset\r\n                lastOffset = hint - offset\r\n                offset = hint - tmp\r\n\r\n                // value >= array[start + hint]\r\n            } else {\r\n                maxOffset = length - hint\r\n\r\n                while (\r\n                    offset < maxOffset\r\n                    // && compare(value, array[start + hint + offset]) >= 0\r\n                    && value >= this.Reads.readValue(start + hint + offset)\r\n                    ) {\r\n                    lastOffset = offset\r\n                    offset = (offset << 1) + 1\r\n\r\n                    if (offset <= 0) {\r\n                        offset = maxOffset\r\n                    }\r\n                }\r\n\r\n                if (offset > maxOffset) {\r\n                    offset = maxOffset\r\n                }\r\n\r\n                // Make offsets relative to start\r\n                lastOffset += hint\r\n                offset += hint\r\n            }\r\n\r\n            /*\r\n             * Now array[start+lastOffset] < value <= array[start+offset], so value\r\n             * belongs somewhere in the range (start + lastOffset, start + offset]. Do a\r\n             * binary search, with invariant array[start + lastOffset - 1] < value <=\r\n             * array[start + offset].\r\n             */\r\n            lastOffset++\r\n\r\n            while (lastOffset < offset) {\r\n                const m = lastOffset + ((offset - lastOffset) >>> 1)\r\n\r\n                // if (compare(value, array[start + m]) < 0) {\r\n                if (value < this.Reads.readValue(start + m)) {\r\n                    offset = m\r\n                } else {\r\n                    lastOffset = m + 1\r\n                }\r\n            }\r\n\r\n        } else {\r\n            //AUX\r\n            // if (compare(value, array[start + hint]) < 0) {\r\n            if (value < this.Reads.auxReadValue(start + hint, this.tmp)) {\r\n                maxOffset = hint + 1\r\n\r\n                while (\r\n                    offset < maxOffset\r\n                    // && compare(value, array[start + hint - offset]) < 0\r\n                    && value < this.Reads.auxReadValue(start + hint - offset, this.tmp)\r\n                    ) {\r\n                    lastOffset = offset\r\n                    offset = (offset << 1) + 1\r\n\r\n                    if (offset <= 0) {\r\n                        offset = maxOffset\r\n                    }\r\n                }\r\n\r\n                if (offset > maxOffset) {\r\n                    offset = maxOffset\r\n                }\r\n\r\n                // Make offsets relative to start\r\n                const tmp = lastOffset\r\n                lastOffset = hint - offset\r\n                offset = hint - tmp\r\n\r\n                // value >= array[start + hint]\r\n            } else {\r\n                maxOffset = length - hint\r\n\r\n                while (\r\n                    offset < maxOffset\r\n                    // && compare(value, array[start + hint + offset]) >= 0\r\n                    // && value >= this.Reads.auxReadValue(start + hint + offset, this.tmp)\r\n                    && (this.Reads.compareValues(value, this.Reads.auxReadValue(start + hint + offset, this.tmp))>=0)\r\n                    ) {\r\n                    lastOffset = offset\r\n                    offset = (offset << 1) + 1\r\n\r\n                    if (offset <= 0) {\r\n                        offset = maxOffset\r\n                    }\r\n                }\r\n\r\n                if (offset > maxOffset) {\r\n                    offset = maxOffset\r\n                }\r\n\r\n                // Make offsets relative to start\r\n                lastOffset += hint\r\n                offset += hint\r\n            }\r\n\r\n            /*\r\n             * Now array[start+lastOffset] < value <= array[start+offset], so value\r\n             * belongs somewhere in the range (start + lastOffset, start + offset]. Do a\r\n             * binary search, with invariant array[start + lastOffset - 1] < value <=\r\n             * array[start + offset].\r\n             */\r\n            lastOffset++\r\n\r\n            while (lastOffset < offset) {\r\n                const m = lastOffset + ((offset - lastOffset) >>> 1)\r\n\r\n                // if (compare(value, array[start + m]) < 0) {\r\n                if (value < this.Reads.auxReadValue(start + m, this.tmp)) {\r\n                    offset = m\r\n                } else {\r\n                    lastOffset = m + 1\r\n                }\r\n            }\r\n        }\r\n\r\n        return offset\r\n    }\r\n\r\n\r\n    /**\r\n     * Push a new run on TimSort's stack.\r\n     *\r\n     * @param {number} runStart - Start index of the run in the original array.\r\n     * @param {number} runLength - Length of the run;\r\n     */\r\n    pushRun(runStart, runLength) {\r\n        this.runStart[this.stackSize] = runStart\r\n        this.runLength[this.stackSize] = runLength\r\n        this.stackSize += 1\r\n    }\r\n\r\n    /**\r\n     * Merge runs on TimSort's stack so that the following holds for all i:\r\n     * 1) runLength[i - 3] > runLength[i - 2] + runLength[i - 1]\r\n     * 2) runLength[i - 2] > runLength[i - 1]\r\n     */\r\n    mergeRuns() {\r\n        while (this.stackSize > 1) {\r\n            let n = this.stackSize - 2\r\n\r\n            if (\r\n                (\r\n                    n >= 1\r\n                    && this.runLength[n - 1] <= this.runLength[n] + this.runLength[n + 1]\r\n                )\r\n                || (\r\n                    n >= 2\r\n                    && this.runLength[n - 2] <= this.runLength[n] + this.runLength[n - 1]\r\n                )\r\n            ) {\r\n                if (this.runLength[n - 1] < this.runLength[n + 1]) {\r\n                    n--\r\n                }\r\n            } else if (this.runLength[n] > this.runLength[n + 1]) {\r\n                break\r\n            }\r\n            this.mergeAt(n)\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Merge all runs on TimSort's stack until only one remains.\r\n     */\r\n    forceMergeRuns() {\r\n        while (this.stackSize > 1) {\r\n            let n = this.stackSize - 2\r\n\r\n            if (n > 0 && this.runLength[n - 1] < this.runLength[n + 1]) {\r\n                n--\r\n            }\r\n\r\n            this.mergeAt(n)\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Merge the runs on the stack at positions i and i+1. Must be always be called\r\n     * with i=stackSize-2 or i=stackSize-3 (that is, we merge on top of the stack).\r\n     *\r\n     * @param {number} i - Index of the run to merge in TimSort's stack.\r\n     */\r\n    mergeAt(i) {\r\n        let start1 = this.runStart[i]\r\n        let length1 = this.runLength[i]\r\n        const start2 = this.runStart[i + 1]\r\n        let length2 = this.runLength[i + 1]\r\n\r\n        this.runLength[i] = length1 + length2\r\n\r\n        if (i === this.stackSize - 3) {\r\n            this.runStart[i + 1] = this.runStart[i + 2]\r\n            this.runLength[i + 1] = this.runLength[i + 2]\r\n        }\r\n\r\n        this.stackSize--\r\n\r\n        /*\r\n         * Find where the first element in the second run goes in run1. Previous\r\n         * elements in run1 are already in place\r\n         */\r\n        // const k = gallopRight(array[start2], array, start1, length1, 0, compare)\r\n        const k = this.gallopRight(this.Reads.readValue(start2), false, start1, length1, 0)\r\n        start1 += k\r\n        length1 -= k\r\n\r\n        if (length1 === 0) {\r\n            return\r\n        }\r\n\r\n        /*\r\n         * Find where the last element in the first run goes in run2. Next elements\r\n         * in run2 are already in place\r\n         */\r\n        // length2 = gallopLeft(\r\n        //     array[start1 + length1 - 1],\r\n        //     array,\r\n        //     start2,\r\n        //     length2,\r\n        //     length2 - 1,\r\n        //     compare\r\n        // )\r\n        length2 = this.gallopLeft(\r\n            // array[start1 + length1 - 1],\r\n            this.Reads.readValue(start1 + length1 - 1),\r\n            false,\r\n            start2,\r\n            length2,\r\n            length2 - 1,\r\n        )\r\n\r\n        if (length2 === 0) {\r\n            return\r\n        }\r\n\r\n        /*\r\n         * Merge remaining runs. A tmp array with length = min(length1, length2) is\r\n         * used\r\n         */\r\n        if (length1 <= length2) {\r\n            this.mergeLow(start1, length1, start2, length2)\r\n        } else {\r\n            this.mergeHigh(start1, length1, start2, length2)\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Merge two adjacent runs in a stable way. The runs must be such that the\r\n     * first element of run1 is bigger than the first element in run2 and the\r\n     * last element of run1 is greater than all the elements in run2.\r\n     * The method should be called when run1.length <= run2.length as it uses\r\n     * TimSort temporary array to store run1. Use mergeHigh if run1.length >\r\n     * run2.length.\r\n     *\r\n     * @param {number} start1 - First element in run1.\r\n     * @param {number} length1 - Length of run1.\r\n     * @param {number} start2 - First element in run2.\r\n     * @param {number} length2 - Length of run2.\r\n     */\r\n    mergeLow(start1, length1, start2, length2) {\r\n        // const {compare} = this\r\n        // const {array} = this\r\n        // const {tmp} = this\r\n        // const {tmpIndex} = this\r\n        // const {compare} = this\r\n        // const {array} = this\r\n        // const {tmp} = this\r\n        // const {tmpIndex} = this\r\n        let i = 0\r\n\r\n        for (i = 0; i < length1; i++) {\r\n            // tmp[i] = array[start1 + i]\r\n            this.Writes.auxWrite(i, this.Reads.get(start1 + i), this.tmp)\r\n        }\r\n\r\n        let cursor1 = 0\r\n        let cursor2 = start2\r\n        let dest = start1\r\n\r\n\r\n        // array[dest] = array[cursor2]\r\n        this.Writes.write(dest, this.Reads.get(cursor2))\r\n\r\n\r\n        dest++\r\n        cursor2++\r\n\r\n        if (--length2 === 0) {\r\n            for (i = 0; i < length1; i++) {\r\n                // array[dest + i] = tmp[cursor1 + i]\r\n                this.Writes.write(dest + i, this.Reads.auxGet(cursor1 + i, this.tmp))\r\n            }\r\n            return\r\n        }\r\n\r\n        if (length1 === 1) {\r\n            for (i = 0; i < length2; i++) {\r\n                // array[dest + i] = array[cursor2 + i]\r\n\r\n                this.Writes.write(dest + i, this.Reads.get(cursor2 + i))\r\n            }\r\n            // array[dest + length2] = tmp[cursor1]\r\n            this.Writes.write(dest + length2, this.Reads.auxGet(cursor1, this.tmp))\r\n            return\r\n        }\r\n\r\n        let {minGallop} = this\r\n\r\n        while (true) {\r\n            let count1 = 0\r\n            let count2 = 0\r\n            let exit = false\r\n\r\n            do {\r\n                // if (compare(array[cursor2], tmp[cursor1]) < 0) {\r\n                if (this.Reads.readValue(cursor2) < this.Reads.auxReadValue(cursor1, this.tmp)) {\r\n                    // array[dest] = array[cursor2]\r\n                    this.Writes.write(dest, this.Reads.get(cursor2))\r\n                    dest++\r\n                    cursor2++\r\n                    count2++\r\n                    count1 = 0\r\n\r\n                    if (--length2 === 0) {\r\n                        exit = true\r\n                        break\r\n                    }\r\n                } else {\r\n                    // array[dest] = tmp[cursor1]\r\n                    this.Writes.write(dest, this.Reads.auxGet(cursor1, this.tmp))\r\n\r\n                    dest++\r\n                    cursor1++\r\n                    count1++\r\n                    count2 = 0\r\n                    if (--length1 === 1) {\r\n                        exit = true\r\n                        break\r\n                    }\r\n                }\r\n            } while ((count1 | count2) < minGallop)\r\n\r\n            if (exit) {\r\n                break\r\n            }\r\n\r\n            do {\r\n                // count1 = gallopRight(array[cursor2], tmp, cursor1, length1, 0, compare)\r\n                count1 = this.gallopRight(this.Reads.readValue(cursor2), true, cursor1, length1, 0)\r\n\r\n                if (count1 !== 0) {\r\n                    for (i = 0; i < count1; i++) {\r\n                        // array[dest + i] = tmp[cursor1 + i]\r\n                        // results[dest + i] = tmpIndex[cursor1 + i]\r\n                        this.Writes.write(dest + i, this.Reads.auxGet(cursor1 + i, this.tmp))\r\n                    }\r\n\r\n                    dest += count1\r\n                    cursor1 += count1\r\n                    length1 -= count1\r\n                    if (length1 <= 1) {\r\n                        exit = true\r\n                        break\r\n                    }\r\n                }\r\n\r\n                // array[dest] = array[cursor2]\r\n                // results[dest] = results[cursor2]\r\n                this.Writes.write(dest, this.Reads.get(cursor2))\r\n\r\n                dest++\r\n                cursor2++\r\n\r\n                if (--length2 === 0) {\r\n                    exit = true\r\n                    break\r\n                }\r\n\r\n                // count2 = this.gallopLeft(tmp[cursor1], array, cursor2, length2, 0, compare)\r\n                count2 = this.gallopLeft(this.Reads.auxReadValue(cursor1, this.tmp), false, cursor2, length2, 0)\r\n\r\n                if (count2 !== 0) {\r\n                    for (i = 0; i < count2; i++) {\r\n                        // array[dest + i] = array[cursor2 + i]\r\n                        // results[dest + i] = results[cursor2 + i]\r\n                        this.Writes.write(dest + i, this.Reads.get(cursor2 + i))\r\n                    }\r\n\r\n                    dest += count2\r\n                    cursor2 += count2\r\n                    length2 -= count2\r\n\r\n                    if (length2 === 0) {\r\n                        exit = true\r\n                        break\r\n                    }\r\n                }\r\n                // array[dest] = tmp[cursor1]\r\n                // results[dest] = tmpIndex[cursor1]\r\n\r\n                this.Writes.write(dest, this.Reads.auxGet(cursor1, this.tmp))\r\n\r\n                dest++\r\n                cursor1++\r\n\r\n                if (--length1 === 1) {\r\n                    exit = true\r\n                    break\r\n                }\r\n\r\n                minGallop--\r\n            } while (\r\n                count1 >= DEFAULT_MIN_GALLOPING\r\n                || count2 >= DEFAULT_MIN_GALLOPING\r\n                )\r\n\r\n            if (exit) {\r\n                break\r\n            }\r\n\r\n            if (minGallop < 0) {\r\n                minGallop = 0\r\n            }\r\n\r\n            minGallop += 2\r\n        }\r\n\r\n        this.minGallop = minGallop\r\n\r\n        if (minGallop < 1) {\r\n            this.minGallop = 1\r\n        }\r\n\r\n        if (length1 === 1) {\r\n            for (i = 0; i < length2; i++) {\r\n                // array[dest + i] = array[cursor2 + i]\r\n                // results[dest + i] = results[cursor2 + i]\r\n                this.Writes.write(dest + i, this.Reads.get(cursor2 + i))\r\n            }\r\n            // array[dest + length2] = tmp[cursor1]\r\n            // results[dest + length2] = tmpIndex[cursor1]\r\n            this.Writes.write(dest + length2, this.Reads.auxGet(cursor1, this.tmp))\r\n        } else if (length1 === 0) {\r\n            throw new Error('mergeLow preconditions were not respected')\r\n        } else {\r\n            for (i = 0; i < length1; i++) {\r\n                // array[dest + i] = tmp[cursor1 + i]\r\n                // results[dest + i] = tmpIndex[cursor1 + i]\r\n                this.Writes.write(dest + i, this.Reads.auxGet(cursor1 + i, this.tmp))\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Merge two adjacent runs in a stable way. The runs must be such that the\r\n     * first element of run1 is bigger than the first element in run2 and the\r\n     * last element of run1 is greater than all the elements in run2.\r\n     * The method should be called when run1.length > run2.length as it uses\r\n     * TimSort temporary array to store run2. Use mergeLow if run1.length <=\r\n     * run2.length.\r\n     *\r\n     * @param {number} start1 - First element in run1.\r\n     * @param {number} length1 - Length of run1.\r\n     * @param {number} start2 - First element in run2.\r\n     * @param {number} length2 - Length of run2.\r\n     */\r\n    mergeHigh(start1, length1, start2, length2) {\r\n        // const {compare} = this\r\n        // const {array} = this\r\n        // const {tmp} = this\r\n        // const {tmpIndex} = this\r\n        let i = 0\r\n\r\n        for (i = 0; i < length2; i++) {\r\n            // tmp[i] = array[start2 + i]\r\n            this.Writes.auxWrite(i, this.Reads.get(start2 + i), this.tmp)\r\n        }\r\n\r\n        let cursor1 = start1 + length1 - 1\r\n        let cursor2 = length2 - 1\r\n        let dest = start2 + length2 - 1\r\n        let customCursor = 0\r\n        let customDest = 0\r\n\r\n        // array[dest] = array[cursor1]\r\n        this.Writes.write(dest, this.Reads.get(cursor1))\r\n\r\n        dest--\r\n        cursor1--\r\n\r\n        if (--length1 === 0) {\r\n            customCursor = dest - (length2 - 1)\r\n\r\n            for (i = 0; i < length2; i++) {\r\n                // array[customCursor + i] = tmp[i]\r\n                this.Writes.write(customCursor + i, this.Reads.auxGet(i, this.tmp))\r\n            }\r\n\r\n            return\r\n        }\r\n\r\n        if (length2 === 1) {\r\n            dest -= length1\r\n            cursor1 -= length1\r\n            customDest = dest + 1\r\n            customCursor = cursor1 + 1\r\n\r\n            for (i = length1 - 1; i >= 0; i--) {\r\n                // array[customDest + i] = array[customCursor + i]\r\n                this.Writes.write(customDest + i, this.Reads.get(customCursor + i))\r\n            }\r\n\r\n            // array[dest] = tmp[cursor2]\r\n            this.Writes.write(dest, this.Reads.auxGet(cursor2, this.tmp))\r\n            return\r\n        }\r\n\r\n        let {minGallop} = this\r\n\r\n        while (true) {\r\n            let count1 = 0\r\n            let count2 = 0\r\n            let exit = false\r\n\r\n            do {\r\n                // if (compare(tmp[cursor2], array[cursor1]) < 0) {\r\n                if (this.Reads.auxReadValue(cursor2, this.tmp) < this.Reads.readValue(cursor1)) {\r\n                    // array[dest] = array[cursor1]\r\n                    this.Writes.write(dest, this.Reads.get(cursor1))\r\n                    dest--\r\n                    cursor1--\r\n                    count1++\r\n                    count2 = 0\r\n                    if (--length1 === 0) {\r\n                        exit = true\r\n                        break\r\n                    }\r\n                } else {\r\n                    // array[dest] = tmp[cursor2]\r\n                    this.Writes.write(dest, this.Reads.auxGet(cursor2, this.tmp))\r\n                    dest--\r\n                    cursor2--\r\n                    count2++\r\n                    count1 = 0\r\n                    if (--length2 === 1) {\r\n                        exit = true\r\n                        break\r\n                    }\r\n                }\r\n            } while ((count1 | count2) < minGallop)\r\n\r\n            if (exit) {\r\n                break\r\n            }\r\n\r\n            do {\r\n                // count1 = length1 - gallopRight(\r\n                //     tmp[cursor2],\r\n                //     array,\r\n                //     start1,\r\n                //     length1,\r\n                //     length1 - 1,\r\n                //     compare\r\n                // )\r\n                count1 = length1 - this.gallopRight(\r\n                    this.Reads.auxReadValue(cursor2, this.tmp),\r\n                    false,\r\n                    start1,\r\n                    length1,\r\n                    length1 - 1\r\n                )\r\n\r\n                if (count1 !== 0) {\r\n                    dest -= count1\r\n                    cursor1 -= count1\r\n                    length1 -= count1\r\n                    customDest = dest + 1\r\n                    customCursor = cursor1 + 1\r\n\r\n                    for (i = count1 - 1; i >= 0; i--) {\r\n                        // array[customDest + i] = array[customCursor + i]\r\n                        this.Writes.write(customDest + i, this.Reads.get(customCursor + i))\r\n                    }\r\n\r\n                    if (length1 === 0) {\r\n                        exit = true\r\n                        break\r\n                    }\r\n                }\r\n\r\n                // array[dest] = tmp[cursor2]\r\n                this.Writes.write(dest, this.Reads.auxGet(cursor2, this.tmp))\r\n\r\n                dest--\r\n                cursor2--\r\n\r\n                if (--length2 === 1) {\r\n                    exit = true\r\n                    break\r\n                }\r\n\r\n                // count2 = length2 - gallopLeft(\r\n                //     array[cursor1],\r\n                //     tmp,\r\n                //     0,\r\n                //     length2,\r\n                //     length2 - 1,\r\n                //     compare\r\n                // )\r\n\r\n                count2 = length2 - this.gallopLeft(\r\n                    this.Reads.readValue(cursor1),\r\n                    true,\r\n                    0,\r\n                    length2,\r\n                    length2 - 1\r\n                )\r\n\r\n                if (count2 !== 0) {\r\n                    dest -= count2\r\n                    cursor2 -= count2\r\n                    length2 -= count2\r\n                    customDest = dest + 1\r\n                    customCursor = cursor2 + 1\r\n\r\n                    for (i = 0; i < count2; i++) {\r\n                        // array[customDest + i] = tmp[customCursor + i]\r\n                        this.Writes.write(customDest + i, this.Reads.auxGet(customCursor + i, this.tmp))\r\n                    }\r\n\r\n                    if (length2 <= 1) {\r\n                        exit = true\r\n                        break\r\n                    }\r\n                }\r\n\r\n                // array[dest] = array[cursor1]\r\n                this.Writes.write(dest, this.Reads.get(cursor1))\r\n\r\n                dest--\r\n                cursor1--\r\n\r\n                if (--length1 === 0) {\r\n                    exit = true\r\n                    break\r\n                }\r\n\r\n                minGallop--\r\n            } while (\r\n                count1 >= DEFAULT_MIN_GALLOPING\r\n                || count2 >= DEFAULT_MIN_GALLOPING\r\n                )\r\n\r\n            if (exit) {\r\n                break\r\n            }\r\n\r\n            if (minGallop < 0) {\r\n                minGallop = 0\r\n            }\r\n\r\n            minGallop += 2\r\n        }\r\n\r\n        this.minGallop = minGallop\r\n\r\n        if (minGallop < 1) {\r\n            this.minGallop = 1\r\n        }\r\n\r\n        if (length2 === 1) {\r\n            dest -= length1\r\n            cursor1 -= length1\r\n            customDest = dest + 1\r\n            customCursor = cursor1 + 1\r\n\r\n            for (i = length1 - 1; i >= 0; i--) {\r\n                // array[customDest + i] = array[customCursor + i]\r\n                this.Writes.write(customDest + i, this.Reads.get(customCursor + i))\r\n            }\r\n\r\n            // array[dest] = tmp[cursor2]\r\n            // results[dest] = tmpIndex[cursor2]\r\n\r\n            this.Writes.write(dest, this.Reads.auxGet(cursor2, this.tmp))\r\n\r\n\r\n        } else if (length2 === 0) {\r\n            throw new Error('mergeHigh preconditions were not respected')\r\n        } else {\r\n            customCursor = dest - (length2 - 1)\r\n            for (i = 0; i < length2; i++) {\r\n                // array[customCursor + i] = tmp[i]\r\n                this.Writes.write(customCursor + i, this.Reads.auxGet(i, this.tmp))\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    /**\r\n     * Sort an array in the range [lo, hi) using TimSort.\r\n     *\r\n     * @param {array} array - The array to sort.\r\n     * @param {function=} compare - Item comparison function. Default is\r\n     *     alphabetical\r\n     * @param {number} lo - First element in the range (inclusive).\r\n     * @param {number} hi - Last element in the range.\r\n     *     comparator.\r\n     */\r\n    runSort(low, high) {\r\n        this.sort(low, high+1)\r\n    }\r\n\r\n    sort(lo, hi) {\r\n\r\n        let i = 0\r\n\r\n        let remaining = hi - lo\r\n\r\n        // The array is already sorted\r\n        if (remaining < 2) {\r\n            return results\r\n        }\r\n\r\n        let runLength = 0\r\n        // On small arrays binary sort can be used directly\r\n        if (remaining < DEFAULT_MIN_MERGE) {\r\n            runLength = this.makeAscendingRun(lo, hi)\r\n            this.binaryInsertionSort(lo, hi, lo + runLength)\r\n        }\r\n\r\n\r\n        const minRun = minRunLength(remaining)\r\n\r\n        do {\r\n            runLength = this.makeAscendingRun(lo, hi)\r\n            if (runLength < minRun) {\r\n                let force = remaining\r\n                if (force > minRun) {\r\n                    force = minRun\r\n                }\r\n\r\n                this.binaryInsertionSort(lo, lo + force, lo + runLength)\r\n                runLength = force\r\n            }\r\n            // Push new run and merge if necessary\r\n            this.pushRun(lo, runLength)\r\n            this.mergeRuns()\r\n\r\n            // Go find next run\r\n            remaining -= runLength\r\n            lo += runLength\r\n        } while (remaining !== 0)\r\n\r\n        // Force merging of remaining runs\r\n        this.forceMergeRuns()\r\n        this.Writes.removeAuxArray(this.tmp)\r\n    }\r\n}","import {Sort} from \"./Sort\";\r\n\r\n/**\r\n * Default minimum size of a run.\r\n */\r\nconst DEFAULT_MIN_MERGE = 32\r\n\r\n/**\r\n * Minimum ordered subsequece required to do galloping.\r\n */\r\nconst DEFAULT_MIN_GALLOPING = 7\r\n\r\n/**\r\n * Default tmp storage length. Can increase depending on the size of the\r\n * smallest run to merge.\r\n */\r\nconst DEFAULT_TMP_STORAGE_LENGTH = 256\r\n\r\n/**\r\n * Pre-computed powers of 10 for efficient lexicographic comparison of\r\n * small integers.\r\n */\r\nconst POWERS_OF_TEN = [1e0, 1e1, 1e2, 1e3, 1e4, 1e5, 1e6, 1e7, 1e8, 1e9]\r\n\r\nlet results\r\n\r\n/**\r\n * Estimate the logarithm base 10 of a small integer.\r\n *\r\n * @param {number} x - The integer to estimate the logarithm of.\r\n * @return {number} - The estimated logarithm of the integer.\r\n */\r\nconst log10 = x => x < 1e5\r\n    ? x < 1e2\r\n        ? x < 1e1\r\n            ? 0\r\n            : 1\r\n        : x < 1e4\r\n            ? x < 1e3\r\n                ? 2\r\n                : 3\r\n            : 4\r\n    : x < 1e7\r\n        ? x < 1e6\r\n            ? 5\r\n            : 6\r\n        : x < 1e9\r\n            ? x < 1e8\r\n                ? 7\r\n                : 8\r\n            : 9\r\n\r\n/**\r\n * Default alphabetical comparison of items.\r\n *\r\n * @param {string|object|number} a - First element to compare.\r\n * @param {string|object|number} b - Second element to compare.\r\n * @return {number} - A positive number if a.toString() > b.toString(), a\r\n * negative number if .toString() < b.toString(), 0 otherwise.\r\n */\r\nfunction alphabeticalCompare(a, b) {\r\n    if (a === b) {\r\n        return 0\r\n    }\r\n\r\n    if (~~a === a && ~~b === b) {\r\n        if (a === 0 || b === 0) {\r\n            return a < b ? -1 : 1\r\n        }\r\n\r\n        if (a < 0 || b < 0) {\r\n            if (b >= 0) {\r\n                return -1\r\n            }\r\n\r\n            if (a >= 0) {\r\n                return 1\r\n            }\r\n\r\n            a = -a\r\n            b = -b\r\n        }\r\n\r\n        const al = log10(a)\r\n        const bl = log10(b)\r\n\r\n        let t = 0\r\n\r\n        if (al < bl) {\r\n            a *= POWERS_OF_TEN[bl - al - 1]\r\n            b /= 10\r\n            t = -1\r\n        } else if (al > bl) {\r\n            b *= POWERS_OF_TEN[al - bl - 1]\r\n            a /= 10\r\n            t = 1\r\n        }\r\n\r\n        if (a === b) {\r\n            return t\r\n        }\r\n\r\n        return a < b ? -1 : 1\r\n    }\r\n\r\n    const aStr = String(a)\r\n    const bStr = String(b)\r\n\r\n    if (aStr === bStr) {\r\n        return 0\r\n    }\r\n\r\n    return aStr < bStr ? -1 : 1\r\n}\r\n\r\n/**\r\n * Compute minimum run length for TimSort\r\n *\r\n * @param {number} n - The size of the array to sort.\r\n */\r\nfunction minRunLength(n) {\r\n    let r = 0\r\n\r\n    while (n >= DEFAULT_MIN_MERGE) {\r\n        r |= (n & 1)\r\n        n >>= 1\r\n    }\r\n\r\n    return n + r\r\n}\r\n\r\n/**\r\n * Counts the length of a monotonically ascending or strictly monotonically\r\n * descending sequence (run) starting at array[lo] in the range [lo, hi). If\r\n * the run is descending it is made ascending.\r\n *\r\n * @param {array} array - The array to reverse.\r\n * @param {number} lo - First element in the range (inclusive).\r\n * @param {number} hi - Last element in the range.\r\n * @param {function} compare - Item comparison function.\r\n * @return {number} - The length of the run.\r\n */\r\n\r\nexport class TimSort extends Sort {\r\n    constructor(arrayVisualizer) {\r\n        super(arrayVisualizer);\r\n\r\n        this.minGallop = DEFAULT_MIN_GALLOPING\r\n\r\n        this.tmpStorageLength = this.arrLength < 2 * DEFAULT_TMP_STORAGE_LENGTH\r\n            ? this.arrLength >>> 1\r\n            : DEFAULT_TMP_STORAGE_LENGTH\r\n\r\n        // this.tmp = new Array(this.tmpStorageLength)\r\n        this.tmp = this.Writes.createAuxArray(this.tmpStorageLength)\r\n\r\n        this.stackLength = this.arrLength < 120\r\n            ? 5\r\n            : this.arrLength < 1542\r\n                ? 10\r\n                : this.arrLength < 119151\r\n                    ? 19\r\n                    : 40\r\n\r\n        this.runStart = new Array(this.stackLength)\r\n        this.runLength = new Array(this.stackLength)\r\n\r\n        this.stackSize = 0\r\n        this.sortName = \"TimSort\"\r\n    }\r\n\r\n    makeAscendingRun(lo, hi) {\r\n        let runHi = lo + 1\r\n\r\n        if (runHi === hi) {\r\n            return 1\r\n        }\r\n\r\n        // Descending\r\n        // if (compare(array[runHi++], array[lo]) < 0) {\r\n        if (this.Reads.compareInArr(runHi++, lo) < 0) {\r\n            // while (runHi < hi && compare(array[runHi], array[runHi - 1]) < 0) {\r\n            while (runHi < hi && this.Reads.compareInArr(runHi, runHi - 1) < 0) {\r\n                runHi++\r\n            }\r\n\r\n            // this.reverseRun(array, lo, runHi)\r\n            this.reverseRun(lo, runHi)\r\n            // reverseRun(results, lo, runHi)\r\n            // Ascending\r\n        } else {\r\n            // while (runHi < hi && compare(array[runHi], array[runHi - 1]) >= 0) {\r\n            while (runHi < hi && this.Reads.compareInArr(runHi, runHi - 1) >= 0) {\r\n                runHi++\r\n            }\r\n        }\r\n\r\n        return runHi - lo\r\n    }\r\n\r\n    /**\r\n     * Reverse an array in the range [lo, hi).\r\n     *\r\n     * @param {array} array - The array to reverse.\r\n     * @param {number} lo - First element in the range (inclusive).\r\n     * @param {number} hi - Last element in the range.\r\n     */\r\n\r\n\r\n    reverseRun(lo, hi) {\r\n        hi--\r\n\r\n        while (lo < hi) {\r\n            // const t = array[lo]\r\n            // array[lo++] = array[hi]\r\n            // array[hi--] = t\r\n            const t = this.Reads.get(lo)\r\n            this.Writes.write(lo++, this.Reads.get(hi))\r\n            this.Writes.write(hi--, t)\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Perform the binary sort of the array in the range [lo, hi) where start is\r\n     * the first element possibly out of order.\r\n     *\r\n     * @param {array} array - The array to sort.\r\n     * @param {number} lo - First element in the range (inclusive).\r\n     * @param {number} hi - Last element in the range.\r\n     * @param {number} start - First element possibly out of order.\r\n     * @param {} compare - Item comparison function.\r\n     */\r\n\r\n\r\n    binaryInsertionSort(lo, hi, start) {\r\n        if (start === lo) {\r\n            start++\r\n        }\r\n\r\n        for (; start < hi; start++) {\r\n            // const pivot = array[start]\r\n            const pivot = this.Reads.get(start)\r\n\r\n            // const pivotIndex = results[start]\r\n\r\n            // Ranges of the array where pivot belongs\r\n            let left = lo\r\n            let right = start\r\n\r\n            /*\r\n             *   pivot >= array[i] for i in [lo, left)\r\n             *   pivot <  array[i] for i in  in [right, start)\r\n             */\r\n            while (left < right) {\r\n                const mid = (left + right) >>> 1\r\n\r\n                // if (compare(pivot, array[mid]) < 0) {\r\n                // if (pivot.getValue() < this.Reads.readValue(mid)) {\r\n                if (this.Reads.compareValues(pivot, this.Reads.get(mid)) < 0) {\r\n                    right = mid\r\n                } else {\r\n                    left = mid + 1\r\n                }\r\n            }\r\n\r\n            /*\r\n             * Move elements right to make room for the pivot. If there are elements\r\n             * equal to pivot, left points to the first slot after them: this is also\r\n             * a reason for which TimSort is stable\r\n             */\r\n            let n = start - left\r\n            // Switch is just an optimization for small arrays\r\n            switch (n) {\r\n                case 3:\r\n                    // array[left + 3] = array[left + 2]\r\n                    this.Writes.write(left + 3, this.Reads.get(left + 2))\r\n                /* falls through */\r\n                case 2:\r\n                    // array[left + 2] = array[left + 1]\r\n                    this.Writes.write(left + 2, this.Reads.get(left + 1))\r\n                /* falls through */\r\n                case 1:\r\n                    // array[left + 1] = array[left]\r\n                    this.Writes.write(left + 1, this.Reads.get(left))\r\n                    break\r\n                default:\r\n                    while (n > 0) {\r\n                        // array[left + n] = array[left + n - 1]\r\n                        this.Writes.write(left + n, this.Reads.get(left + n - 1))\r\n                        n--\r\n                    }\r\n            }\r\n\r\n            // array[left] = pivot\r\n            this.Writes.write(left, pivot)\r\n            // results[left] = pivotIndex\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Find the position at which to insert a value in a sorted range. If the range\r\n     * contains elements equal to the value the leftmost element index is returned\r\n     * (for stability).\r\n     *\r\n     * @param {number} value - Value to insert.\r\n     * @param {array} array - The array in which to insert value.\r\n     * @param {number} start - First element in the range.\r\n     * @param {number} length - Length of the range.\r\n     * @param {number} hint - The index at which to begin the search.\r\n     * @param {function} compare - Item comparison function.\r\n     * @return {number} - The index where to insert value.\r\n     */\r\n\r\n\r\n    gallopLeft(value, isAux, start, length, hint) {\r\n        let lastOffset = 0\r\n        let maxOffset = 0\r\n        let offset = 1\r\n        if (!isAux) {\r\n            // if (compare(value, array[start + hint]) > 0) {\r\n            // if (value > this.Reads.readValue(start + hint)) {\r\n            if (this.Reads.compareValues(value, this.Reads.get(start + hint)) > 0) {\r\n                maxOffset = length - hint\r\n\r\n                while (\r\n                    offset < maxOffset\r\n                    // && compare(value, array[start + hint + offset]) > 0\r\n                    // && value > this.Reads.readValue(start + hint + offset)\r\n                    && (this.Reads.compareValues(value, this.Reads.get(start + hint + offset)) > 0)\r\n                    ) {\r\n                    lastOffset = offset\r\n                    offset = (offset << 1) + 1\r\n\r\n                    if (offset <= 0) {\r\n                        offset = maxOffset\r\n                    }\r\n                }\r\n\r\n                if (offset > maxOffset) {\r\n                    offset = maxOffset\r\n                }\r\n\r\n                // Make offsets relative to start\r\n                lastOffset += hint\r\n                offset += hint\r\n\r\n                // value <= array[start + hint]\r\n            } else {\r\n                maxOffset = hint + 1\r\n                while (\r\n                    offset < maxOffset\r\n                    // && compare(value, array[start + hint - offset]) <= 0\r\n                    // && value <= this.Reads.readValue(start + hint - offset)\r\n                    // && value <= this.Reads.readValue(start + hint - offset)\r\n                    && (this.Reads.compareValues(value, this.Reads.get(start + hint - offset)) <= 0)\r\n                    ) {\r\n                    lastOffset = offset\r\n                    offset = (offset << 1) + 1\r\n\r\n                    if (offset <= 0) {\r\n                        offset = maxOffset\r\n                    }\r\n                }\r\n                if (offset > maxOffset) {\r\n                    offset = maxOffset\r\n                }\r\n\r\n                // Make offsets relative to start\r\n                const tmp = lastOffset\r\n                lastOffset = hint - offset\r\n                offset = hint - tmp\r\n            }\r\n\r\n            /*\r\n             * Now array[start+lastOffset] < value <= array[start+offset], so value\r\n             * belongs somewhere in the range (start + lastOffset, start + offset]. Do a\r\n             * binary search, with invariant array[start + lastOffset - 1] < value <=\r\n             * array[start + offset].\r\n             */\r\n            lastOffset++\r\n            while (lastOffset < offset) {\r\n                const m = lastOffset + ((offset - lastOffset) >>> 1)\r\n\r\n                // if (compare(value, array[start + m]) > 0) {\r\n                // if (value > this.Reads.readValue(start + m)) {\r\n                if (this.Reads.compareValues(value, this.Reads.get(start + m)) > 0) {\r\n                    lastOffset = m + 1\r\n                } else {\r\n                    offset = m\r\n                }\r\n            }\r\n        } else {\r\n            // if (compare(value, array[start + hint]) > 0) {\r\n            // if (value > this.Reads.auxReadValue(start + hint, this.tmp)) {\r\n            if (this.Reads.compareValues(value, this.Reads.auxReadValue(start + hint, this.tmp)) > 0) {\r\n                maxOffset = length - hint\r\n\r\n                while (\r\n                    offset < maxOffset\r\n                    // && compare(value, array[start + hint + offset]) > 0\r\n                    // && value > this.Reads.auxReadValue(start + hint + offset, this.tmp)\r\n                    && (this.Reads.compareValues(value, this.Reads.auxReadValue(start + hint + offset, this.tmp)) > 0)\r\n                    ) {\r\n                    lastOffset = offset\r\n                    offset = (offset << 1) + 1\r\n\r\n                    if (offset <= 0) {\r\n                        offset = maxOffset\r\n                    }\r\n                }\r\n\r\n                if (offset > maxOffset) {\r\n                    offset = maxOffset\r\n                }\r\n\r\n                // Make offsets relative to start\r\n                lastOffset += hint\r\n                offset += hint\r\n\r\n                // value <= array[start + hint]\r\n            } else {\r\n                maxOffset = hint + 1\r\n                while (\r\n                    offset < maxOffset\r\n                    // && compare(value, array[start + hint - offset]) <= 0\r\n                    // && value <= this.Reads.auxRead(start + hint - offset, this.tmp)\r\n                    // && value <= this.Reads.auxReadValue(start + hint - offset, this.tmp)\r\n                    && (this.Reads.compareValues(value, this.Reads.auxReadValue(start + hint - offset, this.tmp)) <= 0)\r\n                    ) {\r\n                    lastOffset = offset\r\n                    offset = (offset << 1) + 1\r\n\r\n                    if (offset <= 0) {\r\n                        offset = maxOffset\r\n                    }\r\n                }\r\n                if (offset > maxOffset) {\r\n                    offset = maxOffset\r\n                }\r\n\r\n                // Make offsets relative to start\r\n                const tmp = lastOffset\r\n                lastOffset = hint - offset\r\n                offset = hint - tmp\r\n            }\r\n\r\n            /*\r\n             * Now array[start+lastOffset] < value <= array[start+offset], so value\r\n             * belongs somewhere in the range (start + lastOffset, start + offset]. Do a\r\n             * binary search, with invariant array[start + lastOffset - 1] < value <=\r\n             * array[start + offset].\r\n             */\r\n            lastOffset++\r\n            while (lastOffset < offset) {\r\n                const m = lastOffset + ((offset - lastOffset) >>> 1)\r\n\r\n                // if (compare(value, array[start + m]) > 0) {\r\n                // if (value > this.Reads.auxReadValue(start + m, this.tmp)) {\r\n                if (this.Reads.compareValues(value, this.Reads.auxReadValue(start + m, this.tmp)) > 0) {\r\n                    lastOffset = m + 1\r\n                } else {\r\n                    offset = m\r\n                }\r\n            }\r\n        }\r\n        return offset\r\n    }\r\n\r\n    /**\r\n     * Find the position at which to insert a value in a sorted range. If the range\r\n     * contains elements equal to the value the rightmost element index is returned\r\n     * (for stability).\r\n     *\r\n     * @param {number} value - Value to insert.\r\n     * @param {array} array - The array in which to insert value.\r\n     * @param {number} start - First element in the range.\r\n     * @param {number} length - Length of the range.\r\n     * @param {number} hint - The index at which to begin the search.\r\n     * @param {function} compare - Item comparison function.\r\n     * @return {number} - The index where to insert value.\r\n     */\r\n\r\n\r\n    gallopRight(value, isAux, start, length, hint) {\r\n        let lastOffset = 0\r\n        let maxOffset = 0\r\n        let offset = 1\r\n\r\n        if (!isAux) {\r\n            // if (compare(value, array[start + hint]) < 0) {\r\n            // if (value < this.Reads.readValue(start + hint)) {\r\n            if (this.Reads.compareValues(value, this.Reads.get(start + hint)) < 0) {\r\n                maxOffset = hint + 1\r\n\r\n                while (\r\n                    offset < maxOffset\r\n                    // && compare(value, array[start + hint - offset]) < 0\r\n                    // && value < this.Reads.readValue(start + hint - offset)\r\n                    && (this.Reads.compareValues(value, this.Reads.get(start + hint - offset)) < 0)\r\n                    ) {\r\n                    lastOffset = offset\r\n                    offset = (offset << 1) + 1\r\n\r\n                    if (offset <= 0) {\r\n                        offset = maxOffset\r\n                    }\r\n                }\r\n\r\n                if (offset > maxOffset) {\r\n                    offset = maxOffset\r\n                }\r\n\r\n                // Make offsets relative to start\r\n                const tmp = lastOffset\r\n                lastOffset = hint - offset\r\n                offset = hint - tmp\r\n\r\n                // value >= array[start + hint]\r\n            } else {\r\n                maxOffset = length - hint\r\n\r\n                while (\r\n                    offset < maxOffset\r\n                    // && compare(value, array[start + hint + offset]) >= 0\r\n                    // && value >= this.Reads.readValue(start + hint + offset)\r\n                    && (this.Reads.compareValues(value, this.Reads.get(start + hint + offset)) >= 0)\r\n                    ) {\r\n                    lastOffset = offset\r\n                    offset = (offset << 1) + 1\r\n\r\n                    if (offset <= 0) {\r\n                        offset = maxOffset\r\n                    }\r\n                }\r\n\r\n                if (offset > maxOffset) {\r\n                    offset = maxOffset\r\n                }\r\n\r\n                // Make offsets relative to start\r\n                lastOffset += hint\r\n                offset += hint\r\n            }\r\n\r\n            /*\r\n             * Now array[start+lastOffset] < value <= array[start+offset], so value\r\n             * belongs somewhere in the range (start + lastOffset, start + offset]. Do a\r\n             * binary search, with invariant array[start + lastOffset - 1] < value <=\r\n             * array[start + offset].\r\n             */\r\n            lastOffset++\r\n\r\n            while (lastOffset < offset) {\r\n                const m = lastOffset + ((offset - lastOffset) >>> 1)\r\n\r\n                // if (compare(value, array[start + m]) < 0) {\r\n                // if (value < this.Reads.readValue(start + m)) {\r\n                if (this.Reads.compareValues(value, this.Reads.get(start + m)) < 0) {\r\n                    offset = m\r\n                } else {\r\n                    lastOffset = m + 1\r\n                }\r\n            }\r\n\r\n        } else {\r\n            //AUX\r\n            // if (compare(value, array[start + hint]) < 0) {\r\n            // if (value < this.Reads.auxReadValue(start + hint, this.tmp)) { WARN\r\n            if (this.Reads.compareValues(value, this.Reads.auxReadValue(start + hint, this.tmp)) < 0) {\r\n                maxOffset = hint + 1\r\n\r\n                while (\r\n                    offset < maxOffset\r\n                    // && compare(value, array[start + hint - offset]) < 0\r\n                    // && value < this.Reads.auxReadValue(start + hint - offset, this.tmp) WARN\r\n                    && (this.Reads.compareValues(value, this.Reads.auxReadValue(start + hint - offset, this.tmp)) < 0)\r\n                    ) {\r\n                    lastOffset = offset\r\n                    offset = (offset << 1) + 1\r\n\r\n                    if (offset <= 0) {\r\n                        offset = maxOffset\r\n                    }\r\n                }\r\n\r\n                if (offset > maxOffset) {\r\n                    offset = maxOffset\r\n                }\r\n\r\n                // Make offsets relative to start\r\n                const tmp = lastOffset\r\n                lastOffset = hint - offset\r\n                offset = hint - tmp\r\n\r\n                // value >= array[start + hint]\r\n            } else {\r\n                maxOffset = length - hint\r\n\r\n                while (\r\n                    offset < maxOffset\r\n                    // && compare(value, array[start + hint + offset]) >= 0\r\n                    // && value >= this.Reads.auxReadValue(start + hint + offset, this.tmp)\r\n                    && (this.Reads.compareInArr(value, this.Reads.auxReadValue(start + hint + offset, this.tmp)) >= 0)\r\n                    ) {\r\n                    lastOffset = offset\r\n                    offset = (offset << 1) + 1\r\n\r\n                    if (offset <= 0) {\r\n                        offset = maxOffset\r\n                    }\r\n                }\r\n\r\n                if (offset > maxOffset) {\r\n                    offset = maxOffset\r\n                }\r\n\r\n                // Make offsets relative to start\r\n                lastOffset += hint\r\n                offset += hint\r\n            }\r\n\r\n            /*\r\n             * Now array[start+lastOffset] < value <= array[start+offset], so value\r\n             * belongs somewhere in the range (start + lastOffset, start + offset]. Do a\r\n             * binary search, with invariant array[start + lastOffset - 1] < value <=\r\n             * array[start + offset].\r\n             */\r\n            lastOffset++\r\n\r\n            while (lastOffset < offset) {\r\n                const m = lastOffset + ((offset - lastOffset) >>> 1)\r\n\r\n                // if (compare(value, array[start + m]) < 0) {\r\n                // if (value < this.Reads.auxReadValue(start + m, this.tmp)) {\r\n                if (this.Reads.compareValues(value, this.Reads.auxReadValue(start + m, this.tmp)) < 0) {\r\n                    offset = m\r\n                } else {\r\n                    lastOffset = m + 1\r\n                }\r\n            }\r\n        }\r\n\r\n        return offset\r\n    }\r\n\r\n\r\n    /**\r\n     * Push a new run on TimSort's stack.\r\n     *\r\n     * @param {number} runStart - Start index of the run in the original array.\r\n     * @param {number} runLength - Length of the run;\r\n     */\r\n    pushRun(runStart, runLength) {\r\n        this.runStart[this.stackSize] = runStart\r\n        this.runLength[this.stackSize] = runLength\r\n        this.stackSize += 1\r\n    }\r\n\r\n    /**\r\n     * Merge runs on TimSort's stack so that the following holds for all i:\r\n     * 1) runLength[i - 3] > runLength[i - 2] + runLength[i - 1]\r\n     * 2) runLength[i - 2] > runLength[i - 1]\r\n     */\r\n    mergeRuns() {\r\n        while (this.stackSize > 1) {\r\n            let n = this.stackSize - 2\r\n\r\n            if (\r\n                (\r\n                    n >= 1\r\n                    && this.runLength[n - 1] <= this.runLength[n] + this.runLength[n + 1]\r\n                )\r\n                || (\r\n                    n >= 2\r\n                    && this.runLength[n - 2] <= this.runLength[n] + this.runLength[n - 1]\r\n                )\r\n            ) {\r\n                if (this.runLength[n - 1] < this.runLength[n + 1]) {\r\n                    n--\r\n                }\r\n            } else if (this.runLength[n] > this.runLength[n + 1]) {\r\n                break\r\n            }\r\n            this.mergeAt(n)\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Merge all runs on TimSort's stack until only one remains.\r\n     */\r\n    forceMergeRuns() {\r\n        while (this.stackSize > 1) {\r\n            let n = this.stackSize - 2\r\n\r\n            if (n > 0 && this.runLength[n - 1] < this.runLength[n + 1]) {\r\n                n--\r\n            }\r\n\r\n            this.mergeAt(n)\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Merge the runs on the stack at positions i and i+1. Must be always be called\r\n     * with i=stackSize-2 or i=stackSize-3 (that is, we merge on top of the stack).\r\n     *\r\n     * @param {number} i - Index of the run to merge in TimSort's stack.\r\n     */\r\n    mergeAt(i) {\r\n        let start1 = this.runStart[i]\r\n        let length1 = this.runLength[i]\r\n        const start2 = this.runStart[i + 1]\r\n        let length2 = this.runLength[i + 1]\r\n\r\n        this.runLength[i] = length1 + length2\r\n\r\n        if (i === this.stackSize - 3) {\r\n            this.runStart[i + 1] = this.runStart[i + 2]\r\n            this.runLength[i + 1] = this.runLength[i + 2]\r\n        }\r\n\r\n        this.stackSize--\r\n\r\n        /*\r\n         * Find where the first element in the second run goes in run1. Previous\r\n         * elements in run1 are already in place\r\n         */\r\n        // const k = gallopRight(array[start2], array, start1, length1, 0, compare)\r\n        const k = this.gallopRight(this.Reads.readValue(start2), false, start1, length1, 0)\r\n        start1 += k\r\n        length1 -= k\r\n\r\n        if (length1 === 0) {\r\n            return\r\n        }\r\n\r\n        /*\r\n         * Find where the last element in the first run goes in run2. Next elements\r\n         * in run2 are already in place\r\n         */\r\n        // length2 = gallopLeft(\r\n        //     array[start1 + length1 - 1],\r\n        //     array,\r\n        //     start2,\r\n        //     length2,\r\n        //     length2 - 1,\r\n        //     compare\r\n        // )\r\n        length2 = this.gallopLeft(\r\n            // array[start1 + length1 - 1],\r\n            this.Reads.readValue(start1 + length1 - 1),\r\n            false,\r\n            start2,\r\n            length2,\r\n            length2 - 1,\r\n        )\r\n\r\n        if (length2 === 0) {\r\n            return\r\n        }\r\n\r\n        /*\r\n         * Merge remaining runs. A tmp array with length = min(length1, length2) is\r\n         * used\r\n         */\r\n        if (length1 <= length2) {\r\n            this.mergeLow(start1, length1, start2, length2)\r\n        } else {\r\n            this.mergeHigh(start1, length1, start2, length2)\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Merge two adjacent runs in a stable way. The runs must be such that the\r\n     * first element of run1 is bigger than the first element in run2 and the\r\n     * last element of run1 is greater than all the elements in run2.\r\n     * The method should be called when run1.length <= run2.length as it uses\r\n     * TimSort temporary array to store run1. Use mergeHigh if run1.length >\r\n     * run2.length.\r\n     *\r\n     * @param {number} start1 - First element in run1.\r\n     * @param {number} length1 - Length of run1.\r\n     * @param {number} start2 - First element in run2.\r\n     * @param {number} length2 - Length of run2.\r\n     */\r\n    mergeLow(start1, length1, start2, length2) {\r\n        // const {compare} = this\r\n        // const {array} = this\r\n        // const {tmp} = this\r\n        // const {tmpIndex} = this\r\n        // const {compare} = this\r\n        // const {array} = this\r\n        // const {tmp} = this\r\n        // const {tmpIndex} = this\r\n        let i = 0\r\n\r\n        for (i = 0; i < length1; i++) {\r\n            // tmp[i] = array[start1 + i]\r\n            this.Writes.auxWrite(i, this.Reads.get(start1 + i), this.tmp)\r\n        }\r\n\r\n        let cursor1 = 0\r\n        let cursor2 = start2\r\n        let dest = start1\r\n\r\n\r\n        // array[dest] = array[cursor2]\r\n        this.Writes.write(dest, this.Reads.get(cursor2))\r\n\r\n\r\n        dest++\r\n        cursor2++\r\n\r\n        if (--length2 === 0) {\r\n            for (i = 0; i < length1; i++) {\r\n                // array[dest + i] = tmp[cursor1 + i]\r\n                this.Writes.write(dest + i, this.Reads.auxGet(cursor1 + i, this.tmp))\r\n            }\r\n            return\r\n        }\r\n\r\n        if (length1 === 1) {\r\n            for (i = 0; i < length2; i++) {\r\n                // array[dest + i] = array[cursor2 + i]\r\n\r\n                this.Writes.write(dest + i, this.Reads.get(cursor2 + i))\r\n            }\r\n            // array[dest + length2] = tmp[cursor1]\r\n            this.Writes.write(dest + length2, this.Reads.auxGet(cursor1, this.tmp))\r\n            return\r\n        }\r\n\r\n        let {minGallop} = this\r\n\r\n        while (true) {\r\n            let count1 = 0\r\n            let count2 = 0\r\n            let exit = false\r\n\r\n            do {\r\n                // if (compare(array[cursor2], tmp[cursor1]) < 0) {\r\n                // if (this.Reads.readValue(cursor2) < this.Reads.auxReadValue(cursor1, this.tmp)) {\r\n                if (this.Reads.compareValues(this.Reads.get(cursor2), this.Reads.auxReadValue(cursor1, this.tmp)) < 0) {\r\n                    // array[dest] = array[cursor2]\r\n                    this.Writes.write(dest, this.Reads.get(cursor2))\r\n                    dest++\r\n                    cursor2++\r\n                    count2++\r\n                    count1 = 0\r\n\r\n                    if (--length2 === 0) {\r\n                        exit = true\r\n                        break\r\n                    }\r\n                } else {\r\n                    // array[dest] = tmp[cursor1]\r\n                    this.Writes.write(dest, this.Reads.auxGet(cursor1, this.tmp))\r\n\r\n                    dest++\r\n                    cursor1++\r\n                    count1++\r\n                    count2 = 0\r\n                    if (--length1 === 1) {\r\n                        exit = true\r\n                        break\r\n                    }\r\n                }\r\n            } while ((count1 | count2) < minGallop)\r\n\r\n            if (exit) {\r\n                break\r\n            }\r\n\r\n            do {\r\n                // count1 = gallopRight(array[cursor2], tmp, cursor1, length1, 0, compare)\r\n                count1 = this.gallopRight(this.Reads.readValue(cursor2), true, cursor1, length1, 0)\r\n\r\n                if (count1 !== 0) {\r\n                    for (i = 0; i < count1; i++) {\r\n                        // array[dest + i] = tmp[cursor1 + i]\r\n                        // results[dest + i] = tmpIndex[cursor1 + i]\r\n                        this.Writes.write(dest + i, this.Reads.auxGet(cursor1 + i, this.tmp))\r\n                    }\r\n\r\n                    dest += count1\r\n                    cursor1 += count1\r\n                    length1 -= count1\r\n                    if (length1 <= 1) {\r\n                        exit = true\r\n                        break\r\n                    }\r\n                }\r\n\r\n                // array[dest] = array[cursor2]\r\n                // results[dest] = results[cursor2]\r\n                this.Writes.write(dest, this.Reads.get(cursor2))\r\n\r\n                dest++\r\n                cursor2++\r\n\r\n                if (--length2 === 0) {\r\n                    exit = true\r\n                    break\r\n                }\r\n\r\n                // count2 = this.gallopLeft(tmp[cursor1], array, cursor2, length2, 0, compare)\r\n                count2 = this.gallopLeft(this.Reads.auxReadValue(cursor1, this.tmp), false, cursor2, length2, 0)\r\n\r\n                if (count2 !== 0) {\r\n                    for (i = 0; i < count2; i++) {\r\n                        // array[dest + i] = array[cursor2 + i]\r\n                        // results[dest + i] = results[cursor2 + i]\r\n                        this.Writes.write(dest + i, this.Reads.get(cursor2 + i))\r\n                    }\r\n\r\n                    dest += count2\r\n                    cursor2 += count2\r\n                    length2 -= count2\r\n\r\n                    if (length2 === 0) {\r\n                        exit = true\r\n                        break\r\n                    }\r\n                }\r\n                // array[dest] = tmp[cursor1]\r\n                // results[dest] = tmpIndex[cursor1]\r\n\r\n                this.Writes.write(dest, this.Reads.auxGet(cursor1, this.tmp))\r\n\r\n                dest++\r\n                cursor1++\r\n\r\n                if (--length1 === 1) {\r\n                    exit = true\r\n                    break\r\n                }\r\n\r\n                minGallop--\r\n            } while (\r\n                count1 >= DEFAULT_MIN_GALLOPING\r\n                || count2 >= DEFAULT_MIN_GALLOPING\r\n                )\r\n\r\n            if (exit) {\r\n                break\r\n            }\r\n\r\n            if (minGallop < 0) {\r\n                minGallop = 0\r\n            }\r\n\r\n            minGallop += 2\r\n        }\r\n\r\n        this.minGallop = minGallop\r\n\r\n        if (minGallop < 1) {\r\n            this.minGallop = 1\r\n        }\r\n\r\n        if (length1 === 1) {\r\n            for (i = 0; i < length2; i++) {\r\n                // array[dest + i] = array[cursor2 + i]\r\n                // results[dest + i] = results[cursor2 + i]\r\n                this.Writes.write(dest + i, this.Reads.get(cursor2 + i))\r\n            }\r\n            // array[dest + length2] = tmp[cursor1]\r\n            // results[dest + length2] = tmpIndex[cursor1]\r\n            this.Writes.write(dest + length2, this.Reads.auxGet(cursor1, this.tmp))\r\n        } else if (length1 === 0) {\r\n            throw new Error('mergeLow preconditions were not respected')\r\n        } else {\r\n            for (i = 0; i < length1; i++) {\r\n                // array[dest + i] = tmp[cursor1 + i]\r\n                // results[dest + i] = tmpIndex[cursor1 + i]\r\n                this.Writes.write(dest + i, this.Reads.auxGet(cursor1 + i, this.tmp))\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Merge two adjacent runs in a stable way. The runs must be such that the\r\n     * first element of run1 is bigger than the first element in run2 and the\r\n     * last element of run1 is greater than all the elements in run2.\r\n     * The method should be called when run1.length > run2.length as it uses\r\n     * TimSort temporary array to store run2. Use mergeLow if run1.length <=\r\n     * run2.length.\r\n     *\r\n     * @param {number} start1 - First element in run1.\r\n     * @param {number} length1 - Length of run1.\r\n     * @param {number} start2 - First element in run2.\r\n     * @param {number} length2 - Length of run2.\r\n     */\r\n    mergeHigh(start1, length1, start2, length2) {\r\n        // const {compare} = this\r\n        // const {array} = this\r\n        // const {tmp} = this\r\n        // const {tmpIndex} = this\r\n        let i = 0\r\n\r\n        for (i = 0; i < length2; i++) {\r\n            // tmp[i] = array[start2 + i]\r\n            this.Writes.auxWrite(i, this.Reads.get(start2 + i), this.tmp)\r\n        }\r\n\r\n        let cursor1 = start1 + length1 - 1\r\n        let cursor2 = length2 - 1\r\n        let dest = start2 + length2 - 1\r\n        let customCursor = 0\r\n        let customDest = 0\r\n\r\n        // array[dest] = array[cursor1]\r\n        this.Writes.write(dest, this.Reads.get(cursor1))\r\n\r\n        dest--\r\n        cursor1--\r\n\r\n        if (--length1 === 0) {\r\n            customCursor = dest - (length2 - 1)\r\n\r\n            for (i = 0; i < length2; i++) {\r\n                // array[customCursor + i] = tmp[i]\r\n                this.Writes.write(customCursor + i, this.Reads.auxGet(i, this.tmp))\r\n            }\r\n\r\n            return\r\n        }\r\n\r\n        if (length2 === 1) {\r\n            dest -= length1\r\n            cursor1 -= length1\r\n            customDest = dest + 1\r\n            customCursor = cursor1 + 1\r\n\r\n            for (i = length1 - 1; i >= 0; i--) {\r\n                // array[customDest + i] = array[customCursor + i]\r\n                this.Writes.write(customDest + i, this.Reads.get(customCursor + i))\r\n            }\r\n\r\n            // array[dest] = tmp[cursor2]\r\n            this.Writes.write(dest, this.Reads.auxGet(cursor2, this.tmp))\r\n            return\r\n        }\r\n\r\n        let {minGallop} = this\r\n\r\n        while (true) {\r\n            let count1 = 0\r\n            let count2 = 0\r\n            let exit = false\r\n\r\n            do {\r\n                // if (compare(tmp[cursor2], array[cursor1]) < 0) {\r\n                // if (this.Reads.auxReadValue(cursor2, this.tmp) < this.Reads.readValue(cursor1)) {\r\n                if (this.Reads.compareValues(this.Reads.auxReadValue(cursor2, this.tmp), this.Reads.get(cursor1)) < 0) {\r\n                    // array[dest] = array[cursor1]\r\n                    this.Writes.write(dest, this.Reads.get(cursor1))\r\n                    dest--\r\n                    cursor1--\r\n                    count1++\r\n                    count2 = 0\r\n                    if (--length1 === 0) {\r\n                        exit = true\r\n                        break\r\n                    }\r\n                } else {\r\n                    // array[dest] = tmp[cursor2]\r\n                    this.Writes.write(dest, this.Reads.auxGet(cursor2, this.tmp))\r\n                    dest--\r\n                    cursor2--\r\n                    count2++\r\n                    count1 = 0\r\n                    if (--length2 === 1) {\r\n                        exit = true\r\n                        break\r\n                    }\r\n                }\r\n            } while ((count1 | count2) < minGallop)\r\n\r\n            if (exit) {\r\n                break\r\n            }\r\n\r\n            do {\r\n                // count1 = length1 - gallopRight(\r\n                //     tmp[cursor2],\r\n                //     array,\r\n                //     start1,\r\n                //     length1,\r\n                //     length1 - 1,\r\n                //     compare\r\n                // )\r\n                count1 = length1 - this.gallopRight(\r\n                    this.Reads.auxReadValue(cursor2, this.tmp),\r\n                    false,\r\n                    start1,\r\n                    length1,\r\n                    length1 - 1\r\n                )\r\n\r\n                if (count1 !== 0) {\r\n                    dest -= count1\r\n                    cursor1 -= count1\r\n                    length1 -= count1\r\n                    customDest = dest + 1\r\n                    customCursor = cursor1 + 1\r\n\r\n                    for (i = count1 - 1; i >= 0; i--) {\r\n                        // array[customDest + i] = array[customCursor + i]\r\n                        this.Writes.write(customDest + i, this.Reads.get(customCursor + i))\r\n                    }\r\n\r\n                    if (length1 === 0) {\r\n                        exit = true\r\n                        break\r\n                    }\r\n                }\r\n\r\n                // array[dest] = tmp[cursor2]\r\n                this.Writes.write(dest, this.Reads.auxGet(cursor2, this.tmp))\r\n\r\n                dest--\r\n                cursor2--\r\n\r\n                if (--length2 === 1) {\r\n                    exit = true\r\n                    break\r\n                }\r\n\r\n                // count2 = length2 - gallopLeft(\r\n                //     array[cursor1],\r\n                //     tmp,\r\n                //     0,\r\n                //     length2,\r\n                //     length2 - 1,\r\n                //     compare\r\n                // )\r\n\r\n                count2 = length2 - this.gallopLeft(\r\n                    this.Reads.readValue(cursor1),\r\n                    true,\r\n                    0,\r\n                    length2,\r\n                    length2 - 1\r\n                )\r\n\r\n                if (count2 !== 0) {\r\n                    dest -= count2\r\n                    cursor2 -= count2\r\n                    length2 -= count2\r\n                    customDest = dest + 1\r\n                    customCursor = cursor2 + 1\r\n\r\n                    for (i = 0; i < count2; i++) {\r\n                        // array[customDest + i] = tmp[customCursor + i]\r\n                        this.Writes.write(customDest + i, this.Reads.auxGet(customCursor + i, this.tmp))\r\n                    }\r\n\r\n                    if (length2 <= 1) {\r\n                        exit = true\r\n                        break\r\n                    }\r\n                }\r\n\r\n                // array[dest] = array[cursor1]\r\n                this.Writes.write(dest, this.Reads.get(cursor1))\r\n\r\n                dest--\r\n                cursor1--\r\n\r\n                if (--length1 === 0) {\r\n                    exit = true\r\n                    break\r\n                }\r\n\r\n                minGallop--\r\n            } while (\r\n                count1 >= DEFAULT_MIN_GALLOPING\r\n                || count2 >= DEFAULT_MIN_GALLOPING\r\n                )\r\n\r\n            if (exit) {\r\n                break\r\n            }\r\n\r\n            if (minGallop < 0) {\r\n                minGallop = 0\r\n            }\r\n\r\n            minGallop += 2\r\n        }\r\n\r\n        this.minGallop = minGallop\r\n\r\n        if (minGallop < 1) {\r\n            this.minGallop = 1\r\n        }\r\n\r\n        if (length2 === 1) {\r\n            dest -= length1\r\n            cursor1 -= length1\r\n            customDest = dest + 1\r\n            customCursor = cursor1 + 1\r\n\r\n            for (i = length1 - 1; i >= 0; i--) {\r\n                // array[customDest + i] = array[customCursor + i]\r\n                this.Writes.write(customDest + i, this.Reads.get(customCursor + i))\r\n            }\r\n\r\n            // array[dest] = tmp[cursor2]\r\n            // results[dest] = tmpIndex[cursor2]\r\n\r\n            this.Writes.write(dest, this.Reads.auxGet(cursor2, this.tmp))\r\n\r\n\r\n        } else if (length2 === 0) {\r\n            throw new Error('mergeHigh preconditions were not respected')\r\n        } else {\r\n            customCursor = dest - (length2 - 1)\r\n            for (i = 0; i < length2; i++) {\r\n                // array[customCursor + i] = tmp[i]\r\n                this.Writes.write(customCursor + i, this.Reads.auxGet(i, this.tmp))\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    /**\r\n     * Sort an array in the range [lo, hi) using TimSort.\r\n     *\r\n     * @param {array} array - The array to sort.\r\n     * @param {function=} compare - Item comparison function. Default is\r\n     *     alphabetical\r\n     * @param {number} lo - First element in the range (inclusive).\r\n     * @param {number} hi - Last element in the range.\r\n     *     comparator.\r\n     */\r\n    runSort(low, high) {\r\n        this.sort(low, high + 1)\r\n        this.sort(low, high + 1)\r\n    }\r\n\r\n    sort(lo, hi) {\r\n\r\n        let i = 0\r\n\r\n        let remaining = hi - lo\r\n\r\n        // The array is already sorted\r\n        if (remaining < 2) {\r\n            return results\r\n        }\r\n\r\n        let runLength = 0\r\n        // On small arrays binary sort can be used directly\r\n        if (remaining < DEFAULT_MIN_MERGE) {\r\n            runLength = this.makeAscendingRun(lo, hi)\r\n            this.binaryInsertionSort(lo, hi, lo + runLength)\r\n        }\r\n\r\n\r\n        const minRun = minRunLength(remaining)\r\n\r\n        do {\r\n            runLength = this.makeAscendingRun(lo, hi)\r\n            if (runLength < minRun) {\r\n                let force = remaining\r\n                if (force > minRun) {\r\n                    force = minRun\r\n                }\r\n\r\n                this.binaryInsertionSort(lo, lo + force, lo + runLength)\r\n                runLength = force\r\n            }\r\n            // Push new run and merge if necessary\r\n            this.pushRun(lo, runLength)\r\n            this.mergeRuns()\r\n\r\n            // Go find next run\r\n            remaining -= runLength\r\n            lo += runLength\r\n        } while (remaining !== 0)\r\n\r\n        // Force merging of remaining runs\r\n        this.forceMergeRuns()\r\n        this.Writes.removeAuxArray(this.tmp)\r\n    }\r\n}","/*\r\n *\r\nThis is free and unencumbered software released into the public domain.\r\n\r\nAnyone is free to copy, modify, publish, use, compile, sell, or\r\ndistribute this software, either in source code form or as a compiled\r\nbinary, for any purpose, commercial or non-commercial, and by any\r\nmeans.\r\n\r\nIn jurisdictions that recognize copyright laws, the author or authors\r\nof this software dedicate any and all copyright interest in the\r\nsoftware to the public domain. We make this dedication for the benefit\r\nof the public at large and to the detriment of our heirs and\r\nsuccessors. We intend this dedication to be an overt act of\r\nrelinquishment in perpetuity of all present and future rights to this\r\nsoftware under copyright law.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\r\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\r\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\r\nIN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR\r\nOTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,\r\nARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR\r\nOTHER DEALINGS IN THE SOFTWARE.\r\n\r\nFor more information, please refer to <http://unlicense.org>\r\n *\r\n */\r\n\r\n// structure to represent ranges within the array\r\nconst {InsertionSort} = require(\"./InsertionSort\");\r\nconst {Sort} = require(\"./Sort\");\r\n\r\nclass Range {\r\n    start;\r\n    end;\r\n\r\n    constructor(start1 = 0, end1 = 0) {\r\n        this.start = start1;\r\n        this.end = end1;\r\n    }\r\n\r\n    set(start1, end1) {\r\n        this.start = start1;\r\n        this.end = end1;\r\n    }\r\n\r\n    length() {\r\n        return this.end - this.start;\r\n    }\r\n}\r\n\r\nclass Pull {\r\n    from\r\n    to\r\n    count;\r\n    range;\r\n\r\n    constructor() {\r\n        this.range = new Range(0, 0);\r\n    }\r\n\r\n    reset() {\r\n        this.range.set(0, 0);\r\n        this.from = 0;\r\n        this.to = 0;\r\n        this.count = 0;\r\n    }\r\n}\r\n\r\n// calculate how to scale the index value to the range within the array\r\n// the bottom-up merge sort only operates on values that are powers of two,\r\n// so scale down to that power of two, then use a fraction to scale back again\r\nclass Iterator {\r\n    size;\r\n    power_of_two;\r\n    numerator;\r\n    decimal;\r\n    denominator;\r\n    decimal_step;\r\n    numerator_step;\r\n\r\n    // 63 -> 32, 64 -> 64, etc.\r\n    // this comes from Hacker's Delight\r\n    FloorPowerOfTwo(value) {\r\n        let x = value;\r\n        x = x | (x >> 1);\r\n        x = x | (x >> 2);\r\n        x = x | (x >> 4);\r\n        x = x | (x >> 8);\r\n        x = x | (x >> 16);\r\n        return Math.trunc(x - (x >> 1));\r\n    }\r\n\r\n    constructor(size2, min_level) {\r\n        this.size = size2;\r\n        this.power_of_two = this.FloorPowerOfTwo(this.size);\r\n        // this.denominator = this.power_of_two / min_level;\r\n        this.denominator = Math.trunc(this.power_of_two / min_level);\r\n        this.numerator_step = this.size % this.denominator;\r\n        // this.decimal_step = this.size / this.denominator;\r\n        this.decimal_step = Math.trunc(this.size / this.denominator);\r\n        this.begin();\r\n    }\r\n\r\n    begin() {\r\n        this.numerator = this.decimal = 0;\r\n    }\r\n\r\n    nextRange() {\r\n        let start = this.decimal;\r\n\r\n        this.decimal += this.decimal_step;\r\n        this.numerator += this.numerator_step;\r\n        if (this.numerator >= this.denominator) {\r\n            this.numerator -= this.denominator;\r\n            this.decimal++;\r\n        }\r\n\r\n        return new Range(start, this.decimal);\r\n    }\r\n\r\n    finished() {\r\n        return (this.decimal >= this.size);\r\n    }\r\n\r\n    nextLevel() {\r\n        this.decimal_step += this.decimal_step;\r\n        this.numerator_step += this.numerator_step;\r\n        if (this.numerator_step >= this.denominator) {\r\n            this.numerator_step -= this.denominator;\r\n            this.decimal_step++;\r\n        }\r\n\r\n        return (this.decimal_step < this.size);\r\n    }\r\n\r\n    length() {\r\n        return this.decimal_step;\r\n    }\r\n}\r\n\r\nexport class WikiSort extends Sort {\r\n    // use a small cache to speed up some of the operations\r\n    // since the cache size is fixed, it's still O(1) memory!\r\n    // just keep in mind that making it too small ruins the point (nothing will fit into it),\r\n    // and making it too large also ruins the point (so much for \"low memory\"!)\r\n\r\n    cache_size = 0;\r\n    cache = null;\r\n    // note that you can easily modify the above to allocate a dynamically sized cache\r\n    // good choices for the cache size are:\r\n\r\n    // (size + 1)/2 – turns into a full-speed standard merge sort since everything fits into the cache\r\n    // sqrt((size + 1)/2) + 1 – this will be the size of the A blocks at the largest level of merges,\r\n    // so a buffer of this size would allow it to skip using internal or in-place merges for anything\r\n\r\n    // Original static buffer = 512 – chosen from careful testing as a good balance between fixed-size memory use and run time\r\n    // ArrayVisualizer static buffer = 32, as the numbers of items we use for visual purposes is relatively small\r\n\r\n    // 0 – if the system simply cannot allocate any extra memory whatsoever, no memory works just fine\r\n\r\n    constructor(arrayVisualizer) {\r\n        super(arrayVisualizer)\r\n        this.sortName = \"WikiSort\"\r\n        this.isNeedBuffer = true\r\n    }\r\n\r\n    // if(cache_size != 0) this.cache = Writes.createExternalArray(cache_size);\r\n    // else this.cache = null;\r\n\r\n\r\n// public static void sort(WikiSorting WikiSort, int[] array, int currentLen) {\r\n//     WikiSort.Sort(array, currentLen);\r\n//     if (WikiSort.cache != null) WikiSort.Writes.deleteExternalArray(WikiSort.cache);\r\n// }\r\n\r\n// toolbox functions used by the sorter\r\n\r\n// find the index of the first value within the range that is equal to array[index]\r\n    BinaryFirst(value, range) {\r\n        let start = range.start, end = range.end - 1;\r\n        while (start < end) {\r\n            let mid = Math.trunc(start + (end - start) / 2);\r\n            // if (Reads.compareValues(array[mid], value) < 0)\r\n            if (this.Reads.compareValues(this.Reads.get(mid), value) < 0)\r\n                start = mid + 1;\r\n            else\r\n                end = mid;\r\n        }\r\n        // if (start === range.end - 1 && Reads.compareValues(array[start], value) < 0) start++;\r\n        if (start === range.end - 1 && (this.Reads.compareValues(this.Reads.get(start), value) < 0)) start++;\r\n        return start;\r\n    }\r\n\r\n// find the index of the last value within the range that is equal to array[index], plus 1\r\n    BinaryLast(value, range) {\r\n        let start = range.start, end = range.end - 1;\r\n        while (start < end) {\r\n            let mid = Math.trunc(start + (end - start) / 2);\r\n            if (this.Reads.compareValues(value, this.Reads.get(mid)) >= 0)\r\n                start = mid + 1;\r\n            else\r\n                end = mid;\r\n        }\r\n        if (start === range.end - 1 && this.Reads.compareValues(value, this.Reads.get(start)) >= 0) start++;\r\n        return start;\r\n    }\r\n\r\n// combine a linear search with a binary search to reduce the number of comparisons in situations\r\n// where have some idea as to how many unique values there are and where the next value might be\r\n    FindFirstForward(value, range, unique) {\r\n        if (range.length() === 0) return range.start;\r\n        let index = Math.trunc(Math.max(range.length() / unique, 1));\r\n        // let skip = index\r\n        let skip = index\r\n\r\n        for (index = range.start + skip; this.Reads.compareValues(this.Reads.get(index - 1), value) < 0; index += skip) {\r\n            if (index >= range.end - skip)\r\n                return this.BinaryFirst(value, new Range(index, range.end));\r\n        }\r\n        return this.BinaryFirst(value, new Range(index - skip, index));\r\n    }\r\n\r\n    FindLastForward(value, range, unique) {\r\n        if (range.length() === 0) return range.start;\r\n        let index = Math.trunc(Math.max(range.length() / unique, 1));\r\n        // let skip;\r\n        let skip = index\r\n\r\n        for (index = range.start + skip; this.Reads.compareValues(value, this.Reads.get(index - 1)) >= 0; index += skip)\r\n            if (index >= range.end - skip)\r\n                return this.BinaryLast(value, new Range(index, range.end));\r\n\r\n        return this.BinaryLast(value, new Range(index - skip, index));\r\n    }\r\n\r\n    FindFirstBackward(value, range, unique) {\r\n        if (range.length() === 0) return range.start;\r\n        let index = Math.trunc(Math.max(range.length() / unique, 1));\r\n        let skip = index\r\n\r\n        for (index = range.end - skip; index > range.start && this.Reads.compareValues(this.Reads.get(index - 1), value) >= 0; index -= skip)\r\n            if (index < range.start + skip)\r\n                return this.BinaryFirst(value, new Range(range.start, index));\r\n\r\n        return this.BinaryFirst(value, new Range(index, index + skip));\r\n    }\r\n\r\n    FindLastBackward(value, range, unique) {\r\n        if (range.length() === 0) return range.start;\r\n        let index = Math.trunc(Math.max(range.length() / unique, 1));\r\n        let skip = index\r\n\r\n        for (index = range.end - skip; index > range.start && this.Reads.compareValues(value, this.Reads.get(index - 1)) < 0; index -= skip)\r\n            if (index < range.start + skip)\r\n                return this.BinaryLast(value, new Range(range.start, index));\r\n\r\n        return this.BinaryLast(value, new Range(index, index + skip));\r\n    }\r\n\r\n// n^2 sorting algorithm used to sort tiny chunks of the full array\r\n    InsertionSort(range) {\r\n        // InsertSort.customInsertSort(array, range.start, range.end, 0.5, false);\r\n        let insertionSort = new InsertionSort(this.arrayVisualizer)\r\n        insertionSort.runSort(range.start, range.end)\r\n    }\r\n\r\n// reverse a range of values within the array\r\n    Reverse(range) {\r\n        // Writes.reversal(array, range.start, range.end - 1, 1, true, false);\r\n        let start = range.start\r\n        let length = range.end - 1\r\n        for (let i = start; i < start + ((length - start + 1) / 2); i++) {\r\n            this.Writes.swap(i, start + length - i);\r\n        }\r\n    }\r\n\r\n// swap a series of values in the array\r\n    BlockSwap(start1, start2, block_size) {\r\n        for (let index = 0; index < block_size; index++) {\r\n            this.Writes.swap(start1 + index, start2 + index);\r\n        }\r\n    }\r\n\r\n// rotate the values in an array ([0 1 2 3] becomes [1 2 3 0] if we rotate by 1)\r\n// this assumes that 0 <= amount <= range.length()\r\n    Rotate(amount, range, use_cache) {\r\n        if (range.length() === 0) return;\r\n\r\n        let split;\r\n        if (amount >= 0)\r\n            split = range.start + amount;\r\n        else\r\n            split = range.end + amount;\r\n\r\n        let range1 = new Range(range.start, split);\r\n        let range2 = new Range(split, range.end);\r\n\r\n        if (use_cache) {\r\n            // if the smaller of the two ranges fits into the cache, it's *slightly* faster copying it there and shifting the elements over\r\n            if (range1.length() <= range2.length()) {\r\n                if (range1.length() <= this.cache_size) {\r\n                    if (this.cache != null) {\r\n                        this.Writes.arrayCopy(-1, range1.start, this.cache, 0, range1.length());\r\n                        this.Writes.arrayCopy(-1, range2.start, -1, range1.start, range2.length());\r\n                        this.Writes.arrayCopy(this.cache, 0, -1, range1.start + range2.length(), range1.length());\r\n                    }\r\n                    return;\r\n                }\r\n            } else {\r\n                if (range2.length() <= this.cache_size) {\r\n                    if (this.cache != null) {\r\n                        this.Writes.reverseArrayCopy(-1, range2.start, this.cache, 0, range2.length());\r\n                        this.Writes.reverseArrayCopy(-1, range1.start, -1, range2.end - range1.length(), range1.length());\r\n                        this.Writes.reverseArrayCopy(this.cache, 0, -1, range1.start, range2.length());\r\n                    }\r\n                    return;\r\n                }\r\n            }\r\n        }\r\n\r\n        /*\r\n        int lenA = range1.length();\r\n        int lenB = range2.length();\r\n        int pos = range.start;\r\n\r\n        while(lenA != 0 && lenB != 0) {\r\n            if(lenA <= lenB) {\r\n                this.BlockSwap(array, pos, pos + lenA, lenA);\r\n                pos += lenA;\r\n                lenB -= lenA;\r\n            }\r\n            else {\r\n                this.BlockSwap(array, pos + (lenA - lenB), pos + lenA, lenB);\r\n                lenA -= lenB;\r\n            }\r\n        }\r\n        */\r\n\r\n        this.Reverse(range1);\r\n        this.Reverse(range2);\r\n        this.Reverse(range);\r\n    }\r\n\r\n// merge two ranges from one array and save the results into a different array\r\n    MergeInto(from, A, B, into, at_index, tempwrite) {\r\n        let A_index = A.start;\r\n        let B_index = B.start;\r\n        let insert_index = at_index;\r\n        let A_last = A.end;\r\n        let B_last = B.end;\r\n\r\n        if (from === -1) {\r\n            while (true) {\r\n                if (this.Reads.compareInArr(B_index, A_index) >= 0) {\r\n                    this.Writes.auxWrite(insert_index, this.Reads.get(A_index), into);\r\n\r\n\r\n                    A_index++;\r\n                    insert_index++;\r\n                    if (A_index === A_last) {\r\n                        // copy the remainder of B into the final array\r\n                        this.Writes.arrayCopy(from, B_index, into, insert_index, B_last - B_index);\r\n                        break;\r\n                    }\r\n                } else {\r\n                    this.Writes.auxWrite(insert_index, this.Reads.get(B_index), into);\r\n\r\n                    B_index++;\r\n                    insert_index++;\r\n                    if (B_index === B_last) {\r\n                        // copy the remainder of A into the final array\r\n                        this.Writes.arrayCopy(from, A_index, into, insert_index, A_last - A_index);\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        } else {\r\n            while (true) {\r\n                // if (this.Reads.compareInArr(B_index, A_index) >= 0) {\r\n                console.log(\"FROM: \"+from)\r\n                if (this.Reads.compareValues(this.Reads.auxReadValue(B_index, from), this.Reads.auxReadValue(A_index, from)) >= 0) {\r\n\r\n                    this.Writes.write(insert_index, this.Reads.auxGet(A_index, from));\r\n\r\n\r\n                    A_index++;\r\n                    insert_index++;\r\n                    if (A_index === A_last) {\r\n                        // copy the remainder of B into the final array\r\n                        this.Writes.arrayCopy(from, B_index, into, insert_index, B_last - B_index);\r\n                        break;\r\n                    }\r\n                } else {\r\n                    this.Writes.write(insert_index, this.Reads.auxGet(B_index, from));\r\n\r\n                    B_index++;\r\n                    insert_index++;\r\n                    if (B_index === B_last) {\r\n                        // copy the remainder of A into the final array\r\n                        this.Writes.arrayCopy(from, A_index, into, insert_index, A_last - A_index);\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n// merge operation using an external buffer,\r\n    MergeExternal(A, B) {\r\n        // A fits into the cache, so use that instead of the internal buffer\r\n        let A_index = 0;\r\n        let B_index = B.start;\r\n        let insert_index = A.start;\r\n        let A_last = A.length();\r\n        let B_last = B.end;\r\n\r\n        if (B.length() > 0 && A.length() > 0) {\r\n            while (true) {\r\n                if (this.Reads.compareValues(this.Reads.get(B_index), this.Reads.auxGet(A_index, this.cache)) >= 0) {\r\n                    this.Writes.write(insert_index, this.Reads.auxGet(A_index, this.cache));\r\n                    A_index++;\r\n                    insert_index++;\r\n                    if (A_index === A_last) break;\r\n                } else {\r\n                    this.Writes.write(insert_index, this.Reads.get(B_index));\r\n                    B_index++;\r\n                    insert_index++;\r\n                    if (B_index === B_last) break;\r\n                }\r\n            }\r\n        }\r\n\r\n\r\n        // copy the remainder of A into the final array\r\n        if (this.cache != null) {\r\n            this.Writes.arrayCopy(this.cache, A_index, -1, insert_index, A_last - A_index, 1, true, false);\r\n        }\r\n    }\r\n\r\n// merge operation using an internal buffer\r\n    MergeInternal(A, B, buffer) {\r\n        // whenever we find a value to add to the final array, swap it with the value that's already in that spot\r\n        // when this algorithm is finished, 'buffer' will contain its original contents, but in a different order\r\n        let A_count = 0, B_count = 0, insert = 0;\r\n\r\n        if (B.length() > 0 && A.length() > 0) {\r\n            while (true) {\r\n                if (this.Reads.compareInArr(B.start + B_count, buffer.start + A_count) >= 0) {\r\n                    this.Writes.swap(A.start + insert, buffer.start + A_count);\r\n                    A_count++;\r\n                    insert++;\r\n                    if (A_count >= A.length()) break;\r\n                } else {\r\n                    this.Writes.swap(A.start + insert, B.start + B_count);\r\n                    B_count++;\r\n                    insert++;\r\n                    if (B_count >= B.length()) break;\r\n                }\r\n            }\r\n        }\r\n        // swap the remainder of A into the final array\r\n        this.BlockSwap(buffer.start + A_count, A.start + insert, A.length() - A_count);\r\n    }\r\n\r\n// merge operation without a buffer\r\n    MergeInPlace(A, B) {\r\n        if (A.length() === 0 || B.length() === 0) return;\r\n\r\n        /*\r\n            this just repeatedly binary searches into B and rotates A into position.\r\n            the paper suggests using the 'rotation-based Hwang and Lin algorithm' here,\r\n            but I decided to stick with this because it had better situational performance\r\n\r\n            (Hwang and Lin is designed for merging subarrays of very different sizes,\r\n            but WikiSort almost always uses subarrays that are roughly the same size)\r\n\r\n            normally this is incredibly suboptimal, but this function is only called\r\n            when none of the A or B blocks in any subarray contained 2√A unique values,\r\n            which places a hard limit on the number of times this will ACTUALLY need\r\n            to binary search and rotate.\r\n\r\n            according to my analysis the worst case is √A rotations performed on √A items\r\n            once the constant factors are removed, which ends up being O(n)\r\n\r\n            again, this is NOT a general-purpose solution – it only works well in this case!\r\n            kind of like how the O(n^2) insertion sort is used in some places\r\n         */\r\n\r\n        A = new Range(A.start, A.end);\r\n        B = new Range(B.start, B.end);\r\n\r\n        while (true) {\r\n            // find the first place in B where the first item in A needs to be inserted\r\n            let mid = this.BinaryFirst(this.Reads.readValue(A.start), B)\r\n\r\n            // rotate A into place\r\n            let amount = mid - A.end;\r\n            this.Rotate(-amount, new Range(A.start, mid), true);\r\n            if (B.end === mid) break;\r\n\r\n            // calculate the new A and B ranges\r\n            B.start = mid;\r\n            A.set(A.start + amount, B.start);\r\n            A.start = this.BinaryLast(this.Reads.readValue(A.start), A);\r\n            if (A.length() === 0) break;\r\n        }\r\n    }\r\n\r\n    NetSwap(order, range, x, y) {\r\n        let compare = this.Reads.compareInArr(range.start + x, range.start + y);\r\n        if (compare > 0 || (this.Reads.compareValues(order[x], order[y]) > 0 && compare === 0)) {\r\n            // console.log(range.start + x)\r\n            // console.log(range.start + y)\r\n            this.Writes.swap(range.start + x, range.start + y);\r\n            let tmp = order[x]\r\n            order[x] = order[y]\r\n            order[y] = tmp\r\n            // this.Writes.swap(order, x, y, 0, false, false);\r\n        }\r\n    }\r\n\r\n// bottom-up merge sort combined with an in-place merge algorithm for O(1) memory use\r\n    Sort(len) {\r\n        let size = len;\r\n\r\n        // if the array is of size 0, 1, 2, or 3, just sort them like so:\r\n        if (size < 4) {\r\n            let insertionSort = new InsertionSort(this.arrayVisualizer)\r\n            insertionSort.runSort(0, len)\r\n            // if (size === 3) {\r\n            //     // hard-coded insertion sort\r\n            //     if (Reads.compareInArr(array[1], array[0]) < 0) {\r\n            //         Writes.swap(array, 0, 1, 1, true, false);\r\n            //     }\r\n            //     if (Reads.compareValues(array[2], array[1]) < 0) {\r\n            //         Writes.swap(array, 1, 2, 1, true, false);\r\n            //         if (Reads.compareValues(array[1], array[0]) < 0) {\r\n            //             Writes.swap(array, 0, 1, 1, true, false);\r\n            //         }\r\n            //     }\r\n            // } else if (size == 2) {\r\n            //     // swap the items if they're out of order\r\n            //     if (Reads.compareValues(array[1], array[0]) < 0) {\r\n            //         Writes.swap(array, 0, 1, 1, true, false);\r\n            //     }\r\n            // }\r\n            return;\r\n        }\r\n\r\n        // sort groups of 4-8 items at a time using an unstable sorting network,\r\n        // but keep track of the original item orders to force it to be stable\r\n        // http://pages.ripco.net/~jgamble/nw.html\r\n        let iterator = new Iterator(size, 4);\r\n        while (!iterator.finished()) {\r\n            let order = [0, 1, 2, 3, 4, 5, 6, 7];\r\n            let range = iterator.nextRange();\r\n\r\n            if (range.length() === 8) {\r\n                this.NetSwap(order, range, 0, 1);\r\n                this.NetSwap(order, range, 2, 3);\r\n                this.NetSwap(order, range, 4, 5);\r\n                this.NetSwap(order, range, 6, 7);\r\n                this.NetSwap(order, range, 0, 2);\r\n                this.NetSwap(order, range, 1, 3);\r\n                this.NetSwap(order, range, 4, 6);\r\n                this.NetSwap(order, range, 5, 7);\r\n                this.NetSwap(order, range, 1, 2);\r\n                this.NetSwap(order, range, 5, 6);\r\n                this.NetSwap(order, range, 0, 4);\r\n                this.NetSwap(order, range, 3, 7);\r\n                this.NetSwap(order, range, 1, 5);\r\n                this.NetSwap(order, range, 2, 6);\r\n                this.NetSwap(order, range, 1, 4);\r\n                this.NetSwap(order, range, 3, 6);\r\n                this.NetSwap(order, range, 2, 4);\r\n                this.NetSwap(order, range, 3, 5);\r\n                this.NetSwap(order, range, 3, 4);\r\n\r\n            } else if (range.length() === 7) {\r\n                this.NetSwap(order, range, 1, 2);\r\n                this.NetSwap(order, range, 3, 4);\r\n                this.NetSwap(order, range, 5, 6);\r\n                this.NetSwap(order, range, 0, 2);\r\n                this.NetSwap(order, range, 3, 5);\r\n                this.NetSwap(order, range, 4, 6);\r\n                this.NetSwap(order, range, 0, 1);\r\n                this.NetSwap(order, range, 4, 5);\r\n                this.NetSwap(order, range, 2, 6);\r\n                this.NetSwap(order, range, 0, 4);\r\n                this.NetSwap(order, range, 1, 5);\r\n                this.NetSwap(order, range, 0, 3);\r\n                this.NetSwap(order, range, 2, 5);\r\n                this.NetSwap(order, range, 1, 3);\r\n                this.NetSwap(order, range, 2, 4);\r\n                this.NetSwap(order, range, 2, 3);\r\n\r\n            } else if (range.length() === 6) {\r\n                this.NetSwap(order, range, 1, 2);\r\n                this.NetSwap(order, range, 4, 5);\r\n                this.NetSwap(order, range, 0, 2);\r\n                this.NetSwap(order, range, 3, 5);\r\n                this.NetSwap(order, range, 0, 1);\r\n                this.NetSwap(order, range, 3, 4);\r\n                this.NetSwap(order, range, 2, 5);\r\n                this.NetSwap(order, range, 0, 3);\r\n                this.NetSwap(order, range, 1, 4);\r\n                this.NetSwap(order, range, 2, 4);\r\n                this.NetSwap(order, range, 1, 3);\r\n                this.NetSwap(order, range, 2, 3);\r\n\r\n            } else if (range.length() === 5) {\r\n                this.NetSwap(order, range, 0, 1);\r\n                this.NetSwap(order, range, 3, 4);\r\n                this.NetSwap(order, range, 2, 4);\r\n                this.NetSwap(order, range, 2, 3);\r\n                this.NetSwap(order, range, 1, 4);\r\n                this.NetSwap(order, range, 0, 3);\r\n                this.NetSwap(order, range, 0, 2);\r\n                this.NetSwap(order, range, 1, 3);\r\n                this.NetSwap(order, range, 1, 2);\r\n\r\n            } else if (range.length() === 4) {\r\n                this.NetSwap(order, range, 0, 1);\r\n                this.NetSwap(order, range, 2, 3);\r\n                this.NetSwap(order, range, 0, 2);\r\n                this.NetSwap(order, range, 1, 3);\r\n                this.NetSwap(order, range, 1, 2);\r\n            }\r\n        }\r\n        if (size < 8) return;\r\n\r\n\r\n        // we need to keep track of a lot of ranges during this sort!\r\n        let buffer1 = new Range(), buffer2 = new Range();\r\n        let blockA = new Range(), blockB = new Range();\r\n        let lastA = new Range(), lastB = new Range();\r\n        let firstA = new Range();\r\n        let A = new Range(), B = new Range();\r\n\r\n        let pull = new Array(2);\r\n        pull[0] = new Pull();\r\n        pull[1] = new Pull();\r\n\r\n        // then merge sort the higher levels, which can be 8-15, 16-31, 32-63, 64-127, etc.\r\n        while (true) {\r\n\r\n            // if every A and B block will fit into the cache, use a special branch specifically for merging with the cache\r\n            // (we use < rather than <= since the block size might be one more than iterator.length())\r\n            if (iterator.length() < this.cache_size) {\r\n\r\n                // if four subarrays fit into the cache, it's faster to merge both pairs of subarrays into the cache,\r\n                // then merge the two merged subarrays from the cache back into the original array\r\n                if ((iterator.length() + 1) * 4 <= this.cache_size && iterator.length() * 4 <= size) {\r\n                    iterator.begin();\r\n                    while (!iterator.finished()) {\r\n                        // merge A1 and B1 into the cache\r\n                        let A1 = iterator.nextRange();\r\n                        let B1 = iterator.nextRange();\r\n                        let A2 = iterator.nextRange();\r\n                        let B2 = iterator.nextRange();\r\n\r\n                        if (this.Reads.compareInArr(B1.end - 1, A1.start) < 0) {\r\n                            // the two ranges are in reverse order, so copy them in reverse order into the cache\r\n                            this.Writes.arrayCopy(-1, A1.start, this.cache, B1.length(), A1.length());\r\n                            this.Writes.arrayCopy(-1, B1.start, this.cache, 0, B1.length());\r\n                        } else if (this.Reads.compareInArr(B1.start, A1.end - 1) < 0) {\r\n                            // these two ranges weren't already in order, so merge them into the cache\r\n                            this.MergeInto(-1, A1, B1, this.cache, 0, true);\r\n                        } else {\r\n                            // if A1, B1, A2, and B2 are all in order, skip doing anything else\r\n                            if (this.Reads.compareInArr(B2.start, A2.end - 1) >= 0 && this.Reads.compareInArr(A2.start, B1.end - 1) >= 0) continue;\r\n\r\n                            // copy A1 and B1 into the cache in the same order\r\n                            this.Writes.arrayCopy(A1.start, this.cache, 0, A1.length(), 1);\r\n                            this.Writes.arrayCopy(B1.start, this.cache, A1.length(), B1.length(), 1);\r\n                        }\r\n                        A1.set(A1.start, B1.end);\r\n\r\n                        // merge A2 and B2 into the cache\r\n                        if (this.Reads.compareInArr(B2.end - 1, A2.start) < 0) {\r\n                            // the two ranges are in reverse order, so copy them in reverse order into the cache\r\n                            this.Writes.arrayCopy(A2.start, this.cache, A1.length() + B2.length(), A2.length(), 1);\r\n                            this.Writes.arrayCopy(B2.start, this.cache, A1.length(), B2.length(), 1);\r\n                        } else if (this.Reads.compareInArr(B2.start, A2.end - 1) < 0) {\r\n                            // these two ranges weren't already in order, so merge them into the cache\r\n                            this.MergeInto(-1, A2, B2, this.cache, A1.length(), true);\r\n                        } else {\r\n                            // copy A2 and B2 into the cache in the same order\r\n                            this.Writes.arrayCopy(A2.start, this.cache, A1.length(), A2.length(), 1);\r\n                            this.Writes.arrayCopy(B2.start, this.cache, A1.length() + A2.length(), B2.length(), 1);\r\n                        }\r\n                        A2.set(A2.start, B2.end);\r\n\r\n                        // merge A1 and A2 from the cache into the array\r\n                        let A3 = new Range(0, A1.length());\r\n                        let B3 = new Range(A1.length(), A1.length() + A2.length());\r\n\r\n                        if (this.Reads.compareValues(this.Reads.auxReadValue(B3.end - 1, this.cache), this.Reads.auxReadValue(A3.start, this.cache)) < 0) {\r\n                            // the two ranges are in reverse order, so copy them in reverse order into the cache\r\n                            this.Writes.arrayCopy(this.cache, A3.start, -1, A1.start + A2.length(), A3.length(), 1, true, false);\r\n                            this.Writes.arrayCopy(this.cache, B3.start, -1, A1.start, B3.length(), 1, true, false);\r\n                        } else if (this.Reads.compareValues(this.Reads.auxReadValue(B3.start, this.cache), this.Reads.auxReadValue(A3.end - 1, this.cache)) < 0) {\r\n                            // these two ranges weren't already in order, so merge them back into the array\r\n                            this.MergeInto(this.cache, A3, B3, -1, A1.start, false);\r\n                        } else {\r\n                            // copy A3 and B3 into the array in the same order\r\n                            this.Writes.arraycopy(this.cache, A3.start, -1, A1.start, A3.length(), 1);\r\n                            this.Writes.arraycopy(this.cache, B3.start, -1, A1.start + A1.length(), B3.length(), 1);\r\n                        }\r\n                    }\r\n\r\n                    // we merged two levels at the same time, so we're done with this level already\r\n                    // (iterator.nextLevel() is called again at the bottom of this outer merge loop)\r\n                    iterator.nextLevel();\r\n\r\n                } else {\r\n                    iterator.begin();\r\n                    while (!iterator.finished()) {\r\n                        A = iterator.nextRange();\r\n                        B = iterator.nextRange();\r\n\r\n                        if (this.Reads.compareInArr(B.end - 1, A.start) < 0) {\r\n                            // the two ranges are in reverse order, so a simple rotation should fix it\r\n                            this.Rotate(A.length(), new Range(A.start, B.end), true);\r\n                        } else if (this.Reads.compareInArr(B.start, A.end - 1) < 0) {\r\n                            // these two ranges weren't already in order, so we'll need to merge them!\r\n                            this.Writes.arrayCopy(-1, A.start, this.cache, 0, A.length(), 1);\r\n                            this.MergeExternal(A, B);\r\n                        }\r\n                    }\r\n                }\r\n            } else {\r\n                // this is where the in-place merge logic starts!\r\n                // 1. pull out two internal buffers each containing √A unique values\r\n                //     1a. adjust block_size and buffer_size if we couldn't find enough unique values\r\n                // 2. loop over the A and B subarrays within this level of the merge sort\r\n                //     3. break A and B into blocks of size 'block_size'\r\n                //     4. \"tag\" each of the A blocks with values from the first internal buffer\r\n                //     5. roll the A blocks through the B blocks and drop/rotate them where they belong\r\n                //     6. merge each A block with any B values that follow, using the cache or the second internal buffer\r\n                // 7. sort the second internal buffer if it exists\r\n                // 8. redistribute the two internal buffers back into the array\r\n\r\n                let block_size = Math.trunc(Math.sqrt(iterator.length()));\r\n                let buffer_size = Math.trunc(iterator.length() / block_size) + 1;\r\n\r\n                // as an optimization, we really only need to pull out the internal buffers once for each level of merges\r\n                // after that we can reuse the same buffers over and over, then redistribute it when we're finished with this level\r\n                let index, last, count, pull_index = 0;\r\n                buffer1.set(0, 0);\r\n                buffer2.set(0, 0);\r\n\r\n                pull[0].reset();\r\n                pull[1].reset();\r\n\r\n                // find two internal buffers of size 'buffer_size' each\r\n                let find = buffer_size + buffer_size;\r\n                let find_separately = false;\r\n\r\n                if (block_size <= this.cache_size) {\r\n                    // if every A block fits into the cache then we won't need the second internal buffer,\r\n                    // so we really only need to find 'buffer_size' unique values\r\n                    find = buffer_size;\r\n                } else if (find > iterator.length()) {\r\n                    // we can't fit both buffers into the same A or B subarray, so find two buffers separately\r\n                    find = buffer_size;\r\n                    find_separately = true;\r\n                }\r\n\r\n                // we need to find either a single contiguous space containing 2√A unique values (which will be split up into two buffers of size √A each),\r\n                // or we need to find one buffer of < 2√A unique values, and a second buffer of √A unique values,\r\n                // OR if we couldn't find that many unique values, we need the largest possible buffer we can get\r\n\r\n                // in the case where it couldn't find a single buffer of at least √A unique values,\r\n                // all of the Merge steps must be replaced by a different merge algorithm (MergeInPlace)\r\n\r\n                iterator.begin();\r\n                while (!iterator.finished()) {\r\n                    A = iterator.nextRange();\r\n                    B = iterator.nextRange();\r\n\r\n                    // check A for the number of unique values we need to fill an internal buffer\r\n                    // these values will be pulled out to the start of A\r\n                    for (last = A.start, count = 1; count < find; last = index, count++) {\r\n                        index = this.FindLastForward(this.Reads.readValue(last), new Range(last + 1, A.end), find - count);\r\n                        if (index === A.end) break;\r\n                    }\r\n                    index = last;\r\n\r\n                    if (count >= buffer_size) {\r\n                        // keep track of the range within the array where we'll need to \"pull out\" these values to create the internal buffer\r\n                        pull[pull_index].range.set(A.start, B.end);\r\n                        pull[pull_index].count = count;\r\n                        pull[pull_index].from = index;\r\n                        pull[pull_index].to = A.start;\r\n                        pull_index = 1;\r\n\r\n                        if (count === buffer_size + buffer_size) {\r\n                            // we were able to find a single contiguous section containing 2√A unique values,\r\n                            // so this section can be used to contain both of the internal buffers we'll need\r\n                            buffer1.set(A.start, A.start + buffer_size);\r\n                            buffer2.set(A.start + buffer_size, A.start + count);\r\n                            break;\r\n                        } else if (find === buffer_size + buffer_size) {\r\n                            // we found a buffer that contains at least √A unique values, but did not contain the full 2√A unique values,\r\n                            // so we still need to find a second separate buffer of at least √A unique values\r\n                            buffer1.set(A.start, A.start + count);\r\n                            find = buffer_size;\r\n                        } else if (block_size <= this.cache_size) {\r\n                            // we found the first and only internal buffer that we need, so we're done!\r\n                            buffer1.set(A.start, A.start + count);\r\n                            break;\r\n                        } else if (find_separately) {\r\n                            // found one buffer, but now find the other one\r\n                            buffer1 = new Range(A.start, A.start + count);\r\n                            find_separately = false;\r\n                        } else {\r\n                            // we found a second buffer in an 'A' subarray containing √A unique values, so we're done!\r\n                            buffer2.set(A.start, A.start + count);\r\n                            break;\r\n                        }\r\n                    } else if (pull_index === 0 && count > buffer1.length()) {\r\n                        // keep track of the largest buffer we were able to find\r\n                        buffer1.set(A.start, A.start + count);\r\n\r\n                        pull[pull_index].range.set(A.start, B.end);\r\n                        pull[pull_index].count = count;\r\n                        pull[pull_index].from = index;\r\n                        pull[pull_index].to = A.start;\r\n                    }\r\n\r\n                    // check B for the number of unique values we need to fill an internal buffer\r\n                    // these values will be pulled out to the end of B\r\n                    for (last = B.end - 1, count = 1; count < find; last = index - 1, count++) {\r\n                        index = this.FindFirstBackward(this.Reads.readValue(last), new Range(B.start, last), find - count);\r\n                        if (index === B.start) break;\r\n                    }\r\n                    index = last;\r\n\r\n                    if (count >= buffer_size) {\r\n                        // keep track of the range within the array where we'll need to \"pull out\" these values to create the internal buffer\r\n                        pull[pull_index].range.set(A.start, B.end);\r\n                        pull[pull_index].count = count;\r\n                        pull[pull_index].from = index;\r\n                        pull[pull_index].to = B.end;\r\n                        pull_index = 1;\r\n\r\n                        if (count === buffer_size + buffer_size) {\r\n                            // we were able to find a single contiguous section containing 2√A unique values,\r\n                            // so this section can be used to contain both of the internal buffers we'll need\r\n                            buffer1.set(B.end - count, B.end - buffer_size);\r\n                            buffer2.set(B.end - buffer_size, B.end);\r\n                            break;\r\n                        } else if (find === buffer_size + buffer_size) {\r\n                            // we found a buffer that contains at least √A unique values, but did not contain the full 2√A unique values,\r\n                            // so we still need to find a second separate buffer of at least √A unique values\r\n                            buffer1.set(B.end - count, B.end);\r\n                            find = buffer_size;\r\n                        } else if (block_size <= this.cache_size) {\r\n                            // we found the first and only internal buffer that we need, so we're done!\r\n                            buffer1.set(B.end - count, B.end);\r\n                            break;\r\n                        } else if (find_separately) {\r\n                            // found one buffer, but now find the other one\r\n                            buffer1 = new Range(B.end - count, B.end);\r\n                            find_separately = false;\r\n                        } else {\r\n                            // buffer2 will be pulled out from a 'B' subarray, so if the first buffer was pulled out from the corresponding 'A' subarray,\r\n                            // we need to adjust the end point for that A subarray so it knows to stop redistributing its values before reaching buffer2\r\n                            if (pull[0].range.start === A.start) pull[0].range.end -= pull[1].count;\r\n\r\n                            // we found a second buffer in an 'B' subarray containing √A unique values, so we're done!\r\n                            buffer2.set(B.end - count, B.end);\r\n                            break;\r\n                        }\r\n                    } else if (pull_index === 0 && count > buffer1.length()) {\r\n                        // keep track of the largest buffer we were able to find\r\n                        buffer1.set(B.end - count, B.end);\r\n\r\n                        pull[pull_index].range.set(A.start, B.end);\r\n                        pull[pull_index].count = count;\r\n                        pull[pull_index].from = index;\r\n                        pull[pull_index].to = B.end;\r\n                    }\r\n                }\r\n\r\n                // pull out the two ranges so we can use them as internal buffers\r\n                for (pull_index = 0; pull_index < 2; pull_index++) {\r\n                    let length = pull[pull_index].count;\r\n\r\n                    if (pull[pull_index].to < pull[pull_index].from) {\r\n                        // we're pulling the values out to the left, which means the start of an A subarray\r\n                        index = pull[pull_index].from;\r\n                        for (count = 1; count < length; count++) {\r\n                            index = this.FindFirstBackward(this.Reads.readValue(index - 1), new Range(pull[pull_index].to, pull[pull_index].from - (count - 1)), length - count);\r\n                            let range = new Range(index + 1, pull[pull_index].from + 1);\r\n                            this.Rotate(range.length() - count, range, true);\r\n                            pull[pull_index].from = index + count;\r\n                        }\r\n                    } else if (pull[pull_index].to > pull[pull_index].from) {\r\n                        // we're pulling values out to the right, which means the end of a B subarray\r\n                        index = pull[pull_index].from + 1;\r\n                        for (count = 1; count < length; count++) {\r\n                            index = this.FindLastForward(this.Reads.readValue(index), new Range(index, pull[pull_index].to), length - count);\r\n                            let range = new Range(pull[pull_index].from, index - 1);\r\n                            this.Rotate(count, range, true);\r\n                            pull[pull_index].from = index - 1 - count;\r\n                        }\r\n                    }\r\n                }\r\n\r\n                // adjust block_size and buffer_size based on the values we were able to pull out\r\n                buffer_size = buffer1.length();\r\n                block_size = Math.trunc(iterator.length() / buffer_size) + 1;\r\n\r\n                // the first buffer NEEDS to be large enough to tag each of the evenly sized A blocks,\r\n                // so this was originally here to test the math for adjusting block_size above\r\n                //if ((iterator.length() + 1)/block_size > buffer_size) throw new RuntimeException();\r\n\r\n                // now that the two internal buffers have been created, it's time to merge each A+B combination at this level of the merge sort!\r\n                iterator.begin();\r\n                while (!iterator.finished()) {\r\n                    A = iterator.nextRange();\r\n                    B = iterator.nextRange();\r\n\r\n                    // remove any parts of A or B that are being used by the internal buffers\r\n                    let start = A.start;\r\n                    if (start === pull[0].range.start) {\r\n                        if (pull[0].from > pull[0].to) {\r\n                            A.start += pull[0].count;\r\n\r\n                            // if the internal buffer takes up the entire A or B subarray, then there's nothing to merge\r\n                            // this only happens for very small subarrays, like √4 = 2, 2 * (2 internal buffers) = 4,\r\n                            // which also only happens when cache_size is small or 0 since it'd otherwise use MergeExternal\r\n                            if (A.length() === 0) continue;\r\n                        } else if (pull[0].from < pull[0].to) {\r\n                            B.end -= pull[0].count;\r\n                            if (B.length() === 0) continue;\r\n                        }\r\n                    }\r\n                    if (start === pull[1].range.start) {\r\n                        if (pull[1].from > pull[1].to) {\r\n                            A.start += pull[1].count;\r\n                            if (A.length() === 0) continue;\r\n                        } else if (pull[1].from < pull[1].to) {\r\n                            B.end -= pull[1].count;\r\n                            if (B.length() === 0) continue;\r\n                        }\r\n                    }\r\n\r\n                    if (this.Reads.compareInArr(B.end - 1, A.start) < 0) {\r\n                        // the two ranges are in reverse order, so a simple rotation should fix it\r\n                        this.Rotate(A.length(), new Range(A.start, B.end), true);\r\n                    } else if (this.Reads.compareInArr(A.end, A.end - 1) < 0) {\r\n                        // these two ranges weren't already in order, so we'll need to merge them!\r\n\r\n                        // break the remainder of A into blocks. firstA is the uneven-sized first A block\r\n                        blockA.set(A.start, A.end);\r\n                        firstA.set(A.start, A.start + blockA.length() % block_size);\r\n\r\n                        // swap the first value of each A block with the value in buffer1\r\n                        let indexA = buffer1.start;\r\n                        for (index = firstA.end; index < blockA.end; index += block_size) {\r\n                            this.Writes.swap(indexA, index);\r\n                            indexA++;\r\n                        }\r\n\r\n                        // start rolling the A blocks through the B blocks!\r\n                        // whenever we leave an A block behind, we'll need to merge the previous A block with any B blocks that follow it, so track that information as well\r\n                        lastA.set(firstA.start, firstA.end);\r\n                        lastB.set(0, 0);\r\n                        blockB.set(B.start, B.start + Math.min(block_size, B.length()));\r\n                        blockA.start += firstA.length();\r\n                        indexA = buffer1.start;\r\n\r\n                        // if the first unevenly sized A block fits into the cache, copy it there for when we go to Merge it\r\n                        // otherwise, if the second buffer is available, block swap the contents into that\r\n                        if (lastA.length() <= this.cache_size && this.cache != null) {\r\n                            this.Writes.arrayCopy(-1, lastA.start, this.cache, 0, lastA.length(), 1);\r\n                        } else if (buffer2.length() > 0)\r\n                            this.BlockSwap(lastA.start, buffer2.start, lastA.length());\r\n\r\n                        if (blockA.length() > 0) {\r\n                            while (true) {\r\n                                // if there's a previous B block and the first value of the minimum A block is <= the last value of the previous B block,\r\n                                // then drop that minimum A block behind. or if there are no B blocks left then keep dropping the remaining A blocks.\r\n                                if ((lastB.length() > 0 && this.Reads.compareInArr(lastB.end - 1, indexA) >= 0) || blockB.length() === 0) {\r\n                                    // figure out where to split the previous B block, and rotate it at the split\r\n                                    let B_split = this.BinaryFirst(this.Reads.readValue(indexA), lastB);\r\n                                    let B_remaining = lastB.end - B_split;\r\n\r\n                                    // swap the minimum A block to the beginning of the rolling A blocks\r\n                                    let minA = blockA.start;\r\n                                    for (let findA = minA + block_size; findA < blockA.end; findA += block_size)\r\n                                        if (this.Reads.compareInArr(findA, minA) < 0)\r\n                                            minA = findA;\r\n                                    this.BlockSwap(blockA.start, minA, block_size);\r\n\r\n                                    // swap the first item of the previous A block back with its original value, which is stored in buffer1\r\n                                    this.Writes.swap(blockA.start, indexA);\r\n                                    indexA++;\r\n\r\n                                    // locally merge the previous A block with the B values that follow it\r\n                                    // if lastA fits into the external cache we'll use that (with MergeExternal),\r\n                                    // or if the second internal buffer exists we'll use that (with MergeInternal),\r\n                                    // or failing that we'll use a strictly in-place merge algorithm (MergeInPlace)\r\n                                    if (lastA.length() <= this.cache_size)\r\n                                        this.MergeExternal(lastA, new Range(lastA.end, B_split));\r\n                                    else if (buffer2.length() > 0)\r\n                                        this.MergeInternal(lastA, new Range(lastA.end, B_split), buffer2);\r\n                                    else\r\n                                        this.MergeInPlace(lastA, new Range(lastA.end, B_split));\r\n\r\n                                    if (buffer2.length() > 0 || block_size <= this.cache_size) {\r\n                                        // copy the previous A block into the cache or buffer2, since that's where we need it to be when we go to merge it anyway\r\n                                        if (block_size <= this.cache_size) {\r\n                                            this.Writes.arrayCopy(-1, blockA.start, this.cache, 0, block_size, 1, true, true);\r\n                                        } else\r\n                                            this.BlockSwap(blockA.start, buffer2.start, block_size);\r\n\r\n                                        // this is equivalent to rotating, but faster\r\n                                        // the area normally taken up by the A block is either the contents of buffer2, or data we don't need anymore since we memcopied it\r\n                                        // either way, we don't need to retain the order of those items, so instead of rotating we can just block swap B to where it belongs\r\n                                        this.BlockSwap(B_split, blockA.start + block_size - B_remaining, B_remaining);\r\n                                    } else {\r\n                                        // we are unable to use the 'buffer2' trick to speed up the rotation operation since buffer2 doesn't exist, so perform a normal rotation\r\n                                        this.Rotate(blockA.start - B_split, new Range(B_split, blockA.start + block_size), true);\r\n                                    }\r\n\r\n                                    // update the range for the remaining A blocks, and the range remaining from the B block after it was split\r\n                                    lastA.set(blockA.start - B_remaining, blockA.start - B_remaining + block_size);\r\n                                    lastB.set(lastA.end, lastA.end + B_remaining);\r\n\r\n                                    // if there are no more A blocks remaining, this step is finished!\r\n                                    blockA.start += block_size;\r\n                                    if (blockA.length() === 0)\r\n                                        break;\r\n\r\n                                } else if (blockB.length() < block_size) {\r\n                                    // move the last B block, which is unevenly sized, to before the remaining A blocks, by using a rotation\r\n                                    // the cache is disabled here since it might contain the contents of the previous A block\r\n                                    this.Rotate(-blockB.length(), new Range(blockA.start, blockB.end), false);\r\n\r\n                                    lastB.set(blockA.start, blockA.start + blockB.length());\r\n                                    blockA.start += blockB.length();\r\n                                    blockA.end += blockB.length();\r\n                                    blockB.end = blockB.start;\r\n                                } else {\r\n                                    // roll the leftmost A block to the end by swapping it with the next B block\r\n                                    this.BlockSwap(blockA.start, blockB.start, block_size);\r\n                                    lastB.set(blockA.start, blockA.start + block_size);\r\n\r\n                                    blockA.start += block_size;\r\n                                    blockA.end += block_size;\r\n                                    blockB.start += block_size;\r\n                                    blockB.end += block_size;\r\n\r\n                                    if (blockB.end > B.end)\r\n                                        blockB.end = B.end;\r\n                                }\r\n                            }\r\n                        }\r\n\r\n                        // merge the last A block with the remaining B values\r\n                        if (lastA.length() <= this.cache_size)\r\n                            this.MergeExternal(lastA, new Range(lastA.end, B.end));\r\n                        else if (buffer2.length() > 0)\r\n                            this.MergeInternal(lastA, new Range(lastA.end, B.end), buffer2);\r\n                        else\r\n                            this.MergeInPlace(lastA, new Range(lastA.end, B.end));\r\n                    }\r\n                }\r\n\r\n\r\n                // when we're finished with this merge step we should have the one or two internal buffers left over, where the second buffer is all jumbled up\r\n                // insertion sort the second buffer, then redistribute the buffers back into the array using the opposite process used for creating the buffer\r\n\r\n                // while an unstable sort like quick sort could be applied here, in benchmarks it was consistently slightly slower than a simple insertion sort,\r\n                // even for tens of millions of items. this may be because insertion sort is quite fast when the data is already somewhat sorted, like it is here\r\n\r\n\r\n                this.InsertionSort(buffer2)\r\n\r\n                for (pull_index = 0; pull_index < 2; pull_index++) {\r\n                    let unique = pull[pull_index].count * 2;\r\n                    if (pull[pull_index].from > pull[pull_index].to) {\r\n                        // the values were pulled out to the left, so redistribute them back to the right\r\n                        let buffer = new Range(pull[pull_index].range.start, pull[pull_index].range.start + pull[pull_index].count);\r\n                        while (buffer.length() > 0) {\r\n                            index = this.FindFirstForward(this.Reads.readValue(buffer.start), new Range(buffer.end, pull[pull_index].range.end), unique);\r\n                            let amount = index - buffer.end;\r\n                            this.Rotate(buffer.length(), new Range(buffer.start, index), true);\r\n                            buffer.start += (amount + 1);\r\n                            buffer.end += amount;\r\n                            unique -= 2;\r\n                        }\r\n                    } else if (pull[pull_index].from < pull[pull_index].to) {\r\n                        // the values were pulled out to the right, so redistribute them back to the left\r\n                        let buffer = new Range(pull[pull_index].range.end - pull[pull_index].count, pull[pull_index].range.end);\r\n                        while (buffer.length() > 0) {\r\n                            index = this.FindLastBackward(this.Reads.readValue(buffer.end - 1), new Range(pull[pull_index].range.start, buffer.start), unique);\r\n                            let amount = buffer.start - index;\r\n                            this.Rotate(amount, new Range(index, buffer.end), true);\r\n                            buffer.start -= amount;\r\n                            buffer.end -= (amount + 1);\r\n                            unique -= 2;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            // double the size of each A and B subarray that will be merged in the next level\r\n            if (!iterator.nextLevel()) break;\r\n        }\r\n    }\r\n    runSort(low, high, bucketsNum, bufferSize){\r\n        if(bufferSize!==0){\r\n            this.cache_size = bufferSize\r\n            this.cache = this.Writes.createAuxArray(bufferSize)\r\n        }\r\n        this.Sort(high+1)\r\n        this.Writes.removeAuxArray(this.cache)\r\n    }\r\n}","import React from \"react\";\r\nimport {objLength} from \"../utils/utils\";\r\nimport styles from \"./ArrayWindow.module.scss\";\r\n\r\nexport class ArrayWindow extends React.PureComponent {\r\n    array\r\n    mainArray\r\n    height\r\n    visualProps\r\n    borderEnabled\r\n    visualStyle\r\n    arrayLen\r\n    sizeStyle\r\n    updateInterval\r\n    updateAnimFrame\r\n    updateCounter\r\n    index\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.array = props.array\r\n        this.index = props.index\r\n        this.mainArray = props.mainArray\r\n        this.height = props.height\r\n        this.visualProps = props.visualProps\r\n        this.borderEnabled = this.visualProps.barsStroke\r\n        this.visualStyle = this.visualProps.style\r\n        this.arrayLen = this.array.length\r\n        this.sizeStyle = {width: \"100%\", height: this.height + \"%\"};\r\n        this.updateCounter = 1\r\n        this.state = {\r\n            renderedArray: this.renderArray()\r\n        }\r\n    }\r\n    componentDidMount() {\r\n        this.updateInterval = setInterval(()=>{\r\n            this.cancelAndUpdate()\r\n        }, 17)\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        cancelAnimationFrame(this.updateAnimFrame)\r\n    }\r\n\r\n    cancelAndUpdate(){\r\n        cancelAnimationFrame(this.updateAnimFrame)\r\n        this.updateAnimFrame = requestAnimationFrame(this.renderArray.bind(this))\r\n    }\r\n\r\n    componentWillReceiveProps(nextProps, nextContext){\r\n        this.array = nextProps.array\r\n        // this.index = nextProps.index\r\n        this.mainArray = nextProps.mainArray\r\n        this.height = nextProps.height\r\n        this.visualProps = nextProps.visualProps\r\n        this.borderEnabled = this.visualProps.barsStroke\r\n        this.visualStyle = this.visualProps.style\r\n        this.sizeStyle = {width: \"100%\", height: this.height + \"%\"};\r\n        let len = this.array.length\r\n        if(len !== this.arrayLen){\r\n            this.arrayLen = len\r\n            this.cancelAndUpdate()\r\n        }\r\n        //workaround for firefox\r\n        if(++this.updateCounter%5===0){\r\n            this.cancelAndUpdate()\r\n            this.updateCounter=1\r\n        }\r\n\r\n    }\r\n\r\n    renderArray() {\r\n        const rem = parseInt(getComputedStyle(document.documentElement).fontSize)\r\n\r\n        let canvasArr = document.getElementsByClassName(styles.canvas)\r\n        let containerArr = document.getElementsByClassName(styles.arrayContainer)\r\n\r\n        let canvas = canvasArr[canvasArr.length - this.index-1]\r\n        let container = containerArr[containerArr.length - this.index-1]\r\n\r\n        if(canvas==null){\r\n            return\r\n        }\r\n        let containerWidth = container.clientWidth\r\n        let containerHeight = container.clientHeight\r\n        canvas.width = containerWidth\r\n        canvas.height = containerHeight\r\n        let ctx = canvas.getContext('2d')\r\n        ctx.clearRect(0, 0, containerWidth, containerHeight);\r\n        ctx.imageSmoothingEnabled= false\r\n        ctx.filter = \"none\"\r\n        let offset = containerWidth/this.mainArray.length\r\n\r\n        if(this.visualStyle === \"bars\") {\r\n            for (let i = 0; i < this.arrayLen; ++i) {\r\n                let height = this.array[i].getValue() / (this.mainArray.length - 1) * containerHeight\r\n\r\n                let x = offset * i\r\n                let y = containerHeight - height\r\n                let w = offset\r\n                let h = height\r\n                ctx.fillStyle = \"rgb(\" + this.array[i].getColorForRender() + \")\"\r\n                ctx.fillRect(x, y, w, h)\r\n                if (this.borderEnabled && containerWidth / this.mainArray.length > 5) {\r\n                    ctx.strokeStyle = \"rgb(0, 0, 0)\"\r\n                    ctx.lineWidth = 1\r\n                    ctx.strokeRect(x, y, w, h)\r\n                } else {\r\n                    ctx.strokeStyle = \"rgb(\" + this.array[i].getColorForRender() + \")\"\r\n                    ctx.lineWidth = 1\r\n                    ctx.strokeRect(x, y, w, h)\r\n                }\r\n\r\n            }\r\n        }\r\n        else if(this.visualStyle === \"dots\"){\r\n            for (let i = 0; i < this.arrayLen; ++i) {\r\n                let height = this.array[i].getValue() / (this.mainArray.length - 1) * containerHeight\r\n\r\n                let x = offset * i\r\n                let y = containerHeight - height\r\n                let w = 0.5*rem\r\n                let h = 0.5*rem\r\n\r\n                ctx.fillStyle = \"rgb(\" + this.array[i].getColorForRender() + \")\"\r\n                ctx.fillRect(x, y, w, h)\r\n            }\r\n        }\r\n    }\r\n\r\n    render() {\r\n            return <div style={this.sizeStyle}>\r\n                <div className={styles.arrayContainer}>\r\n                    <canvas className={styles.canvas}/>\r\n                </div>\r\n            </div>\r\n    }\r\n}","import React from 'react';\r\nimport styles from \"./Stats.module.scss\";\r\n\r\nexport function Stats(props){\r\n    return(\r\n        <div className={styles.statsContainer}>\r\n            <div><b>Sort: {props.sortName}</b></div>\r\n            <div>Length: {props.arrLength}</div>\r\n            <div>Comparisons: {props.comparisons}</div>\r\n            <div>Writes to main array: {props.mainWrites}</div>\r\n            <div>Writes to auxiliary arrays: {props.auxWrites}</div>\r\n            <div>Sort time: {props.sortTime.toFixed(2)} ms</div>\r\n        </div>\r\n    )\r\n}","export const GAP_FACTOR = 10\r\nexport let initFunctions = {\r\n    linear: function (x, length) {\r\n        return x;\r\n    },\r\n    // reverse: function (x, length) {\r\n    //     return length - x;\r\n    // },\r\n    // pipeOrgan: function (x, length) {\r\n    //     if (x < length / 2) {\r\n    //         return 2 * x;\r\n    //     } else {\r\n    //         return 2 * (length - x) - 1;\r\n    //     }\r\n    // },\r\n    // inversedPipeOrgan: function (x, length){\r\n    //     if (x < length / 2) {\r\n    //         return (length - 2*x) - 1;\r\n    //     } else {\r\n    //         return x*2-length;\r\n    //     }\r\n    // },\r\n    manySimular: function (x, length){\r\n        let divider = Math.trunc(length/GAP_FACTOR)\r\n        return Math.trunc(x/divider)*divider\r\n    }\r\n}","import {randomInt} from \"./utils\";\r\nimport {HeapSort} from \"../Sorts/HeapSort\";\r\nimport {GAP_FACTOR} from \"./initFunctions\";\r\n\r\nexport let shuffles = {\r\n    FullShuffle: function (arrayVisualizer) {\r\n        let len = arrayVisualizer.getArrLength()\r\n        for (let i = 0; i < len; ++i) {\r\n            let randomIndex = randomInt(i, len)\r\n            arrayVisualizer.getWrites().swapWithDelay(i, randomIndex, arrayVisualizer.getMainArray(), true, arrayVisualizer.getDelays().getDelayInc()/5, true)\r\n        }\r\n        // return instructions\r\n    },\r\n\r\n    AlmostSorted: function (arrayVisualizer) {\r\n        let len = arrayVisualizer.getArrLength()\r\n        const AMOUNT = 0.1\r\n        for (let i = 0; i < len * AMOUNT; ++i) {\r\n            let randomIndexA = randomInt(i, len)\r\n            let randomIndexB = randomInt(i, len)\r\n            arrayVisualizer.getWrites().swapWithDelay(randomIndexA, randomIndexB, arrayVisualizer.getMainArray(), true, arrayVisualizer.getDelays().getDelayInc()/5, true)\r\n        }\r\n    },\r\n    Reverse: function (arrayVisualizer){\r\n        let len = arrayVisualizer.getArrLength()\r\n        for (let i = 0; i < Math.trunc(len/2); ++i){\r\n            arrayVisualizer.getWrites().swapWithDelay(i, len-i-1, arrayVisualizer.getMainArray(), true, arrayVisualizer.getDelays().getDelayInc()/5, true)\r\n        }\r\n    },\r\n    BlockShuffle: function (arrayVisualizer) {\r\n        let len = arrayVisualizer.getArrLength()\r\n        let gap = len/GAP_FACTOR\r\n        for (let i = 0; i < GAP_FACTOR-1; ++i) {\r\n            let factor = randomInt(i+1, GAP_FACTOR)\r\n            for(let j = 0; j < gap; ++j){\r\n                arrayVisualizer.getWrites().swapWithDelay(j+i*gap, j+factor*gap, arrayVisualizer.getMainArray(), true, arrayVisualizer.getDelays().getDelayInc()/5, true)\r\n            }\r\n        }\r\n    },\r\n    PipeOrgan: function (arrayVisualizer){\r\n        let len = arrayVisualizer.getArrLength()\r\n        let Reads = arrayVisualizer.getReads()\r\n        let temp = new Array(len);\r\n        for(let i = 0, j = 0; i < len; i+=2){\r\n            temp[j++] = Reads.get(i, arrayVisualizer.getMainArray())\r\n        }\r\n        for(let i = 1, j = len; i < len ;i+=2) {\r\n            temp[--j] = Reads.get(i, arrayVisualizer.getMainArray())\r\n        }\r\n        for(let i = 0; i < len; i++){\r\n            arrayVisualizer.getWrites().writeWithDelay(i, temp[i], arrayVisualizer.getMainArray(), true, arrayVisualizer.getDelays().getDelayInc()/5, true)\r\n        }\r\n    },\r\n    InversedPipeOrgan: function (arrayVisualizer){\r\n        let len = arrayVisualizer.getArrLength()\r\n        let Reads = arrayVisualizer.getReads()\r\n        let temp = new Array(len);\r\n        for(let i = 0, j = 0; i < len; i+=2){\r\n            temp[j++] = Reads.get(len-i-1, arrayVisualizer.getMainArray())\r\n        }\r\n        for(let i = 1, j = len; i < len ;i+=2) {\r\n            temp[--j] = Reads.get(len-i-1, arrayVisualizer.getMainArray())\r\n        }\r\n        for(let i = 0; i < len; i++){\r\n            arrayVisualizer.getWrites().writeWithDelay(i, temp[i], arrayVisualizer.getMainArray(), true, arrayVisualizer.getDelays().getDelayInc()/5, true)\r\n        }\r\n    },\r\n    Heap: function (arrayVisualizer){\r\n        let n = arrayVisualizer.getArrLength()\r\n        arrayVisualizer.initPseudoArray()\r\n        let heapSort = new HeapSort(arrayVisualizer)\r\n        heapSort.heapify(0, n)\r\n    },\r\n    QuickSortKiller: function (arrayVisualizer){\r\n        let len = arrayVisualizer.getArrLength()\r\n        for(let j = len-len%2-2, i = j-1; i >= 0; i-=2, j--) {\r\n            arrayVisualizer.getWrites().swapWithDelay(i, j, arrayVisualizer.getMainArray(), true, arrayVisualizer.getDelays().getDelayInc() / 5, true)\r\n        }\r\n    }\r\n}","import React from 'react';\r\nimport styles from \"./Controls.module.scss\";\r\nimport {initFunctions} from \"../utils/initFunctions\";\r\nimport {shuffles} from \"../utils/shuffles\";\r\n\r\n\r\nexport class Controls extends React.PureComponent {\r\n    isControlShow\r\n    arrayVisualizer\r\n    sorts\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.isControlShow = true;\r\n        this.arrayVisualizer = props.arrayVisualizer\r\n        this.sorts = props.sorts\r\n        this.arrayVisualizer.updateArrLength(this.arrayVisualizer.DEFAULT_ARR_LEN)\r\n        // this.arrayVisualizer.initArray(initFunctions.linear)\r\n    }\r\n\r\n    updateArrLength() {\r\n        this.stopSort()\r\n        let slider = document.getElementById(styles.slider)\r\n\r\n        if (slider !== null) {\r\n            let len = slider.value\r\n            this.arrayVisualizer.updateArrLength(len)\r\n        }\r\n\r\n    }\r\n\r\n    toggleControlShow() {\r\n        // console.log(styles.controls)\r\n        let controlsContainer = document.getElementById(styles.controlsContainer)\r\n        let controls = document.getElementById(styles.controls)\r\n        let btn = document.getElementById(styles.showToggleBtn)\r\n        if (this.isControlShow) {\r\n            controls.style.display = \"none\"\r\n            controlsContainer.style.width = \"0\"\r\n            btn.innerHTML = \"&gt;&gt;\";\r\n        } else {\r\n            controls.style.display = \"block\"\r\n            controlsContainer.style.width = \"20rem\"\r\n            btn.innerHTML = \"&lt;&lt\";\r\n        }\r\n        this.isControlShow = !this.isControlShow\r\n    }\r\n\r\n    initArray(func) {\r\n        this.arrayVisualizer.initArray(func, this.arrayVisualizer.getArrLength(), true)\r\n    }\r\n\r\n    shuffleArray(func) {\r\n        this.stopSort()\r\n        this.arrayVisualizer.shuffleArray(func)\r\n        // func(this.arrayVisualizer)\r\n    }\r\n\r\n    sortArray(sortName) {\r\n        this.stopSort()\r\n        this.sorts.runSort(sortName, 0, this.arrayVisualizer.getArrLength() - 1)\r\n    }\r\n\r\n    stopSort() {\r\n        this.arrayVisualizer.stopSort()\r\n        // this.Delays.resetDelays()\r\n        // this.arrayVisualizer.nullify()\r\n    }\r\n\r\n    abortSort() {\r\n        this.stopSort()\r\n        this.initArray(initFunctions.linear)\r\n    }\r\n\r\n    genInitFunctions() {\r\n        // console.log(initFunctions)\r\n        let tmp = []\r\n        for (let i in initFunctions) {\r\n            tmp.push(\r\n                <button key={i} onClick={this.initArray.bind(this, initFunctions[i])}>{i}</button>\r\n            )\r\n        }\r\n        return tmp;\r\n    }\r\n\r\n    getSorts() {\r\n        let tmp = []\r\n        let sortsNames = this.sorts.getSortsPaths()\r\n        for (let i of sortsNames) {\r\n            tmp.push(\r\n                <button key={i} onClick={this.sortArray.bind(this, i)}>{i}</button>)\r\n        }\r\n        return tmp;\r\n    }\r\n\r\n    getShuffles() {\r\n        let tmp = []\r\n        for (let i in shuffles) {\r\n            tmp.push(\r\n                <button key={i} onClick={this.shuffleArray.bind(this, shuffles[i])}>{i}</button>\r\n            )\r\n        }\r\n        return tmp;\r\n    }\r\n\r\n    toggleShowAuxArrays() {\r\n        let element = document.getElementById(\"auxArrShowCB\")\r\n        this.arrayVisualizer.setShowAuxArrays(element.checked)\r\n    }\r\n\r\n    toggleBarsStroke() {\r\n        let element = document.getElementById(\"enableStrokeCB\")\r\n        this.arrayVisualizer.setEnableBarsStroke(element.checked)\r\n    }\r\n\r\n    toggleEnableMarks() {\r\n        let element = document.getElementById(\"enableMarksCB\")\r\n        this.arrayVisualizer.setEnableMarks(element.checked)\r\n    }\r\n\r\n    toggleVisualStyle(val) {\r\n        this.arrayVisualizer.setVisualStyle(val)\r\n    }\r\n\r\n    toggleRainbow(val){\r\n        this.arrayVisualizer.getMarks().setRainbow(val)\r\n    }\r\n\r\n    toggleShowStats(){\r\n        let element = document.getElementById(\"showStatsCB\")\r\n        this.arrayVisualizer.setShowStats(element.checked)\r\n    }\r\n\r\n    restoreArray(){\r\n        this.stopSort()\r\n        this.arrayVisualizer.restoreArray()\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div id={styles.controlsContainer}>\r\n                {/*<div onClick={this.toggleControlShow.bind(this)} id={styles.showToggleBtn}>&lt;&lt;</div>*/}\r\n                <div id={styles.controls}>\r\n                    <div>\r\n                        <div>\r\n                            <div className={styles.sectionHeader}>Array Size</div>\r\n                            <input id={styles.slider} type=\"range\" min=\"10\" max=\"1000\"\r\n                                   defaultValue={this.arrayVisualizer.DEFAULT_ARR_LEN}\r\n                                   step=\"10\"\r\n                                   onChange={this.updateArrLength.bind(this)}/>\r\n                        </div>\r\n                        <div>\r\n                            <div className={styles.sectionHeader}>Visuals</div>\r\n                            <div style={{display: \"flex\", justifyContent:\"center\"}}>\r\n                                <div style={{textAlign: \"left\"}}>\r\n                                    <div className={styles.checkBoxContainer}>\r\n                                        <input onChange={this.toggleShowAuxArrays.bind(this)} type=\"checkbox\"\r\n                                               id=\"auxArrShowCB\"\r\n                                               name=\"auxArrShowCB\" defaultChecked={true}/>\r\n                                        <label htmlFor=\"auxArrShowCB\">Show Aux Arrays</label>\r\n                                    </div>\r\n                                    <div className={styles.checkBoxContainer}>\r\n                                        <input onChange={this.toggleBarsStroke.bind(this)} type=\"checkbox\"\r\n                                               id=\"enableStrokeCB\"\r\n                                               name=\"enableStrokeCB\" defaultChecked={true}/>\r\n                                        <label htmlFor=\"enableStrokeCB\">Enable Bars Stroke</label>\r\n                                    </div>\r\n                                    <div className={styles.checkBoxContainer}>\r\n                                        <input onChange={this.toggleEnableMarks.bind(this)} type=\"checkbox\"\r\n                                               id=\"enableMarksCB\"\r\n                                               name=\"enableMarksCB\" defaultChecked={true}/>\r\n                                        <label htmlFor=\"enableMarksCB\">Enable Marks(Disable to reduce lags)</label>\r\n                                    </div>\r\n                                    <div className={styles.checkBoxContainer}>\r\n                                        <input onChange={this.toggleShowStats.bind(this)} type=\"checkbox\"\r\n                                               id=\"showStatsCB\"\r\n                                               name=\"showStatsCB\" defaultChecked={true}/>\r\n                                        <label htmlFor=\"showStatsCB\">Show stats</label>\r\n                                    </div>\r\n                                    <div className={styles.checkBoxContainer}>\r\n                                        <button onClick={this.toggleRainbow.bind(this, true)}>Paint to Rainbow</button>\r\n                                        <button onClick={this.toggleRainbow.bind(this, false)}>Clear Color</button>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                        <div>\r\n                            <div className={styles.sectionHeader}>Visual Styles</div>\r\n                            <div>\r\n                                <input onChange={this.toggleVisualStyle.bind(this, \"bars\")} type=\"radio\"\r\n                                       id=\"barsRadioBtn\"\r\n                                       name=\"visualStyle\" value=\"bars\" defaultChecked={true}/>\r\n                                <label htmlFor=\"barsRadioBtn\">Bars</label>\r\n\r\n                                <input onChange={this.toggleVisualStyle.bind(this, \"dots\")} type=\"radio\"\r\n                                       id=\"dotsRadioBtn\"\r\n                                       name=\"visualStyle\" value=\"dots\"/>\r\n                                <label htmlFor=\"dotsRadioBtn\">Dots</label>\r\n                            </div>\r\n                        </div>\r\n                        <div>\r\n                            <div className={styles.sectionHeader}>Init Array</div>\r\n                            <div>{this.genInitFunctions()}</div>\r\n                            <div><button onClick={this.restoreArray.bind(this)}>RESTORE ARRAY</button></div>\r\n                        </div>\r\n\r\n                        <div>\r\n                            <div className={styles.sectionHeader}>Shuffle Array</div>\r\n                            <div>\r\n                                {/*<button onClick={this.shuffleArray.bind(this)}>Random</button>*/}\r\n                                <div>{this.getShuffles()}</div>\r\n                            </div>\r\n                        </div>\r\n                        <div>\r\n                            <div className={styles.sectionHeader}>Sort control</div>\r\n                            <div>\r\n                                <button onClick={this.abortSort.bind(this)}>Abort Sort(Recommended)</button>\r\n                                <button onClick={this.stopSort.bind(this)}>Stop Sort(Not Recommended)</button>\r\n                            </div>\r\n                        </div>\r\n                        <div>\r\n                            <div className={styles.sectionHeader}>Sort Array</div>\r\n                            <div>\r\n                                {this.getSorts()}\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}","export class Sounds{\r\n    arrayVisualizer\r\n    ctx\r\n    Delays\r\n    constructor(arrayVisualizer) {\r\n        this.arrayVisualizer = arrayVisualizer\r\n        this.Delays = arrayVisualizer.getDelays()\r\n        this.ctx = new (window.AudioContext || window.webkitAudioContext)();\r\n    }\r\n    playSound(value) {\r\n        let osc = this.ctx.createOscillator();\r\n        osc.type = 'sine';\r\n\r\n        let k = value / this.arrayVisualizer.getArrLength()\r\n        osc.frequency.value = 2000 * k + 200;\r\n\r\n        let addTime = 50\r\n\r\n        let gainNode = this.ctx.createGain()\r\n        gainNode.gain.value = 0;\r\n        osc.connect(gainNode)\r\n        gainNode.connect(this.ctx.destination)\r\n        // console.log(this.Delays.getDelayInc())\r\n        gainNode.gain.linearRampToValueAtTime(0.05, this.ctx.currentTime + (this.Delays.getDelayInc() + addTime) / 1000 / 2)\r\n        gainNode.gain.linearRampToValueAtTime(0, this.ctx.currentTime + (this.Delays.getDelayInc() + addTime) / 1000)\r\n\r\n        osc.start();\r\n        osc.stop(this.ctx.currentTime + (this.Delays.getDelayInc() + addTime) / 1000);\r\n    }\r\n}","import {HSL2RGB, randomInt} from \"../utils/utils\";\r\n\r\nexport const colors = {\r\n    \"Unmarked\": [255, 255, 255],\r\n    \"Default\": [255, 0, 0],\r\n    \"Additional\": [randomInt(0, 256), randomInt(0, 256), randomInt(0, 256)],\r\n    \"Sorted\": [0, 255, 0],\r\n    \"Analysis\": [0, 0, 255]\r\n}\r\nexport class Marks{\r\n    arrayVisualizer\r\n    Delays\r\n\r\n    constructor(arrayVisualizer) {\r\n        this.arrayVisualizer = arrayVisualizer\r\n        this.Delays = arrayVisualizer.getDelays()\r\n    }\r\n\r\n    mark(index, args, saveArr = true) {\r\n        if(!this.arrayVisualizer.getEnableMarks()){\r\n            return;\r\n        }\r\n        let type = \"Default\"\r\n        let color = colors[\"Default\"]\r\n        let tmpArr = this.arrayVisualizer.getMainArray()\r\n        // Additional\r\n        if (args.type === \"Additional\") {\r\n            type = \"Additional\"\r\n            color = args.color\r\n            // console.log(color)\r\n        }\r\n        //Default\r\n        else if (args.type === \"Default\") {\r\n            type = \"Default\"\r\n            color = colors[\"Default\"]\r\n        } else {\r\n            type = args.type\r\n            color = args.color\r\n            // console.log(color)\r\n        }\r\n\r\n        tmpArr[index].setType(type)\r\n        tmpArr[index].setMarkColor(color)\r\n        if (saveArr) {\r\n            this.arrayVisualizer.setState({\r\n                array: tmpArr\r\n            })\r\n        } else {\r\n            return tmpArr\r\n        }\r\n        // console.log(color);\r\n    }\r\n\r\n    markMany(indexes, args, saveArr) {\r\n        let tmpArr = this.arrayVisualizer.getMainArray()\r\n        for (let i of indexes) {\r\n            if (saveArr) {\r\n                this.mark(i, args, saveArr)\r\n            } else {\r\n                tmpArr = this.mark(i, args, saveArr)\r\n            }\r\n        }\r\n        if (!saveArr) {\r\n            return tmpArr\r\n        }\r\n    }\r\n\r\n    unmark(index, saveArr = true) {\r\n        let tmpArr = this.arrayVisualizer.getMainArray()\r\n        // tmpArr[index].setMarkColor(colors[\"Unmarked\"])\r\n        tmpArr[index].setType(\"Unmarked\")\r\n        if (saveArr) {\r\n            this.arrayVisualizer.setState({\r\n                array: tmpArr\r\n            })\r\n        } else {\r\n            return tmpArr\r\n        }\r\n    }\r\n\r\n    unmarkMany(indexes, saveArr, saveOnce) {\r\n        let tmpArr = this.arrayVisualizer.getMainArray()\r\n        for (let i of indexes) {\r\n            if (saveArr) {\r\n                this.unmark(i, saveArr)\r\n            } else {\r\n                tmpArr = this.unmark(i, saveArr)\r\n            }\r\n        }\r\n        if (saveOnce) {\r\n            this.arrayVisualizer.setState({\r\n                array: tmpArr\r\n            })\r\n        }\r\n        if (!saveArr) {\r\n            return tmpArr\r\n        }\r\n    }\r\n\r\n    setRainbow(val){\r\n        let tmpArr = this.arrayVisualizer.getMainArray()\r\n        if(val){\r\n            for(let i = 0; i < tmpArr.length; ++i){\r\n                let hsl = [i / tmpArr.length, 0.8, 0.5]\r\n                let rgb = HSL2RGB(hsl[0], hsl[1], hsl[2])\r\n                tmpArr[i].setColor(rgb)\r\n            }\r\n        }else{\r\n            for(let i of tmpArr){\r\n                i.setColor([255, 255, 255])\r\n            }\r\n        }\r\n        this.arrayVisualizer.setState({\r\n            array: tmpArr\r\n        })\r\n    }\r\n\r\n    markUnmarkMany(markIndexes, markArgs) {\r\n        this.markMany(markIndexes, markArgs, true)\r\n        this.Delays.push(setTimeout(this.unmarkMany.bind(this), this.Delays.incDelay(\"Unmark\", this.Delays.getDelayInc() / 500), markIndexes, false, true))\r\n    }\r\n\r\n    clearAllMarks(){\r\n        this.unmarkMany(Array.from(Array(this.arrayVisualizer.getArrLength()).keys()), false, true)\r\n    }\r\n\r\n}","import {Delays} from \"./Delays\";\r\nimport {Marks} from \"./Marks\";\r\nimport {Sounds} from \"./Sounds\";\r\n\r\nexport class Reads{\r\n    arrayVisualizer;\r\n    Sounds\r\n    Delays\r\n    Marks\r\n    constructor(arrayVisualizer){\r\n        this.arrayVisualizer = arrayVisualizer\r\n        this.Sounds = arrayVisualizer.getSounds()\r\n        this.Delays = arrayVisualizer.getDelays()\r\n        this.Marks = arrayVisualizer.getMarks()\r\n    }\r\n\r\n    readValue(index, arr = this.arrayVisualizer.getPseudoArray()) {\r\n        return arr[index].getValue()\r\n    }\r\n\r\n    compareInArr(a, b, arr = this.arrayVisualizer.getPseudoArray()) {\r\n        // this.compareWithDelay([a,b], [])\r\n        return this.compareValues(arr[a], arr[b])\r\n    }\r\n\r\n    get(index, arr = this.arrayVisualizer.getPseudoArray()){\r\n        return arr[index];\r\n    }\r\n\r\n    //TODO: add marks\r\n    compareValues(a, b){\r\n        this.Delays.incOperationsCounter(1)\r\n        let toMark = []\r\n        let toSound = []\r\n        let tmpA\r\n        let tmpB\r\n        if(typeof a === \"object\"){\r\n            tmpA = a.getValue()\r\n            let index = this.arrayVisualizer.getPseudoArray().findIndex(element => {return element.getValue() === tmpA})\r\n            if(index !== -1){\r\n                toMark.push(index)\r\n            }\r\n        }else{\r\n            tmpA = a\r\n        }\r\n\r\n        if(typeof b === \"object\"){\r\n            tmpB = b.getValue()\r\n            let index = this.arrayVisualizer.getPseudoArray().findIndex(element => {return element.getValue() === tmpB})\r\n            if(index !== -1) {\r\n                toMark.push(index)\r\n            }\r\n        }else{\r\n            tmpB = b\r\n        }\r\n\r\n        toSound = [tmpA, tmpB]\r\n\r\n        // let tmpA = typeof a === \"object\" ? a.getValue() : a\r\n        // let tmpB = typeof b === \"object\" ? b.getValue() : b\r\n\r\n        this.compareWithDelay(toMark, toSound)\r\n        return tmpA - tmpB;\r\n    }\r\n\r\n    compareWithDelay(toMark, toSound, delay = this.Delays.getDelayInc()/5){\r\n        this.Delays.push(setTimeout(this.compareStub.bind(this), this.Delays.incDelay(\"Write\", delay), toMark, toSound))\r\n    }\r\n\r\n    compareStub(toMark = [], toSound = []){\r\n        let curComparisons = this.arrayVisualizer.getState().comparisons + 1\r\n        this.arrayVisualizer.setState({\r\n            comparisons: curComparisons\r\n        })\r\n        for(let i of toSound){\r\n            this.Sounds.playSound(i)\r\n        }\r\n        this.Delays.updateSortTime()\r\n        // console.log(toMark)\r\n        // this.Marks.markUnmarkMany(toMark,{type: \"Additional\", color: [0,255,0]})\r\n        this.Marks.markUnmarkMany(toMark,{type: \"Default\"})\r\n    }\r\n\r\n    auxGet(index, arrIndex, isPseudo = true){\r\n        if(isPseudo){\r\n            return this.arrayVisualizer.getPseudoAuxArrays()[arrIndex][index]\r\n        }else {\r\n            return this.arrayVisualizer.getAuxArrays()[arrIndex][index]\r\n        }\r\n    }\r\n\r\n\r\n    auxReadValue(index, arrIndex, isPseudo = true){\r\n        if(isPseudo){\r\n            return this.arrayVisualizer.getPseudoAuxArrays()[arrIndex][index].getValue()\r\n        }else {\r\n            return this.arrayVisualizer.getAuxArrays()[arrIndex][index].getValue()\r\n        }\r\n    }\r\n}","import React from 'react';\r\nimport {arraysEquals, deepArrayCopy, getAllMethods, objLength, randomInt} from \"../utils/utils\";\r\nimport {Sorts} from \"../Sorts/Sorts\"\r\nimport {ArrayWindow} from \"../ArrayWindow/ArrayWindow\";\r\nimport {Element} from \"../classes/Element\";\r\nimport {Stats} from \"../Stats/Stats\";\r\nimport {Controls} from \"../Controls/Controls\";\r\nimport {initFunctions} from \"../utils/initFunctions\";\r\nimport {Delays} from \"../ArrayAccess/Delays\";\r\nimport {Sounds} from \"../ArrayAccess/Sounds\";\r\nimport {Marks} from \"../ArrayAccess/Marks\";\r\nimport {Reads} from \"../ArrayAccess/Reads\";\r\nimport {Writes} from \"../ArrayAccess/Writes\";\r\n\r\nconst colors = {\r\n    \"Unmarked\": [255, 255, 255],\r\n    \"Default\": [255, 0, 0],\r\n    \"Additional\": [randomInt(0, 256), randomInt(0, 256), randomInt(0, 256)],\r\n    \"Sorted\": [0, 255, 0],\r\n    \"Analysis\": [0, 0, 255]\r\n}\r\n\r\nexport class ArrayVisualizer extends React.Component {\r\n    delays;\r\n    delayInc;\r\n    pseudoArray;\r\n    pseudoAuxArrays;\r\n\r\n    Sorts\r\n    delayIncConst\r\n    showAuxArrays\r\n    showStats\r\n    enableBarsStroke\r\n    visualStyle\r\n    enableMarks\r\n\r\n    Delays\r\n    Sounds\r\n    Marks\r\n    Reads\r\n    Writes\r\n\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.DEFAULT_ARR_LEN = 100\r\n        this.state = {\r\n            array: this.initArray(initFunctions.linear, this.DEFAULT_ARR_LEN),\r\n            sortName: \"\",\r\n            comparisons: 0,\r\n            mainWrites: 0,\r\n            auxWrites: 0,\r\n            sortTime: 0,\r\n            auxArrays: {}\r\n        }\r\n        this.pseudoArray = deepArrayCopy(this.state.array)\r\n        this.Delays = new Delays(this)\r\n        this.Sounds = new Sounds(this)\r\n        this.Marks = new Marks(this)\r\n        this.Reads = new Reads(this)\r\n\r\n        this.prevArray = []\r\n\r\n        this.Writes = new Writes(this)\r\n        this.pseudoAuxArrays = []\r\n        this.Sorts = new Sorts(this);\r\n        this.showAuxArrays = true\r\n        this.showStats = true\r\n        this.enableBarsStroke = true\r\n        this.enableMarks = true\r\n        this.visualStyle = {\r\n            // style: \"bars\",\r\n            style: \"bars\",\r\n            barsStroke: true,\r\n        }\r\n    }\r\n\r\n    initArray(func, length, setToState=false) {\r\n        let arr = []\r\n        for (let i = 0; i < length; ++i) {\r\n            let element = new Element(func(i, length), \"Unmarked\", [255, 255, 255], [0,0,0,0])\r\n            arr.push(element)\r\n        }\r\n        if(setToState){\r\n            this.setState({\r\n                array: arr\r\n            })\r\n        }else {\r\n            return arr;\r\n        }\r\n    }\r\n\r\n    nullify() {\r\n        this.Delays.resetDelays()\r\n        this.setState(\r\n            {\r\n                comparisons: 0,\r\n                mainWrites: 0,\r\n                auxWrites: 0,\r\n                sortTime: 0\r\n            }\r\n        )\r\n        // eslint-disable-next-line react/no-direct-mutation-state\r\n        this.state.writes = 0;\r\n        // eslint-disable-next-line react/no-direct-mutation-state\r\n        this.state.comparisons = 0;\r\n    }\r\n\r\n    setShowAuxArrays(val){\r\n        this.showAuxArrays = val\r\n    }\r\n\r\n    setShowStats(val){\r\n        this.showStats = val\r\n        this.forceMainArrayUpdate()\r\n    }\r\n\r\n    setEnableBarsStroke(val){\r\n        this.visualStyle.barsStroke = val;\r\n        this.forceMainArrayUpdate()\r\n    }\r\n\r\n    setVisualStyle(val){\r\n        this.visualStyle.style = val;\r\n        this.forceMainArrayUpdate()\r\n    }\r\n\r\n    setEnableMarks(val){\r\n        this.enableMarks = val;\r\n        if(!val){\r\n            this.Marks.clearAllMarks()\r\n        }\r\n    }\r\n\r\n    getEnableMarks(){\r\n        return this.enableMarks;\r\n    }\r\n\r\n    getArrayVisualizer() {\r\n        return this;\r\n    }\r\n\r\n    getPseudoArray() {\r\n        return this.pseudoArray;\r\n    }\r\n\r\n    getState(){\r\n        return this.state\r\n    }\r\n\r\n    getArrLength(){\r\n        return this.state.array.length;\r\n    }\r\n\r\n    getMainArray(){\r\n        return this.state.array\r\n    }\r\n\r\n    getPseudoAuxArrays(){\r\n        return this.pseudoAuxArrays\r\n    }\r\n\r\n    getDelays(){\r\n        return this.Delays\r\n    }\r\n\r\n    getSounds(){\r\n        return this.Sounds;\r\n    }\r\n\r\n    getMarks(){\r\n        return this.Marks;\r\n    }\r\n\r\n    getAuxArrays(){\r\n        return this.state.auxArrays\r\n    }\r\n\r\n    getReads(){\r\n        return this.Reads;\r\n    }\r\n\r\n    getWrites(){\r\n        return this.Writes\r\n    }\r\n\r\n\r\n    stopSort(){\r\n        // this.resetDelay()\r\n        this.Delays.resetDelays()\r\n        this.Marks.clearAllMarks()\r\n        this.setState({\r\n                auxArrays: []\r\n            }\r\n        )\r\n    }\r\n\r\n    shuffleArray(func) {\r\n        this.nullify()\r\n        this.setState({\r\n            sortName: \"Shuffle\"\r\n        })\r\n        this.backupArray()\r\n        func(this);\r\n        // let instructions = func(this);\r\n        // for(let i of instructions){\r\n        //     if(i.cmd === \"swap\"){\r\n        //         this.Writes.swapWithDelay(i.a, i.b, this.state.array, true, this.Delays.getDelayInc()/5, true)\r\n        //     }\r\n        // }\r\n\r\n    }\r\n\r\n    restoreArray(){\r\n        this.setState({\r\n            array: deepArrayCopy(this.prevArray)\r\n        })\r\n    }\r\n\r\n    backupArray(){\r\n        this.prevArray = deepArrayCopy(this.state.array)\r\n    }\r\n\r\n\r\n    setSortName(sortName){\r\n        this.setState({\r\n            sortName: sortName\r\n        })\r\n    }\r\n\r\n    initPseudoArray(){\r\n        this.pseudoArray = deepArrayCopy(this.state.array)\r\n    }\r\n\r\n    sortClickEvent() {\r\n    }\r\n\r\n    forceMainArrayUpdate(){\r\n        let tmp = this.state.array;\r\n        this.setState({\r\n            array: tmp\r\n        })\r\n    }\r\n\r\n    updateDelayInc(val){\r\n        this.delayInc = val/this.getArrLength();\r\n    }\r\n\r\n    updateArrLength(len){\r\n        this.setState({\r\n            array: this.initArray(initFunctions.linear, len)\r\n        })\r\n        this.pseudoArray = deepArrayCopy(this.state.array)\r\n\r\n        this.Sorts.arrLength = this.getArrLength()\r\n        // this.updateDelayInc(this.delayIncConst)\r\n        this.Delays.updateDelayInc();\r\n    }\r\n\r\n    genArrayWindows(){\r\n        let tmp = []\r\n        if(this.showAuxArrays) {\r\n            let len = objLength(this.state.auxArrays)\r\n            for (let i = len - 1; i >= 0; i--) {\r\n                tmp.push(\r\n                    <ArrayWindow key={len - i} array={this.state.auxArrays[i]}\r\n                                 mainArray={this.state.array} height={100 / (1 + len)} visualProps = {this.visualStyle} index={len - i} />\r\n                )\r\n            }\r\n        }\r\n        return tmp\r\n    }\r\n\r\n    genStats(){\r\n        if(this.showStats){\r\n            return <Stats sortName={this.state.sortName} comparisons={this.state.comparisons} mainWrites={this.state.mainWrites} auxWrites={this.state.auxWrites} arrLength={this.getArrLength()} sortTime={this.state.sortTime}/>\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                {this.genStats()}\r\n                <div style={{height: \"100vh\"}}>\r\n                {/*<div>*/}\r\n                    {this.genArrayWindows()}\r\n                    <ArrayWindow array={this.state.array} mainArray={this.state.array} height={this.showAuxArrays ? 100/(1+objLength(this.state.auxArrays)) : 100} visualProps={this.visualStyle} index={0}/>\r\n                </div>\r\n                <div>\r\n                    <Controls arrayVisualizer={this} sorts={this.Sorts}/>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport {ArrayVisualizer} from \"./components/ArrayVisualizer/ArrayVisualizer\";\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\n\r\n\r\n\r\n\r\n\r\nReactDOM.render(\r\n    <ArrayVisualizer></ArrayVisualizer>,\r\n  document.getElementById('root')\r\n);\r\n\r\n\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}