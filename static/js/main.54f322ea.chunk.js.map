{"version":3,"sources":["components/Sorts/Sort.js","components/Controls/Controls.module.scss","components/ArrayWindow/ArrayWindow.module.scss","components/Sorts/Sorts.js","components/Stats/Stats.module.scss","components/Sorts sync /^/.*/.js$","components/Sorts/BubbleSort.js","components/Sorts/HeapSort.js","components/Sorts/InsertionSort.js","components/Sorts/LLQuickSort.js","components/Sorts/MergeSort.js","components/Sorts/PseudoTimSort.js","components/Sorts/SelectionSort.js","components/Sorts/SlowSort.js","components/Sorts/StoogeSort.js","components/Sorts/TimSort.js","components/classes/Element.js","components/utils/utils.js","components/ArrayWindow/ArrayWindow.js","components/Stats/Stats.js","components/utils/initFunctions.js","components/utils/shuffles.js","components/Controls/Controls.js","components/ArrayAccess/Delays.js","components/ArrayAccess/Sounds.js","components/ArrayAccess/Marks.js","components/ArrayAccess/Reads.js","components/ArrayAccess/Writes.js","components/ArrayVisualizer/ArrayVisualizer.js","reportWebVitals.js","index.js"],"names":["Sort","arrayVisualizer","this","state","getState","compare","getReads","bind","swap","read","write","getWrites","createAuxArray","removeAuxArray","auxRead","auxWrite","arrLength","getArrLength","sortName","warnLen","isDisabled","low","high","bucketsNum","module","exports","Sorts","sortsPaths","sortPath","require","sort","getSortObject","getWarnLen","window","confirm","initPseudoArray","setSortName","getSortName","runSort","sortClickEvent","map","webpackContext","req","id","webpackContextResolve","__webpack_require__","o","e","Error","code","keys","Object","resolve","BubbleSort","len","i","j","HeapSort","n","largest","l","r","heapify","Math","trunc","InsertionSort","length","key","LLQuickSort","lo","hi","pivot","p","partition","MergeSort","mid","leftArrayLen","rightArrayLen","leftArrayIndex","rightArrayIndex","leftIndex","rightIndex","merge","PseudoTimSort","MIN_MERGE","left","right","temp","m","len1","len2","x","k","minRun","minRunLength","insertionSort","min","size","timSort","SelectionSort","minIndex","SlowSort","floor","StoogeSort","t","TimSort","minGallop","tmpStorageLength","tmp","stackLength","runStart","Array","runLength","stackSize","runHi","reverseRun","start","value","isAux","hint","lastOffset","maxOffset","offset","mergeAt","start1","length1","start2","length2","gallopRight","gallopLeft","mergeLow","mergeHigh","cursor1","cursor2","dest","count1","count2","exit","customCursor","customDest","remaining","makeAscendingRun","binaryInsertionSort","force","pushRun","mergeRuns","forceMergeRuns","Element","type","color","randomInt","a","b","random","deepArrayCopy","arr","out","getValue","getType","getColor","push","arraysEquals","every","v","ArrayWindow","props","array","mainArray","height","styleSheet","backgroundColor","style","className","styles","bar","width","arrayContainer","Stats","statsContainer","writes","initFunctions","linear","reverse","pipeOrgan","inversedPipeOrgan","shuffles","fullShuffle","instructions","randomIndex","cmd","almostSorted","randomIndexA","randomIndexB","Controls","DEFAULT_ARR_LEN","isControlShow","sorts","updateArrLength","initArray","slider","document","getElementById","controlsContainer","controls","btn","showToggleBtn","display","innerHTML","func","shuffleArray","stopSort","onClick","sortsNames","getSortsPaths","sortArray","element","setShowAuxArrays","checked","textCenter","max","defaultValue","step","onChange","toggleShowAuxArrays","name","defaultChecked","htmlFor","genInitFunctions","getShuffles","abortSort","getSorts","React","Component","Delays","timeoutArray","delays","Swap","Write","Comp","Unmark","CreateAuxArray","RemoveAuxArray","delayIncFactor","delayInc","obj","delayName","delay","args","setTimeout","timeout","clearTimeout","inc","Sounds","getDelays","ctx","AudioContext","webkitAudioContext","osc","createOscillator","frequency","gainNode","createGain","gain","connect","destination","console","log","getDelayInc","linearRampToValueAtTime","currentTime","stop","colors","Marks","getMainArray","index","saveArr","tmpArr","setType","setColor","setState","indexes","mark","saveOnce","unmark","markIndexes","markArgs","markMany","unmarkMany","incDelay","Reads","pseudoArray","getPseudoArray","pseudoAuxArrays","getPseudoAuxArrays","auxArrays","getAuxArrays","getSounds","arrIndex","isPseudo","sign","Writes","getMarks","playSound","swapInArr","markUnmarkMany","swapWithDelay","setValue","curWrites","writeInArr","writeWithDelay","auxArrIndex","splice","removeAuxArrayWithDelay","auxWriteWithDelay","ArrayVisualizer","comparisons","showAuxArrays","setToState","resetDelays","curComparisons","val","from","nullify","includes","arrName","getNameByArray","arrNameInv","inverseArrayName","getArrayByName","createAuxArrayWithDelay","updateDelayInc","delayIncConst","genArrayWindows","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render"],"mappings":"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","file":"static/js/main.54f322ea.chunk.js","sourcesContent":["export class Sort {\r\n    arrayVisualizer;\r\n\r\n    compare;\r\n    swap;\r\n    write;\r\n    read;\r\n\r\n    createAuxArray\r\n    removeAuxArray\r\n\r\n    auxRead\r\n    auxWrite\r\n\r\n    arrLength;\r\n\r\n    sortName;\r\n    warnLen;\r\n    isDisabled;\r\n\r\n    constructor(arrayVisualizer) {\r\n        this.arrayVisualizer = arrayVisualizer\r\n        this.state = this.arrayVisualizer.getState()\r\n        // this.compare = this.arrayVisualizer.compare.bind(arrayVisualizer)\r\n        // this.swap = this.arrayVisualizer.swap.bind(arrayVisualizer)\r\n        // this.read = this.arrayVisualizer.read.bind(arrayVisualizer)\r\n        // this.write = this.arrayVisualizer.write.bind(arrayVisualizer)\r\n        // this.createAuxArray = this.arrayVisualizer.createAuxArray.bind(arrayVisualizer)\r\n        // this.removeAuxArray = this.arrayVisualizer.removeAuxArray.bind(arrayVisualizer)\r\n        // this.auxRead = this.arrayVisualizer.auxRead.bind(arrayVisualizer)\r\n        // this.auxWrite = this.arrayVisualizer.auxWrite.bind(arrayVisualizer)\r\n        // this.arrLength = this.arrayVisualizer.getArrLength();\r\n        this.compare = this.arrayVisualizer.getReads().compare.bind(arrayVisualizer)\r\n        this.swap = this.arrayVisualizer.getReads().swap.bind(arrayVisualizer)\r\n        this.read = this.arrayVisualizer.getReads().read.bind(arrayVisualizer)\r\n        this.write = this.arrayVisualizer.getWrites().write.bind(arrayVisualizer)\r\n        this.createAuxArray = this.arrayVisualizer.getWrites().createAuxArray.bind(arrayVisualizer)\r\n        this.removeAuxArray = this.arrayVisualizer.getWrites().removeAuxArray.bind(arrayVisualizer)\r\n        this.auxRead = this.arrayVisualizer.getReads().auxRead.bind(arrayVisualizer)\r\n        this.auxWrite = this.arrayVisualizer.getWrites().auxWrite.bind(arrayVisualizer)\r\n        this.arrLength = this.arrayVisualizer.getArrLength();\r\n        this.sortName = \"\"\r\n        this.warnLen = -1;\r\n        this.isDisabled = false;\r\n    }\r\n\r\n    getSortName(){\r\n        return this.sortName\r\n    }\r\n\r\n    getWarnLen(){\r\n        return this.warnLen\r\n    }\r\n\r\n    runSort(low, high, bucketsNum){\r\n    }\r\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"textCenter\":\"Controls_textCenter__3_8jn\",\"controls\":\"Controls_controls__3X5vt\",\"showToggleBtn\":\"Controls_showToggleBtn__2CbSs\",\"slider\":\"Controls_slider__3IxWj\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"arrayContainer\":\"ArrayWindow_arrayContainer__jfaB8\",\"bar\":\"ArrayWindow_bar__30QYB\"};","export class Sorts {\r\n    arrayVisualizer;\r\n    sortsPaths\r\n\r\n    constructor(arrayVisualizer) {\r\n        this.arrayVisualizer = arrayVisualizer\r\n        this.sortsPaths = [\"BubbleSort\", \"MergeSort\", \"LLQuickSort\", \"InsertionSort\", \"SelectionSort\", \"TimSort\", \"PseudoTimSort\", \"HeapSort\", \"SlowSort\", \"StoogeSort\"]\r\n    }\r\n\r\n    getSortsPaths() {\r\n        return this.sortsPaths;\r\n    }\r\n\r\n    getSortObject(sortPath) {\r\n        let Sort = require(\"./\" + sortPath + \".js\")[sortPath]\r\n        return new Sort(this.arrayVisualizer)\r\n    }\r\n\r\n    runSort(sortName, low, high, bucketsNum) {\r\n        let sort = this.getSortObject(sortName)\r\n        let warnLen = sort.getWarnLen()\r\n        if (warnLen !== -1 && this.arrayVisualizer.getArrLength() > warnLen && !window.confirm(\"WARNING!!!\\nThe array size(\" + this.arrayVisualizer.getArrLength() + \") \" +\r\n            \"more than recommended(\" + warnLen + \")\\nApplication may freeze\\nDo you want continue?\")) {\r\n            return\r\n        }\r\n        this.arrayVisualizer.initPseudoArray()\r\n        this.arrayVisualizer.setSortName(sort.getSortName())\r\n        sort.runSort(low, high, bucketsNum)\r\n        this.arrayVisualizer.sortClickEvent()\r\n    }\r\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"statsContainer\":\"Stats_statsContainer__1qOnq\"};","var map = {\n\t\"./BubbleSort.js\": 24,\n\t\"./HeapSort.js\": 25,\n\t\"./InsertionSort.js\": 26,\n\t\"./LLQuickSort.js\": 27,\n\t\"./MergeSort.js\": 28,\n\t\"./PseudoTimSort.js\": 29,\n\t\"./SelectionSort.js\": 30,\n\t\"./SlowSort.js\": 31,\n\t\"./Sort.js\": 5,\n\t\"./Sorts.js\": 14,\n\t\"./StoogeSort.js\": 32,\n\t\"./TimSort.js\": 33\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 23;","import {Sort} from \"./Sort\";\r\n\r\nexport class BubbleSort extends Sort{\r\n    constructor(arrayVisualizer) {\r\n        super(arrayVisualizer);\r\n        this.sortName = \"BubbleSort\"\r\n    }\r\n    BubbleSort() {\r\n        let len = this.arrLength;\r\n        for (let i = 0; i < len; i++) {\r\n            for (let j = 0; j < len - i - 1; j++) {\r\n                if (this.compare(j, j + 1, \">\")) {\r\n                    this.swap(j, j + 1)\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    runSort(low, high) {\r\n        this.BubbleSort(low, high)\r\n    }\r\n}","import {Sort} from \"./Sort\";\r\n\r\nexport class HeapSort extends Sort{\r\n    constructor(arrayVisualizer) {\r\n        super(arrayVisualizer);\r\n        this.sortName = \"HeapSort\"\r\n    }\r\n    \r\n    heapify(n, i) {\r\n        let largest = i;\r\n\r\n        let l = 2 * i + 1;\r\n        let r = 2 * i + 2;\r\n\r\n        if (l < n && this.compare(l, largest, \">\")) {\r\n            largest = l;\r\n        }\r\n        if (r < n && this.compare(r, largest, \">\")) {\r\n            largest = r;\r\n        }\r\n\r\n        if (largest !== i) {\r\n            this.swap(i, largest);\r\n            this.heapify(n, largest);\r\n        }\r\n    }\r\n\r\n    HeapSort() {\r\n        let n = this.arrLength;\r\n\r\n\r\n        for (let i = Math.trunc(n / 2) - 1; i >= 0; i--) {\r\n            this.heapify(n, i);\r\n        }\r\n\r\n        for (let i = n - 1; i >= 0; i--) {\r\n            this.swap(0, i);\r\n            this.heapify(i, 0)\r\n        }\r\n    }\r\n\r\n    runSort(low, high) {\r\n        this.HeapSort(low, high)\r\n    }\r\n}","import {Sort} from \"./Sort\";\r\n\r\nexport class InsertionSort extends Sort{\r\n    constructor(arrayVisualizer) {\r\n        super(arrayVisualizer);\r\n        this.sortName = \"InsertionSort\"\r\n    }\r\n\r\n    InsertionSort() {\r\n        let length = this.arrLength;\r\n        for (let i = 1; i < length; i++) {\r\n            let key = this.read(i);\r\n            let j = i - 1;\r\n            while (j >= 0 && this.read(j) > key) {\r\n                this.write(j + 1, this.read(j))\r\n                j = j - 1;\r\n            }\r\n            this.write(j + 1, key)\r\n        }\r\n    }\r\n\r\n    runSort(low, high) {\r\n        this.InsertionSort(low, high)\r\n    }\r\n}","import {Sort} from \"./Sort\";\r\n\r\nexport class LLQuickSort extends Sort{\r\n    constructor(arrayVisualizer) {\r\n        super(arrayVisualizer);\r\n        this.sortName = \"LLQuickSort\"\r\n    }\r\n    partition(lo, hi) {\r\n        let pivot = hi;\r\n        let i = lo;\r\n        for (let j = lo; j < hi; j++) {\r\n            if (this.compare(j, pivot, \"<\")) {\r\n                this.swap(i, j);\r\n                i++;\r\n            }\r\n        }\r\n        this.swap(i, hi);\r\n        return i;\r\n    }\r\n\r\n    LLQuickSort(lo, hi) {\r\n        if (lo < hi) {\r\n            let p = this.partition(lo, hi);\r\n            this.LLQuickSort(lo, p - 1);\r\n            this.LLQuickSort(p + 1, hi);\r\n        }\r\n    }\r\n    runSort(low, high) {\r\n        this.LLQuickSort(low, high)\r\n    }\r\n}","import {Sort} from \"./Sort\";\r\n\r\nexport class MergeSort extends Sort{\r\n    constructor(arrayVisualizer) {\r\n        super(arrayVisualizer);\r\n        this.sortName = \"MergeSort\"\r\n    }\r\n    merge(low, mid, high) {\r\n        // let leftArray = new Array(mid - low + 1);\r\n        // let rightArray = new Array(high - mid);\r\n\r\n        let leftArrayLen = mid - low + 1\r\n        let rightArrayLen = high - mid\r\n\r\n        let leftArrayIndex = this.createAuxArray(leftArrayLen);\r\n        let rightArrayIndex = this.createAuxArray(rightArrayLen);\r\n\r\n        for (let i = 0; i < leftArrayLen; i++) {\r\n            // leftArray[i] = this.read(low + i)\r\n            this.auxWrite(i, this.read(low + i), leftArrayIndex)\r\n        }\r\n        for (let i = 0; i < rightArrayLen; i++) {\r\n            // rightArray[i] = this.read(mid + i + 1);\r\n            this.auxWrite(i, this.read(mid + i + 1), rightArrayIndex)\r\n        }\r\n\r\n        let leftIndex = 0;\r\n        let rightIndex = 0;\r\n\r\n        for (let i = low; i < high + 1; i++) {\r\n            if (leftIndex < leftArrayLen && rightIndex < rightArrayLen) {\r\n                // if (leftArray[leftIndex] < rightArray[rightIndex]) {\r\n                if (this.auxRead(leftIndex, leftArrayIndex) < this.auxRead(rightIndex, rightArrayIndex)) {\r\n                    this.write(i, this.auxRead(leftIndex, leftArrayIndex))\r\n                    leftIndex++;\r\n                } else {\r\n                    this.write(i, this.auxRead(rightIndex, rightArrayIndex))\r\n                    rightIndex++;\r\n                }\r\n            } else if (leftIndex < leftArrayLen) {\r\n                this.write(i, this.auxRead(leftIndex, leftArrayIndex))\r\n                leftIndex++;\r\n            } else if (rightIndex < rightArrayLen) {\r\n                this.write(i, this.auxRead(rightIndex, rightArrayIndex))\r\n                rightIndex++;\r\n            }\r\n        }\r\n        // console.log(leftArray)\r\n        // console.log(rightArray)\r\n        this.removeAuxArray(rightArrayIndex)\r\n        this.removeAuxArray(leftArrayIndex)\r\n    }\r\n\r\n    MergeSort(low, high) {\r\n        if (high <= low) return;\r\n\r\n        let mid = Math.trunc((low + high) / 2)\r\n        this.MergeSort(low, mid);\r\n        this.MergeSort(mid + 1, high);\r\n        this.merge(low, mid, high);\r\n    }\r\n\r\n    runSort(low, high) {\r\n        this.MergeSort(low, high)\r\n    }\r\n}","import {Sort} from \"./Sort\";\r\n\r\nexport class PseudoTimSort extends Sort {\r\n    MIN_MERGE\r\n    constructor(arrayVisualizer) {\r\n        super(arrayVisualizer);\r\n        this.sortName = \"PseudoTimSort\"\r\n        this.MIN_MERGE = 32\r\n    }\r\n\r\n    minRunLength(n) {\r\n        let r = 0;\r\n        while (n >= this.MIN_MERGE)\r\n        {\r\n            r |= (n & 1);\r\n            n >>= 1;\r\n        }\r\n        return n + r;\r\n    }\r\n\r\n    insertionSort(left, right) {\r\n        for (let i = left + 1; i <= right; i++) {\r\n            let temp = this.read(i);\r\n            let j = i - 1;\r\n            while (j >= left && this.read(j) > temp) {\r\n                this.write(j + 1, this.read(j))\r\n                j--;\r\n            }\r\n            this.write(j + 1, temp)\r\n        }\r\n    }\r\n\r\n    merge(l, m, r) {\r\n        let len1 = m - l + 1, len2 = r - m;\r\n        let left = this.createAuxArray(len1);\r\n        let right = this.createAuxArray(len2);\r\n        for(let x = 0; x < len1; x++)\r\n        {\r\n            // left[x] = arr[l + x];\r\n            this.auxWrite(x, this.read(l+x), left)\r\n        }\r\n        for(let x = 0; x < len2; x++)\r\n        {\r\n            // right[x] = arr[m + 1 + x];\r\n            this.auxWrite(x, this.read(m + 1 + x), right)\r\n        }\r\n\r\n        let i = 0;\r\n        let j = 0;\r\n        let k = l;\r\n\r\n        while (i < len1 && j < len2)\r\n        {\r\n            // if (left[i] <= right[j])\r\n            if(this.auxRead(i, left) <= this.auxRead(j, right))\r\n            {\r\n                // arr[k] = left[i];\r\n                this.write(k, this.auxRead(i, left))\r\n                i++;\r\n            }\r\n            else\r\n            {\r\n                // arr[k] = right[j];\r\n                this.write(k, this.auxRead(j, right))\r\n                j++;\r\n            }\r\n            k++;\r\n        }\r\n\r\n        while (i < len1) {\r\n            // arr[k] = left[i];\r\n            this.write(k, this.auxRead(i, left))\r\n            k++;\r\n            i++;\r\n        }\r\n\r\n        while (j < len2) {\r\n            this.write(k, this.auxRead(j, right))\r\n            k++;\r\n            j++;\r\n        }\r\n        this.removeAuxArray(right)\r\n        this.removeAuxArray(left)\r\n    }\r\n\r\n    timSort(n)\r\n    {\r\n        let minRun = this.minRunLength(this.MIN_MERGE);\r\n\r\n        for(let i = 0; i < n; i += minRun)\r\n        {\r\n            this.insertionSort(i, Math.min(\r\n                (i + this.MIN_MERGE - 1), (n - 1)));\r\n        }\r\n\r\n        for(let size = minRun; size < n; size = 2 * size) {\r\n            for(let left = 0; left < n; left += 2 * size) {\r\n                let mid = left + size - 1;\r\n                let right = Math.min((left + 2 * size - 1), (n - 1));\r\n                if(mid < right) {\r\n                    this.merge(left, mid, right);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    runSort(low, high) {\r\n        this.timSort(high+1)\r\n    }\r\n}","import {Sort} from \"./Sort\";\r\n\r\nexport class SelectionSort extends Sort{\r\n    constructor(arrayVisualizer) {\r\n        super(arrayVisualizer);\r\n        this.sortName = \"SelectionSort\"\r\n    }\r\n\r\n    SelectionSort() {\r\n        for (let i=0; i < this.arrLength; i++) {\r\n            let minIndex = i\r\n            for (let j=i; j < this.arrLength; j++) {\r\n                if (this.compare(j, minIndex, \"<\")) {\r\n                    minIndex = j\r\n                }\r\n            }\r\n\r\n            if (this.compare(i, minIndex, \">\")) {\r\n                this.swap(i, minIndex);\r\n            }\r\n        }\r\n    }\r\n\r\n    runSort(low, high) {\r\n        this.SelectionSort(low, high)\r\n    }\r\n}","import {Sort} from \"./Sort\";\r\n\r\nexport class SlowSort extends Sort{\r\n    constructor(arrayVisualizer) {\r\n        super(arrayVisualizer);\r\n        this.sortName = \"SlowSort\"\r\n        this.warnLen = 120\r\n    }\r\n\r\n    SlowSort(i, j) {\r\n        if (i >= j) {\r\n            return;\r\n        }\r\n        let m = Math.floor((i + j) / 2);\r\n        this.SlowSort(i, m);\r\n        this.SlowSort(m + 1, j);\r\n        if (this.compare(j, m, \"<\")) {\r\n            this.swap(j, m)\r\n        }\r\n        this.SlowSort(i, j - 1)\r\n    }\r\n\r\n    runSort(low, high) {\r\n        this.SlowSort(low, high)\r\n    }\r\n}","import {Sort} from \"./Sort\";\r\n\r\nexport class StoogeSort extends Sort{\r\n    constructor(arrayVisualizer) {\r\n        super(arrayVisualizer);\r\n        this.sortName = \"StoogeSort\"\r\n    }\r\n\r\n    StoogeSort(i, j) {\r\n        if (this.compare(i, j, \">\")) {\r\n            this.swap(i, j)\r\n        }\r\n        if (j - i > 1) {\r\n            let t = Math.trunc((j - i + 1) / 3)\r\n            this.StoogeSort(i, j - t)\r\n            this.StoogeSort(i + t, j)\r\n            this.StoogeSort(i, j - t)\r\n        }\r\n    }\r\n\r\n    runSort(low, high) {\r\n        this.StoogeSort(low, high)\r\n    }\r\n}","import {Sort} from \"./Sort\";\r\n\r\n/**\r\n * Default minimum size of a run.\r\n */\r\nconst DEFAULT_MIN_MERGE = 32\r\n\r\n/**\r\n * Minimum ordered subsequece required to do galloping.\r\n */\r\nconst DEFAULT_MIN_GALLOPING = 7\r\n\r\n/**\r\n * Default tmp storage length. Can increase depending on the size of the\r\n * smallest run to merge.\r\n */\r\nconst DEFAULT_TMP_STORAGE_LENGTH = 256\r\n\r\n/**\r\n * Pre-computed powers of 10 for efficient lexicographic comparison of\r\n * small integers.\r\n */\r\nconst POWERS_OF_TEN = [1e0, 1e1, 1e2, 1e3, 1e4, 1e5, 1e6, 1e7, 1e8, 1e9]\r\n\r\nlet results\r\n\r\n/**\r\n * Estimate the logarithm base 10 of a small integer.\r\n *\r\n * @param {number} x - The integer to estimate the logarithm of.\r\n * @return {number} - The estimated logarithm of the integer.\r\n */\r\nconst log10 = x => x < 1e5\r\n    ? x < 1e2\r\n        ? x < 1e1\r\n            ? 0\r\n            : 1\r\n        : x < 1e4\r\n            ? x < 1e3\r\n                ? 2\r\n                : 3\r\n            : 4\r\n    : x < 1e7\r\n        ? x < 1e6\r\n            ? 5\r\n            : 6\r\n        : x < 1e9\r\n            ? x < 1e8\r\n                ? 7\r\n                : 8\r\n            : 9\r\n\r\n/**\r\n * Default alphabetical comparison of items.\r\n *\r\n * @param {string|object|number} a - First element to compare.\r\n * @param {string|object|number} b - Second element to compare.\r\n * @return {number} - A positive number if a.toString() > b.toString(), a\r\n * negative number if .toString() < b.toString(), 0 otherwise.\r\n */\r\nfunction alphabeticalCompare(a, b) {\r\n    if (a === b) {\r\n        return 0\r\n    }\r\n\r\n    if (~~a === a && ~~b === b) {\r\n        if (a === 0 || b === 0) {\r\n            return a < b ? -1 : 1\r\n        }\r\n\r\n        if (a < 0 || b < 0) {\r\n            if (b >= 0) {\r\n                return -1\r\n            }\r\n\r\n            if (a >= 0) {\r\n                return 1\r\n            }\r\n\r\n            a = -a\r\n            b = -b\r\n        }\r\n\r\n        const al = log10(a)\r\n        const bl = log10(b)\r\n\r\n        let t = 0\r\n\r\n        if (al < bl) {\r\n            a *= POWERS_OF_TEN[bl - al - 1]\r\n            b /= 10\r\n            t = -1\r\n        } else if (al > bl) {\r\n            b *= POWERS_OF_TEN[al - bl - 1]\r\n            a /= 10\r\n            t = 1\r\n        }\r\n\r\n        if (a === b) {\r\n            return t\r\n        }\r\n\r\n        return a < b ? -1 : 1\r\n    }\r\n\r\n    const aStr = String(a)\r\n    const bStr = String(b)\r\n\r\n    if (aStr === bStr) {\r\n        return 0\r\n    }\r\n\r\n    return aStr < bStr ? -1 : 1\r\n}\r\n\r\n/**\r\n * Compute minimum run length for TimSort\r\n *\r\n * @param {number} n - The size of the array to sort.\r\n */\r\nfunction minRunLength(n) {\r\n    let r = 0\r\n\r\n    while (n >= DEFAULT_MIN_MERGE) {\r\n        r |= (n & 1)\r\n        n >>= 1\r\n    }\r\n\r\n    return n + r\r\n}\r\n\r\n/**\r\n * Counts the length of a monotonically ascending or strictly monotonically\r\n * descending sequence (run) starting at array[lo] in the range [lo, hi). If\r\n * the run is descending it is made ascending.\r\n *\r\n * @param {array} array - The array to reverse.\r\n * @param {number} lo - First element in the range (inclusive).\r\n * @param {number} hi - Last element in the range.\r\n * @param {function} compare - Item comparison function.\r\n * @return {number} - The length of the run.\r\n */\r\n\r\nexport class TimSort extends Sort {\r\n    constructor(arrayVisualizer) {\r\n        super(arrayVisualizer);\r\n\r\n        this.minGallop = DEFAULT_MIN_GALLOPING\r\n\r\n        this.tmpStorageLength = this.arrLength < 2 * DEFAULT_TMP_STORAGE_LENGTH\r\n            ? this.arrLength >>> 1\r\n            : DEFAULT_TMP_STORAGE_LENGTH\r\n\r\n        // this.tmp = new Array(this.tmpStorageLength)\r\n        this.tmp = this.createAuxArray(this.tmpStorageLength)\r\n\r\n        this.stackLength = this.arrLength < 120\r\n            ? 5\r\n            : this.arrLength < 1542\r\n                ? 10\r\n                : this.arrLength < 119151\r\n                    ? 19\r\n                    : 40\r\n\r\n        this.runStart = new Array(this.stackLength)\r\n        this.runLength = new Array(this.stackLength)\r\n\r\n        this.stackSize = 0\r\n        this.sortName = \"TimSort\"\r\n    }\r\n\r\n    makeAscendingRun(lo, hi) {\r\n        let runHi = lo + 1\r\n\r\n        if (runHi === hi) {\r\n            return 1\r\n        }\r\n\r\n        // Descending\r\n        // if (compare(array[runHi++], array[lo]) < 0) {\r\n        if (this.compare(runHi++, lo, \"<\")) {\r\n            // while (runHi < hi && compare(array[runHi], array[runHi - 1]) < 0) {\r\n            while (runHi < hi && this.compare(runHi, runHi - 1, \"<\")) {\r\n                runHi++\r\n            }\r\n\r\n            // this.reverseRun(array, lo, runHi)\r\n            this.reverseRun(lo, runHi)\r\n            // reverseRun(results, lo, runHi)\r\n            // Ascending\r\n        } else {\r\n            // while (runHi < hi && compare(array[runHi], array[runHi - 1]) >= 0) {\r\n            while (runHi < hi && this.compare(runHi, runHi - 1, \">=\")) {\r\n                runHi++\r\n            }\r\n        }\r\n\r\n        return runHi - lo\r\n    }\r\n\r\n    /**\r\n     * Reverse an array in the range [lo, hi).\r\n     *\r\n     * @param {array} array - The array to reverse.\r\n     * @param {number} lo - First element in the range (inclusive).\r\n     * @param {number} hi - Last element in the range.\r\n     */\r\n\r\n\r\n    reverseRun(lo, hi) {\r\n        hi--\r\n\r\n        while (lo < hi) {\r\n            // const t = array[lo]\r\n            // array[lo++] = array[hi]\r\n            // array[hi--] = t\r\n            const t = this.read(lo)\r\n            this.write(lo++, this.read(hi))\r\n            this.write(hi--, t)\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Perform the binary sort of the array in the range [lo, hi) where start is\r\n     * the first element possibly out of order.\r\n     *\r\n     * @param {array} array - The array to sort.\r\n     * @param {number} lo - First element in the range (inclusive).\r\n     * @param {number} hi - Last element in the range.\r\n     * @param {number} start - First element possibly out of order.\r\n     * @param {} compare - Item comparison function.\r\n     */\r\n\r\n\r\n    binaryInsertionSort(lo, hi, start) {\r\n        if (start === lo) {\r\n            start++\r\n        }\r\n\r\n        for (; start < hi; start++) {\r\n            // const pivot = array[start]\r\n            const pivot = this.read(start)\r\n\r\n            // const pivotIndex = results[start]\r\n\r\n            // Ranges of the array where pivot belongs\r\n            let left = lo\r\n            let right = start\r\n\r\n            /*\r\n             *   pivot >= array[i] for i in [lo, left)\r\n             *   pivot <  array[i] for i in  in [right, start)\r\n             */\r\n            while (left < right) {\r\n                const mid = (left + right) >>> 1\r\n\r\n                // if (compare(pivot, array[mid]) < 0) {\r\n                if (pivot < this.read(mid)) {\r\n                    right = mid\r\n                } else {\r\n                    left = mid + 1\r\n                }\r\n            }\r\n\r\n            /*\r\n             * Move elements right to make room for the pivot. If there are elements\r\n             * equal to pivot, left points to the first slot after them: this is also\r\n             * a reason for which TimSort is stable\r\n             */\r\n            let n = start - left\r\n            // Switch is just an optimization for small arrays\r\n            switch (n) {\r\n                case 3:\r\n                    // array[left + 3] = array[left + 2]\r\n                    this.write(left + 3, this.read(left + 2))\r\n                /* falls through */\r\n                case 2:\r\n                    // array[left + 2] = array[left + 1]\r\n                    this.write(left + 2, this.read(left + 1))\r\n                /* falls through */\r\n                case 1:\r\n                    // array[left + 1] = array[left]\r\n                    this.write(left + 1, this.read(left))\r\n                    break\r\n                default:\r\n                    while (n > 0) {\r\n                        // array[left + n] = array[left + n - 1]\r\n                        this.write(left + n, this.read(left + n - 1))\r\n                        n--\r\n                    }\r\n            }\r\n\r\n            // array[left] = pivot\r\n            this.write(left, pivot)\r\n            // results[left] = pivotIndex\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Find the position at which to insert a value in a sorted range. If the range\r\n     * contains elements equal to the value the leftmost element index is returned\r\n     * (for stability).\r\n     *\r\n     * @param {number} value - Value to insert.\r\n     * @param {array} array - The array in which to insert value.\r\n     * @param {number} start - First element in the range.\r\n     * @param {number} length - Length of the range.\r\n     * @param {number} hint - The index at which to begin the search.\r\n     * @param {function} compare - Item comparison function.\r\n     * @return {number} - The index where to insert value.\r\n     */\r\n\r\n\r\n    gallopLeft(value, isAux, start, length, hint) {\r\n        let lastOffset = 0\r\n        let maxOffset = 0\r\n        let offset = 1\r\n        if (!isAux) {\r\n            // if (compare(value, array[start + hint]) > 0) {\r\n            if (value > this.read(start + hint)) {\r\n                maxOffset = length - hint\r\n\r\n                while (\r\n                    offset < maxOffset\r\n                    // && compare(value, array[start + hint + offset]) > 0\r\n                    && value > this.read(start + hint + offset)\r\n                    ) {\r\n                    lastOffset = offset\r\n                    offset = (offset << 1) + 1\r\n\r\n                    if (offset <= 0) {\r\n                        offset = maxOffset\r\n                    }\r\n                }\r\n\r\n                if (offset > maxOffset) {\r\n                    offset = maxOffset\r\n                }\r\n\r\n                // Make offsets relative to start\r\n                lastOffset += hint\r\n                offset += hint\r\n\r\n                // value <= array[start + hint]\r\n            } else {\r\n                maxOffset = hint + 1\r\n                while (\r\n                    offset < maxOffset\r\n                    // && compare(value, array[start + hint - offset]) <= 0\r\n                    // && value <= this.read(start + hint + offset)\r\n                    && value <= this.read(start + hint - offset)\r\n                    ) {\r\n                    lastOffset = offset\r\n                    offset = (offset << 1) + 1\r\n\r\n                    if (offset <= 0) {\r\n                        offset = maxOffset\r\n                    }\r\n                }\r\n                if (offset > maxOffset) {\r\n                    offset = maxOffset\r\n                }\r\n\r\n                // Make offsets relative to start\r\n                const tmp = lastOffset\r\n                lastOffset = hint - offset\r\n                offset = hint - tmp\r\n            }\r\n\r\n            /*\r\n             * Now array[start+lastOffset] < value <= array[start+offset], so value\r\n             * belongs somewhere in the range (start + lastOffset, start + offset]. Do a\r\n             * binary search, with invariant array[start + lastOffset - 1] < value <=\r\n             * array[start + offset].\r\n             */\r\n            lastOffset++\r\n            while (lastOffset < offset) {\r\n                const m = lastOffset + ((offset - lastOffset) >>> 1)\r\n\r\n                // if (compare(value, array[start + m]) > 0) {\r\n                if (value > this.read(start + m)) {\r\n                    lastOffset = m + 1\r\n                } else {\r\n                    offset = m\r\n                }\r\n            }\r\n        } else {\r\n            // if (compare(value, array[start + hint]) > 0) {\r\n            if (value > this.auxRead(start + hint, this.tmp)) {\r\n                maxOffset = length - hint\r\n\r\n                while (\r\n                    offset < maxOffset\r\n                    // && compare(value, array[start + hint + offset]) > 0\r\n                    && value > this.auxRead(start + hint + offset, this.tmp)\r\n                    ) {\r\n                    lastOffset = offset\r\n                    offset = (offset << 1) + 1\r\n\r\n                    if (offset <= 0) {\r\n                        offset = maxOffset\r\n                    }\r\n                }\r\n\r\n                if (offset > maxOffset) {\r\n                    offset = maxOffset\r\n                }\r\n\r\n                // Make offsets relative to start\r\n                lastOffset += hint\r\n                offset += hint\r\n\r\n                // value <= array[start + hint]\r\n            } else {\r\n                maxOffset = hint + 1\r\n                while (\r\n                    offset < maxOffset\r\n                    // && compare(value, array[start + hint - offset]) <= 0\r\n                    // && value <= this.auxRead(start + hint + offset, this.tmp)\r\n                    && value <= this.auxRead(start + hint - offset, this.tmp)\r\n                    ) {\r\n                    lastOffset = offset\r\n                    offset = (offset << 1) + 1\r\n\r\n                    if (offset <= 0) {\r\n                        offset = maxOffset\r\n                    }\r\n                }\r\n                if (offset > maxOffset) {\r\n                    offset = maxOffset\r\n                }\r\n\r\n                // Make offsets relative to start\r\n                const tmp = lastOffset\r\n                lastOffset = hint - offset\r\n                offset = hint - tmp\r\n            }\r\n\r\n            /*\r\n             * Now array[start+lastOffset] < value <= array[start+offset], so value\r\n             * belongs somewhere in the range (start + lastOffset, start + offset]. Do a\r\n             * binary search, with invariant array[start + lastOffset - 1] < value <=\r\n             * array[start + offset].\r\n             */\r\n            lastOffset++\r\n            while (lastOffset < offset) {\r\n                const m = lastOffset + ((offset - lastOffset) >>> 1)\r\n\r\n                // if (compare(value, array[start + m]) > 0) {\r\n                if (value > this.auxRead(start + m, this.tmp)) {\r\n                    lastOffset = m + 1\r\n                } else {\r\n                    offset = m\r\n                }\r\n            }\r\n        }\r\n        return offset\r\n    }\r\n\r\n    /**\r\n     * Find the position at which to insert a value in a sorted range. If the range\r\n     * contains elements equal to the value the rightmost element index is returned\r\n     * (for stability).\r\n     *\r\n     * @param {number} value - Value to insert.\r\n     * @param {array} array - The array in which to insert value.\r\n     * @param {number} start - First element in the range.\r\n     * @param {number} length - Length of the range.\r\n     * @param {number} hint - The index at which to begin the search.\r\n     * @param {function} compare - Item comparison function.\r\n     * @return {number} - The index where to insert value.\r\n     */\r\n\r\n\r\n    gallopRight(value, isAux, start, length, hint) {\r\n        let lastOffset = 0\r\n        let maxOffset = 0\r\n        let offset = 1\r\n\r\n        if (!isAux) {\r\n            // if (compare(value, array[start + hint]) < 0) {\r\n            if (value < this.read(start + hint)) {\r\n                maxOffset = hint + 1\r\n\r\n                while (\r\n                    offset < maxOffset\r\n                    // && compare(value, array[start + hint - offset]) < 0\r\n                    && value < this.read(start + hint - offset)\r\n                    ) {\r\n                    lastOffset = offset\r\n                    offset = (offset << 1) + 1\r\n\r\n                    if (offset <= 0) {\r\n                        offset = maxOffset\r\n                    }\r\n                }\r\n\r\n                if (offset > maxOffset) {\r\n                    offset = maxOffset\r\n                }\r\n\r\n                // Make offsets relative to start\r\n                const tmp = lastOffset\r\n                lastOffset = hint - offset\r\n                offset = hint - tmp\r\n\r\n                // value >= array[start + hint]\r\n            } else {\r\n                maxOffset = length - hint\r\n\r\n                while (\r\n                    offset < maxOffset\r\n                    // && compare(value, array[start + hint + offset]) >= 0\r\n                    && value >= this.read(start + hint + offset)\r\n                    ) {\r\n                    lastOffset = offset\r\n                    offset = (offset << 1) + 1\r\n\r\n                    if (offset <= 0) {\r\n                        offset = maxOffset\r\n                    }\r\n                }\r\n\r\n                if (offset > maxOffset) {\r\n                    offset = maxOffset\r\n                }\r\n\r\n                // Make offsets relative to start\r\n                lastOffset += hint\r\n                offset += hint\r\n            }\r\n\r\n            /*\r\n             * Now array[start+lastOffset] < value <= array[start+offset], so value\r\n             * belongs somewhere in the range (start + lastOffset, start + offset]. Do a\r\n             * binary search, with invariant array[start + lastOffset - 1] < value <=\r\n             * array[start + offset].\r\n             */\r\n            lastOffset++\r\n\r\n            while (lastOffset < offset) {\r\n                const m = lastOffset + ((offset - lastOffset) >>> 1)\r\n\r\n                // if (compare(value, array[start + m]) < 0) {\r\n                if (value < this.read(start + m)) {\r\n                    offset = m\r\n                } else {\r\n                    lastOffset = m + 1\r\n                }\r\n            }\r\n\r\n        } else {\r\n            //AUX\r\n            // if (compare(value, array[start + hint]) < 0) {\r\n            if (value < this.auxRead(start + hint, this.tmp)) {\r\n                maxOffset = hint + 1\r\n\r\n                while (\r\n                    offset < maxOffset\r\n                    // && compare(value, array[start + hint - offset]) < 0\r\n                    && value < this.auxRead(start + hint - offset, this.tmp)\r\n                    ) {\r\n                    lastOffset = offset\r\n                    offset = (offset << 1) + 1\r\n\r\n                    if (offset <= 0) {\r\n                        offset = maxOffset\r\n                    }\r\n                }\r\n\r\n                if (offset > maxOffset) {\r\n                    offset = maxOffset\r\n                }\r\n\r\n                // Make offsets relative to start\r\n                const tmp = lastOffset\r\n                lastOffset = hint - offset\r\n                offset = hint - tmp\r\n\r\n                // value >= array[start + hint]\r\n            } else {\r\n                maxOffset = length - hint\r\n\r\n                while (\r\n                    offset < maxOffset\r\n                    // && compare(value, array[start + hint + offset]) >= 0\r\n                    && value >= this.auxRead(start + hint + offset, this.tmp)\r\n                    ) {\r\n                    lastOffset = offset\r\n                    offset = (offset << 1) + 1\r\n\r\n                    if (offset <= 0) {\r\n                        offset = maxOffset\r\n                    }\r\n                }\r\n\r\n                if (offset > maxOffset) {\r\n                    offset = maxOffset\r\n                }\r\n\r\n                // Make offsets relative to start\r\n                lastOffset += hint\r\n                offset += hint\r\n            }\r\n\r\n            /*\r\n             * Now array[start+lastOffset] < value <= array[start+offset], so value\r\n             * belongs somewhere in the range (start + lastOffset, start + offset]. Do a\r\n             * binary search, with invariant array[start + lastOffset - 1] < value <=\r\n             * array[start + offset].\r\n             */\r\n            lastOffset++\r\n\r\n            while (lastOffset < offset) {\r\n                const m = lastOffset + ((offset - lastOffset) >>> 1)\r\n\r\n                // if (compare(value, array[start + m]) < 0) {\r\n                if (value < this.auxRead(start + m, this.tmp)) {\r\n                    offset = m\r\n                } else {\r\n                    lastOffset = m + 1\r\n                }\r\n            }\r\n        }\r\n\r\n        return offset\r\n    }\r\n\r\n\r\n    /**\r\n     * Push a new run on TimSort's stack.\r\n     *\r\n     * @param {number} runStart - Start index of the run in the original array.\r\n     * @param {number} runLength - Length of the run;\r\n     */\r\n    pushRun(runStart, runLength) {\r\n        this.runStart[this.stackSize] = runStart\r\n        this.runLength[this.stackSize] = runLength\r\n        this.stackSize += 1\r\n    }\r\n\r\n    /**\r\n     * Merge runs on TimSort's stack so that the following holds for all i:\r\n     * 1) runLength[i - 3] > runLength[i - 2] + runLength[i - 1]\r\n     * 2) runLength[i - 2] > runLength[i - 1]\r\n     */\r\n    mergeRuns() {\r\n        while (this.stackSize > 1) {\r\n            let n = this.stackSize - 2\r\n\r\n            if (\r\n                (\r\n                    n >= 1\r\n                    && this.runLength[n - 1] <= this.runLength[n] + this.runLength[n + 1]\r\n                )\r\n                || (\r\n                    n >= 2\r\n                    && this.runLength[n - 2] <= this.runLength[n] + this.runLength[n - 1]\r\n                )\r\n            ) {\r\n                if (this.runLength[n - 1] < this.runLength[n + 1]) {\r\n                    n--\r\n                }\r\n            } else if (this.runLength[n] > this.runLength[n + 1]) {\r\n                break\r\n            }\r\n            this.mergeAt(n)\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Merge all runs on TimSort's stack until only one remains.\r\n     */\r\n    forceMergeRuns() {\r\n        while (this.stackSize > 1) {\r\n            let n = this.stackSize - 2\r\n\r\n            if (n > 0 && this.runLength[n - 1] < this.runLength[n + 1]) {\r\n                n--\r\n            }\r\n\r\n            this.mergeAt(n)\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Merge the runs on the stack at positions i and i+1. Must be always be called\r\n     * with i=stackSize-2 or i=stackSize-3 (that is, we merge on top of the stack).\r\n     *\r\n     * @param {number} i - Index of the run to merge in TimSort's stack.\r\n     */\r\n    mergeAt(i) {\r\n        let start1 = this.runStart[i]\r\n        let length1 = this.runLength[i]\r\n        const start2 = this.runStart[i + 1]\r\n        let length2 = this.runLength[i + 1]\r\n\r\n        this.runLength[i] = length1 + length2\r\n\r\n        if (i === this.stackSize - 3) {\r\n            this.runStart[i + 1] = this.runStart[i + 2]\r\n            this.runLength[i + 1] = this.runLength[i + 2]\r\n        }\r\n\r\n        this.stackSize--\r\n\r\n        /*\r\n         * Find where the first element in the second run goes in run1. Previous\r\n         * elements in run1 are already in place\r\n         */\r\n        // const k = gallopRight(array[start2], array, start1, length1, 0, compare)\r\n        const k = this.gallopRight(this.read(start2), false, start1, length1, 0)\r\n        start1 += k\r\n        length1 -= k\r\n\r\n        if (length1 === 0) {\r\n            return\r\n        }\r\n\r\n        /*\r\n         * Find where the last element in the first run goes in run2. Next elements\r\n         * in run2 are already in place\r\n         */\r\n        // length2 = gallopLeft(\r\n        //     array[start1 + length1 - 1],\r\n        //     array,\r\n        //     start2,\r\n        //     length2,\r\n        //     length2 - 1,\r\n        //     compare\r\n        // )\r\n        length2 = this.gallopLeft(\r\n            // array[start1 + length1 - 1],\r\n            this.read(start1 + length1 - 1),\r\n            false,\r\n            start2,\r\n            length2,\r\n            length2 - 1,\r\n        )\r\n\r\n        if (length2 === 0) {\r\n            return\r\n        }\r\n\r\n        /*\r\n         * Merge remaining runs. A tmp array with length = min(length1, length2) is\r\n         * used\r\n         */\r\n        if (length1 <= length2) {\r\n            this.mergeLow(start1, length1, start2, length2)\r\n        } else {\r\n            this.mergeHigh(start1, length1, start2, length2)\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Merge two adjacent runs in a stable way. The runs must be such that the\r\n     * first element of run1 is bigger than the first element in run2 and the\r\n     * last element of run1 is greater than all the elements in run2.\r\n     * The method should be called when run1.length <= run2.length as it uses\r\n     * TimSort temporary array to store run1. Use mergeHigh if run1.length >\r\n     * run2.length.\r\n     *\r\n     * @param {number} start1 - First element in run1.\r\n     * @param {number} length1 - Length of run1.\r\n     * @param {number} start2 - First element in run2.\r\n     * @param {number} length2 - Length of run2.\r\n     */\r\n    mergeLow(start1, length1, start2, length2) {\r\n        // const {compare} = this\r\n        // const {array} = this\r\n        // const {tmp} = this\r\n        // const {tmpIndex} = this\r\n        // const {compare} = this\r\n        // const {array} = this\r\n        // const {tmp} = this\r\n        // const {tmpIndex} = this\r\n        let i = 0\r\n\r\n        for (i = 0; i < length1; i++) {\r\n            // tmp[i] = array[start1 + i]\r\n            this.auxWrite(i, this.read(start1 + i), this.tmp)\r\n        }\r\n\r\n        let cursor1 = 0\r\n        let cursor2 = start2\r\n        let dest = start1\r\n\r\n\r\n        // array[dest] = array[cursor2]\r\n        this.write(dest, this.read(cursor2))\r\n\r\n\r\n        dest++\r\n        cursor2++\r\n\r\n        if (--length2 === 0) {\r\n            for (i = 0; i < length1; i++) {\r\n                // array[dest + i] = tmp[cursor1 + i]\r\n                this.write(dest + i, this.auxRead(cursor1 + i, this.tmp))\r\n            }\r\n            return\r\n        }\r\n\r\n        if (length1 === 1) {\r\n            for (i = 0; i < length2; i++) {\r\n                // array[dest + i] = array[cursor2 + i]\r\n\r\n                this.write(dest + i, this.read(cursor2 + i))\r\n            }\r\n            // array[dest + length2] = tmp[cursor1]\r\n            this.write(dest + length2, this.auxRead(cursor1, this.tmp))\r\n            return\r\n        }\r\n\r\n        let {minGallop} = this\r\n\r\n        while (true) {\r\n            let count1 = 0\r\n            let count2 = 0\r\n            let exit = false\r\n\r\n            do {\r\n                // if (compare(array[cursor2], tmp[cursor1]) < 0) {\r\n                if (this.read(cursor2) < this.auxRead(cursor1, this.tmp)) {\r\n                    // array[dest] = array[cursor2]\r\n                    this.write(dest, this.read(cursor2))\r\n                    dest++\r\n                    cursor2++\r\n                    count2++\r\n                    count1 = 0\r\n\r\n                    if (--length2 === 0) {\r\n                        exit = true\r\n                        break\r\n                    }\r\n                } else {\r\n                    // array[dest] = tmp[cursor1]\r\n                    this.write(dest, this.auxRead(cursor1, this.tmp))\r\n\r\n                    dest++\r\n                    cursor1++\r\n                    count1++\r\n                    count2 = 0\r\n                    if (--length1 === 1) {\r\n                        exit = true\r\n                        break\r\n                    }\r\n                }\r\n            } while ((count1 | count2) < minGallop)\r\n\r\n            if (exit) {\r\n                break\r\n            }\r\n\r\n            do {\r\n                // count1 = gallopRight(array[cursor2], tmp, cursor1, length1, 0, compare)\r\n                count1 = this.gallopRight(this.read(cursor2), true, cursor1, length1, 0)\r\n\r\n                if (count1 !== 0) {\r\n                    for (i = 0; i < count1; i++) {\r\n                        // array[dest + i] = tmp[cursor1 + i]\r\n                        // results[dest + i] = tmpIndex[cursor1 + i]\r\n                        this.write(dest + i, this.auxRead(cursor1 + i, this.tmp))\r\n                    }\r\n\r\n                    dest += count1\r\n                    cursor1 += count1\r\n                    length1 -= count1\r\n                    if (length1 <= 1) {\r\n                        exit = true\r\n                        break\r\n                    }\r\n                }\r\n\r\n                // array[dest] = array[cursor2]\r\n                // results[dest] = results[cursor2]\r\n                this.write(dest, this.read(cursor2))\r\n\r\n                dest++\r\n                cursor2++\r\n\r\n                if (--length2 === 0) {\r\n                    exit = true\r\n                    break\r\n                }\r\n\r\n                // count2 = this.gallopLeft(tmp[cursor1], array, cursor2, length2, 0, compare)\r\n                count2 = this.gallopLeft(this.auxRead(cursor1, this.tmp), false, cursor2, length2, 0)\r\n\r\n                if (count2 !== 0) {\r\n                    for (i = 0; i < count2; i++) {\r\n                        // array[dest + i] = array[cursor2 + i]\r\n                        // results[dest + i] = results[cursor2 + i]\r\n                        this.write(dest + i, this.read(cursor2 + i))\r\n                    }\r\n\r\n                    dest += count2\r\n                    cursor2 += count2\r\n                    length2 -= count2\r\n\r\n                    if (length2 === 0) {\r\n                        exit = true\r\n                        break\r\n                    }\r\n                }\r\n                // array[dest] = tmp[cursor1]\r\n                // results[dest] = tmpIndex[cursor1]\r\n\r\n                this.write(dest, this.auxRead(cursor1, this.tmp))\r\n\r\n                dest++\r\n                cursor1++\r\n\r\n                if (--length1 === 1) {\r\n                    exit = true\r\n                    break\r\n                }\r\n\r\n                minGallop--\r\n            } while (\r\n                count1 >= DEFAULT_MIN_GALLOPING\r\n                || count2 >= DEFAULT_MIN_GALLOPING\r\n                )\r\n\r\n            if (exit) {\r\n                break\r\n            }\r\n\r\n            if (minGallop < 0) {\r\n                minGallop = 0\r\n            }\r\n\r\n            minGallop += 2\r\n        }\r\n\r\n        this.minGallop = minGallop\r\n\r\n        if (minGallop < 1) {\r\n            this.minGallop = 1\r\n        }\r\n\r\n        if (length1 === 1) {\r\n            for (i = 0; i < length2; i++) {\r\n                // array[dest + i] = array[cursor2 + i]\r\n                // results[dest + i] = results[cursor2 + i]\r\n                this.write(dest + i, this.read(cursor2 + i))\r\n            }\r\n            // array[dest + length2] = tmp[cursor1]\r\n            // results[dest + length2] = tmpIndex[cursor1]\r\n            this.write(dest + length2, this.auxRead(cursor1, this.tmp))\r\n        } else if (length1 === 0) {\r\n            throw new Error('mergeLow preconditions were not respected')\r\n        } else {\r\n            for (i = 0; i < length1; i++) {\r\n                // array[dest + i] = tmp[cursor1 + i]\r\n                // results[dest + i] = tmpIndex[cursor1 + i]\r\n                this.write(dest + i, this.auxRead(cursor1 + i, this.tmp))\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Merge two adjacent runs in a stable way. The runs must be such that the\r\n     * first element of run1 is bigger than the first element in run2 and the\r\n     * last element of run1 is greater than all the elements in run2.\r\n     * The method should be called when run1.length > run2.length as it uses\r\n     * TimSort temporary array to store run2. Use mergeLow if run1.length <=\r\n     * run2.length.\r\n     *\r\n     * @param {number} start1 - First element in run1.\r\n     * @param {number} length1 - Length of run1.\r\n     * @param {number} start2 - First element in run2.\r\n     * @param {number} length2 - Length of run2.\r\n     */\r\n    mergeHigh(start1, length1, start2, length2) {\r\n        // const {compare} = this\r\n        // const {array} = this\r\n        // const {tmp} = this\r\n        // const {tmpIndex} = this\r\n        let i = 0\r\n\r\n        for (i = 0; i < length2; i++) {\r\n            // tmp[i] = array[start2 + i]\r\n            this.auxWrite(i, this.read(start2 + i), this.tmp)\r\n        }\r\n\r\n        let cursor1 = start1 + length1 - 1\r\n        let cursor2 = length2 - 1\r\n        let dest = start2 + length2 - 1\r\n        let customCursor = 0\r\n        let customDest = 0\r\n\r\n        // array[dest] = array[cursor1]\r\n        this.write(dest, this.read(cursor1))\r\n\r\n        dest--\r\n        cursor1--\r\n\r\n        if (--length1 === 0) {\r\n            customCursor = dest - (length2 - 1)\r\n\r\n            for (i = 0; i < length2; i++) {\r\n                // array[customCursor + i] = tmp[i]\r\n                this.write(customCursor + i, this.auxRead(i, this.tmp))\r\n            }\r\n\r\n            return\r\n        }\r\n\r\n        if (length2 === 1) {\r\n            dest -= length1\r\n            cursor1 -= length1\r\n            customDest = dest + 1\r\n            customCursor = cursor1 + 1\r\n\r\n            for (i = length1 - 1; i >= 0; i--) {\r\n                // array[customDest + i] = array[customCursor + i]\r\n                this.write(customDest + i, this.read(customCursor + i))\r\n            }\r\n\r\n            // array[dest] = tmp[cursor2]\r\n            this.write(dest, this.auxRead(cursor2, this.tmp))\r\n            return\r\n        }\r\n\r\n        let {minGallop} = this\r\n\r\n        while (true) {\r\n            let count1 = 0\r\n            let count2 = 0\r\n            let exit = false\r\n\r\n            do {\r\n                // if (compare(tmp[cursor2], array[cursor1]) < 0) {\r\n                if (this.auxRead(cursor2, this.tmp) < this.read(cursor1)) {\r\n                    // array[dest] = array[cursor1]\r\n                    this.write(dest, this.read(cursor1))\r\n                    dest--\r\n                    cursor1--\r\n                    count1++\r\n                    count2 = 0\r\n                    if (--length1 === 0) {\r\n                        exit = true\r\n                        break\r\n                    }\r\n                } else {\r\n                    // array[dest] = tmp[cursor2]\r\n                    this.write(dest, this.auxRead(cursor2, this.tmp))\r\n                    dest--\r\n                    cursor2--\r\n                    count2++\r\n                    count1 = 0\r\n                    if (--length2 === 1) {\r\n                        exit = true\r\n                        break\r\n                    }\r\n                }\r\n            } while ((count1 | count2) < minGallop)\r\n\r\n            if (exit) {\r\n                break\r\n            }\r\n\r\n            do {\r\n                // count1 = length1 - gallopRight(\r\n                //     tmp[cursor2],\r\n                //     array,\r\n                //     start1,\r\n                //     length1,\r\n                //     length1 - 1,\r\n                //     compare\r\n                // )\r\n                count1 = length1 - this.gallopRight(\r\n                    this.auxRead(cursor2, this.tmp),\r\n                    false,\r\n                    start1,\r\n                    length1,\r\n                    length1 - 1\r\n                )\r\n\r\n                if (count1 !== 0) {\r\n                    dest -= count1\r\n                    cursor1 -= count1\r\n                    length1 -= count1\r\n                    customDest = dest + 1\r\n                    customCursor = cursor1 + 1\r\n\r\n                    for (i = count1 - 1; i >= 0; i--) {\r\n                        // array[customDest + i] = array[customCursor + i]\r\n                        this.write(customDest + i, this.read(customCursor + i))\r\n                    }\r\n\r\n                    if (length1 === 0) {\r\n                        exit = true\r\n                        break\r\n                    }\r\n                }\r\n\r\n                // array[dest] = tmp[cursor2]\r\n                this.write(dest, this.auxRead(cursor2, this.tmp))\r\n\r\n                dest--\r\n                cursor2--\r\n\r\n                if (--length2 === 1) {\r\n                    exit = true\r\n                    break\r\n                }\r\n\r\n                // count2 = length2 - gallopLeft(\r\n                //     array[cursor1],\r\n                //     tmp,\r\n                //     0,\r\n                //     length2,\r\n                //     length2 - 1,\r\n                //     compare\r\n                // )\r\n\r\n                count2 = length2 - this.gallopLeft(\r\n                    this.read(cursor1),\r\n                    true,\r\n                    0,\r\n                    length2,\r\n                    length2 - 1\r\n                )\r\n\r\n                if (count2 !== 0) {\r\n                    dest -= count2\r\n                    cursor2 -= count2\r\n                    length2 -= count2\r\n                    customDest = dest + 1\r\n                    customCursor = cursor2 + 1\r\n\r\n                    for (i = 0; i < count2; i++) {\r\n                        // array[customDest + i] = tmp[customCursor + i]\r\n                        this.write(customDest + i, this.auxRead(customCursor + i, this.tmp))\r\n                    }\r\n\r\n                    if (length2 <= 1) {\r\n                        exit = true\r\n                        break\r\n                    }\r\n                }\r\n\r\n                // array[dest] = array[cursor1]\r\n                this.write(dest, this.read(cursor1))\r\n\r\n                dest--\r\n                cursor1--\r\n\r\n                if (--length1 === 0) {\r\n                    exit = true\r\n                    break\r\n                }\r\n\r\n                minGallop--\r\n            } while (\r\n                count1 >= DEFAULT_MIN_GALLOPING\r\n                || count2 >= DEFAULT_MIN_GALLOPING\r\n                )\r\n\r\n            if (exit) {\r\n                break\r\n            }\r\n\r\n            if (minGallop < 0) {\r\n                minGallop = 0\r\n            }\r\n\r\n            minGallop += 2\r\n        }\r\n\r\n        this.minGallop = minGallop\r\n\r\n        if (minGallop < 1) {\r\n            this.minGallop = 1\r\n        }\r\n\r\n        if (length2 === 1) {\r\n            dest -= length1\r\n            cursor1 -= length1\r\n            customDest = dest + 1\r\n            customCursor = cursor1 + 1\r\n\r\n            for (i = length1 - 1; i >= 0; i--) {\r\n                // array[customDest + i] = array[customCursor + i]\r\n                this.write(customDest + i, this.read(customCursor + i))\r\n            }\r\n\r\n            // array[dest] = tmp[cursor2]\r\n            // results[dest] = tmpIndex[cursor2]\r\n\r\n            this.write(dest, this.auxRead(cursor2, this.tmp))\r\n\r\n\r\n        } else if (length2 === 0) {\r\n            throw new Error('mergeHigh preconditions were not respected')\r\n        } else {\r\n            customCursor = dest - (length2 - 1)\r\n            for (i = 0; i < length2; i++) {\r\n                // array[customCursor + i] = tmp[i]\r\n                this.write(customCursor + i, this.auxRead(i, this.tmp))\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    /**\r\n     * Sort an array in the range [lo, hi) using TimSort.\r\n     *\r\n     * @param {array} array - The array to sort.\r\n     * @param {function=} compare - Item comparison function. Default is\r\n     *     alphabetical\r\n     * @param {number} lo - First element in the range (inclusive).\r\n     * @param {number} hi - Last element in the range.\r\n     *     comparator.\r\n     */\r\n    runSort(low, high) {\r\n        this.sort(low, high+1)\r\n    }\r\n\r\n    sort(lo, hi) {\r\n\r\n        let i = 0\r\n\r\n        let remaining = hi - lo\r\n\r\n        // The array is already sorted\r\n        if (remaining < 2) {\r\n            return results\r\n        }\r\n\r\n        let runLength = 0\r\n        // On small arrays binary sort can be used directly\r\n        if (remaining < DEFAULT_MIN_MERGE) {\r\n            runLength = this.makeAscendingRun(lo, hi)\r\n            this.binaryInsertionSort(lo, hi, lo + runLength)\r\n        }\r\n\r\n\r\n        const minRun = minRunLength(remaining)\r\n\r\n        do {\r\n            runLength = this.makeAscendingRun(lo, hi)\r\n            if (runLength < minRun) {\r\n                let force = remaining\r\n                if (force > minRun) {\r\n                    force = minRun\r\n                }\r\n\r\n                this.binaryInsertionSort(lo, lo + force, lo + runLength)\r\n                runLength = force\r\n            }\r\n            // Push new run and merge if necessary\r\n            this.pushRun(lo, runLength)\r\n            this.mergeRuns()\r\n\r\n            // Go find next run\r\n            remaining -= runLength\r\n            lo += runLength\r\n        } while (remaining !== 0)\r\n\r\n        // Force merging of remaining runs\r\n        this.forceMergeRuns()\r\n        this.removeAuxArray(this.tmp)\r\n    }\r\n}","const types = {\r\n\r\n}\r\n\r\nconst colors = {\r\n\r\n}\r\n\r\nexport class Element{\r\n\r\n    value;\r\n    color;\r\n    type;\r\n\r\n    // constructor(args){\r\n    //     this.value = args.value;\r\n    //     this.type = args.type;\r\n    //     this.color = args.color || colors[args.type];\r\n    // }\r\n\r\n    constructor(value, type, color) {\r\n            this.value = value;\r\n            this.type = type;\r\n            this.color = color;\r\n    }\r\n\r\n    getValue(){\r\n        return this.value;\r\n    }\r\n    setValue(value){\r\n        this.value = value;\r\n    }\r\n\r\n    getColor(){\r\n        return this.color;\r\n    }\r\n    setColor(color){\r\n        this.color = color;\r\n    }\r\n\r\n    getType(){\r\n        return this.type;\r\n    }\r\n    setType(type){\r\n        this.type = type;\r\n    }\r\n}","import {Element} from \"../classes/Element\";\r\nexport function random(a, b) {\r\n    return Math.random() * (b - a) + a;\r\n}\r\n\r\nexport function randomInt(a, b) {\r\n    return Math.trunc(random(a, b))\r\n}\r\n\r\nexport function swapObj(json) {\r\n    let ret = {};\r\n    for (let key in json) {\r\n        ret[json[key]] = key;\r\n    }\r\n    return ret;\r\n}\r\n\r\nexport function sleep(ms) {\r\n    ms += new Date().getTime();\r\n    while (new Date() < ms) {\r\n    }\r\n}\r\n\r\nexport function getAllMethods(toCheck) {\r\n    const props = [];\r\n    let obj = toCheck;\r\n    do {\r\n        props.push(...Object.getOwnPropertyNames(obj));\r\n    } while (obj = Object.getPrototypeOf(obj));\r\n\r\n    return props.sort().filter((e, i, arr) => {\r\n        if (e!=arr[i+1] && typeof toCheck[e] == 'function') return true;\r\n    });\r\n}\r\n\r\nexport function deepArrayCopy(arr){\r\n    let out = [];\r\n    for(let i of arr){\r\n        let value = i.getValue();\r\n        let type = i.getType();\r\n        let color = i.getColor();\r\n        out.push(new Element(value, type, color))\r\n    }\r\n    return out;\r\n}\r\n\r\nexport function arraysEquals(a, b){\r\n    return a.length === b.length &&\r\n    a.every((v, i) => v === b[i]);\r\n}","import React from 'react';\r\nimport styles from \"./ArrayWindow.module.scss\";\r\n\r\nexport function ArrayWindow(props){\r\n    let array = props.array\r\n    let mainArray = props.mainArray\r\n    let height = props.height\r\n    // let style = props.style\r\n    // console.log(array)\r\n    let arr = []\r\n\r\n    for (let i = 0; i < array.length; ++i) {\r\n        let styleSheet = {\r\n            height: array[i].getValue() / mainArray.length * 100 + \"%\",\r\n            backgroundColor: \"rgb(\" + array[i].getColor() + \")\"\r\n        }\r\n        arr.push(<div key={i} style={styleSheet} className={styles.bar}/>);\r\n    }\r\n    for(let i = array.length;i < mainArray.length;++i){\r\n        let styleSheet = {\r\n            height: \"0%\",\r\n            backgroundColor: \"rgb(255,255,255)\"\r\n        }\r\n        arr.push(<div key={i} style={styleSheet} className={styles.bar}/>);\r\n    }\r\n    if(array.length===0){\r\n        return <div/>\r\n    }\r\n    return (\r\n        <div style={{width: \"100%\", height: height+\"%\"}}>\r\n            <div className={styles.arrayContainer}>\r\n                {arr}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react';\r\nimport styles from \"./Stats.module.scss\";\r\n\r\nexport function Stats(props){\r\n    return(\r\n        <div className={styles.statsContainer}>\r\n            <div><b>Sort: {props.sortName}</b></div>\r\n            <div>Length: {props.arrLength}</div>\r\n            {/*<div>Comparisons: {props.comparisons}</div>*/}\r\n            <div>Writes: {props.writes}</div>\r\n        </div>\r\n    )\r\n}","export let initFunctions = {\r\n    linear: function linear(x, length) {\r\n        return x;\r\n    },\r\n    reverse: function reverse(x, length) {\r\n        return length - x;\r\n    },\r\n    pipeOrgan: function pipeOrgan(x, length) {\r\n        if (x < length / 2) {\r\n            return 2 * x;\r\n        } else {\r\n            return 2 * (length - x) - 1;\r\n        }\r\n    },\r\n    inversedPipeOrgan: function inversedPipeOrgan(x, length){\r\n        if (x < length / 2) {\r\n            return (length - 2*x) - 1;\r\n        } else {\r\n            return x*2-length;\r\n        }\r\n    }\r\n}","import {randomInt} from \"./utils\";\r\n\r\nexport let shuffles = {\r\n    fullShuffle: function (len) {\r\n        let instructions = []\r\n        for (let i = 0; i < len; ++i) {\r\n            let randomIndex = randomInt(i, len)\r\n            instructions.push(\r\n                {\r\n                    cmd: \"swap\",\r\n                    a: i,\r\n                    b:randomIndex\r\n                }\r\n            )\r\n        }\r\n        return instructions\r\n    },\r\n\r\n    almostSorted: function (len) {\r\n        let instructions = []\r\n        const amount = 0.1\r\n        for (let i = 0; i < len * amount; ++i) {\r\n            let randomIndexA = randomInt(i, len)\r\n            let randomIndexB = randomInt(i, len)\r\n            instructions.push(\r\n                {\r\n                    cmd: \"swap\",\r\n                    a: randomIndexA,\r\n                    b:randomIndexB\r\n                }\r\n            )\r\n        }\r\n        return instructions\r\n    }\r\n\r\n\r\n}","import React from 'react';\r\nimport styles from \"./Controls.module.scss\";\r\nimport {initFunctions} from \"../utils/initFunctions\";\r\nimport {getAllMethods} from \"../utils/utils\";\r\nimport {shuffles} from \"../utils/shuffles\";\r\n\r\n\r\nexport class Controls extends React.Component {\r\n    isControlShow\r\n    arrayVisualizer\r\n    sorts\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.DEFAULT_ARR_LEN = 100\r\n        this.isControlShow = true;\r\n        this.arrayVisualizer = props.arrayVisualizer\r\n        this.sorts = props.sorts\r\n        this.arrayVisualizer.updateArrLength(this.DEFAULT_ARR_LEN)\r\n        this.arrayVisualizer.initArray(initFunctions.linear)\r\n    }\r\n\r\n    updateArrLength() {\r\n        let slider = document.getElementById(styles.slider)\r\n\r\n        if (slider !== null) {\r\n            let len = slider.value\r\n            this.arrayVisualizer.updateArrLength(len)\r\n        }\r\n    }\r\n\r\n    toggleControlShow() {\r\n        // console.log(styles.controls)\r\n        let controlsContainer = document.getElementById(styles.controlsContainer)\r\n        let controls = document.getElementById(styles.controls)\r\n        let btn = document.getElementById(styles.showToggleBtn)\r\n        if (this.isControlShow) {\r\n            controls.style.display = \"none\"\r\n            controlsContainer.style.width = \"0\"\r\n            btn.innerHTML = \"&gt;&gt;\";\r\n        } else {\r\n            controls.style.display = \"block\"\r\n            controlsContainer.style.width = \"20rem\"\r\n            btn.innerHTML = \"&lt;&lt\";\r\n        }\r\n        this.isControlShow = !this.isControlShow\r\n    }\r\n\r\n    initArray(func){\r\n        this.arrayVisualizer.initArray(func, this.arrayVisualizer.arrLength, true)\r\n    }\r\n\r\n    shuffleArray(func){\r\n        this.arrayVisualizer.shuffleArray(func)\r\n    }\r\n\r\n    sortArray(sortName){\r\n        this.sorts.runSort(sortName, 0, this.arrayVisualizer.getArrLength()-1, 10)\r\n    }\r\n\r\n    stopSort(){\r\n        this.arrayVisualizer.stopSort()\r\n    }\r\n\r\n    abortSort(){\r\n        this.stopSort()\r\n        this.initArray(initFunctions.linear)\r\n    }\r\n\r\n    genInitFunctions(){\r\n        // console.log(initFunctions)\r\n        let tmp = []\r\n        for (let i in initFunctions) {\r\n            tmp.push(\r\n                <button key={i} onClick={this.initArray.bind(this, initFunctions[i])}>{i}</button>\r\n            )\r\n        }\r\n        return tmp;\r\n    }\r\n\r\n    getSorts(){\r\n        let tmp = []\r\n        let sortsNames = this.sorts.getSortsPaths()\r\n        for (let i of sortsNames) {\r\n                tmp.push(\r\n                    <button key={i} onClick={this.sortArray.bind(this, i)}>{i}</button>)\r\n        }\r\n        return tmp;\r\n    }\r\n\r\n    getShuffles(){\r\n        let tmp = []\r\n        for(let i in shuffles){\r\n            tmp.push(\r\n                <button key={i} onClick={this.shuffleArray.bind(this, shuffles[i])}>{i}</button>\r\n            )\r\n        }\r\n        return tmp;\r\n    }\r\n\r\n    toggleShowAuxArrays(){\r\n        let element = document.getElementById(\"auxArrShowCB\")\r\n        this.arrayVisualizer.setShowAuxArrays(element.checked)\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div id={styles.controlsContainer}>\r\n                {/*<div onClick={this.toggleControlShow.bind(this)} id={styles.showToggleBtn}>&lt;&lt;</div>*/}\r\n                <div id={styles.controls}>\r\n                    <div>\r\n                        <div className={styles.textCenter}>Array Size</div>\r\n                        <input id={styles.slider} type=\"range\" min=\"10\" max=\"300\" defaultValue={this.DEFAULT_ARR_LEN}\r\n                               step=\"10\"\r\n                               onChange={this.updateArrLength.bind(this)}/>\r\n                        <div className={styles.textCenter}>\r\n                            <div>Visuals</div>\r\n                            <div>\r\n                                <input onChange={this.toggleShowAuxArrays.bind(this)} type=\"checkbox\" id=\"auxArrShowCB\" name=\"auxArrShowCB\" defaultChecked={true}/>\r\n                                    <label htmlFor=\"auxArrShowCB\">Show Aux Arrays</label>\r\n                            </div>\r\n                        </div>\r\n                        <div className={styles.textCenter}>\r\n                            <div>Init Array</div>\r\n                            <div>{this.genInitFunctions()}</div>\r\n                        </div>\r\n\r\n                        <div className={styles.textCenter}>\r\n                            <div>Shuffle Array</div>\r\n                            <div>\r\n                                {/*<button onClick={this.shuffleArray.bind(this)}>Random</button>*/}\r\n                                <div>{this.getShuffles()}</div>\r\n                            </div>\r\n                        </div>\r\n                        <div className={styles.textCenter}>\r\n                            <div>Sort control</div>\r\n                            <div>\r\n                                <button onClick={this.abortSort.bind(this)}>Abort Sort(Recommended)</button>\r\n                                <button onClick={this.stopSort.bind(this)}>Stop Sort(Not Recommended)</button>\r\n                            </div>\r\n                        </div>\r\n                        <div className={styles.textCenter}>\r\n                            <div>Sort Array</div>\r\n                            <div>\r\n                                {this.getSorts()}\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}","export class Delays {\r\n    arrayVisualizer\r\n    timeoutArray\r\n    delays\r\n    delayIncFactor\r\n    delayInc\r\n\r\n\r\n    constructor(arrayVisualizer) {\r\n        this.arrayVisualizer = arrayVisualizer\r\n        this.timeoutArray = []\r\n        this.delays = {\r\n            Swap: 0,\r\n            Write: 0,\r\n            Comp: 0,\r\n            Unmark: 0,\r\n            CreateAuxArray: 0,\r\n            RemoveAuxArray: 0\r\n        }\r\n        this.delayIncFactor = 3000\r\n        // console.log(arrayVisualizer.getArrLength())\r\n        this.delayInc = this.delayIncFactor/arrayVisualizer.getArrLength()\r\n    }\r\n\r\n    pushFunc(func, obj, delayName, delay, args) {\r\n        this.timeoutArray.push(setTimeout(func.bind(obj), this.delays[delayName] += delay, args))\r\n    }\r\n\r\n    push(timeout){\r\n        this.timeoutArray.push(timeout)\r\n    }\r\n\r\n    resetDelays() {\r\n        this.delays = {\r\n            Swap: 0,\r\n            Write: 0,\r\n            Comp: 0,\r\n            Unmark: 0,\r\n            CreateAuxArray: 0,\r\n            RemoveAuxArray: 0\r\n        }\r\n        for (let i of this.timeoutArray) {\r\n            clearTimeout(i);\r\n        }\r\n        this.timeoutArray = []\r\n    }\r\n\r\n    setDelay(name, value){\r\n        this.delays[name] = value\r\n    }\r\n\r\n    incDelay(name, inc=this.delayIncFactor){\r\n        return this.delays[name]+=inc\r\n    }\r\n\r\n    getDelayInc(){\r\n        return this.delayInc\r\n    }\r\n}","export class Sounds{\r\n    arrayVisualizer\r\n    ctx\r\n    Delays\r\n    constructor(arrayVisualizer) {\r\n        this.arrayVisualizer = arrayVisualizer\r\n        this.Delays = arrayVisualizer.getDelays()\r\n        this.ctx = new (window.AudioContext || window.webkitAudioContext)();\r\n    }\r\n    playSound(value) {\r\n        let osc = this.ctx.createOscillator();\r\n        osc.type = 'sine';\r\n\r\n        let k = value / this.arrayVisualizer.getArrLength()\r\n        osc.frequency.value = 2000 * k + 200;\r\n\r\n        let addTime = 50\r\n\r\n        let gainNode = this.ctx.createGain()\r\n        gainNode.gain.value = 0;\r\n        osc.connect(gainNode)\r\n        gainNode.connect(this.ctx.destination)\r\n        console.log(this.Delays.getDelayInc())\r\n        gainNode.gain.linearRampToValueAtTime(0.05, this.ctx.currentTime + (this.Delays.getDelayInc() + addTime) / 1000 / 2)\r\n        gainNode.gain.linearRampToValueAtTime(0, this.ctx.currentTime + (this.Delays.getDelayInc() + addTime) / 1000)\r\n\r\n        osc.start();\r\n        osc.stop(this.ctx.currentTime + (this.Delays.getDelayInc() + addTime) / 1000);\r\n    }\r\n}","import {randomInt} from \"../utils/utils\";\r\n\r\nconst colors = {\r\n    \"Unmarked\": [255, 255, 255],\r\n    \"Default\": [255, 0, 0],\r\n    \"Additional\": [randomInt(0, 256), randomInt(0, 256), randomInt(0, 256)],\r\n    \"Sorted\": [0, 255, 0],\r\n    \"Analysis\": [0, 0, 255]\r\n}\r\nexport class Marks{\r\n    arrayVisualizer\r\n    array\r\n    Delays\r\n\r\n    constructor(arrayVisualizer) {\r\n        this.arrayVisualizer = arrayVisualizer\r\n        this.array = arrayVisualizer.getMainArray()\r\n        this.Delays = arrayVisualizer.getDelays()\r\n    }\r\n\r\n    mark(index, args, saveArr = true) {\r\n        let type = \"Default\"\r\n        let color = colors[\"Default\"]\r\n        let tmpArr = this.array\r\n        // Additional\r\n        if (args.type === \"Additional\") {\r\n            type = \"Additional\"\r\n            color = args.color\r\n            // console.log(color)\r\n        }\r\n        //Default\r\n        else if (!args.type || args.type === \"Default\") {\r\n            type = \"Default\"\r\n            color = colors[\"Default\"]\r\n        } else {\r\n            type = args.type\r\n            color = args.color\r\n        }\r\n\r\n        tmpArr[index].setType(type)\r\n        tmpArr[index].setColor(color)\r\n        if (saveArr) {\r\n            this.arrayVisualizer.setState({\r\n                array: tmpArr\r\n            })\r\n        } else {\r\n            return tmpArr\r\n        }\r\n        // console.log(color);\r\n    }\r\n\r\n    markMany(indexes, args, saveArr) {\r\n        let tmpArr = this.array\r\n        for (let i of indexes) {\r\n            if (saveArr) {\r\n                this.mark(i, args, saveArr)\r\n            } else {\r\n                tmpArr = this.mark(i, args, saveArr)\r\n            }\r\n        }\r\n        if (!saveArr) {\r\n            return tmpArr\r\n        }\r\n    }\r\n\r\n    unmark(index, saveArr = true) {\r\n        let tmpArr = this.array\r\n        tmpArr[index].setColor(colors[\"Unmarked\"])\r\n        tmpArr[index].setType(\"Unmarked\")\r\n        if (saveArr) {\r\n            this.arrayVisualizer.setState({\r\n                array: tmpArr\r\n            })\r\n        } else {\r\n            return tmpArr\r\n        }\r\n    }\r\n\r\n    unmarkMany(indexes, saveArr, saveOnce) {\r\n        let tmpArr = this.array\r\n        for (let i of indexes) {\r\n            if (saveArr) {\r\n                this.unmark(i, saveArr)\r\n            } else {\r\n                tmpArr = this.unmark(i, saveArr)\r\n            }\r\n        }\r\n        if (saveOnce) {\r\n            this.arrayVisualizer.setState({\r\n                array: tmpArr\r\n            })\r\n        }\r\n        if (!saveArr) {\r\n            return tmpArr\r\n        }\r\n    }\r\n\r\n\r\n    markUnmarkMany(markIndexes, markArgs) {\r\n        this.markMany(markIndexes, markArgs, true)\r\n        // this.Delays.push(setTimeout(this.unmarkMany.bind(this), this.delays.Unmark += this.Delays.getDelayInc() / 100, markIndexes, false, true))\r\n        this.Delays.push(setTimeout(this.unmarkMany.bind(this), this.Delays.incDelay(\"Unmark\", this.Delays.getDelayInc() / 100), markIndexes, false, true))\r\n    }\r\n\r\n\r\n\r\n}","export class Reads{\r\n    arrayVisualizer;\r\n    pseudoArray\r\n    pseudoAuxArrays\r\n    array\r\n    auxArrays\r\n    constructor(arrayVisualizer){\r\n        this.arrayVisualizer = arrayVisualizer\r\n        this.pseudoArray = arrayVisualizer.getPseudoArray()\r\n        this.pseudoAuxArrays = arrayVisualizer.getPseudoAuxArrays()\r\n        this.array = arrayVisualizer.getMainArray()\r\n        this.auxArrays = arrayVisualizer.getAuxArrays()\r\n        this.Sounds = arrayVisualizer.getSounds()\r\n        // this.Delays = arrayVisualizer.getDelays()\r\n    }\r\n    auxRead(index, arrIndex, isPseudo = true){\r\n        if(isPseudo){\r\n            return this.pseudoAuxArrays[arrIndex][index].getValue()\r\n        }else {\r\n            return this.auxArrays[arrIndex][index].getValue()\r\n        }\r\n    }\r\n\r\n    read(index, arr = this.pseudoArray) {\r\n        // this.markUnmarkMany([index], {type: \"Default\"})\r\n        // this.instructions.push(\r\n        //     {\r\n        //         cmd: \"read\",\r\n        //         arr: arr,\r\n        //         index: index\r\n        //     }\r\n        // )\r\n        return arr[index].getValue()\r\n    }\r\n\r\n    compare(a, b, sign = \"<\", arr = this.pseudoArray) {\r\n        // this.compMainArrWithDelay(a, b, false)\r\n        if (sign === \"<\") {\r\n            return arr[a].getValue() < arr[b].getValue()\r\n        } else if (sign === \"<=\") {\r\n            return arr[a].getValue() <= arr[b].getValue()\r\n        } else if (sign === \">\") {\r\n            return arr[a].getValue() > arr[b].getValue()\r\n        } else if (sign === \">=\") {\r\n            return arr[a].getValue() >= arr[b].getValue()\r\n        } else {\r\n            return arr[a].getValue() === arr[b].getValue()\r\n        }\r\n    }\r\n\r\n}","import {Element} from \"../classes/Element\";\r\n\r\nexport class Writes{\r\n    arrayVisualizer;\r\n    pseudoArray\r\n    pseudoAuxArrays\r\n    array\r\n    auxArrays\r\n    Sounds\r\n    Delays\r\n    Marks\r\n\r\n    constructor(arrayVisualizer){\r\n        this.arrayVisualizer = arrayVisualizer\r\n        // console.log(arrayVisualizer)\r\n        this.pseudoArray = arrayVisualizer.getPseudoArray()\r\n        this.pseudoAuxArrays = arrayVisualizer.getPseudoAuxArrays()\r\n        this.array = arrayVisualizer.getMainArray()\r\n        this.auxArrays = arrayVisualizer.getAuxArrays()\r\n        this.Sounds = arrayVisualizer.getSounds()\r\n        this.Delays = arrayVisualizer.getDelays()\r\n        this.Marks = arrayVisualizer.getMarks()\r\n    }\r\n\r\n\r\n\r\n    swapWithDelay(a, b, arr = this.pseudoArray, mark, delay = this.Delays.getDelayInc(), playSound) {\r\n        // this.Delays.push(setTimeout(this.swapInArr.bind(this), this.delays.Swap += delay, a, b, arr, mark, playSound))\r\n        this.Delays.push(setTimeout(this.swapInArr.bind(this), this.Delays.incDelay(\"Write\", delay), a, b, arr, mark, playSound))\r\n    }\r\n\r\n\r\n    swapInArr(a, b, arr = this.pseudoArray, mark = true, playSound = false) {\r\n        if(playSound) {\r\n            this.Sounds.playSound(arr[b].getValue());\r\n        }\r\n        let tmpArr = arr\r\n        let tmp = tmpArr[a]\r\n        tmpArr[a] = tmpArr[b]\r\n        tmpArr[b] = tmp\r\n        if (mark) {\r\n            this.Marks.markUnmarkMany([a, b], {type: \"Default\"})\r\n        }\r\n        // let curWrites = this.arrayVisualizer.getState().writes;\r\n        // this.arrayVisualizer.setState({\r\n        //     writes: curWrites + 2\r\n        // })\r\n        // console.log(this.arrayVisualizer)\r\n        this.arrayVisualizer.setState({\r\n            array: tmpArr\r\n        })\r\n    }\r\n\r\n    swap(a, b, arr = this.pseudoArray) {\r\n        this.swapInArr(a, b, arr, false, false)\r\n        // console.log(getVarName(this.state.array.name))\r\n        // this.instructions.push(\r\n        //     {\r\n        //         cmd: \"swap\",\r\n        //         arr: arr,\r\n        //         a: a,\r\n        //         b: b\r\n        //     }\r\n        // )\r\n        this.swapWithDelay(a, b, this.array, true, this.Delays.getDelayInc(), true)\r\n    }\r\n\r\n    writeInArr(index, value, arr = this.pseudoArray, mark = true, playSound = false) {\r\n        // console.log(\"WRITING IN \")\r\n        // console.log(this.getNameByArray(arr))\r\n        // console.log(\"INDEX: \"+index)\r\n        // console.log(\"VALUE: \"+value)\r\n        if(playSound) {\r\n            this.Sounds.playSound(value)\r\n        }\r\n        arr[index].setValue(value)\r\n        if (mark) {\r\n            this.Marks.markUnmarkMany([index], {type: \"Default\"})\r\n        }\r\n        let curWrites = this.arrayVisualizer.getState().writes;\r\n        this.arrayVisualizer.setState({\r\n            writes: curWrites + 1\r\n        })\r\n    }\r\n\r\n    writeWithDelay(index, value, arr = this.pseudoArray, mark, delay = this.Delays.getDelayInc(), playSound = true) {\r\n        // this.Delays.push(setTimeout(this.writeInArr.bind(this), this.Delays.delays.Write += delay, index, value, arr, mark, playSound))\r\n        this.Delays.push(setTimeout(this.writeInArr.bind(this), this.Delays.incDelay(\"Write\", delay), index, value, arr, mark, playSound))\r\n    }\r\n\r\n    write(index, value, arr = this.pseudoArray) {\r\n        this.writeInArr(index, value, arr, false, false)\r\n        // this.instructions.push(\r\n        //     {\r\n        //         cmd: \"write\",\r\n        //         arr: arr,\r\n        //         index: index,\r\n        //         value: value\r\n        //     }\r\n        // )\r\n        this.writeWithDelay(index, value, this.array, true, this.Delays.getDelayInc(), true)\r\n    }\r\n\r\n    createAuxArray(len, isPseudo = true){\r\n        if(isPseudo) {\r\n            let auxArrIndex = this.pseudoAuxArrays.length\r\n            this.pseudoAuxArrays.push(this.arrayVisualizer.initArray(() => 0, len, false))\r\n            // this.instructions.push(\r\n            //     {\r\n            //         cmd: \"createAuxArray\",\r\n            //         len: len\r\n            //     }\r\n            // )\r\n            return auxArrIndex\r\n        }else{\r\n            let tmpArr = this.auxArrays\r\n            tmpArr.push(this.arrayVisualizer.initArray(() => 0, len, false))\r\n            this.arrayVisualizer.setState({\r\n                    auxArrays: tmpArr\r\n                }\r\n            )\r\n        }\r\n    }\r\n\r\n    createAuxArrayWithDelay(len, delay, isPseudo = false){\r\n        // this.timeoutArray.push(setTimeout(this.createAuxArray.bind(this), this.delays.Write += delay, len, isPseudo))\r\n        this.Delays.push(setTimeout(this.createAuxArray.bind(this), this.Delays.incDelay(\"Write\", delay), len, isPseudo))\r\n    }\r\n\r\n    removeAuxArray(index, isPseudo = true){\r\n        if(isPseudo) {\r\n            this.pseudoAuxArrays.splice(index, 1)\r\n            // this.instructions.push(\r\n            //     {\r\n            //         cmd: \"removeAuxArray\",\r\n            //         index: index\r\n            //     }\r\n            // )\r\n            this.removeAuxArrayWithDelay(index, this.Delays.getDelayInc(), false)\r\n        }else{\r\n            let tmp = this.auxArrays\r\n            tmp.splice(index, 1)\r\n            this.arrayVisualizer.setState({\r\n                auxArrays: tmp\r\n            })\r\n            // this.state.auxArrays.splice(index, 1)\r\n        }\r\n    }\r\n\r\n    removeAuxArrayWithDelay(index, delay, isPseudo = false){\r\n        this.Delays.push(setTimeout(this.removeAuxArray.bind(this), this.Delays.incDelay(\"Write\", delay), index, isPseudo))\r\n    }\r\n\r\n\r\n    auxWrite(index, value, arrIndex, isPseudo = true, playSound = false){\r\n        if(playSound){\r\n            this.Delays.playSound(value)\r\n        }\r\n        if(isPseudo){\r\n            this.pseudoAuxArrays[arrIndex][index].setValue(value)\r\n            // this.instructions.push(\r\n            //     {\r\n            //         cmd: \"auxWrite\",\r\n            //         index: index,\r\n            //         value: value,\r\n            //         arrIndex: arrIndex\r\n            //     }\r\n            // )\r\n            this.auxWriteWithDelay(index, value, arrIndex, this.Delays.incDelay(\"Write\", this.Delays.getDelayInc()), false, true)\r\n        }else{\r\n            this.auxArrays[arrIndex][index].setValue(value)\r\n            let tmp = this.auxArrays\r\n            this.arrayVisualizer.setState({\r\n                auxArrays: tmp\r\n            })\r\n        }\r\n    }\r\n\r\n    auxWriteWithDelay(index, value, arrIndex, delay, isPseudo = false, playSound = true, ){\r\n        this.Delays.push(setTimeout(this.auxWrite.bind(this), this.Delays.incDelay(\"Write\", delay), index, value, arrIndex, isPseudo, playSound))\r\n    }\r\n\r\n}","import React from 'react';\r\nimport {arraysEquals, deepArrayCopy, getAllMethods, randomInt} from \"../utils/utils\";\r\nimport {Sorts} from \"../Sorts/Sorts\"\r\nimport {ArrayWindow} from \"../ArrayWindow/ArrayWindow\";\r\nimport {Element} from \"../classes/Element\";\r\nimport {Stats} from \"../Stats/Stats\";\r\nimport {Controls} from \"../Controls/Controls\";\r\nimport {initFunctions} from \"../utils/initFunctions\";\r\nimport {Delays} from \"../ArrayAccess/Delays\";\r\nimport {Sounds} from \"../ArrayAccess/Sounds\";\r\nimport {Marks} from \"../ArrayAccess/Marks\";\r\nimport {Reads} from \"../ArrayAccess/Reads\";\r\nimport {Writes} from \"../ArrayAccess/Writes\";\r\n\r\nconst colors = {\r\n    \"Unmarked\": [255, 255, 255],\r\n    \"Default\": [255, 0, 0],\r\n    \"Additional\": [randomInt(0, 256), randomInt(0, 256), randomInt(0, 256)],\r\n    \"Sorted\": [0, 255, 0],\r\n    \"Analysis\": [0, 0, 255]\r\n}\r\n\r\nexport class ArrayVisualizer extends React.Component {\r\n    delays;\r\n    delayInc;\r\n    pseudoArray;\r\n    pseudoAuxArrays;\r\n    arrLength\r\n    ctx\r\n    timeoutArray\r\n    sorts\r\n    delayIncConst\r\n    showAuxArrays\r\n\r\n    Delays\r\n    Sounds\r\n    Marks\r\n    Reads\r\n    Writes\r\n\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.arrLength = 100\r\n\r\n        this.state = {\r\n            array: this.initArray(initFunctions.linear, this.arrLength),\r\n            sortName: \"\",\r\n            comparisons: 0,\r\n            writes: 0,\r\n            auxArrays: []\r\n        }\r\n\r\n        this.Delays = new Delays(this)\r\n        this.Sounds = new Sounds(this)\r\n        this.Marks = new Marks(this)\r\n        this.Reads = new Reads(this)\r\n        this.Writes = new Writes(this)\r\n\r\n        // console.log(this)\r\n\r\n        this.instructions = [];\r\n        this.timeoutArray = [];\r\n        this.pseudoArray = deepArrayCopy(this.state.array)\r\n        this.pseudoAuxArrays = []\r\n        this.sorts = new Sorts(this);\r\n        // this.arrLength = this.state.length\r\n        // this.delayInc = this.delayIncConst/this.arrLength;\r\n        this.showAuxArrays = true\r\n\r\n        // this.updateArrLength(this.arrLength);\r\n    }\r\n\r\n    initArray(func, length, setToState=false) {\r\n        let arr = []\r\n        for (let i = 0; i < length; ++i) {\r\n            let element = new Element(func(i, length), 0, [255, 255, 255])\r\n            arr.push(element)\r\n        }\r\n        if(setToState){\r\n            this.arrayVisualizer.setState({\r\n                array: arr\r\n            })\r\n        }else {\r\n            return arr;\r\n        }\r\n    }\r\n\r\n    nullify() {\r\n        this.Delays.resetDelays()\r\n        this.setState(\r\n            {\r\n                comparisons: 0,\r\n                writes: 0\r\n            }\r\n        )\r\n        // eslint-disable-next-line react/no-direct-mutation-state\r\n        this.state.writes = 0;\r\n        // eslint-disable-next-line react/no-direct-mutation-state\r\n        this.state.comparisons = 0;\r\n    }\r\n\r\n\r\n    compMainArr(a, b, mark = false) {\r\n        let curComparisons = this.state.comparisons;\r\n        this.setState({\r\n            comparisons: curComparisons + 1\r\n        })\r\n        console.log(\"Comparisons: \" + this.state.comparisons + \" \" + a + \" \" + b)\r\n        if (mark) {\r\n            this.markUnmarkMany([a, b], {type: \"Additional\", color: [0, 0, 255]})\r\n        }\r\n    }\r\n\r\n\r\n\r\n    getNameByArray(arr){\r\n        // console.log(arr)\r\n        if(arraysEquals(arr, this.state.array)){\r\n            return {name:\"mainArray\"}\r\n        }\r\n        if(arraysEquals(arr, this.pseudoArray)){\r\n            return {name:\"pseudoArray\"}\r\n        }\r\n        for(let i = 0; i < this.pseudoAuxArrays.length;++i){\r\n            if (arraysEquals(arr, this.pseudoAuxArrays[i])){\r\n                return {name:\"pseudoAuxArray\", index:i}\r\n            }\r\n        }\r\n        for(let i = 0; i < this.state.auxArrays.length;++i){\r\n            if (arraysEquals(arr, this.state.auxArrays[i])){\r\n                return {name:\"auxArray\", index:i}\r\n            }\r\n        }\r\n        return \"NotFound\"\r\n    }\r\n\r\n    getArrayByName(args){\r\n        let name = args.name\r\n        let index = args.index\r\n        if (name===\"mainArray\"){\r\n            return this.state.array\r\n        }\r\n        if(name===\"pseudoArray\"){\r\n            return this.pseudoArray\r\n        }\r\n        if(name===\"auxArray\"){\r\n            console.log(args)\r\n            return this.state.auxArrays[index]\r\n        }\r\n        if(name===\"pseudoAuxArray\"){\r\n            console.log(args)\r\n            return this.pseudoAuxArrays[index]\r\n        }\r\n        return []\r\n    }\r\n\r\n    inverseArrayName(args){\r\n        let name = args.name\r\n        let index = args.index\r\n        if(name===\"pseudoArray\") {\r\n            return {name:\"mainArray\"}\r\n        }else if(name===\"pseudoAuxArray\"){\r\n            return {name: \"auxArray\", index: index}\r\n        }\r\n        return args\r\n    }\r\n\r\n\r\n    getArrayVisualizer() {\r\n        return this;\r\n    }\r\n\r\n    getPseudoArray() {\r\n        return this.pseudoArray;\r\n    }\r\n\r\n    getState(){\r\n        return this.state\r\n    }\r\n\r\n    getArrLength(){\r\n        return this.arrLength;\r\n    }\r\n\r\n    setShowAuxArrays(val){\r\n        this.showAuxArrays = val\r\n    }\r\n\r\n    getMainArray(){\r\n        return this.state.array\r\n    }\r\n\r\n    getPseudoAuxArrays(){\r\n        return this.pseudoAuxArrays\r\n    }\r\n\r\n    getDelays(){\r\n        return this.Delays\r\n    }\r\n\r\n    getSounds(){\r\n        return this.Sounds;\r\n    }\r\n\r\n    getMarks(){\r\n        return this.Marks;\r\n    }\r\n\r\n    getAuxArrays(){\r\n        return this.state.auxArrays\r\n    }\r\n\r\n    getReads(){\r\n        return this.Reads;\r\n    }\r\n\r\n    getWrites(){\r\n        return this.Writes\r\n    }\r\n\r\n    forceUpdateMainArray(array){\r\n        this.setState({\r\n            array: array\r\n        })\r\n    }\r\n\r\n    forceUpdateAuxArrays(auxArrays){\r\n        this.setState({\r\n            auxArrays: auxArrays\r\n        })\r\n    }\r\n\r\n    forceUpdateState(state){\r\n        this.setState(state)\r\n    }\r\n\r\n    stopSort(){\r\n        // this.resetDelay()\r\n        this.Delays.resetDelays()\r\n        this.unmarkMany(Array.from(Array(this.arrLength).keys()), false, true)\r\n        this.setState({\r\n                auxArrays: []\r\n            }\r\n        )\r\n    }\r\n\r\n\r\n    shuffleClickEvent() {\r\n        this.shuffleArray()\r\n    }\r\n\r\n    shuffleArray(func) {\r\n        this.nullify()\r\n        this.setState({\r\n            sortName: \"Shuffle\"\r\n        })\r\n\r\n        let instructions = func(this.arrLength);\r\n        for(let i of instructions){\r\n            if(i.cmd === \"swap\"){\r\n                // setTimeout(this.Writes.swapInArr.bind(this), this.delays.Swap += this.delayInc / 5, i.a, i.b, this.state.array, true, true)\r\n                setTimeout(this.Writes.swapInArr.bind(this), this.Delays.incDelay(\"Swap\", this.Delays.getDelayInc()/5), i.a, i.b, this.state.array, true, true)\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    setSortName(sortName){\r\n        this.setState({\r\n            sortName: sortName\r\n        })\r\n    }\r\n\r\n    initPseudoArray(){\r\n        this.pseudoArray = deepArrayCopy(this.state.array)\r\n    }\r\n\r\n    // sortClickEvent(sortName, low, high, bucketsNum) {\r\n    sortClickEvent() {\r\n        this.nullify()\r\n\r\n        // let sortBind = sort.bind(this.sorts, 0, this.arrLength - 1)\r\n        // sortBind()\r\n        // console.log(sort)\r\n        // let sort = this.sorts.getSortObject(sortName)\r\n        //\r\n        // this.setState({\r\n        //     sortName: sort.getSortName()\r\n        // })\r\n\r\n        // let warnLen = sort.getWarnLen()\r\n        // if(warnLen!==-1 && this.arrLength > warnLen && !window.confirm(\"WARNING!!!\\nThe array size(\"+this.arrLength+\") \" +\r\n        //     \"more than recommended(\"+warnLen+\")\\nApplication may freeze\\nDo you want continue?\")){\r\n        //     return\r\n        // }\r\n\r\n        // sort.runSort(low, high, bucketsNum)\r\n\r\n        console.log(\"SORTED ARRAY:\")\r\n        console.log(this.pseudoArray)\r\n\r\n        console.log(\"START INTERPRETATION!!\")\r\n        for(let i of this.instructions){\r\n            let cmd = i.cmd\r\n            if([\"swap\", \"read\", \"write\"].includes(cmd)) {\r\n                let arrName = this.getNameByArray(i.arr)\r\n                let arrNameInv = this.inverseArrayName(arrName)\r\n                let arr = this.getArrayByName(arrNameInv)\r\n                // console.log(arrName)\r\n                if (cmd === \"swap\") {\r\n                    this.swapWithDelay(i.a, i.b, arr, true, this.delayInc, true)\r\n                } else if (cmd === \"write\") {\r\n                    // console.log(arrName)\r\n                    // console.log(\"WRITE FROM INTERPRETER!\")\r\n                    // console.log(arr)\r\n                    // console.log(this.getNameByArray(arr))\r\n                    this.writeWithDelay(i.index, i.value, arr, true, this.delayInc, true)\r\n                } else {}\r\n            }\r\n            if(cmd===\"auxWrite\"){\r\n                this.auxWriteWithDelay(i.index, i.value, i.arrIndex, this.delayInc, false, true)\r\n            }\r\n            if(cmd===\"createAuxArray\"){\r\n                this.createAuxArrayWithDelay(i.len, this.delayInc, false)\r\n            }\r\n            if(cmd===\"removeAuxArray\"){\r\n                this.removeAuxArrayWithDelay(i.index, this.delayInc, false)\r\n            }\r\n        }\r\n        this.pseudoAuxArrays = []\r\n        this.instructions = []\r\n    }\r\n\r\n\r\n    updateDelayInc(val){\r\n        this.delayInc = val/this.arrLength;\r\n    }\r\n\r\n    updateArrLength(len){\r\n        this.arrLength = len\r\n        this.setState({\r\n            array: this.initArray(initFunctions.linear, this.arrLength)\r\n        })\r\n        this.pseudoArray = deepArrayCopy(this.state.array)\r\n\r\n        this.sorts.arrLength = this.getArrLength()\r\n        this.updateDelayInc(this.delayIncConst)\r\n    }\r\n\r\n    genArrayWindows(){\r\n        let tmp = []\r\n        if(this.showAuxArrays) {\r\n            for (let i = this.state.auxArrays.length - 1; i >= 0; i--) {\r\n                tmp.push(\r\n                    <ArrayWindow key={this.state.auxArrays.length - i} array={this.state.auxArrays[i]}\r\n                                 mainArray={this.state.array} height={100 / (1 + this.state.auxArrays.length)}/>\r\n                )\r\n            }\r\n        }\r\n        return tmp\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Stats sortName={this.state.sortName} comparisons={this.state.comparisons} writes={this.state.writes} arrLength={this.arrLength}/>\r\n                <div style={{height: \"100vh\"}}>\r\n                {/*<div>*/}\r\n                    {this.genArrayWindows()}\r\n                    <ArrayWindow array={this.state.array} mainArray={this.state.array} height={this.showAuxArrays ? 100/(1+this.state.auxArrays.length) : 100}/>\r\n                </div>\r\n                <div>\r\n                    <Controls arrayVisualizer={this} sorts={this.sorts}/>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport {ArrayVisualizer} from \"./components/ArrayVisualizer/ArrayVisualizer\";\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\n\r\n\r\n\r\n\r\n\r\nReactDOM.render(\r\n    <ArrayVisualizer></ArrayVisualizer>,\r\n  document.getElementById('root')\r\n);\r\n\r\n\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}