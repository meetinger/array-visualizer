{"version":3,"sources":["components/Sorts/Sort.js","components/utils/utils.js","components/Controls/Controls.module.scss","components/ArrayWindow/ArrayWindow.module.scss","components/classes/Element.js","components/Sorts/InsertionSort.js","components/Sorts/Sorts.js","components/Sorts/HeapSort.js","components/ArrayAccess/Writes.js","components/Stats/Stats.module.scss","components/Sorts sync /^/.*/.js$","components/Sorts/BitonicSort.js","components/Sorts/BubbleSort.js","components/Sorts/DualPivotQuickSort.js","components/Sorts/GrailSort.js","components/Sorts/LLQuickSort.js","components/Sorts/LRQuickSort.js","components/Sorts/LSDRadixSort.js","components/Sorts/MergeSort.js","components/Sorts/PseudoTimSort.js","components/Sorts/SelectionSort.js","components/Sorts/SlowSort.js","components/Sorts/StoogeSort.js","components/Sorts/TimSort.js","components/ArrayWindow/ArrayWindow.js","components/Stats/Stats.js","components/utils/initFunctions.js","components/utils/shuffles.js","components/Controls/Controls.js","components/ArrayAccess/Delays.js","components/ArrayAccess/Sounds.js","components/ArrayAccess/Marks.js","components/ArrayAccess/Reads.js","components/ArrayVisualizer/ArrayVisualizer.js","reportWebVitals.js","index.js"],"names":["Sort","arrayVisualizer","this","state","getState","Reads","getReads","Writes","getWrites","arrLength","getArrLength","sortName","warnLen","isDisabled","isNeedBucketsNum","low","high","bucketsNum","bufferSize","randomInt","a","b","Math","trunc","random","deepArrayCopy","arr","out","i","value","getValue","type","getType","color","getColor","markColor","getMarkColor","push","Element","objLength","obj","undefined","Object","keys","length","HSL2RGB","h","s","l","r","g","hue2rgb","p","q","t","round","module","exports","unMark","toString","InsertionSort","key","get","j","compareValues","write","Sorts","sortsPaths","sortPath","require","getDelays","resetDelays","nullify","sort","getSortObject","getWarnLen","parseInt","prompt","isNaN","window","confirm","max","isNeedBuffer","initPseudoArray","setSortName","getSortName","backupArray","runSort","sortClickEvent","HeapSort","n","largest","compareInArr","swap","heapify","Sounds","getSounds","Delays","Marks","getMarks","getPseudoArray","mark","delay","getDelayInc","playSound","setTimeout","swapInArr","bind","incDelay","tmpArr","tmp","copy","markUnmarkMany","curWrites","writes","setState","swapWithDelay","getMainArray","index","toWrite","writeInArr","writeWithDelay","len","isPseudo","pseudoAuxArrays","getPseudoAuxArrays","auxArrIndex","initArray","createAuxArrayWithDelay","getAuxArrays","auxArrays","createAuxArray","removeAuxArrayWithDelay","removeAuxArray","arrIndex","auxWriteWithDelay","auxWrite","map","webpackContext","req","id","webpackContextResolve","__webpack_require__","o","e","Error","code","resolve","BitonicSort","sortLength","k","m","ij","bitonicSort","BubbleSort","DualPivotQuickSort","left","right","divisor","third","med1","med2","pivot1","readValue","pivot2","less","great","dualPivot","Subarray","GrailSort","blockLen","grailSwap","srcArray","srcPos","destArray","destPos","copyLen","auxGet","start","leftLen","rightLen","grailBlockSwap","item","target","middle","idealKeys","keysFound","firstKey","currentKey","insertPos","grailBinarySearchLeft","grailRotate","bufferOffset","end","buffer","currentMerge","bufferLen","mergeLen","mergeIndex","mergeEnd","grailMergeForwards","leftOver","finalBlock","finalOffset","grailMergeBackwards","externLen","arraycopy","externalBuffer","grailPairwiseWrites","grailMergeOutOfPlace","offset","grailBuildInPlace","externalBufferLen","grailBuildOutOfPlace","grailPairwiseSwaps","medianKey","blockCount","block","compare","resetLen","leftOvers","leftBlocks","firstRightBlock","prevLeftBlock","leftOrigin","currentBlockLen","grailInPlaceBufferRewind","currentBlockOrigin","grailBinarySearchRight","grailOutOfPlaceBufferRewind","finalLeftBlocks","finalLen","currentBlock","blockIndex","grailGetSubarray","keyIndex","grailSmartMerge","grailSmartLazyMerge","grailLazyMerge","grailSmartMergeOutOfPlace","subarrayLen","mergeCount","lastSubarray","grailInsertSort","grailBlockSelectSort","grailMergeBlocks","grailLazyMergeBlocks","rightBlocks","lastFragment","grailCountFinalLeftBlocks","leftLength","grailInPlaceBufferReset","grailMergeBlocksOutOfPlace","grailOutOfPlaceBufferReset","grailCombineOutOfPlace","grailCombineInPlace","leftEnd","extBuf","extBufLen","idealBuffer","keyLen","grailCollectKeys","grailLazyStableSort","bufferEnd","grailBuildBlocks","scrollingBuffer","blockKeysSum","minKeys","calcMinKeys","grailCombineBlocks","grailCommonSort","grailSortInPlace","console","log","numKeys","LLQuickSort","lo","hi","pivot","partition","LRQuickSort","x","quickSort","LSDRadixSort","highestPower","registers","Array","stabVal","min","tempArray","tempWrite","radix","total","pos","MergeSort","mid","merge","nxt","PseudoTimSort","MIN_MERGE","len1","len2","minRun","minRunLength","size","pseudoTimSort","SelectionSort","minIndex","SlowSort","floor","StoogeSort","TimSort","minGallop","tmpStorageLength","stackLength","runStart","runLength","stackSize","runHi","reverseRun","isAux","hint","lastOffset","maxOffset","auxReadValue","mergeAt","start1","length1","start2","length2","gallopRight","gallopLeft","mergeLow","mergeHigh","cursor1","cursor2","dest","count1","count2","exit","customCursor","customDest","remaining","makeAscendingRun","binaryInsertionSort","force","pushRun","mergeRuns","forceMergeRuns","ArrayWindow","props","array","mainArray","height","visualProps","borderEnabled","barsStroke","visualStyle","style","arrayLen","sizeStyle","width","renderedArray","renderArray","setInterval","updateState","nextProps","nextContext","border","styleSheet","backgroundColor","getColorForRender","className","styles","bar","bottom","dotContainer","dot","arrayContainer","React","PureComponent","Stats","statsContainer","comparisons","initFunctions","linear","manySimular","divider","shuffles","FullShuffle","randomIndex","AlmostSorted","randomIndexA","randomIndexB","Reverse","BlockShuffle","gap","GAP_FACTOR","factor","PipeOrgan","temp","InversedPipeOrgan","Heap","heapSort","QuickSortKiller","Controls","isControlShow","sorts","updateArrLength","DEFAULT_ARR_LEN","slider","document","getElementById","controlsContainer","controls","btn","showToggleBtn","display","innerHTML","func","shuffleArray","stopSort","onClick","sortsNames","getSortsPaths","sortArray","element","setShowAuxArrays","checked","setEnableBarsStroke","setEnableMarks","val","setVisualStyle","setRainbow","restoreArray","sectionHeader","defaultValue","step","onChange","justifyContent","textAlign","checkBoxContainer","toggleShowAuxArrays","name","defaultChecked","htmlFor","toggleBarsStroke","toggleEnableMarks","toggleRainbow","toggleVisualStyle","genInitFunctions","getShuffles","abortSort","getSorts","timeoutArray","delays","Swap","Write","Comp","Unmark","CreateAuxArray","RemoveAuxArray","DELAY_INC_CONST","updateDelayInc","delayIncFactor","delayInc","timeout","delayName","args","clearTimeout","inc","ctx","AudioContext","webkitAudioContext","osc","createOscillator","frequency","gainNode","createGain","gain","connect","destination","linearRampToValueAtTime","currentTime","stop","colors","saveArr","getEnableMarks","setType","setMarkColor","indexes","saveOnce","unmark","hsl","rgb","setColor","markIndexes","markArgs","markMany","unmarkMany","from","curComparisons","compareWithDelay","toSound","tmpA","tmpB","toMark","findIndex","compareStub","ArrayVisualizer","pseudoArray","prevArray","showAuxArrays","enableBarsStroke","enableMarks","setToState","forceMainArrayUpdate","clearAllMarks","genArrayWindows","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render"],"mappings":"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","file":"static/js/main.1f8ada8d.chunk.js","sourcesContent":["export class Sort {\r\n    arrayVisualizer;\r\n\r\n    Reads\r\n    Writes\r\n\r\n    arrLength;\r\n\r\n    sortName;\r\n    warnLen;\r\n    isDisabled;\r\n    isNeedBucketsNum;\r\n    isNeedBuffer;\r\n\r\n\r\n\r\n\r\n    constructor(arrayVisualizer) {\r\n        this.arrayVisualizer = arrayVisualizer\r\n        this.state = this.arrayVisualizer.getState()\r\n\r\n        this.Reads = this.arrayVisualizer.getReads()\r\n        this.Writes = this.arrayVisualizer.getWrites()\r\n\r\n        \r\n        this.arrLength = this.arrayVisualizer.getArrLength();\r\n        this.sortName = \"\"\r\n        this.warnLen = -1;\r\n        this.isDisabled = false;\r\n        this.isNeedBucketsNum = false;\r\n    }\r\n\r\n    getSortName(){\r\n        return this.sortName\r\n    }\r\n\r\n    getWarnLen(){\r\n        return this.warnLen\r\n    }\r\n\r\n    runSort(low, high, bucketsNum, bufferSize){\r\n    }\r\n}","import {Element} from \"../classes/Element\";\r\nexport function random(a, b) {\r\n    return Math.random() * (b - a) + a;\r\n}\r\n\r\nexport function randomInt(a, b) {\r\n    return Math.trunc(random(a, b))\r\n}\r\n\r\nexport function swapObj(json) {\r\n    let ret = {};\r\n    for (let key in json) {\r\n        ret[json[key]] = key;\r\n    }\r\n    return ret;\r\n}\r\n\r\nexport function sleep(ms) {\r\n    ms += new Date().getTime();\r\n    while (new Date() < ms) {\r\n    }\r\n}\r\n\r\nexport function getAllMethods(toCheck) {\r\n    const props = [];\r\n    let obj = toCheck;\r\n    do {\r\n        props.push(...Object.getOwnPropertyNames(obj));\r\n    } while (obj = Object.getPrototypeOf(obj));\r\n\r\n    return props.sort().filter((e, i, arr) => {\r\n        if (e!=arr[i+1] && typeof toCheck[e] == 'function') return true;\r\n    });\r\n}\r\n\r\nexport function deepArrayCopy(arr){\r\n    let out = [];\r\n    for(let i of arr){\r\n        let value = i.getValue();\r\n        let type = i.getType();\r\n        let color = i.getColor();\r\n        let markColor = i.getMarkColor();\r\n        out.push(new Element(value, type, color, markColor))\r\n    }\r\n    return out;\r\n}\r\n\r\nexport function arraysEquals(a, b){\r\n    return a.length === b.length &&\r\n    a.every((v, i) => v === b[i]);\r\n}\r\n\r\nexport function objLength(obj){\r\n    return (obj!==undefined) ? Object.keys(obj).length: 0\r\n}\r\n\r\nexport function HSL2RGB(h, s, l){\r\n    let r, g, b;\r\n\r\n    if(s === 0){\r\n        r = g = b = l;\r\n    }else{\r\n        let hue2rgb = function hue2rgb(p, q, t){\r\n            if(t < 0) t += 1;\r\n            if(t > 1) t -= 1;\r\n            if(t < 1/6) return p + (q - p) * 6 * t;\r\n            if(t < 1/2) return q;\r\n            if(t < 2/3) return p + (q - p) * (2/3 - t) * 6;\r\n            return p;\r\n        }\r\n\r\n        let q = l < 0.5 ? l * (1 + s) : l + s - l * s;\r\n        let p = 2 * l - q;\r\n        r = hue2rgb(p, q, h + 1/3);\r\n        g = hue2rgb(p, q, h);\r\n        b = hue2rgb(p, q, h - 1/3);\r\n    }\r\n\r\n    return [Math.round(r * 255), Math.round(g * 255), Math.round(b * 255)];\r\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"textCenter\":\"Controls_textCenter__3_8jn\",\"controls\":\"Controls_controls__3X5vt\",\"showToggleBtn\":\"Controls_showToggleBtn__2CbSs\",\"slider\":\"Controls_slider__3IxWj\",\"sectionHeader\":\"Controls_sectionHeader__2EvBB\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"arrayContainer\":\"ArrayWindow_arrayContainer__jfaB8\",\"bar\":\"ArrayWindow_bar__30QYB\",\"dotContainer\":\"ArrayWindow_dotContainer__3porX\",\"dot\":\"ArrayWindow_dot__29TqH\"};","const types = {\r\n\r\n}\r\n\r\nconst colors = {\r\n\r\n}\r\n\r\nexport class Element{\r\n\r\n    value;\r\n    type;\r\n    color;\r\n    markColor;\r\n\r\n    // constructor(args){\r\n    //     this.value = args.value;\r\n    //     this.type = args.type;\r\n    //     this.color = args.color || colors[args.type];\r\n    // }\r\n\r\n    constructor(value, type, color, markColor) {\r\n        this.value = value;\r\n        this.type = type;\r\n        this.color = color;\r\n        this.markColor = markColor;\r\n    }\r\n\r\n\r\n    getValue(){\r\n        return this.value;\r\n    }\r\n    setValue(value){\r\n        this.value = value;\r\n    }\r\n\r\n    getColor(){\r\n        return this.color;\r\n    }\r\n\r\n    setColor(color){\r\n        this.color = color;\r\n    }\r\n\r\n    getMarkColor(){\r\n        return this.markColor;\r\n    }\r\n    setMarkColor(markColor){\r\n        this.markColor = markColor;\r\n    }\r\n\r\n    getColorForRender(){\r\n        // if(this.type === \"Default\"){\r\n        //     return this.markColor\r\n        // }else{\r\n        //     return this.color\r\n        // }\r\n        if(this.type === \"Unmarked\"){\r\n            return this.color\r\n        }else {\r\n            return this.markColor\r\n        }\r\n    }\r\n\r\n    getType(){\r\n        return this.type;\r\n    }\r\n    setType(type){\r\n        this.type = type;\r\n    }\r\n\r\n    copy(unMark = true){\r\n        if(unMark){\r\n            return new Element(this.value, \"Unmarked\", this.color, [0,0,0])\r\n        }else{\r\n            return new Element(this.value, this.type, this.color, this.markColor)\r\n        }\r\n    }\r\n\r\n    toString(){\r\n        return this.value.toString()\r\n    }\r\n}","import {Sort} from \"./Sort\";\r\n\r\nexport class InsertionSort extends Sort{\r\n    constructor(arrayVisualizer) {\r\n        super(arrayVisualizer);\r\n        this.sortName = \"InsertionSort\"\r\n    }\r\n\r\n    InsertionSort(low, high) {\r\n        let length = high+1;\r\n        for (let i = low+1; i < length; i++) {\r\n            let key = this.Reads.get(i);\r\n            let j = i - 1;\r\n            while (j >= 0 && this.Reads.compareValues(this.Reads.get(j), key) > 0) {\r\n                this.Writes.write(j + 1, this.Reads.get(j))\r\n                j = j - 1;\r\n            }\r\n            this.Writes.write(j + 1, key)\r\n        }\r\n    }\r\n\r\n    runSort(low, high) {\r\n        this.InsertionSort(low, high)\r\n    }\r\n}","export class Sorts {\r\n    arrayVisualizer;\r\n    sortsPaths\r\n\r\n    constructor(arrayVisualizer) {\r\n        this.arrayVisualizer = arrayVisualizer\r\n        this.sortsPaths = [\"BubbleSort\", \"MergeSort\", \"LLQuickSort\", \"LRQuickSort\",\r\n            \"DualPivotQuickSort\", \"InsertionSort\", \"SelectionSort\", \"TimSort\", \"PseudoTimSort\",\r\n            \"HeapSort\", \"LSDRadixSort\", \"BitonicSort\", \"SlowSort\", \"StoogeSort\", \"GrailSort\"]\r\n    }\r\n\r\n    getSortsPaths() {\r\n        return this.sortsPaths;\r\n    }\r\n\r\n    getSortObject(sortPath) {\r\n        let Sort = require(\"./\" + sortPath + \".js\")[sortPath]\r\n        return new Sort(this.arrayVisualizer)\r\n    }\r\n\r\n    runSort(sortName, low, high) {\r\n        this.arrayVisualizer.getDelays().resetDelays()\r\n        this.arrayVisualizer.nullify()\r\n        let sort = this.getSortObject(sortName)\r\n        let warnLen = sort.getWarnLen()\r\n        let bucketsNum = 4\r\n        if (sort.isNeedBucketsNum) {\r\n            bucketsNum = parseInt(prompt(\"Enter the base:\", \"4\"))\r\n            if (isNaN(bucketsNum)) {\r\n                return;\r\n            }\r\n        }\r\n        if (warnLen !== -1 && this.arrayVisualizer.getArrLength() > warnLen &&\r\n            !window.confirm(\"WARNING!!!\\nThe array size(\" + this.arrayVisualizer.getArrLength() + \") \" +\r\n            \"more than recommended(\" + warnLen + \")\\nApplication may freeze\\nDo you want continue?\")) {\r\n            return\r\n        }\r\n\r\n        bucketsNum = Math.max(4, bucketsNum)\r\n\r\n        let bufferSize = 0\r\n        if (sort.isNeedBuffer) {\r\n            bufferSize = parseInt(prompt(\"Enter the buffer size:\", \"0\"))\r\n            if (isNaN(bufferSize)) {\r\n                return;\r\n            }\r\n        }\r\n        bufferSize = Math.max(0, bufferSize)\r\n\r\n        this.arrayVisualizer.initPseudoArray()\r\n        this.arrayVisualizer.setSortName(sort.getSortName())\r\n        this.arrayVisualizer.backupArray()\r\n        sort.runSort(low, high, bucketsNum, bufferSize)\r\n        this.arrayVisualizer.sortClickEvent()\r\n    }\r\n}","import {Sort} from \"./Sort\";\r\n\r\nexport class HeapSort extends Sort{\r\n    constructor(arrayVisualizer) {\r\n        super(arrayVisualizer);\r\n        this.sortName = \"HeapSort\"\r\n    }\r\n\r\n    heapify(n, i) {\r\n        let largest = i;\r\n\r\n        let l = 2 * i + 1;\r\n        let r = 2 * i + 2;\r\n\r\n        if (l < n && this.Reads.compareInArr(l, largest) > 0) {\r\n            largest = l;\r\n        }\r\n        if (r < n && this.Reads.compareInArr(r, largest) > 0) {\r\n            largest = r;\r\n        }\r\n\r\n        if (largest !== i) {\r\n            this.Writes.swap(i, largest);\r\n            this.heapify(n, largest);\r\n        }\r\n    }\r\n\r\n    HeapSort() {\r\n        let n = this.arrLength;\r\n\r\n\r\n        for (let i = Math.trunc(n / 2) - 1; i >= 0; i--) {\r\n            this.heapify(n, i);\r\n        }\r\n\r\n        for (let i = n - 1; i >= 0; i--) {\r\n            this.Writes.swap(0, i);\r\n            this.heapify(i, 0)\r\n        }\r\n    }\r\n\r\n    runSort(low, high) {\r\n        this.HeapSort(low, high)\r\n    }\r\n}","\r\nimport {objLength} from \"../utils/utils\";\r\n\r\nexport class Writes{\r\n    arrayVisualizer;\r\n    Sounds\r\n    Delays\r\n    Marks\r\n\r\n    constructor(arrayVisualizer){\r\n        this.arrayVisualizer = arrayVisualizer\r\n        this.Sounds = arrayVisualizer.getSounds()\r\n        this.Delays = arrayVisualizer.getDelays()\r\n        this.Marks = arrayVisualizer.getMarks()\r\n    }\r\n\r\n\r\n\r\n    swapWithDelay(a, b, arr = this.arrayVisualizer.getPseudoArray(), mark, delay = this.Delays.getDelayInc(), playSound) {\r\n        this.Delays.push(setTimeout(this.swapInArr.bind(this), this.Delays.incDelay(\"Write\", delay), a, b, arr, mark, playSound))\r\n    }\r\n\r\n\r\n    swapInArr(a, b, arr = this.arrayVisualizer.getPseudoArray(), mark = true, playSound = false) {\r\n        if(playSound) {\r\n            this.Sounds.playSound(arr[b].getValue());\r\n        }\r\n        let tmpArr = arr\r\n        // let tmp = tmpArr[a]\r\n        // tmpArr[a] = tmpArr[b]\r\n        // tmpArr[b] = tmp\r\n        let tmp = tmpArr[a]\r\n        tmpArr[a] = tmpArr[b].copy(true)\r\n        tmpArr[b] = tmp.copy(true)\r\n        if (mark) {\r\n            this.Marks.markUnmarkMany([a, b], {type: \"Default\"})\r\n        }\r\n        let curWrites = this.arrayVisualizer.getState().writes + 2;\r\n        this.arrayVisualizer.setState({\r\n            writes: curWrites\r\n        })\r\n    }\r\n\r\n    swap(a, b, arr = this.arrayVisualizer.getPseudoArray()) {\r\n        this.swapInArr(a, b, arr, false, false)\r\n        this.swapWithDelay(a, b, this.arrayVisualizer.getMainArray(), true, this.Delays.getDelayInc(), true)\r\n    }\r\n\r\n    // writeInArr(index, value, arr = this.arrayVisualizer.getPseudoArray(), mark = true, playSound = false) {\r\n    //     if(playSound) {\r\n    //         this.Sounds.playSound(value)\r\n    //     }\r\n    //     arr[index].setValue(value)\r\n    //     if (mark) {\r\n    //         this.Marks.markUnmarkMany([index], {type: \"Default\"})\r\n    //     }\r\n    //     let curWrites = this.arrayVisualizer.getState().writes;\r\n    //     this.arrayVisualizer.setState({\r\n    //         writes: curWrites + 1\r\n    //     })\r\n    // }\r\n\r\n\r\n    writeInArr(index, toWrite, arr = this.arrayVisualizer.getPseudoArray(), mark = true, playSound = false) {\r\n        if(playSound) {\r\n            this.Sounds.playSound(toWrite.getValue())\r\n        }\r\n        arr[index] = toWrite.copy(true)\r\n        if (mark) {\r\n            this.Marks.markUnmarkMany([index], {type: \"Default\"})\r\n        }\r\n        let curWrites = this.arrayVisualizer.getState().writes + 1;\r\n        this.arrayVisualizer.setState({\r\n            writes: curWrites\r\n        })\r\n    }\r\n\r\n    writeWithDelay(index, toWrite, arr = this.arrayVisualizer.getPseudoArray(), mark, delay = this.Delays.getDelayInc(), playSound = true) {\r\n        this.Delays.push(setTimeout(this.writeInArr.bind(this), this.Delays.incDelay(\"Write\", delay), index, toWrite, arr, mark, playSound))\r\n    }\r\n\r\n    write(index, toWrite, arr = this.arrayVisualizer.getPseudoArray()) {\r\n        this.writeInArr(index, toWrite, arr, false, false)\r\n        this.writeWithDelay(index, toWrite, this.arrayVisualizer.getMainArray(), true, this.Delays.getDelayInc(), true)\r\n    }\r\n\r\n    createAuxArray(len, isPseudo = true){\r\n        if(isPseudo) {\r\n            let pseudoAuxArrays = this.arrayVisualizer.getPseudoAuxArrays()\r\n            let auxArrIndex = objLength(pseudoAuxArrays)\r\n            pseudoAuxArrays[auxArrIndex]=(this.arrayVisualizer.initArray(() => -1, len, false))\r\n            this.createAuxArrayWithDelay(len, this.Delays.getDelayInc(), false)\r\n            return auxArrIndex\r\n        }else{\r\n            let tmpArr = this.arrayVisualizer.getAuxArrays()\r\n            let auxArrIndex = objLength(tmpArr)\r\n\r\n            tmpArr[auxArrIndex]=(this.arrayVisualizer.initArray(() => -1, len, false))\r\n            this.arrayVisualizer.setState({\r\n                    auxArrays: tmpArr\r\n                }\r\n            )\r\n        }\r\n    }\r\n\r\n    createAuxArrayWithDelay(len, delay, isPseudo = false){\r\n        this.Delays.push(setTimeout(this.createAuxArray.bind(this), this.Delays.incDelay(\"Write\", delay), len, isPseudo))\r\n    }\r\n\r\n    removeAuxArray(index, isPseudo = true){\r\n        if(isPseudo) {\r\n            // this.arrayVisualizer.getPseudoAuxArrays().splice(index, 1)\r\n            delete this.arrayVisualizer.getPseudoAuxArrays()[index]\r\n            this.removeAuxArrayWithDelay(index, this.Delays.getDelayInc(), false)\r\n        }else{\r\n            let tmp = this.arrayVisualizer.getAuxArrays()\r\n            // tmp.splice(index, 1)\r\n            delete tmp[index]\r\n            this.arrayVisualizer.setState({\r\n                auxArrays: tmp\r\n            })\r\n        }\r\n    }\r\n\r\n    removeAuxArrayWithDelay(index, delay, isPseudo = false){\r\n        this.Delays.push(setTimeout(this.removeAuxArray.bind(this), this.Delays.incDelay(\"Write\", delay), index, isPseudo))\r\n    }\r\n\r\n\r\n    auxWrite(index, toWrite, arrIndex, isPseudo = true, playSound = false){\r\n        if(playSound){\r\n            this.Sounds.playSound(toWrite.getValue())\r\n        }\r\n        if(isPseudo){\r\n            this.arrayVisualizer.getPseudoAuxArrays()[arrIndex][index] = toWrite.copy()\r\n            this.auxWriteWithDelay(index, toWrite, arrIndex, this.Delays.getDelayInc(), false, true)\r\n        }else{\r\n            this.arrayVisualizer.getAuxArrays()[arrIndex][index] = toWrite.copy()\r\n            let tmp = this.arrayVisualizer.getAuxArrays()\r\n            this.arrayVisualizer.setState({\r\n                auxArrays: tmp\r\n            })\r\n        }\r\n    }\r\n\r\n    auxWriteWithDelay(index, value, arrIndex, delay, isPseudo = false, playSound = true, ){\r\n        this.Delays.push(setTimeout(this.auxWrite.bind(this), this.Delays.incDelay(\"Write\", delay), index, value, arrIndex, isPseudo, playSound))\r\n    }\r\n\r\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"statsContainer\":\"Stats_statsContainer__1qOnq\"};","var map = {\n\t\"./BitonicSort.js\": 30,\n\t\"./BubbleSort.js\": 31,\n\t\"./DualPivotQuickSort.js\": 32,\n\t\"./GrailSort.js\": 33,\n\t\"./HeapSort.js\": 18,\n\t\"./InsertionSort.js\": 13,\n\t\"./LLQuickSort.js\": 34,\n\t\"./LRQuickSort.js\": 35,\n\t\"./LSDRadixSort.js\": 36,\n\t\"./MergeSort.js\": 37,\n\t\"./PseudoTimSort.js\": 38,\n\t\"./SelectionSort.js\": 39,\n\t\"./SlowSort.js\": 40,\n\t\"./Sort.js\": 5,\n\t\"./Sorts.js\": 17,\n\t\"./StoogeSort.js\": 41,\n\t\"./TimSort.js\": 42\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 29;","import {Sort} from \"./Sort\";\r\n\r\nexport class BitonicSort extends Sort{\r\n    constructor(arrayVisualizer) {\r\n        super(arrayVisualizer);\r\n        this.sortName = \"BitonicSort\"\r\n    }\r\n    // kernel(p, q) {\r\n    //     const d = 1 << (p - q);\r\n    //\r\n    //     for (let i = 0; i < this.arrLength; i++) {\r\n    //         const up = ((i >> p) & 2) === 0;\r\n    //         // if ((i & d) === 0 && (x[i] > x[i | d]) === up) {\r\n    //         if ((i & d) === 0 && ((this.Reads.compare(i, i | d, \">\")) === up)) {\r\n    //             // const tmp = x[i];\r\n    //             // x[i] = x[i | d];\r\n    //             // x[i | d] = tmp;\r\n    //             this.Writes.swap(i, i | d)\r\n    //         }\r\n    //     }\r\n    // }\r\n    //\r\n    // bitonicSort(n) {\r\n    //     for (let i = 0; i < n; i++) {\r\n    //         for(let j = 0; j <= i; j++) {\r\n    //             this.kernel(i, j);\r\n    //         }\r\n    //     }\r\n    // }\r\n    bitonicSort(sortLength){\r\n        let i, j, k;\r\n\r\n        for(k = 2; k < sortLength*2; k = 2 * k) {\r\n            let m = (Math.trunc((sortLength + (k - 1)) / k) % 2) !== 0;\r\n\r\n            for(j = k >> 1; j > 0; j = j >> 1) {\r\n                for(i = 0; i < sortLength; i++) {\r\n                    let ij = i ^ j;\r\n\r\n                    if((ij) > i && ij < sortLength) {\r\n                        if((((i & k) === 0) === m) && this.Reads.compareInArr(i, ij) > 0)\r\n                            this.Writes.swap(i, ij);\r\n                        if((((i & k) !== 0) === m) && this.Reads.compareInArr(i, ij) < 0)\r\n                            this.Writes.swap(i, ij);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n    runSort(low, high, bucketsNum) {\r\n        // this.bitonicSort(Math.trunc(Math.log2(high-1)))\r\n        this.bitonicSort(high+1)\r\n    }\r\n\r\n}\r\n","import {Sort} from \"./Sort\";\r\n\r\nexport class BubbleSort extends Sort{\r\n    constructor(arrayVisualizer) {\r\n        super(arrayVisualizer);\r\n        this.sortName = \"BubbleSort\"\r\n    }\r\n    BubbleSort() {\r\n        let len = this.arrLength;\r\n        for (let i = 0; i < len; i++) {\r\n            for (let j = 0; j < len - i - 1; j++) {\r\n                if (this.Reads.compareInArr(j, j + 1) > 0) {\r\n                    this.Writes.swap(j, j + 1)\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    runSort(low, high) {\r\n        this.BubbleSort(low, high)\r\n    }\r\n}","import {Sort} from \"./Sort\";\r\nimport {InsertionSort} from \"./InsertionSort\";\r\n\r\nexport class DualPivotQuickSort extends Sort {\r\n    constructor(arrayVisualizer) {\r\n        super(arrayVisualizer);\r\n        this.sortName = \"Dual Pivot QuickSort\"\r\n    }\r\n\r\n    dualPivot(left, right, divisor) {\r\n        let length = right - left;\r\n\r\n        // insertion sort for tiny array\r\n        if (length < 4) {\r\n            let insertSorter = new InsertionSort(this.arrayVisualizer)\r\n            insertSorter.runSort(left, right)\r\n            return;\r\n        }\r\n        // if(length === 1){\r\n        //     return\r\n        // }\r\n\r\n        let third = Math.trunc(length / divisor);\r\n\r\n// \"medians\"\r\n        let med1 = left + third;\r\n        let med2 = right - third;\r\n\r\n        if (med1 <= left) {\r\n            med1 = left + 1;\r\n        }\r\n        if (med2 >= right) {\r\n            med2 = right - 1;\r\n        }\r\n\r\n\r\n        // if(Reads.compareValues(array[med1], array[med2]) == -1) {\r\n        if (this.Reads.compareInArr(med1, med2) < 0) {\r\n            this.Writes.swap(med1, left);\r\n            this.Writes.swap(med2, right);\r\n        } else {\r\n            this.Writes.swap(med1, right);\r\n            this.Writes.swap(med2, left);\r\n        }\r\n\r\n// pivots\r\n        let pivot1 = this.Reads.readValue(left);\r\n        let pivot2 = this.Reads.readValue(right);\r\n\r\n// pointers\r\n        let less = left + 1;\r\n        let great = right - 1;\r\n\r\n// sorting\r\n        for (let k = less; k <= great; k++) {\r\n\r\n            // if (this.Reads.read(k) < pivot1) {\r\n            if (this.Reads.compareValues(this.Reads.get(k), pivot1) < 0) {\r\n\r\n                this.Writes.swap(k, less++);\r\n            // } else if (this.Reads.read(k) > pivot2) {\r\n            } else if (this.Reads.compareValues(this.Reads.get(k), pivot2) > 0) {\r\n                // while (k < great && this.Reads.read(great) > pivot2) {\r\n                while (k < great && this.Reads.compareValues(this.Reads.get(great), pivot2) > 0) {\r\n                    great--;\r\n                }\r\n                this.Writes.swap(k, great--);\r\n\r\n                // if (this.Reads.read(k) < pivot1) {\r\n                if (this.Reads.compareValues(this.Reads.get(k), pivot1) < 0) {\r\n                    this.Writes.swap(k, less++);\r\n                }\r\n            }\r\n        }\r\n\r\n// swaps\r\n        let dist = great - less;\r\n\r\n        if (dist < 13) {\r\n            divisor++;\r\n        }\r\n        this.Writes.swap(less - 1, left);\r\n        this.Writes.swap(great + 1, right);\r\n\r\n// subarrays\r\n        this.dualPivot(left, less - 2, divisor);\r\n        if (pivot1 < pivot2) {\r\n            this.dualPivot(less, great, divisor);\r\n        }\r\n        this.dualPivot(great + 2, right, divisor);\r\n    }\r\n\r\n    runSort(low, high) {\r\n        this.dualPivot(low, high, 3)\r\n    }\r\n}","/*\r\n * MIT License\r\n * \r\n * Copyright (c) 2013 Andrey Astrelin\r\n * Copyright (c) 2020 The Holy Grail Sort Project\r\n * \r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal\r\n * in the Software without restriction, including without limitation the rights\r\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n * copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n * \r\n * The above copyright notice and this permission notice shall be included in all\r\n * copies or substantial portions of the Software.\r\n * \r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n * SOFTWARE.\r\n */\r\n\r\n/*\r\n * The Holy Grail Sort Project\r\n * Project Manager:      Summer Dragonfly\r\n * Project Contributors: 666666t\r\n *                       Anonymous0726\r\n *                       aphitorite\r\n *                       dani_dlg\r\n *                       EilrahcF\r\n *                       Enver\r\n *                       lovebuny\r\n *                       MP\r\n *                       phoenixbound\r\n *                       thatsOven\r\n *                       \r\n * Special thanks to \"The Studio\" Discord community!\r\n */\r\n\r\n// Credit to phoenixbound for this clever idea\r\n\r\nimport {Sort} from \"./Sort\";\r\n\r\nconst Subarray = {\r\n    LEFT: 1,\r\n    RIGHT: 2,\r\n};\r\n\r\n// REWRITTEN GRAILSORT FOR JAVASCRIPT - A heavily refactored C/C++-to-JavaScript version of\r\n//                                      Andrey Astrelin's GrailSort.h, aiming to be as\r\n//                                      readable and intuitive as possible.\r\n//\r\n// ** Written and maintained by The Holy Grail Sort Project\r\n//\r\n// Primary author: Enver\r\n//\r\n// Current status: Finished. Potentially 100% working... Passing most tests, some tests capped by V8 Engine memory allocation limits\r\n\r\nexport class GrailSort extends Sort {\r\n    // static GRAIL_STATIC_EXT_BUF_LEN = 512;\r\n\r\n    externalBuffer\r\n    externalBufferLen\r\n\r\n    constructor(arrayVisualizer) {\r\n        super(arrayVisualizer);\r\n        this.sortName = \"GrailSort\"\r\n        this.isNeedBuffer = true;\r\n    }\r\n\r\n    grailSwap(a, b) {\r\n        // let temp = array[a];\r\n        // array[a] = array[b];\r\n        // array[b] = temp;\r\n        this.Writes.swap(a, b)\r\n    }\r\n\r\n    grailBlockSwap(a, b, blockLen) {\r\n        for (let i = 0; i < blockLen; i++) {\r\n            this.grailSwap(a + i, b + i);\r\n        }\r\n    }\r\n\r\n    // Object src, int srcPos, Object dest, int destPos, int length\r\n    // Custom method for copying parts of the array either:\r\n    //      within itself to a different destination, or\r\n    //      to another array\r\n    arraycopy(srcArray, srcPos, destArray, destPos, copyLen) {\r\n\r\n        if (srcArray === -1 && destArray === -1) {\r\n            for (let i = 0; i < copyLen; i++) {\r\n                this.Writes.write(destPos + i, this.Reads.get(srcPos + i))\r\n            }\r\n        } else if (srcArray !== -1 && destArray !== -1) {\r\n            for (let i = 0; i < copyLen; i++) {\r\n                this.Writes.auxWrite(destPos + i, this.Reads.auxGet(srcPos + i, srcArray), destArray)\r\n            }\r\n        } else if (srcArray === -1 && destArray !== -1) {\r\n            for (let i = 0; i < copyLen; i++) {\r\n                this.Writes.auxWrite(destPos + i, this.Reads.get(srcPos + i), destArray)\r\n            }\r\n        } else if (srcArray !== -1 && destArray === -1) {\r\n            for (let i = 0; i < copyLen; i++) {\r\n                this.Writes.write(destPos + i, this.Reads.auxGet(srcPos + i, srcArray))\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    grailRotate(start, leftLen, rightLen) {\r\n        while (leftLen > 0 && rightLen > 0) {\r\n            if (leftLen <= rightLen) {\r\n                this.grailBlockSwap(start, start + leftLen, leftLen);\r\n                start += leftLen;\r\n                rightLen -= leftLen;\r\n            } else {\r\n                this.grailBlockSwap(start + leftLen - rightLen, start + leftLen, rightLen);\r\n                leftLen -= rightLen;\r\n            }\r\n        }\r\n    }\r\n\r\n    // Variant of Insertion Sort that utilizes swaps instead of overwrites.\r\n    // Also known as \"Optimized Gnomesort\".\r\n    grailInsertSort(start, length) {\r\n        for (let item = 1; item < length; item++) {\r\n            let left = start + item - 1;\r\n            let right = start + item;\r\n\r\n            while (left >= start && this.Reads.compareInArr(left,\r\n                right) > 0) {\r\n                this.grailSwap(left, right);\r\n                left--;\r\n                right--;\r\n            }\r\n        }\r\n    }\r\n\r\n    grailBinarySearchLeft(start, length, target) {\r\n        let left = 0;\r\n        let right = length;\r\n        while (left < right) {\r\n            let middle = left + parseInt((right - left) / 2);\r\n            if (this.Reads.compareValues(this.Reads.readValue(start + middle), target) < 0) {\r\n                left = middle + 1;\r\n            } else {\r\n                right = middle;\r\n            }\r\n        }\r\n        return left;\r\n    }\r\n\r\n    // Credit to Anonymous0726 for debugging\r\n    grailBinarySearchRight(start, length, target) {\r\n        let left = 0;\r\n        let right = length;\r\n        while (left < right) {\r\n            let middle = left + parseInt((right - left) / 2);\r\n            if (this.Reads.compareValues(this.Reads.readValue(start + middle), target) > 0) {\r\n                right = middle;\r\n            } else {\r\n                left = middle + 1;\r\n            }\r\n        }\r\n        // OFF-BY-ONE BUG FIXED: used to be `return right - 1;`\r\n        return right;\r\n    }\r\n\r\n    // cost: 2 * length + idealKeys^2 / 2\r\n    grailCollectKeys(start, length, idealKeys) {\r\n        let keysFound = 1; // by itself, the first item in the array is our first unique key\r\n        let firstKey = 0; // the first item in the array is at the first position in the array\r\n        let currentKey = 1; // the index used for finding potentially unique items (\"keys\") in the array\r\n\r\n        while (currentKey < length && keysFound < idealKeys) {\r\n\r\n            // Find the location in the key-buffer where our current key can be inserted in sorted order.\r\n            // If the key at insertPos is equal to currentKey, then currentKey isn't unique and we move on.\r\n            let insertPos = this.grailBinarySearchLeft(start + firstKey, keysFound, this.Reads.readValue(start + currentKey));\r\n\r\n            // The second part of this conditional does the equal check we were just talking about; however,\r\n            // if currentKey is larger than everything in the key-buffer (meaning insertPos == keysFound),\r\n            // then that also tells us it wasn't *equal* to anything in the key-buffer. Magic! :) \r\n            if (insertPos == keysFound || this.Reads.compareInArr(start + currentKey,\r\n                start + firstKey + insertPos) != 0) {\r\n\r\n                // First, rotate the key-buffer over to currentKey's immediate left...\r\n                // (this helps save a TON of swaps/writes!!!)\r\n                this.grailRotate(start + firstKey, keysFound, currentKey - (firstKey + keysFound));\r\n\r\n                // Update the new position of firstKey...\r\n                firstKey = currentKey - keysFound;\r\n\r\n                // Then, \"insertion sort\" currentKey to its spot in the key-buffer!\r\n                this.grailRotate(start + firstKey + insertPos, keysFound - insertPos, 1);\r\n\r\n                // One step closer to idealKeys.\r\n                keysFound++;\r\n            }\r\n            // Move on and test the next key...\r\n            currentKey++;\r\n        }\r\n\r\n        // Bring however many keys we found back to the beginning of our array,\r\n        // and return the number of keys collected.\r\n        this.grailRotate(start, firstKey, keysFound);\r\n        return keysFound;\r\n    }\r\n\r\n    grailPairwiseSwaps(start, length) {\r\n        let index;\r\n        for (index = 1; index < length; index += 2) {\r\n            let left = start + index - 1;\r\n            let right = start + index;\r\n\r\n            if (this.Reads.compareInArr(left, right) > 0) {\r\n                this.grailSwap(left - 2, right);\r\n                this.grailSwap(right - 2, left);\r\n            } else {\r\n                this.grailSwap(left - 2, left);\r\n                this.grailSwap(right - 2, right);\r\n            }\r\n        }\r\n\r\n        let left = start + index - 1;\r\n        if (left < start + length) {\r\n            this.grailSwap(left - 2, left);\r\n        }\r\n    }\r\n\r\n    grailPairwiseWrites(start, length) {\r\n        let index;\r\n        for (index = 1; index < length; index += 2) {\r\n            let left = start + index - 1;\r\n            let right = start + index;\r\n\r\n            if (this.Reads.compareInArr(left, right) > 0) {\r\n                this.Writes.write(left - 2, this.Reads.get(right))\r\n                this.Writes.write(right - 2, this.Reads.get(left))\r\n            } else {\r\n                this.Writes.write(left - 2, this.Reads.get(left))\r\n                this.Writes.write(right - 2, this.Reads.get(right))\r\n            }\r\n        }\r\n\r\n        let left = start + index - 1;\r\n        if (left < start + length) {\r\n            this.Writes.write(left - 2, this.Reads.get(left))\r\n        }\r\n    }\r\n\r\n    // array[buffer .. start - 1] <=> \"scrolling buffer\"\r\n    // \r\n    // \"scrolling buffer\" + array[start, middle - 1] + array[middle, end - 1]\r\n    // --> array[buffer, buffer + end - 1] + \"scrolling buffer\"\r\n    grailMergeForwards(start, leftLen, rightLen, bufferOffset) {\r\n        let left = start;\r\n        let middle = start + leftLen;\r\n        let right = middle;\r\n        let end = middle + rightLen;\r\n        let buffer = start - bufferOffset;\r\n\r\n        while (right < end) {\r\n            if (left == middle || this.Reads.compareInArr(left,\r\n                right) > 0) {\r\n\r\n                this.grailSwap(buffer, right);\r\n                right++;\r\n            } else {\r\n                this.grailSwap(buffer, left);\r\n                left++;\r\n            }\r\n            buffer++;\r\n        }\r\n\r\n        if (buffer != left) {\r\n            this.grailBlockSwap(buffer, left, middle - left);\r\n        }\r\n    }\r\n\r\n    // credit to 666666t for thorough bug-checking/fixing\r\n    grailMergeBackwards(start, leftLen, rightLen, bufferOffset) {\r\n        let left = start + leftLen - 1;\r\n        let middle = left;\r\n        // OFF-BY-ONE BUG FIXED: used to be `let  right = middle + rightLen - 1;`\r\n        let right = middle + rightLen;\r\n        let end = start;\r\n        // OFF-BY-ONE BUG FIXED: used to be `let buffer = right  + bufferOffset - 1;`\r\n        let buffer = right + bufferOffset;\r\n\r\n        while (left >= end) {\r\n            if (right == middle || this.Reads.compareInArr(left,\r\n                right) > 0) {\r\n\r\n                this.grailSwap(buffer, left);\r\n                left--;\r\n            } else {\r\n                this.grailSwap(buffer, right);\r\n                right--;\r\n            }\r\n            buffer--;\r\n        }\r\n\r\n        if (right != buffer) {\r\n            while (right > middle) {\r\n                this.grailSwap(buffer, right);\r\n                buffer--;\r\n                right--;\r\n            }\r\n        }\r\n    }\r\n\r\n    // array[buffer .. start - 1] <=> \"free space\"    \r\n    //\r\n    // \"free space\" + array[start, middle - 1] + array[middle, end - 1]\r\n    // --> array[buffer, buffer + end - 1] + \"free space\"\r\n    //\r\n    // FUNCTION RENAMED: More consistent with \"out-of-place\" being at the end\r\n    grailMergeOutOfPlace(start, leftLen, rightLen, bufferOffset) {\r\n        let left = start;\r\n        let middle = start + leftLen;\r\n        let right = middle;\r\n        let end = middle + rightLen;\r\n        let buffer = start - bufferOffset;\r\n\r\n        while (right < end) {\r\n            if (left == middle || this.Reads.compareInArr(left,\r\n                right) > 0) {\r\n\r\n                this.Writes.write(buffer, this.Reads.get(right))\r\n                right++;\r\n            } else {\r\n                this.Writes.write(buffer, this.Reads.get(left))\r\n                left++;\r\n            }\r\n            buffer++;\r\n        }\r\n\r\n        if (buffer != left) {\r\n            while (left < middle) {\r\n                this.Writes.write(buffer, this.Reads.get(left))\r\n                buffer++;\r\n                left++;\r\n            }\r\n        }\r\n    }\r\n\r\n    grailBuildInPlace(start, length, currentMerge, bufferLen) {\r\n        for (let mergeLen = currentMerge; mergeLen < bufferLen; mergeLen *= 2) {\r\n            let mergeIndex;\r\n            let mergeEnd = start + length - (2 * mergeLen);\r\n            let bufferOffset = mergeLen;\r\n\r\n            for (mergeIndex = start; mergeIndex <= mergeEnd; mergeIndex += (2 * mergeLen)) {\r\n                this.grailMergeForwards(mergeIndex, mergeLen, mergeLen, bufferOffset);\r\n            }\r\n\r\n            let leftOver = length - (mergeIndex - start);\r\n\r\n            if (leftOver > mergeLen) {\r\n                this.grailMergeForwards(mergeIndex, mergeLen, leftOver - mergeLen, bufferOffset);\r\n            } else {\r\n                this.grailRotate(mergeIndex - mergeLen, mergeLen, leftOver);\r\n            }\r\n\r\n            start -= mergeLen;\r\n        }\r\n\r\n        let finalBlock = length % (2 * bufferLen);\r\n        let finalOffset = start + length - finalBlock;\r\n\r\n        if (finalBlock <= bufferLen) {\r\n            this.grailRotate(finalOffset, finalBlock, bufferLen);\r\n        } else {\r\n            this.grailMergeBackwards(finalOffset, bufferLen, finalBlock - bufferLen, bufferLen);\r\n        }\r\n\r\n        for (let mergeIndex = finalOffset - (2 * bufferLen); mergeIndex >= start; mergeIndex -= (2 * bufferLen)) {\r\n            this.grailMergeBackwards(mergeIndex, bufferLen, bufferLen, bufferLen);\r\n        }\r\n    }\r\n\r\n    grailBuildOutOfPlace(start, length, bufferLen, externLen) {\r\n        this.arraycopy(-1, start - externLen, this.externalBuffer, 0, externLen);\r\n\r\n        this.grailPairwiseWrites(start, length);\r\n        start -= 2;\r\n\r\n        let mergeLen;\r\n        for (mergeLen = 2; mergeLen < externLen; mergeLen *= 2) {\r\n            let mergeIndex;\r\n            let mergeEnd = start + length - (2 * mergeLen);\r\n            let bufferOffset = mergeLen;\r\n\r\n            for (mergeIndex = start; mergeIndex <= mergeEnd; mergeIndex += (2 * mergeLen)) {\r\n                this.grailMergeOutOfPlace(mergeIndex, mergeLen, mergeLen, bufferOffset);\r\n            }\r\n\r\n            let leftOver = length - (mergeIndex - start);\r\n\r\n            if (leftOver > mergeLen) {\r\n                this.grailMergeOutOfPlace(mergeIndex, mergeLen, leftOver - mergeLen, bufferOffset);\r\n            } else {\r\n                // TODO: Is this correct??\r\n                for (let offset = 0; offset < leftOver; offset++) {\r\n                    // array[mergeIndex + offset - mergeLen] = array[mergeIndex + offset];\r\n                    this.Writes.write(mergeIndex + offset - mergeLen, this.Reads.get(mergeIndex + offset))\r\n                }\r\n            }\r\n\r\n            start -= mergeLen;\r\n        }\r\n\r\n        this.arraycopy(this.externalBuffer, 0, -1, start + length, externLen);\r\n        this.grailBuildInPlace(start, length, mergeLen, bufferLen);\r\n    }\r\n\r\n    // build blocks of length 'bufferLen'\r\n    // input: [start - mergeLen, start - 1] elements are buffer\r\n    // output: first 'bufferLen' elements are buffer, blocks (2 * bufferLen) and last subblock sorted\r\n    grailBuildBlocks(start, length, bufferLen) {\r\n        if (this.externalBuffer != null) {\r\n            let externLen;\r\n\r\n            if (bufferLen < this.externalBufferLen) {\r\n                externLen = bufferLen;\r\n            } else {\r\n                // max power of 2 -- just in case\r\n                externLen = 1;\r\n                while ((externLen * 2) <= this.externalBufferLen) {\r\n                    externLen *= 2;\r\n                }\r\n            }\r\n\r\n            this.grailBuildOutOfPlace(start, length, bufferLen, externLen);\r\n        } else {\r\n            this.grailPairwiseSwaps(start, length);\r\n            this.grailBuildInPlace(start - 2, length, 2, bufferLen);\r\n        }\r\n    }\r\n\r\n    // Returns the final position of 'medianKey'.\r\n    grailBlockSelectSort(keys, start, medianKey, blockCount, blockLen) {\r\n        for (let block = 1; block < blockCount; block++) {\r\n            let left = block - 1;\r\n            let right = left;\r\n\r\n            for (let index = block; index < blockCount; index++) {\r\n                let compare = this.Reads.compareInArr(start + (right * blockLen),\r\n                    start + (index * blockLen));\r\n\r\n                if (compare > 0 || (compare == 0 && this.Reads.compareInArr(keys + right,\r\n                    keys + index) > 0)) {\r\n                    right = index;\r\n                }\r\n            }\r\n\r\n            if (right != left) {\r\n                // Swap the left and right selected blocks...\r\n                this.grailBlockSwap(start + (left * blockLen), start + (right * blockLen), blockLen);\r\n\r\n                // Swap the keys...\r\n                this.grailSwap(keys + left, keys + right);\r\n\r\n                // ...and follow the 'medianKey' if it was swapped\r\n\r\n                // ORIGINAL LOC: if(midkey==u-1 || midkey==p) midkey^=(u-1)^p;\r\n                // MASSIVE, MASSIVE credit to lovebuny for figuring this one out!\r\n                if (medianKey == left) {\r\n                    medianKey = right;\r\n                } else if (medianKey == right) {\r\n                    medianKey = left;\r\n                }\r\n            }\r\n        }\r\n\r\n        return medianKey;\r\n    }\r\n\r\n    // Swaps Grailsort's \"scrolling buffer\" from the right side of the array all the way back to 'start'.\r\n    // Costs O(n) operations.\r\n    //\r\n    // OFF-BY-ONE BUG FIXED: used to be `int index = start + resetLen`; credit to 666666t for debugging\r\n    grailInPlaceBufferReset(start, resetLen, bufferLen) {\r\n        for (let index = start + resetLen - 1; index >= start; index--) {\r\n            this.grailSwap(index, index - bufferLen);\r\n        }\r\n    }\r\n\r\n    // Shifts entire array over 'bufferSize' spaces to make room for the out-of-place merging buffer.\r\n    // Costs O(n) operations.\r\n    //\r\n    // OFF-BY-ONE BUG FIXED: used to be `int index = start + resetLen`; credit to 666666t for debugging\r\n    grailOutOfPlaceBufferReset(start, resetLen, bufferLen) {\r\n        for (let index = start + resetLen - 1; index >= start; index--) {\r\n            this.Writes.write(index, this.Reads.get(index - bufferLen))\r\n        }\r\n    }\r\n\r\n    // Rewinds Grailsort's \"scrolling buffer\" such that any items from a left subarray block left over by a \"smart merge\" are moved to\r\n    // the right of the buffer. This is used to maintain stability and to continue an ongoing merge that has run out of buffer space.\r\n    // Costs O(sqrt n) swaps in the *absolute* worst-case. \r\n    //\r\n    // NAMING IMPROVED: the left over items are in the middle of the merge while the buffer is at the end\r\n    grailInPlaceBufferRewind(start, leftOvers, buffer) {\r\n        while (leftOvers > start) {\r\n            leftOvers--;\r\n            buffer--;\r\n            this.grailSwap(buffer, leftOvers);\r\n        }\r\n    }\r\n\r\n    // Rewinds Grailsort's out-of-place buffer such that any items from a left subarray block left over by a \"smart merge\" are moved to\r\n    // the right of the buffer. This is used to maintain stability and to continue an ongoing merge that has run out of buffer space.\r\n    // Costs O(sqrt n) writes in the *absolute* worst-case.\r\n    //\r\n    // INCORRECT ORDER OF PARAMETERS BUG FIXED: `leftOvers` should be the middle, and `buffer` should be the end\r\n    grailOutOfPlaceBufferRewind(start, leftOvers, buffer) {\r\n        while (leftOvers > start) {\r\n            leftOvers--;\r\n            buffer--;\r\n            // array[buffer] = array[leftOvers];\r\n            this.Writes.write(buffer, this.Reads.get(leftOvers))\r\n        }\r\n    }\r\n\r\n    grailGetSubarray(currentKey, medianKey) {\r\n        if (this.Reads.compareInArr(currentKey, medianKey) < 0) {\r\n            return Subarray.LEFT;\r\n        } else {\r\n            return Subarray.RIGHT;\r\n        }\r\n    }\r\n\r\n    // FUNCTION RENAMED: more clear *which* left blocks are being counted\r\n    grailCountFinalLeftBlocks(offset, blockCount, blockLen) {\r\n        let leftBlocks = 0;\r\n\r\n        let firstRightBlock = offset + (blockCount * blockLen);\r\n        let prevLeftBlock = firstRightBlock - blockLen;\r\n\r\n        while (leftBlocks < blockCount && this.Reads.compareInArr(firstRightBlock,\r\n            prevLeftBlock) < 0) {\r\n            leftBlocks++;\r\n            prevLeftBlock -= blockLen;\r\n        }\r\n\r\n        return leftBlocks;\r\n    }\r\n\r\n    grailSmartMerge(start, leftLen, leftOrigin, rightLen, bufferOffset) {\r\n        let left = start;\r\n        let middle = start + leftLen;\r\n        let right = middle;\r\n        let end = middle + rightLen;\r\n        let buffer = start - bufferOffset;\r\n\r\n        if (leftOrigin == Subarray.LEFT) {\r\n            while (left < middle && right < end) {\r\n                if (this.Reads.compareInArr(left, right) <= 0) {\r\n                    this.grailSwap(buffer, left);\r\n                    left++;\r\n                } else {\r\n                    this.grailSwap(buffer, right);\r\n                    right++;\r\n                }\r\n                buffer++;\r\n            }\r\n        } else {\r\n            while (left < middle && right < end) {\r\n                if (this.Reads.compareInArr(left, right) < 0) {\r\n                    this.grailSwap(buffer, left);\r\n                    left++;\r\n                } else {\r\n                    this.grailSwap(buffer, right);\r\n                    right++;\r\n                }\r\n                buffer++;\r\n            }\r\n        }\r\n\r\n        if (left < middle) {\r\n            this.currentBlockLen = middle - left;\r\n            this.grailInPlaceBufferRewind(left, middle, end);\r\n        } else {\r\n            this.currentBlockLen = end - right;\r\n            if (leftOrigin == Subarray.LEFT) {\r\n                this.currentBlockOrigin = Subarray.RIGHT;\r\n            } else {\r\n                this.currentBlockOrigin = Subarray.LEFT;\r\n            }\r\n        }\r\n    }\r\n\r\n    grailSmartLazyMerge(start, leftLen, leftOrigin, rightLen) {\r\n        if (leftOrigin == Subarray.LEFT) {\r\n            if (this.Reads.compareInArr(start + leftLen - 1, start + leftLen) > 0) {\r\n                while (leftLen != 0) {\r\n                    let insertPos = this.grailBinarySearchLeft(start + leftLen, rightLen, this.Reads.readValue(start));\r\n\r\n                    if (insertPos != 0) {\r\n                        this.grailRotate(start, leftLen, insertPos);\r\n                        start += insertPos;\r\n                        rightLen -= insertPos;\r\n                    }\r\n\r\n                    if (rightLen == 0) {\r\n                        this.currentBlockLen = leftLen;\r\n                        return;\r\n                    } else {\r\n                        do {\r\n                            start++;\r\n                            leftLen--;\r\n                        } while (leftLen != 0 && this.Reads.compareInArr(start,\r\n                            start + leftLen) <= 0);\r\n                    }\r\n                }\r\n            }\r\n        } else {\r\n            if (this.Reads.compareInArr(start + leftLen - 1, start + leftLen) >= 0) {\r\n                while (leftLen != 0) {\r\n                    let insertPos = this.grailBinarySearchRight(start + leftLen, rightLen, this.Reads.readValue(start));\r\n\r\n                    if (insertPos != 0) {\r\n                        this.grailRotate(start, leftLen, insertPos);\r\n                        start += insertPos;\r\n                        rightLen -= insertPos;\r\n                    }\r\n\r\n                    if (rightLen == 0) {\r\n                        this.currentBlockLen = leftLen;\r\n                        return;\r\n                    } else {\r\n                        do {\r\n                            start++;\r\n                            leftLen--;\r\n                        } while (leftLen != 0 && this.Reads.compareInArr(start,\r\n                            start + leftLen) < 0);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        this.currentBlockLen = rightLen;\r\n        if (leftOrigin == Subarray.LEFT) {\r\n            this.currentBlockOrigin = Subarray.RIGHT;\r\n        } else {\r\n            this.currentBlockOrigin = Subarray.LEFT;\r\n        }\r\n    }\r\n\r\n    // FUNCTION RENAMED: more consistent with other \"out-of-place\" merges\r\n    grailSmartMergeOutOfPlace(start, leftLen, leftOrigin, rightLen, bufferOffset) {\r\n        let left = start;\r\n        let middle = start + leftLen;\r\n        let right = middle;\r\n        let end = middle + rightLen;\r\n        let buffer = start - bufferOffset;\r\n\r\n        if (leftOrigin == Subarray.LEFT) {\r\n            while (left < middle && right < end) {\r\n                if (this.Reads.compareInArr(left, right) <= 0) {\r\n                    this.Writes.write(buffer, this.Reads.get(left))\r\n                    left++;\r\n                } else {\r\n                    this.Writes.write(buffer, this.Reads.get(right))\r\n                    right++;\r\n                }\r\n                buffer++;\r\n            }\r\n        } else {\r\n            while (left < middle && right < end) {\r\n                if (this.Reads.compareInArr(left, right) < 0) {\r\n                    this.Writes.write(buffer, this.Reads.get(left))\r\n                    left++;\r\n                } else {\r\n                    this.Writes.write(buffer, this.Reads.get(right))\r\n                    right++;\r\n                }\r\n                buffer++;\r\n            }\r\n        }\r\n\r\n        if (left < middle) {\r\n            this.currentBlockLen = middle - left;\r\n            this.grailOutOfPlaceBufferRewind(left, middle, end);\r\n        } else {\r\n            this.currentBlockLen = end - right;\r\n            if (leftOrigin == Subarray.LEFT) {\r\n                this.currentBlockOrigin = Subarray.RIGHT;\r\n            } else {\r\n                this.currentBlockOrigin = Subarray.LEFT;\r\n            }\r\n        }\r\n    }\r\n\r\n    grailMergeBlocks(keys, medianKey, start, blockCount, blockLen, finalLeftBlocks, finalLen) {\r\n        let currentBlock;\r\n        let blockIndex = blockLen;\r\n\r\n        this.currentBlockLen = blockLen;\r\n        this.currentBlockOrigin = this.grailGetSubarray(keys, medianKey);\r\n\r\n        for (let keyIndex = 1; keyIndex < blockCount; keyIndex++, blockIndex += blockLen) {\r\n            currentBlock = blockIndex - this.currentBlockLen;\r\n\r\n            let nextBlockOrigin = this.grailGetSubarray(keys + keyIndex, medianKey);\r\n\r\n            if (nextBlockOrigin == this.currentBlockOrigin) {\r\n                this.grailBlockSwap(start + currentBlock - blockLen, start + currentBlock, this.currentBlockLen);\r\n                currentBlock = blockIndex;\r\n\r\n                this.currentBlockLen = blockLen;\r\n            } else {\r\n                this.grailSmartMerge(start + currentBlock, this.currentBlockLen, this.currentBlockOrigin, blockLen, blockLen);\r\n            }\r\n        }\r\n\r\n        currentBlock = blockIndex - this.currentBlockLen;\r\n\r\n        if (finalLen != 0) {\r\n            if (this.currentBlockOrigin == Subarray.RIGHT) {\r\n                this.grailBlockSwap(start + currentBlock - blockLen, start + currentBlock, this.currentBlockLen);\r\n                currentBlock = blockIndex;\r\n\r\n                this.currentBlockLen = blockLen * finalLeftBlocks;\r\n                this.currentBlockOrigin = Subarray.LEFT;\r\n            } else {\r\n                this.currentBlockLen += blockLen * finalLeftBlocks;\r\n            }\r\n\r\n            this.grailMergeForwards(start + currentBlock, this.currentBlockLen, finalLen, blockLen);\r\n        } else {\r\n            this.grailBlockSwap(start + currentBlock, start + currentBlock - blockLen, this.currentBlockLen);\r\n        }\r\n    }\r\n\r\n    grailLazyMergeBlocks(keys, medianKey, start, blockCount, blockLen, finalLeftBlocks, finalLen) {\r\n        let currentBlock;\r\n        let blockIndex = blockLen;\r\n\r\n        this.currentBlockLen = blockLen;\r\n        this.currentBlockOrigin = this.grailGetSubarray(keys, medianKey);\r\n\r\n        for (let keyIndex = 1; keyIndex < blockCount; keyIndex++, blockIndex += blockLen) {\r\n            currentBlock = blockIndex - this.currentBlockLen;\r\n\r\n            let nextBlockOrigin = this.grailGetSubarray(keys + keyIndex, medianKey);\r\n\r\n            if (nextBlockOrigin == this.currentBlockOrigin) {\r\n                currentBlock = blockIndex;\r\n\r\n                this.currentBlockLen = blockLen;\r\n            } else {\r\n                // These checks were included in the original code... but why???\r\n                if (blockLen != 0 && this.currentBlockLen != 0) {\r\n                    this.grailSmartLazyMerge(start + currentBlock, this.currentBlockLen, this.currentBlockOrigin, blockLen);\r\n                }\r\n            }\r\n        }\r\n\r\n        currentBlock = blockIndex - this.currentBlockLen;\r\n\r\n        if (finalLen != 0) {\r\n            if (this.currentBlockOrigin == Subarray.RIGHT) {\r\n                currentBlock = blockIndex;\r\n\r\n                this.currentBlockLen = blockLen * finalLeftBlocks;\r\n                this.currentBlockOrigin = Subarray.LEFT;\r\n            } else {\r\n                this.currentBlockLen += blockLen * finalLeftBlocks;\r\n            }\r\n\r\n            this.grailLazyMerge(start + currentBlock, this.currentBlockLen, finalLen);\r\n        }\r\n    }\r\n\r\n    grailMergeBlocksOutOfPlace(keys, medianKey, start, blockCount, blockLen, finalLeftBlocks, finalLen) {\r\n        let currentBlock;\r\n        let blockIndex = blockLen;\r\n\r\n        this.currentBlockLen = blockLen;\r\n        this.currentBlockOrigin = this.grailGetSubarray(keys, medianKey);\r\n\r\n        for (let keyIndex = 1; keyIndex < blockCount; keyIndex++, blockIndex += blockLen) {\r\n            currentBlock = blockIndex - this.currentBlockLen;\r\n\r\n            let nextBlockOrigin = this.grailGetSubarray(keys + keyIndex, medianKey);\r\n\r\n            if (nextBlockOrigin == this.currentBlockOrigin) {\r\n                this.arraycopy(-1, start + currentBlock, -1, start + currentBlock - blockLen, this.currentBlockLen);\r\n                currentBlock = blockIndex;\r\n\r\n                this.currentBlockLen = blockLen;\r\n            } else {\r\n                this.grailSmartMergeOutOfPlace(start + currentBlock, this.currentBlockLen, this.currentBlockOrigin, blockLen, blockLen);\r\n            }\r\n        }\r\n\r\n        currentBlock = blockIndex - this.currentBlockLen;\r\n\r\n        if (finalLen != 0) {\r\n            if (this.currentBlockOrigin == Subarray.RIGHT) {\r\n                this.arraycopy(-1, start + currentBlock, -1, start + currentBlock - blockLen, this.currentBlockLen);\r\n                currentBlock = blockIndex;\r\n\r\n                this.currentBlockLen = blockLen * finalLeftBlocks;\r\n                this.currentBlockOrigin = Subarray.LEFT;\r\n            } else {\r\n                this.currentBlockLen += blockLen * finalLeftBlocks;\r\n            }\r\n\r\n            this.grailMergeOutOfPlace(start + currentBlock, this.currentBlockLen, finalLen, blockLen);\r\n        } else {\r\n            this.arraycopy(-1, start + currentBlock, -1, start + currentBlock - blockLen, this.currentBlockLen);\r\n        }\r\n    }\r\n\r\n    //TODO: Double-check \"Merge Blocks\" arguments\r\n    grailCombineInPlace(keys, start, length, subarrayLen, blockLen, mergeCount, lastSubarray, buffer) {\r\n        for (let mergeIndex = 0; mergeIndex < mergeCount; mergeIndex++) {\r\n            let offset = start + (mergeIndex * (2 * subarrayLen));\r\n            let blockCount = parseInt((2 * subarrayLen) / blockLen);\r\n\r\n            this.grailInsertSort(keys, blockCount);\r\n\r\n            // INCORRECT PARAMETER BUG FIXED: `block select sort` should be using `offset`, not `start`\r\n            let medianKey = parseInt(subarrayLen / blockLen);\r\n            medianKey = this.grailBlockSelectSort(keys, offset, medianKey, blockCount, blockLen);\r\n\r\n            if (buffer) {\r\n                this.grailMergeBlocks(keys, keys + medianKey, offset, blockCount, blockLen, 0, 0);\r\n            } else {\r\n                this.grailLazyMergeBlocks(keys, keys + medianKey, offset, blockCount, blockLen, 0, 0);\r\n            }\r\n        }\r\n\r\n        // INCORRECT CONDITIONAL/PARAMETER BUG FIXED: Credit to 666666t for debugging.\r\n        if (lastSubarray != 0) {\r\n            let offset = start + (mergeCount * (2 * subarrayLen));\r\n            let rightBlocks = parseInt(lastSubarray / blockLen);\r\n\r\n            this.grailInsertSort(keys, rightBlocks + 1);\r\n\r\n            // INCORRECT PARAMETER BUG FIXED: `block select sort` should be using `offset`, not `start`\r\n            let medianKey = parseInt(subarrayLen / blockLen);\r\n            medianKey = this.grailBlockSelectSort(keys, offset, medianKey, rightBlocks, blockLen);\r\n\r\n            // MISSING BOUNDS CHECK BUG FIXED: `lastFragment` *can* be 0 if the `lastSubarray` is evenly\r\n            //                                 divided into blocks. This prevents Grailsort from going\r\n            //                                 out of bounds.\r\n            let lastFragment = lastSubarray % blockLen;\r\n            let leftBlocks;\r\n            if (lastFragment != 0) {\r\n                leftBlocks = this.grailCountFinalLeftBlocks(offset, rightBlocks, blockLen);\r\n            } else {\r\n                leftBlocks = 0;\r\n            }\r\n\r\n            let blockCount = rightBlocks - leftBlocks;\r\n\r\n            //TODO: Double-check if this micro-optimization works correctly like the original\r\n            if (blockCount == 0) {\r\n                let leftLength = leftBlocks * blockLen;\r\n\r\n                // INCORRECT PARAMETER BUG FIXED: these merges should be using `offset`, not `start`\r\n                if (buffer) {\r\n                    this.grailMergeForwards(offset, leftLength, lastFragment, blockLen);\r\n                } else {\r\n                    this.grailLazyMerge(offset, leftLength, lastFragment);\r\n                }\r\n            } else {\r\n                if (buffer) {\r\n                    this.grailMergeBlocks(keys, keys + medianKey, offset, blockCount, blockLen, leftBlocks, lastFragment);\r\n                } else {\r\n                    this.grailLazyMergeBlocks(keys, keys + medianKey, offset, blockCount, blockLen, leftBlocks, lastFragment);\r\n                }\r\n            }\r\n        }\r\n\r\n        if (buffer) {\r\n            this.grailInPlaceBufferReset(start, length, blockLen);\r\n        }\r\n    }\r\n\r\n    grailCombineOutOfPlace(keys, start, length, subarrayLen, blockLen, mergeCount, lastSubarray) {\r\n        this.arraycopy(-1, start - blockLen, this.externalBuffer, 0, blockLen);\r\n\r\n        for (let mergeIndex = 0; mergeIndex < mergeCount; mergeIndex++) {\r\n            let offset = start + (mergeIndex * (2 * subarrayLen));\r\n            let blockCount = parseInt((2 * subarrayLen) / blockLen);\r\n\r\n            this.grailInsertSort(keys, blockCount);\r\n\r\n            // INCORRECT PARAMETER BUG FIXED: `block select sort` should be using `offset`, not `start`\r\n            let medianKey = parseInt(subarrayLen / blockLen);\r\n            medianKey = this.grailBlockSelectSort(keys, offset, medianKey, blockCount, blockLen);\r\n\r\n            this.grailMergeBlocksOutOfPlace(keys, keys + medianKey, offset, blockCount, blockLen, 0, 0);\r\n        }\r\n\r\n        // INCORRECT CONDITIONAL/PARAMETER BUG FIXED: Credit to 666666t for debugging.\r\n        if (lastSubarray != 0) {\r\n            let offset = start + (mergeCount * (2 * subarrayLen));\r\n            let rightBlocks = parseInt(lastSubarray / blockLen);\r\n\r\n            this.grailInsertSort(keys, rightBlocks + 1);\r\n\r\n            // INCORRECT PARAMETER BUG FIXED: `block select sort` should be using `offset`, not `start`\r\n            let medianKey = subarrayLen / blockLen;\r\n            medianKey = this.grailBlockSelectSort(keys, offset, medianKey, rightBlocks, blockLen);\r\n\r\n            // MISSING BOUNDS CHECK BUG FIXED: `lastFragment` *can* be 0 if the `lastSubarray` is evenly\r\n            //                                 divided into blocks. This prevents Grailsort from going\r\n            //                                 out of bounds.\r\n            let lastFragment = lastSubarray % blockLen;\r\n            let leftBlocks;\r\n            if (lastFragment != 0) {\r\n                leftBlocks = this.grailCountFinalLeftBlocks(offset, rightBlocks, blockLen);\r\n            } else {\r\n                leftBlocks = 0;\r\n            }\r\n\r\n            let blockCount = rightBlocks - leftBlocks;\r\n\r\n            if (blockCount == 0) {\r\n                // INCORRECT PARAMETER BUG FIXED: this merge should be using `offset`, not `start`\r\n                let leftLength = leftBlocks * blockLen;\r\n                this.grailMergeOutOfPlace(offset, leftLength, lastFragment, blockLen);\r\n            } else {\r\n                this.grailMergeBlocksOutOfPlace(keys, keys + medianKey, offset, blockCount, blockLen, leftBlocks, lastFragment);\r\n            }\r\n        }\r\n\r\n        this.grailOutOfPlaceBufferReset(start, length, blockLen);\r\n        this.arraycopy(this.externalBuffer, 0, -1, start - blockLen, blockLen);\r\n    }\r\n\r\n    // 'keys' are on the left side of array. Blocks of length 'subarrayLen' combined. We'll combine them in pairs\r\n    // 'subarrayLen' is a power of 2. (2 * subarrayLen / blockLen) keys are guaranteed\r\n    grailCombineBlocks(keys, start, length, subarrayLen, blockLen, buffer) {\r\n        let mergeCount = parseInt(length / (2 * subarrayLen));\r\n        let lastSubarray = parseInt(length % (2 * subarrayLen));\r\n\r\n        if (lastSubarray <= subarrayLen) {\r\n            length -= lastSubarray;\r\n            lastSubarray = 0;\r\n        }\r\n\r\n        // INCOMPLETE CONDITIONAL BUG FIXED: In order to combine blocks out-of-place, we must check if a full-sized\r\n        //                                   block fits into our external buffer.\r\n        if (buffer && blockLen <= this.externalBufferLen) {\r\n            this.grailCombineOutOfPlace(keys, start, length, subarrayLen, blockLen, mergeCount, lastSubarray);\r\n        } else {\r\n            this.grailCombineInPlace(keys, start, length, subarrayLen, blockLen, mergeCount, lastSubarray, buffer);\r\n        }\r\n    }\r\n\r\n    // \"Classic\" in-place merge sort using binary searches and rotations\r\n    //\r\n    // cost: min(leftLen, rightLen)^2 + max(leftLen, rightLen)\r\n    grailLazyMerge(start, leftLen, rightLen) {\r\n        if (leftLen < rightLen) {\r\n            while (leftLen != 0) {\r\n                let insertPos = this.grailBinarySearchLeft(start + leftLen, rightLen, this.Reads.readValue(start));\r\n\r\n                if (insertPos != 0) {\r\n                    this.grailRotate(start, leftLen, insertPos);\r\n                    start += insertPos;\r\n                    rightLen -= insertPos;\r\n                }\r\n\r\n                if (rightLen == 0) {\r\n                    break;\r\n                } else {\r\n                    do {\r\n                        start++;\r\n                        leftLen--;\r\n                    } while (leftLen != 0 && this.Reads.compareInArr(start,\r\n                        start + leftLen) <= 0);\r\n                }\r\n            }\r\n        } else {\r\n            let end = start + leftLen + rightLen - 1;\r\n            while (rightLen != 0) {\r\n                let insertPos = this.grailBinarySearchRight(start, leftLen, this.Reads.readValue(end));\r\n\r\n                if (insertPos != leftLen) {\r\n                    this.grailRotate(start + insertPos, leftLen - insertPos, rightLen);\r\n                    end -= leftLen - insertPos;\r\n                    leftLen = insertPos;\r\n                }\r\n\r\n                if (leftLen == 0) {\r\n                    break;\r\n                } else {\r\n                    let leftEnd = start + leftLen - 1;\r\n                    do {\r\n                        rightLen--;\r\n                        end--;\r\n                    } while (rightLen != 0 && this.Reads.compareInArr(leftEnd,\r\n                        end) <= 0);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    grailLazyStableSort(start, length) {\r\n        for (let index = 1; index < length; index += 2) {\r\n            let left = start + index - 1;\r\n            let right = start + index;\r\n\r\n            if (this.Reads.compareInArr(left, right) > 0) {\r\n                this.grailSwap(left, right);\r\n            }\r\n        }\r\n        for (let mergeLen = 2; mergeLen < length; mergeLen *= 2) {\r\n            let mergeIndex;\r\n            let mergeEnd = length - (2 * mergeLen);\r\n\r\n            for (mergeIndex = 0; mergeIndex <= mergeEnd; mergeIndex += (2 * mergeLen)) {\r\n                this.grailLazyMerge(start + mergeIndex, mergeLen, mergeLen);\r\n            }\r\n\r\n            let leftOver = length - mergeIndex;\r\n            if (leftOver > mergeLen) {\r\n                this.grailLazyMerge(start + mergeIndex, mergeLen, leftOver - mergeLen);\r\n            }\r\n        }\r\n    }\r\n\r\n    static calcMinKeys(numKeys, blockKeysSum) {\r\n        let minKeys = 1;\r\n        while (minKeys < numKeys && blockKeysSum != 0) {\r\n            minKeys *= 2;\r\n            blockKeysSum = parseInt(blockKeysSum / 8);\r\n        }\r\n        return minKeys;\r\n    }\r\n\r\n    grailCommonSort(start, length, extBuf, extBufLen) {\r\n        if (length < 16) {\r\n            this.grailInsertSort(start, length);\r\n            return;\r\n        } else {\r\n            let blockLen = 1;\r\n\r\n            // find the smallest power of two greater than or equal to\r\n            // the square root of the input's length\r\n            while ((blockLen * blockLen) < length) {\r\n                blockLen *= 2;\r\n            }\r\n\r\n            // '((a - 1) / b) + 1' is actually a clever and very efficient\r\n            // formula for the ceiling of (a / b)\r\n            //\r\n            // credit to Anonymous0726 for figuring this out!\r\n            let keyLen = parseInt((length - 1) / blockLen) + 1;\r\n\r\n            // Grailsort is hoping to find `2 * sqrt(n)` unique items\r\n            // throughout the array\r\n            let idealKeys = keyLen + blockLen;\r\n\r\n            //TODO: Clean up `start +` offsets\r\n            let keysFound = this.grailCollectKeys(start, length, idealKeys);\r\n\r\n            let idealBuffer;\r\n            if (keysFound < idealKeys) {\r\n                if (keysFound < 4) {\r\n                    // GRAILSORT STRATEGY 3 -- No block swaps or scrolling buffer; resort to Lazy Stable Sort\r\n                    this.grailLazyStableSort(start, length);\r\n                    return;\r\n                } else {\r\n                    // GRAILSORT STRATEGY 2 -- Block swaps with small scrolling buffer and/or lazy merges\r\n                    keyLen = blockLen;\r\n                    blockLen = 0;\r\n                    idealBuffer = false;\r\n\r\n                    while (keyLen > keysFound) {\r\n                        keyLen = parseInt(keyLen / 2);\r\n                    }\r\n                }\r\n            } else {\r\n                // GRAILSORT STRATEGY 1 -- Block swaps with scrolling buffer\r\n                idealBuffer = true;\r\n            }\r\n\r\n            let bufferEnd = blockLen + keyLen;\r\n            let bufferLen;\r\n            if (idealBuffer) {\r\n                bufferLen = blockLen;\r\n            } else {\r\n                bufferLen = keyLen;\r\n            }\r\n\r\n            if (idealBuffer && extBuf != null) {\r\n                // GRAILSORT + EXTRA SPACE\r\n                this.externalBuffer = extBuf;\r\n                this.externalBufferLen = extBufLen;\r\n            }\r\n\r\n            this.grailBuildBlocks(start + bufferEnd, length - bufferEnd, bufferLen);\r\n\r\n            while ((length - bufferEnd) > (2 * bufferLen)) {\r\n                bufferLen *= 2;\r\n\r\n                let currentBlockLen = blockLen;\r\n                let scrollingBuffer = idealBuffer;\r\n\r\n                if (!scrollingBuffer) {\r\n                    if (keyLen > 4 && (parseInt(keyLen / 8) * keyLen) >= bufferLen) {\r\n                        currentBlockLen = parseInt(keyLen / 2);\r\n                        scrollingBuffer = true;\r\n                    } else {\r\n                        let blockKeysSum = parseInt(bufferLen * keysFound) / 2;\r\n                        let minKeys = GrailSort.calcMinKeys(keyLen, blockKeysSum);\r\n\r\n                        currentBlockLen = parseInt(2 * bufferLen) / minKeys;\r\n                    }\r\n                }\r\n\r\n                this.grailCombineBlocks(start, start + bufferEnd, length - bufferEnd, bufferLen, currentBlockLen, scrollingBuffer);\r\n            }\r\n\r\n            this.grailInsertSort(start, bufferEnd);\r\n            this.grailLazyMerge(start, bufferEnd, length - bufferEnd);\r\n        }\r\n    }\r\n\r\n    grailSortInPlace(start, length) {\r\n        this.grailCommonSort(start, length, null, 0);\r\n    }\r\n\r\n    /*\r\n    grailSortStaticOOP(array, start, length) {\r\n        let buffer = Array.newInstance(array[0].getClass(), GRAIL_STATIC_EXT_BUF_LEN);\r\n        this.grailCommonSort(array, start, length, buffer, GRAIL_STATIC_EXT_BUF_LEN);\r\n    }\r\n    \r\n    grailSortDynamicOOP(array, start, length) {\r\n        let bufferLen = 1;\r\n        while((bufferLen * bufferLen) < length) {\r\n            bufferLen *= 2;\r\n        }\r\n\r\n        let buffer = Array.newInstance(array[0].getClass(), bufferLen);\r\n\r\n        this.grailCommonSort(array, start, length, buffer, bufferLen);\r\n    }*/\r\n    runSort(low, high, bucketsNum, bufferSize) {\r\n        // this.grailSortInPlace(low, high + 1)\r\n        if(bufferSize === 0){\r\n            this.grailSortInPlace(low, high + 1)\r\n        }else{\r\n            let buffer = this.Writes.createAuxArray(bufferSize)\r\n            console.log(\"WITH BUFFER!!!\")\r\n            this.grailCommonSort(low, high + 1, buffer, bufferSize)\r\n            this.Writes.removeAuxArray(buffer)\r\n        }\r\n    }\r\n}\r\n\r\n","import {Sort} from \"./Sort\";\r\n\r\nexport class LLQuickSort extends Sort{\r\n    constructor(arrayVisualizer) {\r\n        super(arrayVisualizer);\r\n        this.sortName = \"LLQuickSort\"\r\n    }\r\n    partition(lo, hi) {\r\n        let pivot = hi;\r\n        let i = lo;\r\n        for (let j = lo; j < hi; j++) {\r\n            if (this.Reads.compareInArr(j, pivot) < 0) {\r\n                this.Writes.swap(i, j);\r\n                i++;\r\n            }\r\n        }\r\n        this.Writes.swap(i, hi);\r\n        return i;\r\n    }\r\n\r\n    LLQuickSort(lo, hi) {\r\n        if (lo < hi) {\r\n            let p = this.partition(lo, hi);\r\n            this.LLQuickSort(lo, p - 1);\r\n            this.LLQuickSort(p + 1, hi);\r\n        }\r\n    }\r\n    runSort(low, high) {\r\n        this.LLQuickSort(low, high)\r\n    }\r\n}","import {Sort} from \"./Sort\";\r\n\r\nexport class LRQuickSort extends Sort{\r\n    constructor(arrayVisualizer) {\r\n        super(arrayVisualizer);\r\n        this.sortName=\"LRQuickSort\"\r\n    }\r\n\r\n    quickSort(p, r){\r\n        let pivot = Math.trunc(p + (r - p + 1) / 2);\r\n        let x = this.Reads.readValue(pivot);\r\n\r\n        let i = p;\r\n        let j = r;\r\n\r\n        while (i <= j) {\r\n            // while (this.Reads.readValue(i) < x){\r\n            while (this.Reads.compareValues(this.Reads.get(i), x) < 0){\r\n                i++;\r\n            }\r\n            // while (this.Reads.get(j) > x){\r\n            while (this.Reads.compareValues(this.Reads.get(j), x) > 0){\r\n                j--;\r\n            }\r\n\r\n            if (i <= j) {\r\n                this.Writes.swap(i, j);\r\n                i++;\r\n                j--;\r\n            }\r\n        }\r\n\r\n        if(p < j) {\r\n            this.quickSort(p, j);\r\n        }\r\n        if(i < r) {\r\n            this.quickSort(i, r);\r\n        }\r\n    }\r\n\r\n    runSort(low, high) {\r\n        this.quickSort(low, high)\r\n    }\r\n}","import {Sort} from \"./Sort\";\r\nimport {Element} from \"../classes/Element\";\r\n\r\nexport class LSDRadixSort extends Sort {\r\n    constructor(arrayVisualizer) {\r\n        super(arrayVisualizer);\r\n        this.sortName = \"LSD RadixSort\"\r\n        this.isNeedBucketsNum = true;\r\n    }\r\n\r\n    LSDRadixSort(bucketsNum) {\r\n        let len = this.arrayVisualizer.getArrLength()\r\n        let max = this.Reads.readValue(0);\r\n        for (let i = 1; i < len; ++i) {\r\n            let tmp = this.Reads.readValue(i)\r\n            if (max < tmp) {\r\n                max = tmp\r\n            }\r\n        }\r\n        let highestPower = Math.log(max) / Math.log(bucketsNum);\r\n\r\n        let registers = new Array(bucketsNum)\r\n        for (let i = 0; i < bucketsNum; i++) {\r\n            registers[i] = [];\r\n        }\r\n\r\n        for (let p = 0; p <= highestPower; p++) {\r\n            for (let i = 0; i < len; i++) {\r\n                let stabVal = Math.max(0, Math.min(this.Reads.readValue(i), len - 1))\r\n                let digit = Math.trunc(stabVal / (bucketsNum ** p) % bucketsNum)\r\n                // console.log(digit)\r\n                registers[digit].push(this.Reads.get(i))\r\n                //PseudoWrite\r\n            }\r\n\r\n\r\n            let tempArray = this.Writes.createAuxArray(len)\r\n            let tempWrite = new Array(len)\r\n            let radix = registers.length\r\n\r\n\r\n            let total = 0;\r\n            for (let index = 0; index < registers.length; index++) {\r\n                for (let i = 0; i < registers[index].length; i++) {\r\n                    this.Writes.auxWrite(total++, registers[index][i], tempArray)\r\n                }\r\n                registers[index] = []\r\n            }\r\n\r\n            for (let i = 0; i < len; i++) {\r\n                let register = i % radix\r\n                let pos = (register * Math.trunc(len / radix) + Math.trunc(i / radix))\r\n\r\n                this.Writes.write(pos, this.Reads.auxGet(pos, tempArray))\r\n                tempWrite[pos] = true\r\n            }\r\n            for (let i = 0; i < len; i++) {\r\n                if (!tempWrite[i]) {\r\n                    this.Writes.write(i, this.Reads.auxGet(i, tempArray))\r\n                }\r\n            }\r\n\r\n            this.Writes.removeAuxArray(tempArray)\r\n\r\n        }\r\n\r\n    }\r\n\r\n    runSort(low, high, bucketsNum) {\r\n        this.LSDRadixSort(bucketsNum)\r\n    }\r\n}","import {Sort} from \"./Sort\";\r\nimport {Writes} from \"../ArrayAccess/Writes\";\r\n\r\nexport class MergeSort extends Sort {\r\n    constructor(arrayVisualizer) {\r\n        super(arrayVisualizer);\r\n        this.sortName = \"MergeSort\"\r\n    }\r\n\r\n    merge(tmp, start, mid, end) {\r\n        if (start === mid) {\r\n            return\r\n        }\r\n\r\n        this.merge(tmp, start, Math.trunc((mid + start) / 2), mid);\r\n        this.merge(tmp, mid, Math.trunc((mid + end) / 2), end);\r\n\r\n        let low = start\r\n        let high = mid\r\n\r\n        for (let nxt = 0; nxt < end - start; nxt++) {\r\n            if (low >= mid && high >= end) break;\r\n\r\n            if (low < mid && high >= end) {\r\n                this.Writes.auxWrite(nxt, this.Reads.get(low++), tmp)\r\n            } else if (low >= mid && high < end) {\r\n                this.Writes.auxWrite(nxt, this.Reads.get(high++), tmp)\r\n            } else if (this.Reads.compareInArr(low, high) <= 0) {\r\n                this.Writes.auxWrite(nxt, this.Reads.get(low++), tmp)\r\n            } else {\r\n                this.Writes.auxWrite(nxt, this.Reads.get(high++), tmp)\r\n            }\r\n        }\r\n        for (let i = 0; i < end - start; i++) {\r\n            this.Writes.write(start + i, this.Reads.auxGet(i, tmp))\r\n        }\r\n\r\n    }\r\n\r\n    MergeSort(low, high) {\r\n        let tmp = this.Writes.createAuxArray(low - high)\r\n\r\n        let mid = low + (Math.trunc((high - low) / 2))\r\n\r\n        this.merge(tmp, low, mid, high+1)\r\n\r\n        this.Writes.removeAuxArray(tmp)\r\n    }\r\n\r\n    runSort(low, high) {\r\n        this.MergeSort(low, high)\r\n    }\r\n}","import {Sort} from \"./Sort\";\r\nimport {InsertionSort} from \"./InsertionSort\";\r\n\r\nexport class PseudoTimSort extends Sort {\r\n    MIN_MERGE\r\n    constructor(arrayVisualizer) {\r\n        super(arrayVisualizer);\r\n        this.sortName = \"PseudoTimSort\"\r\n        this.MIN_MERGE = 32\r\n    }\r\n\r\n    minRunLength(n) {\r\n        let r = 0;\r\n        while (n >= this.MIN_MERGE)\r\n        {\r\n            r |= (n & 1);\r\n            n >>= 1;\r\n        }\r\n        return n + r;\r\n    }\r\n    merge(l, m, r) {\r\n        let len1 = m - l + 1, len2 = r - m;\r\n        let left = this.Writes.createAuxArray(len1);\r\n        let right = this.Writes.createAuxArray(len2);\r\n        for(let x = 0; x < len1; x++)\r\n        {\r\n            // left[x] = arr[l + x];\r\n            this.Writes.auxWrite(x, this.Reads.get(l + x), left)\r\n        }\r\n        for(let x = 0; x < len2; x++)\r\n        {\r\n            // right[x] = arr[m + 1 + x];\r\n            this.Writes.auxWrite(x, this.Reads.get(m + 1 + x), right)\r\n        }\r\n\r\n        let i = 0;\r\n        let j = 0;\r\n        let k = l;\r\n\r\n        while (i < len1 && j < len2)\r\n        {\r\n            // if (left[i] <= right[j])\r\n            if(this.Reads.compareValues(this.Reads.auxGet(i, left), this.Reads.auxGet(j, right))<=0)\r\n            {\r\n                // arr[k] = left[i];\r\n                this.Writes.write(k, this.Reads.auxGet(i, left))\r\n                i++;\r\n            }\r\n            else\r\n            {\r\n                // arr[k] = right[j];\r\n                this.Writes.write(k, this.Reads.auxGet(j, right))\r\n                j++;\r\n            }\r\n            k++;\r\n        }\r\n\r\n        while (i < len1) {\r\n            // arr[k] = left[i];\r\n            this.Writes.write(k, this.Reads.auxGet(i, left))\r\n            k++;\r\n            i++;\r\n        }\r\n\r\n        while (j < len2) {\r\n            this.Writes.write(k, this.Reads.auxGet(j, right))\r\n            k++;\r\n            j++;\r\n        }\r\n        this.Writes.removeAuxArray(right)\r\n        this.Writes.removeAuxArray(left)\r\n    }\r\n\r\n    pseudoTimSort(n)\r\n    {\r\n        let minRun = this.minRunLength(this.MIN_MERGE);\r\n\r\n        for(let i = 0; i < n; i += minRun)\r\n        {\r\n            let insertionSort = new InsertionSort(this.arrayVisualizer)\r\n\r\n            insertionSort.runSort(i, Math.min(\r\n                (i + this.MIN_MERGE - 1), (n - 1)));\r\n        }\r\n\r\n        for(let size = minRun; size < n; size = 2 * size) {\r\n            for(let left = 0; left < n; left += 2 * size) {\r\n                let mid = left + size - 1;\r\n                let right = Math.min((left + 2 * size - 1), (n - 1));\r\n                if(mid < right) {\r\n                    this.merge(left, mid, right);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    runSort(low, high) {\r\n        this.pseudoTimSort(high+1)\r\n    }\r\n}","import {Sort} from \"./Sort\";\r\n\r\nexport class SelectionSort extends Sort{\r\n    constructor(arrayVisualizer) {\r\n        super(arrayVisualizer);\r\n        this.sortName = \"SelectionSort\"\r\n    }\r\n\r\n    SelectionSort() {\r\n        for (let i=0; i < this.arrLength; i++) {\r\n            let minIndex = i\r\n            for (let j=i; j < this.arrLength; j++) {\r\n                if (this.Reads.compareInArr(j, minIndex) < 0) {\r\n                    minIndex = j\r\n                }\r\n            }\r\n\r\n            if (this.Reads.compareInArr(i, minIndex) > 0) {\r\n                this.Writes.swap(i, minIndex);\r\n            }\r\n        }\r\n    }\r\n\r\n    runSort(low, high) {\r\n        this.SelectionSort(low, high)\r\n    }\r\n}","import {Sort} from \"./Sort\";\r\n\r\nexport class SlowSort extends Sort{\r\n    constructor(arrayVisualizer) {\r\n        super(arrayVisualizer);\r\n        this.sortName = \"SlowSort\"\r\n        this.warnLen = 120\r\n    }\r\n\r\n    SlowSort(i, j) {\r\n        if (i >= j) {\r\n            return;\r\n        }\r\n        let m = Math.floor((i + j) / 2);\r\n        this.SlowSort(i, m);\r\n        this.SlowSort(m + 1, j);\r\n        if (this.Reads.compareInArr(j, m) < 0) {\r\n            this.Writes.swap(j, m)\r\n        }\r\n        this.SlowSort(i, j - 1)\r\n    }\r\n\r\n    runSort(low, high) {\r\n        this.SlowSort(low, high)\r\n    }\r\n}","import {Sort} from \"./Sort\";\r\n\r\nexport class StoogeSort extends Sort{\r\n    constructor(arrayVisualizer) {\r\n        super(arrayVisualizer);\r\n        this.sortName = \"StoogeSort\"\r\n    }\r\n\r\n    StoogeSort(i, j) {\r\n        if (this.Reads.compareInArr(i, j) > 0) {\r\n            this.Writes.swap(i, j)\r\n        }\r\n        if (j - i > 1) {\r\n            let t = Math.trunc((j - i + 1) / 3)\r\n            this.StoogeSort(i, j - t)\r\n            this.StoogeSort(i + t, j)\r\n            this.StoogeSort(i, j - t)\r\n        }\r\n    }\r\n\r\n    runSort(low, high) {\r\n        this.StoogeSort(low, high)\r\n    }\r\n}","import {Sort} from \"./Sort\";\r\n\r\n/**\r\n * Default minimum size of a run.\r\n */\r\nconst DEFAULT_MIN_MERGE = 32\r\n\r\n/**\r\n * Minimum ordered subsequece required to do galloping.\r\n */\r\nconst DEFAULT_MIN_GALLOPING = 7\r\n\r\n/**\r\n * Default tmp storage length. Can increase depending on the size of the\r\n * smallest run to merge.\r\n */\r\nconst DEFAULT_TMP_STORAGE_LENGTH = 256\r\n\r\n/**\r\n * Pre-computed powers of 10 for efficient lexicographic comparison of\r\n * small integers.\r\n */\r\nconst POWERS_OF_TEN = [1e0, 1e1, 1e2, 1e3, 1e4, 1e5, 1e6, 1e7, 1e8, 1e9]\r\n\r\nlet results\r\n\r\n/**\r\n * Estimate the logarithm base 10 of a small integer.\r\n *\r\n * @param {number} x - The integer to estimate the logarithm of.\r\n * @return {number} - The estimated logarithm of the integer.\r\n */\r\nconst log10 = x => x < 1e5\r\n    ? x < 1e2\r\n        ? x < 1e1\r\n            ? 0\r\n            : 1\r\n        : x < 1e4\r\n            ? x < 1e3\r\n                ? 2\r\n                : 3\r\n            : 4\r\n    : x < 1e7\r\n        ? x < 1e6\r\n            ? 5\r\n            : 6\r\n        : x < 1e9\r\n            ? x < 1e8\r\n                ? 7\r\n                : 8\r\n            : 9\r\n\r\n/**\r\n * Default alphabetical comparison of items.\r\n *\r\n * @param {string|object|number} a - First element to compare.\r\n * @param {string|object|number} b - Second element to compare.\r\n * @return {number} - A positive number if a.toString() > b.toString(), a\r\n * negative number if .toString() < b.toString(), 0 otherwise.\r\n */\r\nfunction alphabeticalCompare(a, b) {\r\n    if (a === b) {\r\n        return 0\r\n    }\r\n\r\n    if (~~a === a && ~~b === b) {\r\n        if (a === 0 || b === 0) {\r\n            return a < b ? -1 : 1\r\n        }\r\n\r\n        if (a < 0 || b < 0) {\r\n            if (b >= 0) {\r\n                return -1\r\n            }\r\n\r\n            if (a >= 0) {\r\n                return 1\r\n            }\r\n\r\n            a = -a\r\n            b = -b\r\n        }\r\n\r\n        const al = log10(a)\r\n        const bl = log10(b)\r\n\r\n        let t = 0\r\n\r\n        if (al < bl) {\r\n            a *= POWERS_OF_TEN[bl - al - 1]\r\n            b /= 10\r\n            t = -1\r\n        } else if (al > bl) {\r\n            b *= POWERS_OF_TEN[al - bl - 1]\r\n            a /= 10\r\n            t = 1\r\n        }\r\n\r\n        if (a === b) {\r\n            return t\r\n        }\r\n\r\n        return a < b ? -1 : 1\r\n    }\r\n\r\n    const aStr = String(a)\r\n    const bStr = String(b)\r\n\r\n    if (aStr === bStr) {\r\n        return 0\r\n    }\r\n\r\n    return aStr < bStr ? -1 : 1\r\n}\r\n\r\n/**\r\n * Compute minimum run length for TimSort\r\n *\r\n * @param {number} n - The size of the array to sort.\r\n */\r\nfunction minRunLength(n) {\r\n    let r = 0\r\n\r\n    while (n >= DEFAULT_MIN_MERGE) {\r\n        r |= (n & 1)\r\n        n >>= 1\r\n    }\r\n\r\n    return n + r\r\n}\r\n\r\n/**\r\n * Counts the length of a monotonically ascending or strictly monotonically\r\n * descending sequence (run) starting at array[lo] in the range [lo, hi). If\r\n * the run is descending it is made ascending.\r\n *\r\n * @param {array} array - The array to reverse.\r\n * @param {number} lo - First element in the range (inclusive).\r\n * @param {number} hi - Last element in the range.\r\n * @param {function} compare - Item comparison function.\r\n * @return {number} - The length of the run.\r\n */\r\n\r\nexport class TimSort extends Sort {\r\n    constructor(arrayVisualizer) {\r\n        super(arrayVisualizer);\r\n\r\n        this.minGallop = DEFAULT_MIN_GALLOPING\r\n\r\n        this.tmpStorageLength = this.arrLength < 2 * DEFAULT_TMP_STORAGE_LENGTH\r\n            ? this.arrLength >>> 1\r\n            : DEFAULT_TMP_STORAGE_LENGTH\r\n\r\n        // this.tmp = new Array(this.tmpStorageLength)\r\n        this.tmp = this.Writes.createAuxArray(this.tmpStorageLength)\r\n\r\n        this.stackLength = this.arrLength < 120\r\n            ? 5\r\n            : this.arrLength < 1542\r\n                ? 10\r\n                : this.arrLength < 119151\r\n                    ? 19\r\n                    : 40\r\n\r\n        this.runStart = new Array(this.stackLength)\r\n        this.runLength = new Array(this.stackLength)\r\n\r\n        this.stackSize = 0\r\n        this.sortName = \"TimSort\"\r\n    }\r\n\r\n    makeAscendingRun(lo, hi) {\r\n        let runHi = lo + 1\r\n\r\n        if (runHi === hi) {\r\n            return 1\r\n        }\r\n\r\n        // Descending\r\n        // if (compare(array[runHi++], array[lo]) < 0) {\r\n        if (this.Reads.compareInArr(runHi++, lo)<0) {\r\n            // while (runHi < hi && compare(array[runHi], array[runHi - 1]) < 0) {\r\n            while (runHi < hi && this.Reads.compareInArr(runHi, runHi - 1)<0) {\r\n                runHi++\r\n            }\r\n\r\n            // this.reverseRun(array, lo, runHi)\r\n            this.reverseRun(lo, runHi)\r\n            // reverseRun(results, lo, runHi)\r\n            // Ascending\r\n        } else {\r\n            // while (runHi < hi && compare(array[runHi], array[runHi - 1]) >= 0) {\r\n            while (runHi < hi && this.Reads.compareInArr(runHi, runHi - 1)>=0) {\r\n                runHi++\r\n            }\r\n        }\r\n\r\n        return runHi - lo\r\n    }\r\n\r\n    /**\r\n     * Reverse an array in the range [lo, hi).\r\n     *\r\n     * @param {array} array - The array to reverse.\r\n     * @param {number} lo - First element in the range (inclusive).\r\n     * @param {number} hi - Last element in the range.\r\n     */\r\n\r\n\r\n    reverseRun(lo, hi) {\r\n        hi--\r\n\r\n        while (lo < hi) {\r\n            // const t = array[lo]\r\n            // array[lo++] = array[hi]\r\n            // array[hi--] = t\r\n            const t = this.Reads.get(lo)\r\n            this.Writes.write(lo++, this.Reads.get(hi))\r\n            this.Writes.write(hi--, t)\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Perform the binary sort of the array in the range [lo, hi) where start is\r\n     * the first element possibly out of order.\r\n     *\r\n     * @param {array} array - The array to sort.\r\n     * @param {number} lo - First element in the range (inclusive).\r\n     * @param {number} hi - Last element in the range.\r\n     * @param {number} start - First element possibly out of order.\r\n     * @param {} compare - Item comparison function.\r\n     */\r\n\r\n\r\n    binaryInsertionSort(lo, hi, start) {\r\n        if (start === lo) {\r\n            start++\r\n        }\r\n\r\n        for (; start < hi; start++) {\r\n            // const pivot = array[start]\r\n            const pivot = this.Reads.get(start)\r\n\r\n            // const pivotIndex = results[start]\r\n\r\n            // Ranges of the array where pivot belongs\r\n            let left = lo\r\n            let right = start\r\n\r\n            /*\r\n             *   pivot >= array[i] for i in [lo, left)\r\n             *   pivot <  array[i] for i in  in [right, start)\r\n             */\r\n            while (left < right) {\r\n                const mid = (left + right) >>> 1\r\n\r\n                // if (compare(pivot, array[mid]) < 0) {\r\n                if (pivot.getValue() < this.Reads.readValue(mid)) {\r\n                    right = mid\r\n                } else {\r\n                    left = mid + 1\r\n                }\r\n            }\r\n\r\n            /*\r\n             * Move elements right to make room for the pivot. If there are elements\r\n             * equal to pivot, left points to the first slot after them: this is also\r\n             * a reason for which TimSort is stable\r\n             */\r\n            let n = start - left\r\n            // Switch is just an optimization for small arrays\r\n            switch (n) {\r\n                case 3:\r\n                    // array[left + 3] = array[left + 2]\r\n                    this.Writes.write(left + 3, this.Reads.get(left + 2))\r\n                /* falls through */\r\n                case 2:\r\n                    // array[left + 2] = array[left + 1]\r\n                    this.Writes.write(left + 2, this.Reads.get(left + 1))\r\n                /* falls through */\r\n                case 1:\r\n                    // array[left + 1] = array[left]\r\n                    this.Writes.write(left + 1, this.Reads.get(left))\r\n                    break\r\n                default:\r\n                    while (n > 0) {\r\n                        // array[left + n] = array[left + n - 1]\r\n                        this.Writes.write(left + n, this.Reads.get(left + n - 1))\r\n                        n--\r\n                    }\r\n            }\r\n\r\n            // array[left] = pivot\r\n            this.Writes.write(left, pivot)\r\n            // results[left] = pivotIndex\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Find the position at which to insert a value in a sorted range. If the range\r\n     * contains elements equal to the value the leftmost element index is returned\r\n     * (for stability).\r\n     *\r\n     * @param {number} value - Value to insert.\r\n     * @param {array} array - The array in which to insert value.\r\n     * @param {number} start - First element in the range.\r\n     * @param {number} length - Length of the range.\r\n     * @param {number} hint - The index at which to begin the search.\r\n     * @param {function} compare - Item comparison function.\r\n     * @return {number} - The index where to insert value.\r\n     */\r\n\r\n\r\n    gallopLeft(value, isAux, start, length, hint) {\r\n        let lastOffset = 0\r\n        let maxOffset = 0\r\n        let offset = 1\r\n        if (!isAux) {\r\n            // if (compare(value, array[start + hint]) > 0) {\r\n            if (value > this.Reads.readValue(start + hint)) {\r\n                maxOffset = length - hint\r\n\r\n                while (\r\n                    offset < maxOffset\r\n                    // && compare(value, array[start + hint + offset]) > 0\r\n                    && value > this.Reads.readValue(start + hint + offset)\r\n                    ) {\r\n                    lastOffset = offset\r\n                    offset = (offset << 1) + 1\r\n\r\n                    if (offset <= 0) {\r\n                        offset = maxOffset\r\n                    }\r\n                }\r\n\r\n                if (offset > maxOffset) {\r\n                    offset = maxOffset\r\n                }\r\n\r\n                // Make offsets relative to start\r\n                lastOffset += hint\r\n                offset += hint\r\n\r\n                // value <= array[start + hint]\r\n            } else {\r\n                maxOffset = hint + 1\r\n                while (\r\n                    offset < maxOffset\r\n                    // && compare(value, array[start + hint - offset]) <= 0\r\n                    // && value <= this.Reads.readValue(start + hint + offset)\r\n                    && value <= this.Reads.readValue(start + hint - offset)\r\n                    ) {\r\n                    lastOffset = offset\r\n                    offset = (offset << 1) + 1\r\n\r\n                    if (offset <= 0) {\r\n                        offset = maxOffset\r\n                    }\r\n                }\r\n                if (offset > maxOffset) {\r\n                    offset = maxOffset\r\n                }\r\n\r\n                // Make offsets relative to start\r\n                const tmp = lastOffset\r\n                lastOffset = hint - offset\r\n                offset = hint - tmp\r\n            }\r\n\r\n            /*\r\n             * Now array[start+lastOffset] < value <= array[start+offset], so value\r\n             * belongs somewhere in the range (start + lastOffset, start + offset]. Do a\r\n             * binary search, with invariant array[start + lastOffset - 1] < value <=\r\n             * array[start + offset].\r\n             */\r\n            lastOffset++\r\n            while (lastOffset < offset) {\r\n                const m = lastOffset + ((offset - lastOffset) >>> 1)\r\n\r\n                // if (compare(value, array[start + m]) > 0) {\r\n                if (value > this.Reads.readValue(start + m)) {\r\n                    lastOffset = m + 1\r\n                } else {\r\n                    offset = m\r\n                }\r\n            }\r\n        } else {\r\n            // if (compare(value, array[start + hint]) > 0) {\r\n            if (value > this.Reads.auxReadValue(start + hint, this.tmp)) {\r\n                maxOffset = length - hint\r\n\r\n                while (\r\n                    offset < maxOffset\r\n                    // && compare(value, array[start + hint + offset]) > 0\r\n                    && value > this.Reads.auxReadValue(start + hint + offset, this.tmp)\r\n                    ) {\r\n                    lastOffset = offset\r\n                    offset = (offset << 1) + 1\r\n\r\n                    if (offset <= 0) {\r\n                        offset = maxOffset\r\n                    }\r\n                }\r\n\r\n                if (offset > maxOffset) {\r\n                    offset = maxOffset\r\n                }\r\n\r\n                // Make offsets relative to start\r\n                lastOffset += hint\r\n                offset += hint\r\n\r\n                // value <= array[start + hint]\r\n            } else {\r\n                maxOffset = hint + 1\r\n                while (\r\n                    offset < maxOffset\r\n                    // && compare(value, array[start + hint - offset]) <= 0\r\n                    // && value <= this.Reads.auxRead(start + hint + offset, this.tmp)\r\n                    && value <= this.Reads.auxReadValue(start + hint - offset, this.tmp)\r\n                    ) {\r\n                    lastOffset = offset\r\n                    offset = (offset << 1) + 1\r\n\r\n                    if (offset <= 0) {\r\n                        offset = maxOffset\r\n                    }\r\n                }\r\n                if (offset > maxOffset) {\r\n                    offset = maxOffset\r\n                }\r\n\r\n                // Make offsets relative to start\r\n                const tmp = lastOffset\r\n                lastOffset = hint - offset\r\n                offset = hint - tmp\r\n            }\r\n\r\n            /*\r\n             * Now array[start+lastOffset] < value <= array[start+offset], so value\r\n             * belongs somewhere in the range (start + lastOffset, start + offset]. Do a\r\n             * binary search, with invariant array[start + lastOffset - 1] < value <=\r\n             * array[start + offset].\r\n             */\r\n            lastOffset++\r\n            while (lastOffset < offset) {\r\n                const m = lastOffset + ((offset - lastOffset) >>> 1)\r\n\r\n                // if (compare(value, array[start + m]) > 0) {\r\n                if (value > this.Reads.auxReadValue(start + m, this.tmp)) {\r\n                    lastOffset = m + 1\r\n                } else {\r\n                    offset = m\r\n                }\r\n            }\r\n        }\r\n        return offset\r\n    }\r\n\r\n    /**\r\n     * Find the position at which to insert a value in a sorted range. If the range\r\n     * contains elements equal to the value the rightmost element index is returned\r\n     * (for stability).\r\n     *\r\n     * @param {number} value - Value to insert.\r\n     * @param {array} array - The array in which to insert value.\r\n     * @param {number} start - First element in the range.\r\n     * @param {number} length - Length of the range.\r\n     * @param {number} hint - The index at which to begin the search.\r\n     * @param {function} compare - Item comparison function.\r\n     * @return {number} - The index where to insert value.\r\n     */\r\n\r\n\r\n    gallopRight(value, isAux, start, length, hint) {\r\n        let lastOffset = 0\r\n        let maxOffset = 0\r\n        let offset = 1\r\n\r\n        if (!isAux) {\r\n            // if (compare(value, array[start + hint]) < 0) {\r\n            if (value < this.Reads.readValue(start + hint)) {\r\n                maxOffset = hint + 1\r\n\r\n                while (\r\n                    offset < maxOffset\r\n                    // && compare(value, array[start + hint - offset]) < 0\r\n                    && value < this.Reads.readValue(start + hint - offset)\r\n                    ) {\r\n                    lastOffset = offset\r\n                    offset = (offset << 1) + 1\r\n\r\n                    if (offset <= 0) {\r\n                        offset = maxOffset\r\n                    }\r\n                }\r\n\r\n                if (offset > maxOffset) {\r\n                    offset = maxOffset\r\n                }\r\n\r\n                // Make offsets relative to start\r\n                const tmp = lastOffset\r\n                lastOffset = hint - offset\r\n                offset = hint - tmp\r\n\r\n                // value >= array[start + hint]\r\n            } else {\r\n                maxOffset = length - hint\r\n\r\n                while (\r\n                    offset < maxOffset\r\n                    // && compare(value, array[start + hint + offset]) >= 0\r\n                    && value >= this.Reads.readValue(start + hint + offset)\r\n                    ) {\r\n                    lastOffset = offset\r\n                    offset = (offset << 1) + 1\r\n\r\n                    if (offset <= 0) {\r\n                        offset = maxOffset\r\n                    }\r\n                }\r\n\r\n                if (offset > maxOffset) {\r\n                    offset = maxOffset\r\n                }\r\n\r\n                // Make offsets relative to start\r\n                lastOffset += hint\r\n                offset += hint\r\n            }\r\n\r\n            /*\r\n             * Now array[start+lastOffset] < value <= array[start+offset], so value\r\n             * belongs somewhere in the range (start + lastOffset, start + offset]. Do a\r\n             * binary search, with invariant array[start + lastOffset - 1] < value <=\r\n             * array[start + offset].\r\n             */\r\n            lastOffset++\r\n\r\n            while (lastOffset < offset) {\r\n                const m = lastOffset + ((offset - lastOffset) >>> 1)\r\n\r\n                // if (compare(value, array[start + m]) < 0) {\r\n                if (value < this.Reads.readValue(start + m)) {\r\n                    offset = m\r\n                } else {\r\n                    lastOffset = m + 1\r\n                }\r\n            }\r\n\r\n        } else {\r\n            //AUX\r\n            // if (compare(value, array[start + hint]) < 0) {\r\n            if (value < this.Reads.auxReadValue(start + hint, this.tmp)) {\r\n                maxOffset = hint + 1\r\n\r\n                while (\r\n                    offset < maxOffset\r\n                    // && compare(value, array[start + hint - offset]) < 0\r\n                    && value < this.Reads.auxReadValue(start + hint - offset, this.tmp)\r\n                    ) {\r\n                    lastOffset = offset\r\n                    offset = (offset << 1) + 1\r\n\r\n                    if (offset <= 0) {\r\n                        offset = maxOffset\r\n                    }\r\n                }\r\n\r\n                if (offset > maxOffset) {\r\n                    offset = maxOffset\r\n                }\r\n\r\n                // Make offsets relative to start\r\n                const tmp = lastOffset\r\n                lastOffset = hint - offset\r\n                offset = hint - tmp\r\n\r\n                // value >= array[start + hint]\r\n            } else {\r\n                maxOffset = length - hint\r\n\r\n                while (\r\n                    offset < maxOffset\r\n                    // && compare(value, array[start + hint + offset]) >= 0\r\n                    && value >= this.Reads.auxReadValue(start + hint + offset, this.tmp)\r\n                    ) {\r\n                    lastOffset = offset\r\n                    offset = (offset << 1) + 1\r\n\r\n                    if (offset <= 0) {\r\n                        offset = maxOffset\r\n                    }\r\n                }\r\n\r\n                if (offset > maxOffset) {\r\n                    offset = maxOffset\r\n                }\r\n\r\n                // Make offsets relative to start\r\n                lastOffset += hint\r\n                offset += hint\r\n            }\r\n\r\n            /*\r\n             * Now array[start+lastOffset] < value <= array[start+offset], so value\r\n             * belongs somewhere in the range (start + lastOffset, start + offset]. Do a\r\n             * binary search, with invariant array[start + lastOffset - 1] < value <=\r\n             * array[start + offset].\r\n             */\r\n            lastOffset++\r\n\r\n            while (lastOffset < offset) {\r\n                const m = lastOffset + ((offset - lastOffset) >>> 1)\r\n\r\n                // if (compare(value, array[start + m]) < 0) {\r\n                if (value < this.Reads.auxReadValue(start + m, this.tmp)) {\r\n                    offset = m\r\n                } else {\r\n                    lastOffset = m + 1\r\n                }\r\n            }\r\n        }\r\n\r\n        return offset\r\n    }\r\n\r\n\r\n    /**\r\n     * Push a new run on TimSort's stack.\r\n     *\r\n     * @param {number} runStart - Start index of the run in the original array.\r\n     * @param {number} runLength - Length of the run;\r\n     */\r\n    pushRun(runStart, runLength) {\r\n        this.runStart[this.stackSize] = runStart\r\n        this.runLength[this.stackSize] = runLength\r\n        this.stackSize += 1\r\n    }\r\n\r\n    /**\r\n     * Merge runs on TimSort's stack so that the following holds for all i:\r\n     * 1) runLength[i - 3] > runLength[i - 2] + runLength[i - 1]\r\n     * 2) runLength[i - 2] > runLength[i - 1]\r\n     */\r\n    mergeRuns() {\r\n        while (this.stackSize > 1) {\r\n            let n = this.stackSize - 2\r\n\r\n            if (\r\n                (\r\n                    n >= 1\r\n                    && this.runLength[n - 1] <= this.runLength[n] + this.runLength[n + 1]\r\n                )\r\n                || (\r\n                    n >= 2\r\n                    && this.runLength[n - 2] <= this.runLength[n] + this.runLength[n - 1]\r\n                )\r\n            ) {\r\n                if (this.runLength[n - 1] < this.runLength[n + 1]) {\r\n                    n--\r\n                }\r\n            } else if (this.runLength[n] > this.runLength[n + 1]) {\r\n                break\r\n            }\r\n            this.mergeAt(n)\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Merge all runs on TimSort's stack until only one remains.\r\n     */\r\n    forceMergeRuns() {\r\n        while (this.stackSize > 1) {\r\n            let n = this.stackSize - 2\r\n\r\n            if (n > 0 && this.runLength[n - 1] < this.runLength[n + 1]) {\r\n                n--\r\n            }\r\n\r\n            this.mergeAt(n)\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Merge the runs on the stack at positions i and i+1. Must be always be called\r\n     * with i=stackSize-2 or i=stackSize-3 (that is, we merge on top of the stack).\r\n     *\r\n     * @param {number} i - Index of the run to merge in TimSort's stack.\r\n     */\r\n    mergeAt(i) {\r\n        let start1 = this.runStart[i]\r\n        let length1 = this.runLength[i]\r\n        const start2 = this.runStart[i + 1]\r\n        let length2 = this.runLength[i + 1]\r\n\r\n        this.runLength[i] = length1 + length2\r\n\r\n        if (i === this.stackSize - 3) {\r\n            this.runStart[i + 1] = this.runStart[i + 2]\r\n            this.runLength[i + 1] = this.runLength[i + 2]\r\n        }\r\n\r\n        this.stackSize--\r\n\r\n        /*\r\n         * Find where the first element in the second run goes in run1. Previous\r\n         * elements in run1 are already in place\r\n         */\r\n        // const k = gallopRight(array[start2], array, start1, length1, 0, compare)\r\n        const k = this.gallopRight(this.Reads.readValue(start2), false, start1, length1, 0)\r\n        start1 += k\r\n        length1 -= k\r\n\r\n        if (length1 === 0) {\r\n            return\r\n        }\r\n\r\n        /*\r\n         * Find where the last element in the first run goes in run2. Next elements\r\n         * in run2 are already in place\r\n         */\r\n        // length2 = gallopLeft(\r\n        //     array[start1 + length1 - 1],\r\n        //     array,\r\n        //     start2,\r\n        //     length2,\r\n        //     length2 - 1,\r\n        //     compare\r\n        // )\r\n        length2 = this.gallopLeft(\r\n            // array[start1 + length1 - 1],\r\n            this.Reads.readValue(start1 + length1 - 1),\r\n            false,\r\n            start2,\r\n            length2,\r\n            length2 - 1,\r\n        )\r\n\r\n        if (length2 === 0) {\r\n            return\r\n        }\r\n\r\n        /*\r\n         * Merge remaining runs. A tmp array with length = min(length1, length2) is\r\n         * used\r\n         */\r\n        if (length1 <= length2) {\r\n            this.mergeLow(start1, length1, start2, length2)\r\n        } else {\r\n            this.mergeHigh(start1, length1, start2, length2)\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Merge two adjacent runs in a stable way. The runs must be such that the\r\n     * first element of run1 is bigger than the first element in run2 and the\r\n     * last element of run1 is greater than all the elements in run2.\r\n     * The method should be called when run1.length <= run2.length as it uses\r\n     * TimSort temporary array to store run1. Use mergeHigh if run1.length >\r\n     * run2.length.\r\n     *\r\n     * @param {number} start1 - First element in run1.\r\n     * @param {number} length1 - Length of run1.\r\n     * @param {number} start2 - First element in run2.\r\n     * @param {number} length2 - Length of run2.\r\n     */\r\n    mergeLow(start1, length1, start2, length2) {\r\n        // const {compare} = this\r\n        // const {array} = this\r\n        // const {tmp} = this\r\n        // const {tmpIndex} = this\r\n        // const {compare} = this\r\n        // const {array} = this\r\n        // const {tmp} = this\r\n        // const {tmpIndex} = this\r\n        let i = 0\r\n\r\n        for (i = 0; i < length1; i++) {\r\n            // tmp[i] = array[start1 + i]\r\n            this.Writes.auxWrite(i, this.Reads.get(start1 + i), this.tmp)\r\n        }\r\n\r\n        let cursor1 = 0\r\n        let cursor2 = start2\r\n        let dest = start1\r\n\r\n\r\n        // array[dest] = array[cursor2]\r\n        this.Writes.write(dest, this.Reads.get(cursor2))\r\n\r\n\r\n        dest++\r\n        cursor2++\r\n\r\n        if (--length2 === 0) {\r\n            for (i = 0; i < length1; i++) {\r\n                // array[dest + i] = tmp[cursor1 + i]\r\n                this.Writes.write(dest + i, this.Reads.auxReadValue(cursor1 + i, this.tmp))\r\n            }\r\n            return\r\n        }\r\n\r\n        if (length1 === 1) {\r\n            for (i = 0; i < length2; i++) {\r\n                // array[dest + i] = array[cursor2 + i]\r\n\r\n                this.Writes.write(dest + i, this.Reads.get(cursor2 + i))\r\n            }\r\n            // array[dest + length2] = tmp[cursor1]\r\n            this.Writes.write(dest + length2, this.Reads.auxReadValue(cursor1, this.tmp))\r\n            return\r\n        }\r\n\r\n        let {minGallop} = this\r\n\r\n        while (true) {\r\n            let count1 = 0\r\n            let count2 = 0\r\n            let exit = false\r\n\r\n            do {\r\n                // if (compare(array[cursor2], tmp[cursor1]) < 0) {\r\n                if (this.Reads.readValue(cursor2) < this.Reads.auxReadValue(cursor1, this.tmp)) {\r\n                    // array[dest] = array[cursor2]\r\n                    this.Writes.write(dest, this.Reads.get(cursor2))\r\n                    dest++\r\n                    cursor2++\r\n                    count2++\r\n                    count1 = 0\r\n\r\n                    if (--length2 === 0) {\r\n                        exit = true\r\n                        break\r\n                    }\r\n                } else {\r\n                    // array[dest] = tmp[cursor1]\r\n                    this.Writes.write(dest, this.Reads.auxGet(cursor1, this.tmp))\r\n\r\n                    dest++\r\n                    cursor1++\r\n                    count1++\r\n                    count2 = 0\r\n                    if (--length1 === 1) {\r\n                        exit = true\r\n                        break\r\n                    }\r\n                }\r\n            } while ((count1 | count2) < minGallop)\r\n\r\n            if (exit) {\r\n                break\r\n            }\r\n\r\n            do {\r\n                // count1 = gallopRight(array[cursor2], tmp, cursor1, length1, 0, compare)\r\n                count1 = this.gallopRight(this.Reads.readValue(cursor2), true, cursor1, length1, 0)\r\n\r\n                if (count1 !== 0) {\r\n                    for (i = 0; i < count1; i++) {\r\n                        // array[dest + i] = tmp[cursor1 + i]\r\n                        // results[dest + i] = tmpIndex[cursor1 + i]\r\n                        this.Writes.write(dest + i, this.Reads.auxGet(cursor1 + i, this.tmp))\r\n                    }\r\n\r\n                    dest += count1\r\n                    cursor1 += count1\r\n                    length1 -= count1\r\n                    if (length1 <= 1) {\r\n                        exit = true\r\n                        break\r\n                    }\r\n                }\r\n\r\n                // array[dest] = array[cursor2]\r\n                // results[dest] = results[cursor2]\r\n                this.Writes.write(dest, this.Reads.get(cursor2))\r\n\r\n                dest++\r\n                cursor2++\r\n\r\n                if (--length2 === 0) {\r\n                    exit = true\r\n                    break\r\n                }\r\n\r\n                // count2 = this.gallopLeft(tmp[cursor1], array, cursor2, length2, 0, compare)\r\n                count2 = this.gallopLeft(this.Reads.auxReadValue(cursor1, this.tmp), false, cursor2, length2, 0)\r\n\r\n                if (count2 !== 0) {\r\n                    for (i = 0; i < count2; i++) {\r\n                        // array[dest + i] = array[cursor2 + i]\r\n                        // results[dest + i] = results[cursor2 + i]\r\n                        this.Writes.write(dest + i, this.Reads.get(cursor2 + i))\r\n                    }\r\n\r\n                    dest += count2\r\n                    cursor2 += count2\r\n                    length2 -= count2\r\n\r\n                    if (length2 === 0) {\r\n                        exit = true\r\n                        break\r\n                    }\r\n                }\r\n                // array[dest] = tmp[cursor1]\r\n                // results[dest] = tmpIndex[cursor1]\r\n\r\n                this.Writes.write(dest, this.Reads.auxGet(cursor1, this.tmp))\r\n\r\n                dest++\r\n                cursor1++\r\n\r\n                if (--length1 === 1) {\r\n                    exit = true\r\n                    break\r\n                }\r\n\r\n                minGallop--\r\n            } while (\r\n                count1 >= DEFAULT_MIN_GALLOPING\r\n                || count2 >= DEFAULT_MIN_GALLOPING\r\n                )\r\n\r\n            if (exit) {\r\n                break\r\n            }\r\n\r\n            if (minGallop < 0) {\r\n                minGallop = 0\r\n            }\r\n\r\n            minGallop += 2\r\n        }\r\n\r\n        this.minGallop = minGallop\r\n\r\n        if (minGallop < 1) {\r\n            this.minGallop = 1\r\n        }\r\n\r\n        if (length1 === 1) {\r\n            for (i = 0; i < length2; i++) {\r\n                // array[dest + i] = array[cursor2 + i]\r\n                // results[dest + i] = results[cursor2 + i]\r\n                this.Writes.write(dest + i, this.Reads.get(cursor2 + i))\r\n            }\r\n            // array[dest + length2] = tmp[cursor1]\r\n            // results[dest + length2] = tmpIndex[cursor1]\r\n            this.Writes.write(dest + length2, this.Reads.auxGet(cursor1, this.tmp))\r\n        } else if (length1 === 0) {\r\n            throw new Error('mergeLow preconditions were not respected')\r\n        } else {\r\n            for (i = 0; i < length1; i++) {\r\n                // array[dest + i] = tmp[cursor1 + i]\r\n                // results[dest + i] = tmpIndex[cursor1 + i]\r\n                this.Writes.write(dest + i, this.Reads.auxGet(cursor1 + i, this.tmp))\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Merge two adjacent runs in a stable way. The runs must be such that the\r\n     * first element of run1 is bigger than the first element in run2 and the\r\n     * last element of run1 is greater than all the elements in run2.\r\n     * The method should be called when run1.length > run2.length as it uses\r\n     * TimSort temporary array to store run2. Use mergeLow if run1.length <=\r\n     * run2.length.\r\n     *\r\n     * @param {number} start1 - First element in run1.\r\n     * @param {number} length1 - Length of run1.\r\n     * @param {number} start2 - First element in run2.\r\n     * @param {number} length2 - Length of run2.\r\n     */\r\n    mergeHigh(start1, length1, start2, length2) {\r\n        // const {compare} = this\r\n        // const {array} = this\r\n        // const {tmp} = this\r\n        // const {tmpIndex} = this\r\n        let i = 0\r\n\r\n        for (i = 0; i < length2; i++) {\r\n            // tmp[i] = array[start2 + i]\r\n            this.Writes.auxWrite(i, this.Reads.get(start2 + i), this.tmp)\r\n        }\r\n\r\n        let cursor1 = start1 + length1 - 1\r\n        let cursor2 = length2 - 1\r\n        let dest = start2 + length2 - 1\r\n        let customCursor = 0\r\n        let customDest = 0\r\n\r\n        // array[dest] = array[cursor1]\r\n        this.Writes.write(dest, this.Reads.get(cursor1))\r\n\r\n        dest--\r\n        cursor1--\r\n\r\n        if (--length1 === 0) {\r\n            customCursor = dest - (length2 - 1)\r\n\r\n            for (i = 0; i < length2; i++) {\r\n                // array[customCursor + i] = tmp[i]\r\n                this.Writes.write(customCursor + i, this.Reads.auxGet(i, this.tmp))\r\n            }\r\n\r\n            return\r\n        }\r\n\r\n        if (length2 === 1) {\r\n            dest -= length1\r\n            cursor1 -= length1\r\n            customDest = dest + 1\r\n            customCursor = cursor1 + 1\r\n\r\n            for (i = length1 - 1; i >= 0; i--) {\r\n                // array[customDest + i] = array[customCursor + i]\r\n                this.Writes.write(customDest + i, this.Reads.get(customCursor + i))\r\n            }\r\n\r\n            // array[dest] = tmp[cursor2]\r\n            this.Writes.write(dest, this.Reads.auxGet(cursor2, this.tmp))\r\n            return\r\n        }\r\n\r\n        let {minGallop} = this\r\n\r\n        while (true) {\r\n            let count1 = 0\r\n            let count2 = 0\r\n            let exit = false\r\n\r\n            do {\r\n                // if (compare(tmp[cursor2], array[cursor1]) < 0) {\r\n                if (this.Reads.auxReadValue(cursor2, this.tmp) < this.Reads.readValue(cursor1)) {\r\n                    // array[dest] = array[cursor1]\r\n                    this.Writes.write(dest, this.Reads.get(cursor1))\r\n                    dest--\r\n                    cursor1--\r\n                    count1++\r\n                    count2 = 0\r\n                    if (--length1 === 0) {\r\n                        exit = true\r\n                        break\r\n                    }\r\n                } else {\r\n                    // array[dest] = tmp[cursor2]\r\n                    this.Writes.write(dest, this.Reads.auxGet(cursor2, this.tmp))\r\n                    dest--\r\n                    cursor2--\r\n                    count2++\r\n                    count1 = 0\r\n                    if (--length2 === 1) {\r\n                        exit = true\r\n                        break\r\n                    }\r\n                }\r\n            } while ((count1 | count2) < minGallop)\r\n\r\n            if (exit) {\r\n                break\r\n            }\r\n\r\n            do {\r\n                // count1 = length1 - gallopRight(\r\n                //     tmp[cursor2],\r\n                //     array,\r\n                //     start1,\r\n                //     length1,\r\n                //     length1 - 1,\r\n                //     compare\r\n                // )\r\n                count1 = length1 - this.gallopRight(\r\n                    this.Reads.auxReadValue(cursor2, this.tmp),\r\n                    false,\r\n                    start1,\r\n                    length1,\r\n                    length1 - 1\r\n                )\r\n\r\n                if (count1 !== 0) {\r\n                    dest -= count1\r\n                    cursor1 -= count1\r\n                    length1 -= count1\r\n                    customDest = dest + 1\r\n                    customCursor = cursor1 + 1\r\n\r\n                    for (i = count1 - 1; i >= 0; i--) {\r\n                        // array[customDest + i] = array[customCursor + i]\r\n                        this.Writes.write(customDest + i, this.Reads.get(customCursor + i))\r\n                    }\r\n\r\n                    if (length1 === 0) {\r\n                        exit = true\r\n                        break\r\n                    }\r\n                }\r\n\r\n                // array[dest] = tmp[cursor2]\r\n                this.Writes.write(dest, this.Reads.auxGet(cursor2, this.tmp))\r\n\r\n                dest--\r\n                cursor2--\r\n\r\n                if (--length2 === 1) {\r\n                    exit = true\r\n                    break\r\n                }\r\n\r\n                // count2 = length2 - gallopLeft(\r\n                //     array[cursor1],\r\n                //     tmp,\r\n                //     0,\r\n                //     length2,\r\n                //     length2 - 1,\r\n                //     compare\r\n                // )\r\n\r\n                count2 = length2 - this.gallopLeft(\r\n                    this.Reads.readValue(cursor1),\r\n                    true,\r\n                    0,\r\n                    length2,\r\n                    length2 - 1\r\n                )\r\n\r\n                if (count2 !== 0) {\r\n                    dest -= count2\r\n                    cursor2 -= count2\r\n                    length2 -= count2\r\n                    customDest = dest + 1\r\n                    customCursor = cursor2 + 1\r\n\r\n                    for (i = 0; i < count2; i++) {\r\n                        // array[customDest + i] = tmp[customCursor + i]\r\n                        this.Writes.write(customDest + i, this.Reads.auxGet(customCursor + i, this.tmp))\r\n                    }\r\n\r\n                    if (length2 <= 1) {\r\n                        exit = true\r\n                        break\r\n                    }\r\n                }\r\n\r\n                // array[dest] = array[cursor1]\r\n                this.Writes.write(dest, this.Reads.get(cursor1))\r\n\r\n                dest--\r\n                cursor1--\r\n\r\n                if (--length1 === 0) {\r\n                    exit = true\r\n                    break\r\n                }\r\n\r\n                minGallop--\r\n            } while (\r\n                count1 >= DEFAULT_MIN_GALLOPING\r\n                || count2 >= DEFAULT_MIN_GALLOPING\r\n                )\r\n\r\n            if (exit) {\r\n                break\r\n            }\r\n\r\n            if (minGallop < 0) {\r\n                minGallop = 0\r\n            }\r\n\r\n            minGallop += 2\r\n        }\r\n\r\n        this.minGallop = minGallop\r\n\r\n        if (minGallop < 1) {\r\n            this.minGallop = 1\r\n        }\r\n\r\n        if (length2 === 1) {\r\n            dest -= length1\r\n            cursor1 -= length1\r\n            customDest = dest + 1\r\n            customCursor = cursor1 + 1\r\n\r\n            for (i = length1 - 1; i >= 0; i--) {\r\n                // array[customDest + i] = array[customCursor + i]\r\n                this.Writes.write(customDest + i, this.Reads.get(customCursor + i))\r\n            }\r\n\r\n            // array[dest] = tmp[cursor2]\r\n            // results[dest] = tmpIndex[cursor2]\r\n\r\n            this.Writes.write(dest, this.Reads.auxGet(cursor2, this.tmp))\r\n\r\n\r\n        } else if (length2 === 0) {\r\n            throw new Error('mergeHigh preconditions were not respected')\r\n        } else {\r\n            customCursor = dest - (length2 - 1)\r\n            for (i = 0; i < length2; i++) {\r\n                // array[customCursor + i] = tmp[i]\r\n                this.Writes.write(customCursor + i, this.Reads.auxGet(i, this.tmp))\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    /**\r\n     * Sort an array in the range [lo, hi) using TimSort.\r\n     *\r\n     * @param {array} array - The array to sort.\r\n     * @param {function=} compare - Item comparison function. Default is\r\n     *     alphabetical\r\n     * @param {number} lo - First element in the range (inclusive).\r\n     * @param {number} hi - Last element in the range.\r\n     *     comparator.\r\n     */\r\n    runSort(low, high) {\r\n        this.sort(low, high+1)\r\n    }\r\n\r\n    sort(lo, hi) {\r\n\r\n        let i = 0\r\n\r\n        let remaining = hi - lo\r\n\r\n        // The array is already sorted\r\n        if (remaining < 2) {\r\n            return results\r\n        }\r\n\r\n        let runLength = 0\r\n        // On small arrays binary sort can be used directly\r\n        if (remaining < DEFAULT_MIN_MERGE) {\r\n            runLength = this.makeAscendingRun(lo, hi)\r\n            this.binaryInsertionSort(lo, hi, lo + runLength)\r\n        }\r\n\r\n\r\n        const minRun = minRunLength(remaining)\r\n\r\n        do {\r\n            runLength = this.makeAscendingRun(lo, hi)\r\n            if (runLength < minRun) {\r\n                let force = remaining\r\n                if (force > minRun) {\r\n                    force = minRun\r\n                }\r\n\r\n                this.binaryInsertionSort(lo, lo + force, lo + runLength)\r\n                runLength = force\r\n            }\r\n            // Push new run and merge if necessary\r\n            this.pushRun(lo, runLength)\r\n            this.mergeRuns()\r\n\r\n            // Go find next run\r\n            remaining -= runLength\r\n            lo += runLength\r\n        } while (remaining !== 0)\r\n\r\n        // Force merging of remaining runs\r\n        this.forceMergeRuns()\r\n        this.Writes.removeAuxArray(this.tmp)\r\n    }\r\n}","import React from \"react\";\r\nimport {objLength} from \"../utils/utils\";\r\nimport styles from \"./ArrayWindow.module.scss\";\r\n\r\nexport class ArrayWindow extends React.PureComponent {\r\n    array\r\n    mainArray\r\n    height\r\n    visualProps\r\n    borderEnabled\r\n    visualStyle\r\n    arrayLen\r\n    sizeStyle\r\n    tmp\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.array = props.array\r\n        this.mainArray = props.mainArray\r\n        this.height = props.height\r\n        this.visualProps = props.visualProps\r\n        this.borderEnabled = this.visualProps.barsStroke\r\n        this.visualStyle = this.visualProps.style\r\n        this.arrayLen = objLength(this.array)\r\n        this.sizeStyle = {width: \"100%\", height: this.height + \"%\"};\r\n        this.state = {\r\n            renderedArray: this.renderArray()\r\n        }\r\n    }\r\n    componentDidMount() {\r\n        setInterval(this.updateState.bind(this), 16)\r\n    }\r\n    updateState(){\r\n        this.setState({\r\n            renderedArray: this.renderArray()\r\n        })\r\n    }\r\n    componentWillReceiveProps(nextProps, nextContext){\r\n        this.array = nextProps.array\r\n        this.mainArray = nextProps.mainArray\r\n        this.height = nextProps.height\r\n        this.visualProps = nextProps.visualProps\r\n        this.borderEnabled = this.visualProps.barsStroke\r\n        this.visualStyle = this.visualProps.style\r\n        this.sizeStyle = {width: \"100%\", height: this.height + \"%\"};\r\n        let len = objLength(this.array)\r\n        if(len !== this.arrayLen){\r\n            this.arrayLen = len\r\n            this.updateState()\r\n        }\r\n\r\n\r\n    }\r\n\r\n    renderArray() {\r\n        let tmp = []\r\n        if (this.visualStyle === \"bars\") {\r\n            let border = this.borderEnabled ? {} : {border: \"none\"}\r\n            for (let i = 0; i < this.arrayLen; ++i) {\r\n                let styleSheet = {\r\n                    height: this.array[i].getValue() / this.mainArray.length * 100 + \"%\",\r\n                    backgroundColor: \"rgb(\" + this.array[i].getColorForRender() + \")\",\r\n                    ...border\r\n                }\r\n                tmp.push(<div key={i} style={styleSheet} className={styles.bar}/>);\r\n            }\r\n            let styleSheet = {\r\n                height: \"0%\",\r\n                backgroundColor: \"rgb(255,255,255)\",\r\n            }\r\n            for (let i = this.arrayLen; i < this.mainArray.length; ++i) {\r\n                tmp.push(<div key={i} style={styleSheet} className={styles.bar}/>);\r\n            }\r\n        } else if (this.visualStyle === \"dots\") {\r\n            for (let i = 0; i < this.arrayLen; ++i) {\r\n                let value = this.array[i].getValue()\r\n                let height = (value === -1) ? {height: 0} : {}\r\n                let styleSheet = {\r\n                    bottom: \"calc(\" + value / this.mainArray.length * 100 + \"% - 0.25rem)\",\r\n                    backgroundColor: \"rgb(\" + this.array[i].getColorForRender() + \")\",\r\n                    ...height\r\n                }\r\n                tmp.push(<div className={styles.dotContainer}>\r\n                    <div key={i} style={styleSheet} className={styles.dot}/>\r\n                </div>);\r\n            }\r\n            let styleSheet = {\r\n                bottom: 0,\r\n                backgroundColor: \"rgb(0, 0, 0)\",\r\n            }\r\n            for (let i = this.arrayLen; i < this.mainArray.length; ++i) {\r\n                tmp.push(<div className={styles.dotContainer}>\r\n                    <div key={i} style={styleSheet} className={styles.dot}/>\r\n                </div>);\r\n            }\r\n        }\r\n        return tmp\r\n    }\r\n\r\n    render() {\r\n        if (this.arrayLen === 0) {\r\n            return <div style={this.sizeStyle}/>\r\n        }else{\r\n            return <div style={this.sizeStyle}>\r\n                <div className={styles.arrayContainer}>\r\n                    {this.state.renderedArray}\r\n                </div>\r\n            </div>\r\n        }\r\n    }\r\n}","import React from 'react';\r\nimport styles from \"./Stats.module.scss\";\r\n\r\nexport function Stats(props){\r\n    return(\r\n        <div className={styles.statsContainer}>\r\n            <div><b>Sort: {props.sortName}</b></div>\r\n            <div>Length: {props.arrLength}</div>\r\n            <div>Comparisons: {props.comparisons}</div>\r\n            <div>Writes: {props.writes}</div>\r\n        </div>\r\n    )\r\n}","export let initFunctions = {\r\n    linear: function (x, length) {\r\n        return x;\r\n    },\r\n    // reverse: function (x, length) {\r\n    //     return length - x;\r\n    // },\r\n    // pipeOrgan: function (x, length) {\r\n    //     if (x < length / 2) {\r\n    //         return 2 * x;\r\n    //     } else {\r\n    //         return 2 * (length - x) - 1;\r\n    //     }\r\n    // },\r\n    // inversedPipeOrgan: function (x, length){\r\n    //     if (x < length / 2) {\r\n    //         return (length - 2*x) - 1;\r\n    //     } else {\r\n    //         return x*2-length;\r\n    //     }\r\n    // },\r\n    manySimular: function (x, length){\r\n        const GAP_FACTOR = 5\r\n        let divider = Math.trunc(length/GAP_FACTOR)\r\n        return Math.trunc(x/divider)*divider\r\n    }\r\n}","import {randomInt} from \"./utils\";\r\nimport {HeapSort} from \"../Sorts/HeapSort\";\r\n\r\nexport let shuffles = {\r\n    FullShuffle: function (arrayVisualizer) {\r\n        let len = arrayVisualizer.getArrLength()\r\n        for (let i = 0; i < len; ++i) {\r\n            let randomIndex = randomInt(i, len)\r\n            arrayVisualizer.getWrites().swapWithDelay(i, randomIndex, arrayVisualizer.getMainArray(), true, arrayVisualizer.getDelays().getDelayInc()/5, true)\r\n        }\r\n        // return instructions\r\n    },\r\n\r\n    AlmostSorted: function (arrayVisualizer) {\r\n        let len = arrayVisualizer.getArrLength()\r\n        const AMOUNT = 0.1\r\n        for (let i = 0; i < len * AMOUNT; ++i) {\r\n            let randomIndexA = randomInt(i, len)\r\n            let randomIndexB = randomInt(i, len)\r\n            arrayVisualizer.getWrites().swapWithDelay(randomIndexA, randomIndexB, arrayVisualizer.getMainArray(), true, arrayVisualizer.getDelays().getDelayInc()/5, true)\r\n        }\r\n    },\r\n    Reverse: function (arrayVisualizer){\r\n        let len = arrayVisualizer.getArrLength()\r\n        for (let i = 0; i < Math.trunc(len/2); ++i){\r\n            arrayVisualizer.getWrites().swapWithDelay(i, len-i-1, arrayVisualizer.getMainArray(), true, arrayVisualizer.getDelays().getDelayInc()/5, true)\r\n        }\r\n    },\r\n    BlockShuffle: function (arrayVisualizer) {\r\n        const GAP_FACTOR = 5\r\n        let len = arrayVisualizer.getArrLength()\r\n        let gap = len/GAP_FACTOR\r\n        for (let i = 0; i < GAP_FACTOR-1; ++i) {\r\n            let factor = randomInt(i+1, GAP_FACTOR)\r\n            for(let j = 0; j < gap; ++j){\r\n                arrayVisualizer.getWrites().swapWithDelay(j+i*gap, j+factor*gap, arrayVisualizer.getMainArray(), true, arrayVisualizer.getDelays().getDelayInc()/5, true)\r\n            }\r\n        }\r\n    },\r\n    PipeOrgan: function (arrayVisualizer){\r\n        let len = arrayVisualizer.getArrLength()\r\n        let Reads = arrayVisualizer.getReads()\r\n        let temp = new Array(len);\r\n        for(let i = 0, j = 0; i < len; i+=2){\r\n            temp[j++] = Reads.get(i, arrayVisualizer.getMainArray())\r\n        }\r\n        for(let i = 1, j = len; i < len ;i+=2) {\r\n            temp[--j] = Reads.get(i, arrayVisualizer.getMainArray())\r\n        }\r\n        for(let i = 0; i < len; i++){\r\n            arrayVisualizer.getWrites().writeWithDelay(i, temp[i], arrayVisualizer.getMainArray(), true, arrayVisualizer.getDelays().getDelayInc()/5, true)\r\n        }\r\n    },\r\n    InversedPipeOrgan: function (arrayVisualizer){\r\n        let len = arrayVisualizer.getArrLength()\r\n        let Reads = arrayVisualizer.getReads()\r\n        let temp = new Array(len);\r\n        for(let i = 0, j = 0; i < len; i+=2){\r\n            temp[j++] = Reads.get(len-i-1, arrayVisualizer.getMainArray())\r\n        }\r\n        for(let i = 1, j = len; i < len ;i+=2) {\r\n            temp[--j] = Reads.get(len-i-1, arrayVisualizer.getMainArray())\r\n        }\r\n        for(let i = 0; i < len; i++){\r\n            arrayVisualizer.getWrites().writeWithDelay(i, temp[i], arrayVisualizer.getMainArray(), true, arrayVisualizer.getDelays().getDelayInc()/5, true)\r\n        }\r\n    },\r\n    Heap: function (arrayVisualizer){\r\n        let n = arrayVisualizer.getArrLength()\r\n        arrayVisualizer.initPseudoArray()\r\n        let heapSort = new HeapSort(arrayVisualizer)\r\n        for (let i = Math.trunc(n / 2) - 1; i >= 0; i--) {\r\n            heapSort.heapify(n, i);\r\n        }\r\n    },\r\n    QuickSortKiller: function (arrayVisualizer){\r\n        let len = arrayVisualizer.getArrLength()\r\n        for(let j = len-len%2-2, i = j-1; i >= 0; i-=2, j--) {\r\n            arrayVisualizer.getWrites().swapWithDelay(i, j, arrayVisualizer.getMainArray(), true, arrayVisualizer.getDelays().getDelayInc() / 5, true)\r\n        }\r\n    }\r\n}","import React from 'react';\r\nimport styles from \"./Controls.module.scss\";\r\nimport {initFunctions} from \"../utils/initFunctions\";\r\nimport {shuffles} from \"../utils/shuffles\";\r\n\r\n\r\nexport class Controls extends React.PureComponent {\r\n    isControlShow\r\n    arrayVisualizer\r\n    sorts\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.isControlShow = true;\r\n        this.arrayVisualizer = props.arrayVisualizer\r\n        this.sorts = props.sorts\r\n        this.arrayVisualizer.updateArrLength(this.arrayVisualizer.DEFAULT_ARR_LEN)\r\n        // this.arrayVisualizer.initArray(initFunctions.linear)\r\n    }\r\n\r\n    updateArrLength() {\r\n        let slider = document.getElementById(styles.slider)\r\n\r\n        if (slider !== null) {\r\n            let len = slider.value\r\n            this.arrayVisualizer.updateArrLength(len)\r\n        }\r\n\r\n    }\r\n\r\n    toggleControlShow() {\r\n        // console.log(styles.controls)\r\n        let controlsContainer = document.getElementById(styles.controlsContainer)\r\n        let controls = document.getElementById(styles.controls)\r\n        let btn = document.getElementById(styles.showToggleBtn)\r\n        if (this.isControlShow) {\r\n            controls.style.display = \"none\"\r\n            controlsContainer.style.width = \"0\"\r\n            btn.innerHTML = \"&gt;&gt;\";\r\n        } else {\r\n            controls.style.display = \"block\"\r\n            controlsContainer.style.width = \"20rem\"\r\n            btn.innerHTML = \"&lt;&lt\";\r\n        }\r\n        this.isControlShow = !this.isControlShow\r\n    }\r\n\r\n    initArray(func) {\r\n        this.arrayVisualizer.initArray(func, this.arrayVisualizer.getArrLength(), true)\r\n    }\r\n\r\n    shuffleArray(func) {\r\n        this.arrayVisualizer.shuffleArray(func)\r\n        // func(this.arrayVisualizer)\r\n    }\r\n\r\n    sortArray(sortName) {\r\n        this.sorts.runSort(sortName, 0, this.arrayVisualizer.getArrLength() - 1)\r\n    }\r\n\r\n    stopSort() {\r\n        this.arrayVisualizer.stopSort()\r\n    }\r\n\r\n    abortSort() {\r\n        this.stopSort()\r\n        this.initArray(initFunctions.linear)\r\n    }\r\n\r\n    genInitFunctions() {\r\n        // console.log(initFunctions)\r\n        let tmp = []\r\n        for (let i in initFunctions) {\r\n            tmp.push(\r\n                <button key={i} onClick={this.initArray.bind(this, initFunctions[i])}>{i}</button>\r\n            )\r\n        }\r\n        return tmp;\r\n    }\r\n\r\n    getSorts() {\r\n        let tmp = []\r\n        let sortsNames = this.sorts.getSortsPaths()\r\n        for (let i of sortsNames) {\r\n            tmp.push(\r\n                <button key={i} onClick={this.sortArray.bind(this, i)}>{i}</button>)\r\n        }\r\n        return tmp;\r\n    }\r\n\r\n    getShuffles() {\r\n        let tmp = []\r\n        for (let i in shuffles) {\r\n            tmp.push(\r\n                <button key={i} onClick={this.shuffleArray.bind(this, shuffles[i])}>{i}</button>\r\n            )\r\n        }\r\n        return tmp;\r\n    }\r\n\r\n    toggleShowAuxArrays() {\r\n        let element = document.getElementById(\"auxArrShowCB\")\r\n        this.arrayVisualizer.setShowAuxArrays(element.checked)\r\n    }\r\n\r\n    toggleBarsStroke() {\r\n        let element = document.getElementById(\"enableStrokeCB\")\r\n        this.arrayVisualizer.setEnableBarsStroke(element.checked)\r\n    }\r\n\r\n    toggleEnableMarks() {\r\n        let element = document.getElementById(\"enableMarksCB\")\r\n        this.arrayVisualizer.setEnableMarks(element.checked)\r\n    }\r\n\r\n    toggleVisualStyle(val) {\r\n        this.arrayVisualizer.setVisualStyle(val)\r\n    }\r\n\r\n    toggleRainbow(val){\r\n        this.arrayVisualizer.getMarks().setRainbow(val)\r\n    }\r\n\r\n    restoreArray(){\r\n        this.arrayVisualizer.restoreArray()\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div id={styles.controlsContainer}>\r\n                {/*<div onClick={this.toggleControlShow.bind(this)} id={styles.showToggleBtn}>&lt;&lt;</div>*/}\r\n                <div id={styles.controls}>\r\n                    <div>\r\n                        <div>\r\n                            <div className={styles.sectionHeader}>Array Size</div>\r\n                            <input id={styles.slider} type=\"range\" min=\"10\" max=\"500\"\r\n                                   defaultValue={this.arrayVisualizer.DEFAULT_ARR_LEN}\r\n                                   step=\"10\"\r\n                                   onChange={this.updateArrLength.bind(this)}/>\r\n                        </div>\r\n                        <div>\r\n                            <div className={styles.sectionHeader}>Visuals</div>\r\n                            <div style={{display: \"flex\", justifyContent:\"center\"}}>\r\n                                <div style={{textAlign: \"left\"}}>\r\n                                    <div className={styles.checkBoxContainer}>\r\n                                        <input onChange={this.toggleShowAuxArrays.bind(this)} type=\"checkbox\"\r\n                                               id=\"auxArrShowCB\"\r\n                                               name=\"auxArrShowCB\" defaultChecked={true}/>\r\n                                        <label htmlFor=\"auxArrShowCB\">Show Aux Arrays</label>\r\n                                    </div>\r\n                                    <div className={styles.checkBoxContainer}>\r\n                                        <input onChange={this.toggleBarsStroke.bind(this)} type=\"checkbox\"\r\n                                               id=\"enableStrokeCB\"\r\n                                               name=\"enableStrokeCB\" defaultChecked={true}/>\r\n                                        <label htmlFor=\"enableStrokeCB\">Enable Bars Stroke</label>\r\n                                    </div>\r\n                                    <div className={styles.checkBoxContainer}>\r\n                                        <input onChange={this.toggleEnableMarks.bind(this)} type=\"checkbox\"\r\n                                               id=\"enableMarksCB\"\r\n                                               name=\"enableMarksCB\" defaultChecked={true}/>\r\n                                        <label htmlFor=\"enableMarksCB\">Enable Marks(Disable to reduce lags)</label>\r\n                                    </div>\r\n                                    <div className={styles.checkBoxContainer}>\r\n                                        <button onClick={this.toggleRainbow.bind(this, true)}>Paint to Rainbow</button>\r\n                                        <button onClick={this.toggleRainbow.bind(this, false)}>Clear Color</button>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                        <div>\r\n                            <div className={styles.sectionHeader}>Visual Styles</div>\r\n                            <div>\r\n                                <input onChange={this.toggleVisualStyle.bind(this, \"bars\")} type=\"radio\"\r\n                                       id=\"barsRadioBtn\"\r\n                                       name=\"visualStyle\" value=\"bars\" defaultChecked={true}/>\r\n                                <label htmlFor=\"barsRadioBtn\">Bars</label>\r\n\r\n                                <input onChange={this.toggleVisualStyle.bind(this, \"dots\")} type=\"radio\"\r\n                                       id=\"dotsRadioBtn\"\r\n                                       name=\"visualStyle\" value=\"dots\"/>\r\n                                <label htmlFor=\"dotsRadioBtn\">Dots</label>\r\n                            </div>\r\n                        </div>\r\n                        <div>\r\n                            <div className={styles.sectionHeader}>Init Array</div>\r\n                            <div>{this.genInitFunctions()}</div>\r\n                            <div><button onClick={this.restoreArray.bind(this)}>RESTORE ARRAY</button></div>\r\n                        </div>\r\n\r\n                        <div>\r\n                            <div className={styles.sectionHeader}>Shuffle Array</div>\r\n                            <div>\r\n                                {/*<button onClick={this.shuffleArray.bind(this)}>Random</button>*/}\r\n                                <div>{this.getShuffles()}</div>\r\n                            </div>\r\n                        </div>\r\n                        <div>\r\n                            <div className={styles.sectionHeader}>Sort control</div>\r\n                            <div>\r\n                                <button onClick={this.abortSort.bind(this)}>Abort Sort(Recommended)</button>\r\n                                <button onClick={this.stopSort.bind(this)}>Stop Sort(Not Recommended)</button>\r\n                            </div>\r\n                        </div>\r\n                        <div>\r\n                            <div className={styles.sectionHeader}>Sort Array</div>\r\n                            <div>\r\n                                {this.getSorts()}\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}","export class Delays {\r\n    arrayVisualizer\r\n    timeoutArray\r\n    delays\r\n    delayIncFactor\r\n    delayInc\r\n    DELAY_INC_CONST\r\n\r\n    constructor(arrayVisualizer) {\r\n        this.arrayVisualizer = arrayVisualizer\r\n        this.timeoutArray = []\r\n        this.delays = {\r\n            Swap: 0,\r\n            Write: 0,\r\n            Comp: 0,\r\n            Unmark: 0,\r\n            CreateAuxArray: 0,\r\n            RemoveAuxArray: 0\r\n        }\r\n        this.DELAY_INC_CONST = 3000\r\n        this.updateDelayInc()\r\n        // this.delayIncFactor = this.DELAY_INC_CONST-arrayVisualizer.getArrLength()*3\r\n        // this.delayInc = this.delayIncFactor/arrayVisualizer.getArrLength()\r\n    }\r\n\r\n    updateDelayInc(){\r\n        this.delayIncFactor = this.DELAY_INC_CONST\r\n        this.delayInc = this.delayIncFactor/this.arrayVisualizer.getArrLength()\r\n    }\r\n\r\n    push(timeout){\r\n        this.timeoutArray.push(timeout)\r\n    }\r\n\r\n    pushFunc(func, obj, delayName, delay, args) {\r\n        this.timeoutArray.push(setTimeout(func.bind(obj), this.delays[delayName] += delay, args))\r\n    }\r\n\r\n    resetDelays() {\r\n        this.delays = {\r\n            Swap: 0,\r\n            Write: 0,\r\n            Comp: 0,\r\n            Unmark: 0,\r\n            CreateAuxArray: 0,\r\n            RemoveAuxArray: 0\r\n        }\r\n        for (let i of this.timeoutArray) {\r\n            clearTimeout(i);\r\n        }\r\n        this.timeoutArray = []\r\n    }\r\n\r\n    setDelay(name, value){\r\n        this.delays[name] = value\r\n    }\r\n\r\n    incDelay(name, inc=this.delayIncFactor){\r\n        return this.delays[name]+=inc\r\n    }\r\n\r\n    getDelayInc(){\r\n        return this.delayInc\r\n    }\r\n}","export class Sounds{\r\n    arrayVisualizer\r\n    ctx\r\n    Delays\r\n    constructor(arrayVisualizer) {\r\n        this.arrayVisualizer = arrayVisualizer\r\n        this.Delays = arrayVisualizer.getDelays()\r\n        this.ctx = new (window.AudioContext || window.webkitAudioContext)();\r\n    }\r\n    playSound(value) {\r\n        let osc = this.ctx.createOscillator();\r\n        osc.type = 'sine';\r\n\r\n        let k = value / this.arrayVisualizer.getArrLength()\r\n        osc.frequency.value = 2000 * k + 200;\r\n\r\n        let addTime = 50\r\n\r\n        let gainNode = this.ctx.createGain()\r\n        gainNode.gain.value = 0;\r\n        osc.connect(gainNode)\r\n        gainNode.connect(this.ctx.destination)\r\n        // console.log(this.Delays.getDelayInc())\r\n        gainNode.gain.linearRampToValueAtTime(0.05, this.ctx.currentTime + (this.Delays.getDelayInc() + addTime) / 1000 / 2)\r\n        gainNode.gain.linearRampToValueAtTime(0, this.ctx.currentTime + (this.Delays.getDelayInc() + addTime) / 1000)\r\n\r\n        osc.start();\r\n        osc.stop(this.ctx.currentTime + (this.Delays.getDelayInc() + addTime) / 1000);\r\n    }\r\n}","import {HSL2RGB, randomInt} from \"../utils/utils\";\r\n\r\nexport const colors = {\r\n    \"Unmarked\": [255, 255, 255],\r\n    \"Default\": [255, 0, 0],\r\n    \"Additional\": [randomInt(0, 256), randomInt(0, 256), randomInt(0, 256)],\r\n    \"Sorted\": [0, 255, 0],\r\n    \"Analysis\": [0, 0, 255]\r\n}\r\nexport class Marks{\r\n    arrayVisualizer\r\n    Delays\r\n\r\n    constructor(arrayVisualizer) {\r\n        this.arrayVisualizer = arrayVisualizer\r\n        this.Delays = arrayVisualizer.getDelays()\r\n    }\r\n\r\n    mark(index, args, saveArr = true) {\r\n        if(!this.arrayVisualizer.getEnableMarks()){\r\n            return;\r\n        }\r\n        let type = \"Default\"\r\n        let color = colors[\"Default\"]\r\n        let tmpArr = this.arrayVisualizer.getMainArray()\r\n        // Additional\r\n        if (args.type === \"Additional\") {\r\n            type = \"Additional\"\r\n            color = args.color\r\n            // console.log(color)\r\n        }\r\n        //Default\r\n        else if (args.type === \"Default\") {\r\n            type = \"Default\"\r\n            color = colors[\"Default\"]\r\n        } else {\r\n            type = args.type\r\n            color = args.color\r\n            // console.log(color)\r\n        }\r\n\r\n        tmpArr[index].setType(type)\r\n        tmpArr[index].setMarkColor(color)\r\n        if (saveArr) {\r\n            this.arrayVisualizer.setState({\r\n                array: tmpArr\r\n            })\r\n        } else {\r\n            return tmpArr\r\n        }\r\n        // console.log(color);\r\n    }\r\n\r\n    markMany(indexes, args, saveArr) {\r\n        let tmpArr = this.arrayVisualizer.getMainArray()\r\n        for (let i of indexes) {\r\n            if (saveArr) {\r\n                this.mark(i, args, saveArr)\r\n            } else {\r\n                tmpArr = this.mark(i, args, saveArr)\r\n            }\r\n        }\r\n        if (!saveArr) {\r\n            return tmpArr\r\n        }\r\n    }\r\n\r\n    unmark(index, saveArr = true) {\r\n        let tmpArr = this.arrayVisualizer.getMainArray()\r\n        // tmpArr[index].setMarkColor(colors[\"Unmarked\"])\r\n        tmpArr[index].setType(\"Unmarked\")\r\n        if (saveArr) {\r\n            this.arrayVisualizer.setState({\r\n                array: tmpArr\r\n            })\r\n        } else {\r\n            return tmpArr\r\n        }\r\n    }\r\n\r\n    unmarkMany(indexes, saveArr, saveOnce) {\r\n        let tmpArr = this.arrayVisualizer.getMainArray()\r\n        for (let i of indexes) {\r\n            if (saveArr) {\r\n                this.unmark(i, saveArr)\r\n            } else {\r\n                tmpArr = this.unmark(i, saveArr)\r\n            }\r\n        }\r\n        if (saveOnce) {\r\n            this.arrayVisualizer.setState({\r\n                array: tmpArr\r\n            })\r\n        }\r\n        if (!saveArr) {\r\n            return tmpArr\r\n        }\r\n    }\r\n\r\n    setRainbow(val){\r\n        let tmpArr = this.arrayVisualizer.getMainArray()\r\n        if(val){\r\n            for(let i = 0; i < tmpArr.length; ++i){\r\n                let hsl = [i / tmpArr.length, 0.8, 0.5]\r\n                let rgb = HSL2RGB(hsl[0], hsl[1], hsl[2])\r\n                tmpArr[i].setColor(rgb)\r\n            }\r\n        }else{\r\n            for(let i of tmpArr){\r\n                i.setColor([255, 255, 255])\r\n            }\r\n        }\r\n        this.arrayVisualizer.setState({\r\n            array: tmpArr\r\n        })\r\n    }\r\n\r\n    markUnmarkMany(markIndexes, markArgs) {\r\n        this.markMany(markIndexes, markArgs, true)\r\n        this.Delays.push(setTimeout(this.unmarkMany.bind(this), this.Delays.incDelay(\"Unmark\", this.Delays.getDelayInc() / 100), markIndexes, false, true))\r\n    }\r\n\r\n    clearAllMarks(){\r\n        this.markUnmarkMany(Array.from(Array(this.arrayVisualizer.getArrLength()).keys()), false, true)\r\n    }\r\n\r\n}","import {Delays} from \"./Delays\";\r\nimport {Marks} from \"./Marks\";\r\nimport {Sounds} from \"./Sounds\";\r\n\r\nexport class Reads{\r\n    arrayVisualizer;\r\n    Sounds\r\n    Delays\r\n    Marks\r\n    constructor(arrayVisualizer){\r\n        this.arrayVisualizer = arrayVisualizer\r\n        this.Sounds = arrayVisualizer.getSounds()\r\n        this.Delays = arrayVisualizer.getDelays()\r\n        this.Marks = arrayVisualizer.getMarks()\r\n    }\r\n\r\n    readValue(index, arr = this.arrayVisualizer.getPseudoArray()) {\r\n        return arr[index].getValue()\r\n    }\r\n\r\n    compareInArr(a, b, arr = this.arrayVisualizer.getPseudoArray()) {\r\n        let curComparisons = this.arrayVisualizer.getState().comparisons + 1\r\n        this.arrayVisualizer.setState({\r\n            comparisons: curComparisons\r\n        })\r\n        this.compareWithDelay([a,b], [])\r\n        return this.compareValues(arr[a], arr[b])\r\n    }\r\n\r\n    get(index, arr = this.arrayVisualizer.getPseudoArray()){\r\n        return arr[index];\r\n    }\r\n\r\n    //TODO: add marks\r\n    compareValues(a, b){\r\n        let toMark = []\r\n        let toSound = []\r\n        let tmpA\r\n        let tmpB\r\n        if(typeof a === \"object\"){\r\n            tmpA = a.getValue()\r\n            let index = this.arrayVisualizer.getMainArray().findIndex(element => {return element.getValue() === tmpA})\r\n            if(index !== -1){\r\n                toMark.push(index)\r\n            }\r\n        }else{\r\n            tmpA = a\r\n        }\r\n\r\n        if(typeof b === \"object\"){\r\n            tmpB = b.getValue()\r\n            let index = this.arrayVisualizer.getMainArray().findIndex(element => {return element.getValue() === tmpB})\r\n            if(index !== -1) {\r\n                toMark.push(index)\r\n            }\r\n        }else{\r\n            tmpB = b\r\n        }\r\n\r\n        toSound = [tmpA, tmpB]\r\n\r\n        // let tmpA = typeof a === \"object\" ? a.getValue() : a\r\n        // let tmpB = typeof b === \"object\" ? b.getValue() : b\r\n\r\n        this.compareWithDelay(toMark, toSound)\r\n        return tmpA - tmpB;\r\n    }\r\n\r\n    compareWithDelay(toMark, toSound, delay = this.Delays.getDelayInc()/5){\r\n        this.Delays.push(setTimeout(this.compareStub.bind(this), this.Delays.incDelay(\"Write\", delay), toMark, toSound))\r\n    }\r\n\r\n    compareStub(toMark = [], toSound = []){\r\n        let curComparisons = this.arrayVisualizer.getState().comparisons + 1\r\n        this.arrayVisualizer.setState({\r\n            comparisons: curComparisons\r\n        })\r\n        for(let i of toSound){\r\n            this.Sounds.playSound(i)\r\n        }\r\n        // console.log(toMark)\r\n        // this.Marks.markUnmarkMany(toMark,{type: \"Additional\", color: [0,255,0]})\r\n        this.Marks.markUnmarkMany(toMark,{type: \"Default\"})\r\n    }\r\n\r\n    auxGet(index, arrIndex, isPseudo = true){\r\n        if(isPseudo){\r\n            return this.arrayVisualizer.getPseudoAuxArrays()[arrIndex][index]\r\n        }else {\r\n            return this.arrayVisualizer.getAuxArrays()[arrIndex][index]\r\n        }\r\n    }\r\n\r\n\r\n    auxReadValue(index, arrIndex, isPseudo = true){\r\n        if(isPseudo){\r\n            return this.arrayVisualizer.getPseudoAuxArrays()[arrIndex][index].getValue()\r\n        }else {\r\n            return this.arrayVisualizer.getAuxArrays()[arrIndex][index].getValue()\r\n        }\r\n    }\r\n}","import React from 'react';\r\nimport {arraysEquals, deepArrayCopy, getAllMethods, objLength, randomInt} from \"../utils/utils\";\r\nimport {Sorts} from \"../Sorts/Sorts\"\r\nimport {ArrayWindow} from \"../ArrayWindow/ArrayWindow\";\r\nimport {Element} from \"../classes/Element\";\r\nimport {Stats} from \"../Stats/Stats\";\r\nimport {Controls} from \"../Controls/Controls\";\r\nimport {initFunctions} from \"../utils/initFunctions\";\r\nimport {Delays} from \"../ArrayAccess/Delays\";\r\nimport {Sounds} from \"../ArrayAccess/Sounds\";\r\nimport {Marks} from \"../ArrayAccess/Marks\";\r\nimport {Reads} from \"../ArrayAccess/Reads\";\r\nimport {Writes} from \"../ArrayAccess/Writes\";\r\n\r\nconst colors = {\r\n    \"Unmarked\": [255, 255, 255],\r\n    \"Default\": [255, 0, 0],\r\n    \"Additional\": [randomInt(0, 256), randomInt(0, 256), randomInt(0, 256)],\r\n    \"Sorted\": [0, 255, 0],\r\n    \"Analysis\": [0, 0, 255]\r\n}\r\n\r\nexport class ArrayVisualizer extends React.Component {\r\n    delays;\r\n    delayInc;\r\n    pseudoArray;\r\n    pseudoAuxArrays;\r\n\r\n    Sorts\r\n    delayIncConst\r\n    showAuxArrays\r\n    enableBarsStroke\r\n    visualStyle\r\n    enableMarks\r\n\r\n    Delays\r\n    Sounds\r\n    Marks\r\n    Reads\r\n    Writes\r\n\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.DEFAULT_ARR_LEN = 100\r\n        this.state = {\r\n            array: this.initArray(initFunctions.linear, this.DEFAULT_ARR_LEN),\r\n            sortName: \"\",\r\n            comparisons: 0,\r\n            writes: 0,\r\n            auxArrays: {}\r\n        }\r\n        this.pseudoArray = deepArrayCopy(this.state.array)\r\n        this.Delays = new Delays(this)\r\n        this.Sounds = new Sounds(this)\r\n        this.Marks = new Marks(this)\r\n        this.Reads = new Reads(this)\r\n\r\n        this.prevArray = []\r\n\r\n        this.Writes = new Writes(this)\r\n        this.pseudoAuxArrays = []\r\n        this.Sorts = new Sorts(this);\r\n        this.showAuxArrays = true\r\n        this.enableBarsStroke = true\r\n        this.enableMarks = true\r\n        this.visualStyle = {\r\n            // style: \"bars\",\r\n            style: \"bars\",\r\n            barsStroke: true,\r\n        }\r\n    }\r\n\r\n    initArray(func, length, setToState=false) {\r\n        let arr = []\r\n        for (let i = 0; i < length; ++i) {\r\n            let element = new Element(func(i, length), \"Unmarked\", [255, 255, 255], [0,0,0,0])\r\n            arr.push(element)\r\n        }\r\n        if(setToState){\r\n            this.setState({\r\n                array: arr\r\n            })\r\n        }else {\r\n            return arr;\r\n        }\r\n    }\r\n\r\n    nullify() {\r\n        this.Delays.resetDelays()\r\n        this.setState(\r\n            {\r\n                comparisons: 0,\r\n                writes: 0\r\n            }\r\n        )\r\n        // eslint-disable-next-line react/no-direct-mutation-state\r\n        this.state.writes = 0;\r\n        // eslint-disable-next-line react/no-direct-mutation-state\r\n        this.state.comparisons = 0;\r\n    }\r\n\r\n    setShowAuxArrays(val){\r\n        this.showAuxArrays = val\r\n    }\r\n\r\n    setEnableBarsStroke(val){\r\n        this.visualStyle.barsStroke = val;\r\n        this.forceMainArrayUpdate()\r\n    }\r\n\r\n    setVisualStyle(val){\r\n        this.visualStyle.style = val;\r\n        this.forceMainArrayUpdate()\r\n    }\r\n\r\n    setEnableMarks(val){\r\n        this.enableMarks = val;\r\n        if(!val){\r\n            this.Marks.clearAllMarks()\r\n        }\r\n    }\r\n\r\n    getEnableMarks(){\r\n        return this.enableMarks;\r\n    }\r\n\r\n    getArrayVisualizer() {\r\n        return this;\r\n    }\r\n\r\n    getPseudoArray() {\r\n        return this.pseudoArray;\r\n    }\r\n\r\n    getState(){\r\n        return this.state\r\n    }\r\n\r\n    getArrLength(){\r\n        return this.state.array.length;\r\n    }\r\n\r\n    getMainArray(){\r\n        return this.state.array\r\n    }\r\n\r\n    getPseudoAuxArrays(){\r\n        return this.pseudoAuxArrays\r\n    }\r\n\r\n    getDelays(){\r\n        return this.Delays\r\n    }\r\n\r\n    getSounds(){\r\n        return this.Sounds;\r\n    }\r\n\r\n    getMarks(){\r\n        return this.Marks;\r\n    }\r\n\r\n    getAuxArrays(){\r\n        return this.state.auxArrays\r\n    }\r\n\r\n    getReads(){\r\n        return this.Reads;\r\n    }\r\n\r\n    getWrites(){\r\n        return this.Writes\r\n    }\r\n\r\n\r\n    stopSort(){\r\n        // this.resetDelay()\r\n        this.Delays.resetDelays()\r\n        this.Marks.clearAllMarks()\r\n        this.setState({\r\n                auxArrays: []\r\n            }\r\n        )\r\n    }\r\n\r\n    shuffleArray(func) {\r\n        this.nullify()\r\n        this.setState({\r\n            sortName: \"Shuffle\"\r\n        })\r\n        this.backupArray()\r\n        func(this);\r\n        // let instructions = func(this);\r\n        // for(let i of instructions){\r\n        //     if(i.cmd === \"swap\"){\r\n        //         this.Writes.swapWithDelay(i.a, i.b, this.state.array, true, this.Delays.getDelayInc()/5, true)\r\n        //     }\r\n        // }\r\n\r\n    }\r\n\r\n    restoreArray(){\r\n        this.setState({\r\n            array: deepArrayCopy(this.prevArray)\r\n        })\r\n    }\r\n\r\n    backupArray(){\r\n        this.prevArray = deepArrayCopy(this.state.array)\r\n    }\r\n\r\n\r\n    setSortName(sortName){\r\n        this.setState({\r\n            sortName: sortName\r\n        })\r\n    }\r\n\r\n    initPseudoArray(){\r\n        this.pseudoArray = deepArrayCopy(this.state.array)\r\n    }\r\n\r\n    sortClickEvent() {\r\n    }\r\n\r\n    forceMainArrayUpdate(){\r\n        let tmp = this.state.array;\r\n        this.setState({\r\n            array: tmp\r\n        })\r\n    }\r\n\r\n    updateDelayInc(val){\r\n        this.delayInc = val/this.getArrLength();\r\n    }\r\n\r\n    updateArrLength(len){\r\n        this.setState({\r\n            array: this.initArray(initFunctions.linear, len)\r\n        })\r\n        this.pseudoArray = deepArrayCopy(this.state.array)\r\n\r\n        this.Sorts.arrLength = this.getArrLength()\r\n        // this.updateDelayInc(this.delayIncConst)\r\n        this.Delays.updateDelayInc();\r\n    }\r\n\r\n    genArrayWindows(){\r\n        let tmp = []\r\n        if(this.showAuxArrays) {\r\n            for (let i = objLength(this.state.auxArrays) - 1; i >= 0; i--) {\r\n                tmp.push(\r\n                    <ArrayWindow key={objLength(this.state.auxArrays) - i} array={this.state.auxArrays[i]}\r\n                                 mainArray={this.state.array} height={100 / (1 + objLength(this.state.auxArrays))} visualProps = {this.visualStyle} />\r\n                )\r\n            }\r\n        }\r\n        return tmp\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Stats sortName={this.state.sortName} comparisons={this.state.comparisons} writes={this.state.writes} arrLength={this.getArrLength()}/>\r\n                <div style={{height: \"100vh\"}}>\r\n                {/*<div>*/}\r\n                    {this.genArrayWindows()}\r\n                    <ArrayWindow array={this.state.array} mainArray={this.state.array} height={this.showAuxArrays ? 100/(1+objLength(this.state.auxArrays)) : 100} visualProps={this.visualStyle}/>\r\n                </div>\r\n                <div>\r\n                    <Controls arrayVisualizer={this} sorts={this.Sorts}/>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport {ArrayVisualizer} from \"./components/ArrayVisualizer/ArrayVisualizer\";\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\n\r\n\r\n\r\n\r\n\r\nReactDOM.render(\r\n    <ArrayVisualizer></ArrayVisualizer>,\r\n  document.getElementById('root')\r\n);\r\n\r\n\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}