{"version":3,"sources":["components/Sorts/Sort.js","components/utils/utils.js","components/Controls/Controls.module.scss","components/ArrayWindow/ArrayWindow.module.scss","components/classes/Element.js","components/Sorts/InsertionSort.js","components/Sorts/Sorts.js","components/Sorts/HeapSort.js","components/ArrayAccess/Writes.js","components/Stats/Stats.module.scss","components/Sorts sync /^/.*/.js$","components/Sorts/BitonicSort.js","components/Sorts/BubbleSort.js","components/Sorts/DualPivotQuickSort.js","components/Sorts/GrailSort.js","components/Sorts/LLQuickSort.js","components/Sorts/LRQuickSort.js","components/Sorts/LSDRadixSort.js","components/Sorts/MergeSort.js","components/Sorts/PseudoTimSort.js","components/Sorts/SelectionSort.js","components/Sorts/SlowSort.js","components/Sorts/StoogeSort.js","components/Sorts/TimSort.js","components/ArrayWindow/ArrayWindow.js","components/Stats/Stats.js","components/utils/initFunctions.js","components/utils/shuffles.js","components/Controls/Controls.js","components/ArrayAccess/Delays.js","components/ArrayAccess/Sounds.js","components/ArrayAccess/Marks.js","components/ArrayAccess/Reads.js","components/ArrayVisualizer/ArrayVisualizer.js","reportWebVitals.js","index.js"],"names":["Sort","arrayVisualizer","this","state","getState","Reads","getReads","Writes","getWrites","arrLength","getArrLength","sortName","warnLen","isDisabled","isNeedBucketsNum","low","high","bucketsNum","randomInt","a","b","Math","trunc","random","deepArrayCopy","arr","out","i","value","getValue","type","getType","color","getColor","markColor","getMarkColor","push","Element","objLength","obj","undefined","Object","keys","length","HSL2RGB","h","s","l","r","g","hue2rgb","p","q","t","round","module","exports","unMark","toString","InsertionSort","key","get","j","compareValues","write","Sorts","sortsPaths","sortPath","require","getDelays","resetDelays","nullify","sort","getSortObject","getWarnLen","parseInt","prompt","isNaN","window","confirm","initPseudoArray","setSortName","getSortName","runSort","sortClickEvent","HeapSort","n","largest","compareInArr","swap","heapify","Sounds","getSounds","Delays","Marks","getMarks","getPseudoArray","mark","delay","getDelayInc","playSound","setTimeout","swapInArr","bind","incDelay","tmpArr","tmp","copy","markUnmarkMany","curWrites","writes","setState","swapWithDelay","getMainArray","index","toWrite","writeInArr","writeWithDelay","len","isPseudo","pseudoAuxArrays","getPseudoAuxArrays","auxArrIndex","initArray","createAuxArrayWithDelay","getAuxArrays","auxArrays","createAuxArray","removeAuxArrayWithDelay","removeAuxArray","arrIndex","auxWriteWithDelay","auxWrite","map","webpackContext","req","id","webpackContextResolve","__webpack_require__","o","e","Error","code","resolve","BitonicSort","sortLength","k","m","ij","bitonicSort","BubbleSort","DualPivotQuickSort","left","right","divisor","third","med1","med2","pivot1","readValue","pivot2","less","great","dualPivot","Subarray","GrailSort","blockLen","grailSwap","srcArray","srcPos","destArray","destPos","copyLen","auxGet","start","leftLen","rightLen","grailBlockSwap","item","target","middle","idealKeys","keysFound","firstKey","currentKey","insertPos","grailBinarySearchLeft","grailRotate","bufferOffset","end","buffer","currentMerge","bufferLen","mergeLen","mergeIndex","mergeEnd","grailMergeForwards","leftOver","finalBlock","finalOffset","grailMergeBackwards","externLen","arraycopy","externalBuffer","grailPairwiseWrites","grailMergeOutOfPlace","offset","grailBuildInPlace","externalBufferLen","grailBuildOutOfPlace","grailPairwiseSwaps","medianKey","blockCount","block","compare","resetLen","leftOvers","leftBlocks","firstRightBlock","prevLeftBlock","leftOrigin","currentBlockLen","grailInPlaceBufferRewind","currentBlockOrigin","grailBinarySearchRight","grailOutOfPlaceBufferRewind","finalLeftBlocks","finalLen","currentBlock","blockIndex","grailGetSubarray","keyIndex","grailSmartMerge","grailSmartLazyMerge","grailLazyMerge","grailSmartMergeOutOfPlace","subarrayLen","mergeCount","lastSubarray","grailInsertSort","grailBlockSelectSort","grailMergeBlocks","grailLazyMergeBlocks","rightBlocks","lastFragment","grailCountFinalLeftBlocks","leftLength","grailInPlaceBufferReset","grailMergeBlocksOutOfPlace","grailOutOfPlaceBufferReset","grailCombineOutOfPlace","grailCombineInPlace","leftEnd","extBuf","extBufLen","idealBuffer","keyLen","grailCollectKeys","grailLazyStableSort","bufferEnd","grailBuildBlocks","scrollingBuffer","blockKeysSum","minKeys","calcMinKeys","grailCombineBlocks","grailCommonSort","grailSortInPlace","numKeys","GRAIL_STATIC_EXT_BUF_LEN","LLQuickSort","lo","hi","pivot","partition","LRQuickSort","x","quickSort","LSDRadixSort","max","highestPower","log","registers","Array","stabVal","min","tempArray","tempWrite","radix","total","pos","MergeSort","mid","merge","nxt","PseudoTimSort","MIN_MERGE","len1","len2","minRun","minRunLength","size","pseudoTimSort","SelectionSort","minIndex","SlowSort","floor","StoogeSort","TimSort","minGallop","tmpStorageLength","stackLength","runStart","runLength","stackSize","runHi","reverseRun","isAux","hint","lastOffset","maxOffset","auxReadValue","mergeAt","start1","length1","start2","length2","gallopRight","gallopLeft","mergeLow","mergeHigh","cursor1","cursor2","dest","count1","count2","exit","customCursor","customDest","remaining","makeAscendingRun","binaryInsertionSort","force","pushRun","mergeRuns","forceMergeRuns","ArrayWindow","props","array","mainArray","height","visualProps","borderEnabled","barsStroke","visualStyle","style","sizeStyle","width","border","styleSheet","backgroundColor","getColorForRender","className","styles","bar","bottom","dotContainer","dot","arrayContainer","Stats","statsContainer","initFunctions","linear","manySimular","divider","shuffles","FullShuffle","randomIndex","AlmostSorted","randomIndexA","randomIndexB","Reverse","BlockShuffle","gap","GAP_FACTOR","factor","PipeOrgan","temp","InversedPipeOrgan","Heap","heapSort","QuickSortKiller","Controls","isControlShow","sorts","updateArrLength","DEFAULT_ARR_LEN","slider","document","getElementById","controlsContainer","controls","btn","showToggleBtn","display","innerHTML","func","shuffleArray","stopSort","onClick","sortsNames","getSortsPaths","sortArray","element","setShowAuxArrays","checked","setEnableBarsStroke","setEnableMarks","val","setVisualStyle","setRainbow","sectionHeader","defaultValue","step","onChange","justifyContent","textAlign","checkBoxContainer","toggleShowAuxArrays","name","defaultChecked","htmlFor","toggleBarsStroke","toggleEnableMarks","toggleRainbow","toggleVisualStyle","genInitFunctions","getShuffles","abortSort","getSorts","React","PureComponent","timeoutArray","delays","Swap","Write","Comp","Unmark","CreateAuxArray","RemoveAuxArray","DELAY_INC_CONST","updateDelayInc","delayIncFactor","delayInc","timeout","delayName","args","clearTimeout","inc","ctx","AudioContext","webkitAudioContext","osc","createOscillator","frequency","gainNode","createGain","gain","connect","destination","linearRampToValueAtTime","currentTime","stop","colors","saveArr","getEnableMarks","setType","setMarkColor","indexes","saveOnce","unmark","hsl","rgb","setColor","markIndexes","markArgs","markMany","unmarkMany","from","ArrayVisualizer","comparisons","pseudoArray","showAuxArrays","enableBarsStroke","enableMarks","setToState","forceMainArrayUpdate","clearAllMarks","genArrayWindows","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render"],"mappings":"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","file":"static/js/main.32e15ca0.chunk.js","sourcesContent":["export class Sort {\r\n    arrayVisualizer;\r\n\r\n    Reads\r\n    Writes\r\n\r\n    arrLength;\r\n\r\n    sortName;\r\n    warnLen;\r\n    isDisabled;\r\n    isNeedBucketsNum;\r\n    isNeedBuffer;\r\n\r\n\r\n\r\n\r\n    constructor(arrayVisualizer) {\r\n        this.arrayVisualizer = arrayVisualizer\r\n        this.state = this.arrayVisualizer.getState()\r\n\r\n        this.Reads = this.arrayVisualizer.getReads()\r\n        this.Writes = this.arrayVisualizer.getWrites()\r\n\r\n        \r\n        this.arrLength = this.arrayVisualizer.getArrLength();\r\n        this.sortName = \"\"\r\n        this.warnLen = -1;\r\n        this.isDisabled = false;\r\n        this.isNeedBucketsNum = false;\r\n    }\r\n\r\n    getSortName(){\r\n        return this.sortName\r\n    }\r\n\r\n    getWarnLen(){\r\n        return this.warnLen\r\n    }\r\n\r\n    runSort(low, high, bucketsNum){\r\n    }\r\n}","import {Element} from \"../classes/Element\";\r\nexport function random(a, b) {\r\n    return Math.random() * (b - a) + a;\r\n}\r\n\r\nexport function randomInt(a, b) {\r\n    return Math.trunc(random(a, b))\r\n}\r\n\r\nexport function swapObj(json) {\r\n    let ret = {};\r\n    for (let key in json) {\r\n        ret[json[key]] = key;\r\n    }\r\n    return ret;\r\n}\r\n\r\nexport function sleep(ms) {\r\n    ms += new Date().getTime();\r\n    while (new Date() < ms) {\r\n    }\r\n}\r\n\r\nexport function getAllMethods(toCheck) {\r\n    const props = [];\r\n    let obj = toCheck;\r\n    do {\r\n        props.push(...Object.getOwnPropertyNames(obj));\r\n    } while (obj = Object.getPrototypeOf(obj));\r\n\r\n    return props.sort().filter((e, i, arr) => {\r\n        if (e!=arr[i+1] && typeof toCheck[e] == 'function') return true;\r\n    });\r\n}\r\n\r\nexport function deepArrayCopy(arr){\r\n    let out = [];\r\n    for(let i of arr){\r\n        let value = i.getValue();\r\n        let type = i.getType();\r\n        let color = i.getColor();\r\n        let markColor = i.getMarkColor();\r\n        out.push(new Element(value, type, color, markColor))\r\n    }\r\n    return out;\r\n}\r\n\r\nexport function arraysEquals(a, b){\r\n    return a.length === b.length &&\r\n    a.every((v, i) => v === b[i]);\r\n}\r\n\r\nexport function objLength(obj){\r\n    return (obj!==undefined) ? Object.keys(obj).length: 0\r\n}\r\n\r\nexport function HSL2RGB(h, s, l){\r\n    let r, g, b;\r\n\r\n    if(s === 0){\r\n        r = g = b = l;\r\n    }else{\r\n        let hue2rgb = function hue2rgb(p, q, t){\r\n            if(t < 0) t += 1;\r\n            if(t > 1) t -= 1;\r\n            if(t < 1/6) return p + (q - p) * 6 * t;\r\n            if(t < 1/2) return q;\r\n            if(t < 2/3) return p + (q - p) * (2/3 - t) * 6;\r\n            return p;\r\n        }\r\n\r\n        let q = l < 0.5 ? l * (1 + s) : l + s - l * s;\r\n        let p = 2 * l - q;\r\n        r = hue2rgb(p, q, h + 1/3);\r\n        g = hue2rgb(p, q, h);\r\n        b = hue2rgb(p, q, h - 1/3);\r\n    }\r\n\r\n    return [Math.round(r * 255), Math.round(g * 255), Math.round(b * 255)];\r\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"textCenter\":\"Controls_textCenter__3_8jn\",\"controls\":\"Controls_controls__3X5vt\",\"showToggleBtn\":\"Controls_showToggleBtn__2CbSs\",\"slider\":\"Controls_slider__3IxWj\",\"sectionHeader\":\"Controls_sectionHeader__2EvBB\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"arrayContainer\":\"ArrayWindow_arrayContainer__jfaB8\",\"bar\":\"ArrayWindow_bar__30QYB\",\"dotContainer\":\"ArrayWindow_dotContainer__3porX\",\"dot\":\"ArrayWindow_dot__29TqH\"};","const types = {\r\n\r\n}\r\n\r\nconst colors = {\r\n\r\n}\r\n\r\nexport class Element{\r\n\r\n    value;\r\n    type;\r\n    color;\r\n    markColor;\r\n\r\n    // constructor(args){\r\n    //     this.value = args.value;\r\n    //     this.type = args.type;\r\n    //     this.color = args.color || colors[args.type];\r\n    // }\r\n\r\n    constructor(value, type, color, markColor) {\r\n        this.value = value;\r\n        this.type = type;\r\n        this.color = color;\r\n        this.markColor = markColor;\r\n    }\r\n\r\n\r\n    getValue(){\r\n        return this.value;\r\n    }\r\n    setValue(value){\r\n        this.value = value;\r\n    }\r\n\r\n    getColor(){\r\n        return this.color;\r\n    }\r\n\r\n    setColor(color){\r\n        this.color = color;\r\n    }\r\n\r\n    getMarkColor(){\r\n        return this.markColor;\r\n    }\r\n    setMarkColor(markColor){\r\n        this.markColor = markColor;\r\n    }\r\n\r\n    getColorForRender(){\r\n        if(this.type === \"Default\"){\r\n            return this.markColor\r\n        }else{\r\n            return this.color\r\n        }\r\n    }\r\n\r\n    getType(){\r\n        return this.type;\r\n    }\r\n    setType(type){\r\n        this.type = type;\r\n    }\r\n\r\n    copy(unMark = true){\r\n        if(unMark){\r\n            return new Element(this.value, \"Unmarked\", this.color, [0,0,0])\r\n        }else{\r\n            return new Element(this.value, this.type, this.color, this.markColor)\r\n        }\r\n    }\r\n\r\n    toString(){\r\n        return this.value.toString()\r\n    }\r\n}","import {Sort} from \"./Sort\";\r\n\r\nexport class InsertionSort extends Sort{\r\n    constructor(arrayVisualizer) {\r\n        super(arrayVisualizer);\r\n        this.sortName = \"InsertionSort\"\r\n    }\r\n\r\n    InsertionSort(low, high) {\r\n        let length = high+1;\r\n        for (let i = low+1; i < length; i++) {\r\n            let key = this.Reads.get(i);\r\n            let j = i - 1;\r\n            while (j >= 0 && this.Reads.compareValues(this.Reads.get(j), key) > 0) {\r\n                this.Writes.write(j + 1, this.Reads.get(j))\r\n                j = j - 1;\r\n            }\r\n            this.Writes.write(j + 1, key)\r\n        }\r\n    }\r\n\r\n    runSort(low, high) {\r\n        this.InsertionSort(low, high)\r\n    }\r\n}","export class Sorts {\r\n    arrayVisualizer;\r\n    sortsPaths\r\n\r\n    constructor(arrayVisualizer) {\r\n        this.arrayVisualizer = arrayVisualizer\r\n        this.sortsPaths = [\"BubbleSort\", \"MergeSort\", \"LLQuickSort\", \"LRQuickSort\",\r\n            \"DualPivotQuickSort\", \"InsertionSort\", \"SelectionSort\", \"TimSort\", \"PseudoTimSort\",\r\n            \"HeapSort\", \"LSDRadixSort\", \"BitonicSort\", \"SlowSort\", \"StoogeSort\", \"GrailSort\"]\r\n    }\r\n\r\n    getSortsPaths() {\r\n        return this.sortsPaths;\r\n    }\r\n\r\n    getSortObject(sortPath) {\r\n        let Sort = require(\"./\" + sortPath + \".js\")[sortPath]\r\n        return new Sort(this.arrayVisualizer)\r\n    }\r\n\r\n    runSort(sortName, low, high) {\r\n        this.arrayVisualizer.getDelays().resetDelays()\r\n        this.arrayVisualizer.nullify()\r\n        let sort = this.getSortObject(sortName)\r\n        let warnLen = sort.getWarnLen()\r\n        let bucketsNum = 4\r\n        if (sort.isNeedBucketsNum) {\r\n            bucketsNum = parseInt(prompt(\"Enter the base:\", \"4\"))\r\n            if (isNaN(bucketsNum)) {\r\n                return;\r\n            }\r\n        }\r\n        if (warnLen !== -1 && this.arrayVisualizer.getArrLength() > warnLen &&\r\n            !window.confirm(\"WARNING!!!\\nThe array size(\" + this.arrayVisualizer.getArrLength() + \") \" +\r\n            \"more than recommended(\" + warnLen + \")\\nApplication may freeze\\nDo you want continue?\")) {\r\n            return\r\n        }\r\n        this.arrayVisualizer.initPseudoArray()\r\n        this.arrayVisualizer.setSortName(sort.getSortName())\r\n        sort.runSort(low, high, bucketsNum)\r\n        this.arrayVisualizer.sortClickEvent()\r\n    }\r\n}","import {Sort} from \"./Sort\";\r\n\r\nexport class HeapSort extends Sort{\r\n    constructor(arrayVisualizer) {\r\n        super(arrayVisualizer);\r\n        this.sortName = \"HeapSort\"\r\n    }\r\n\r\n    heapify(n, i) {\r\n        let largest = i;\r\n\r\n        let l = 2 * i + 1;\r\n        let r = 2 * i + 2;\r\n\r\n        if (l < n && this.Reads.compareInArr(l, largest) > 0) {\r\n            largest = l;\r\n        }\r\n        if (r < n && this.Reads.compareInArr(r, largest) > 0) {\r\n            largest = r;\r\n        }\r\n\r\n        if (largest !== i) {\r\n            this.Writes.swap(i, largest);\r\n            this.heapify(n, largest);\r\n        }\r\n    }\r\n\r\n    HeapSort() {\r\n        let n = this.arrLength;\r\n\r\n\r\n        for (let i = Math.trunc(n / 2) - 1; i >= 0; i--) {\r\n            this.heapify(n, i);\r\n        }\r\n\r\n        for (let i = n - 1; i >= 0; i--) {\r\n            this.Writes.swap(0, i);\r\n            this.heapify(i, 0)\r\n        }\r\n    }\r\n\r\n    runSort(low, high) {\r\n        this.HeapSort(low, high)\r\n    }\r\n}","\r\nimport {objLength} from \"../utils/utils\";\r\n\r\nexport class Writes{\r\n    arrayVisualizer;\r\n    Sounds\r\n    Delays\r\n    Marks\r\n\r\n    constructor(arrayVisualizer){\r\n        this.arrayVisualizer = arrayVisualizer\r\n        this.Sounds = arrayVisualizer.getSounds()\r\n        this.Delays = arrayVisualizer.getDelays()\r\n        this.Marks = arrayVisualizer.getMarks()\r\n    }\r\n\r\n\r\n\r\n    swapWithDelay(a, b, arr = this.arrayVisualizer.getPseudoArray(), mark, delay = this.Delays.getDelayInc(), playSound) {\r\n        this.Delays.push(setTimeout(this.swapInArr.bind(this), this.Delays.incDelay(\"Write\", delay), a, b, arr, mark, playSound))\r\n    }\r\n\r\n\r\n    swapInArr(a, b, arr = this.arrayVisualizer.getPseudoArray(), mark = true, playSound = false) {\r\n        if(playSound) {\r\n            this.Sounds.playSound(arr[b].getValue());\r\n        }\r\n        let tmpArr = arr\r\n        // let tmp = tmpArr[a]\r\n        // tmpArr[a] = tmpArr[b]\r\n        // tmpArr[b] = tmp\r\n        let tmp = tmpArr[a]\r\n        tmpArr[a] = tmpArr[b].copy(true)\r\n        tmpArr[b] = tmp.copy(true)\r\n        if (mark) {\r\n            this.Marks.markUnmarkMany([a, b], {type: \"Default\"})\r\n        }\r\n        let curWrites = this.arrayVisualizer.getState().writes;\r\n        this.arrayVisualizer.setState({\r\n            writes: curWrites + 2\r\n        })\r\n    }\r\n\r\n    swap(a, b, arr = this.arrayVisualizer.getPseudoArray()) {\r\n        this.swapInArr(a, b, arr, false, false)\r\n        this.swapWithDelay(a, b, this.arrayVisualizer.getMainArray(), true, this.Delays.getDelayInc(), true)\r\n    }\r\n\r\n    // writeInArr(index, value, arr = this.arrayVisualizer.getPseudoArray(), mark = true, playSound = false) {\r\n    //     if(playSound) {\r\n    //         this.Sounds.playSound(value)\r\n    //     }\r\n    //     arr[index].setValue(value)\r\n    //     if (mark) {\r\n    //         this.Marks.markUnmarkMany([index], {type: \"Default\"})\r\n    //     }\r\n    //     let curWrites = this.arrayVisualizer.getState().writes;\r\n    //     this.arrayVisualizer.setState({\r\n    //         writes: curWrites + 1\r\n    //     })\r\n    // }\r\n\r\n\r\n    writeInArr(index, toWrite, arr = this.arrayVisualizer.getPseudoArray(), mark = true, playSound = false) {\r\n        if(playSound) {\r\n            this.Sounds.playSound(toWrite.getValue())\r\n        }\r\n        arr[index] = toWrite.copy(true)\r\n        if (mark) {\r\n            this.Marks.markUnmarkMany([index], {type: \"Default\"})\r\n        }\r\n        let curWrites = this.arrayVisualizer.getState().writes;\r\n        this.arrayVisualizer.setState({\r\n            writes: curWrites + 1\r\n        })\r\n    }\r\n\r\n    writeWithDelay(index, toWrite, arr = this.arrayVisualizer.getPseudoArray(), mark, delay = this.Delays.getDelayInc(), playSound = true) {\r\n        this.Delays.push(setTimeout(this.writeInArr.bind(this), this.Delays.incDelay(\"Write\", delay), index, toWrite, arr, mark, playSound))\r\n    }\r\n\r\n    write(index, toWrite, arr = this.arrayVisualizer.getPseudoArray()) {\r\n        this.writeInArr(index, toWrite, arr, false, false)\r\n        this.writeWithDelay(index, toWrite, this.arrayVisualizer.getMainArray(), true, this.Delays.getDelayInc(), true)\r\n    }\r\n\r\n    createAuxArray(len, isPseudo = true){\r\n        if(isPseudo) {\r\n            let pseudoAuxArrays = this.arrayVisualizer.getPseudoAuxArrays()\r\n            let auxArrIndex = objLength(pseudoAuxArrays)\r\n            pseudoAuxArrays[auxArrIndex]=(this.arrayVisualizer.initArray(() => -1, len, false))\r\n            this.createAuxArrayWithDelay(len, this.Delays.getDelayInc(), false)\r\n            return auxArrIndex\r\n        }else{\r\n            let tmpArr = this.arrayVisualizer.getAuxArrays()\r\n            let auxArrIndex = objLength(tmpArr)\r\n\r\n            tmpArr[auxArrIndex]=(this.arrayVisualizer.initArray(() => -1, len, false))\r\n            this.arrayVisualizer.setState({\r\n                    auxArrays: tmpArr\r\n                }\r\n            )\r\n        }\r\n    }\r\n\r\n    createAuxArrayWithDelay(len, delay, isPseudo = false){\r\n        this.Delays.push(setTimeout(this.createAuxArray.bind(this), this.Delays.incDelay(\"Write\", delay), len, isPseudo))\r\n    }\r\n\r\n    removeAuxArray(index, isPseudo = true){\r\n        if(isPseudo) {\r\n            // this.arrayVisualizer.getPseudoAuxArrays().splice(index, 1)\r\n            delete this.arrayVisualizer.getPseudoAuxArrays()[index]\r\n            this.removeAuxArrayWithDelay(index, this.Delays.getDelayInc(), false)\r\n        }else{\r\n            let tmp = this.arrayVisualizer.getAuxArrays()\r\n            // tmp.splice(index, 1)\r\n            delete tmp[index]\r\n            this.arrayVisualizer.setState({\r\n                auxArrays: tmp\r\n            })\r\n        }\r\n    }\r\n\r\n    removeAuxArrayWithDelay(index, delay, isPseudo = false){\r\n        this.Delays.push(setTimeout(this.removeAuxArray.bind(this), this.Delays.incDelay(\"Write\", delay), index, isPseudo))\r\n    }\r\n\r\n\r\n    auxWrite(index, toWrite, arrIndex, isPseudo = true, playSound = false){\r\n        if(playSound){\r\n            this.Sounds.playSound(toWrite.getValue())\r\n        }\r\n        if(isPseudo){\r\n            this.arrayVisualizer.getPseudoAuxArrays()[arrIndex][index] = toWrite.copy()\r\n            this.auxWriteWithDelay(index, toWrite, arrIndex, this.Delays.getDelayInc(), false, true)\r\n        }else{\r\n            this.arrayVisualizer.getAuxArrays()[arrIndex][index] = toWrite.copy()\r\n            let tmp = this.arrayVisualizer.getAuxArrays()\r\n            this.arrayVisualizer.setState({\r\n                auxArrays: tmp\r\n            })\r\n        }\r\n    }\r\n\r\n    auxWriteWithDelay(index, value, arrIndex, delay, isPseudo = false, playSound = true, ){\r\n        this.Delays.push(setTimeout(this.auxWrite.bind(this), this.Delays.incDelay(\"Write\", delay), index, value, arrIndex, isPseudo, playSound))\r\n    }\r\n\r\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"statsContainer\":\"Stats_statsContainer__1qOnq\"};","var map = {\n\t\"./BitonicSort.js\": 32,\n\t\"./BubbleSort.js\": 33,\n\t\"./DualPivotQuickSort.js\": 34,\n\t\"./GrailSort.js\": 35,\n\t\"./HeapSort.js\": 18,\n\t\"./InsertionSort.js\": 13,\n\t\"./LLQuickSort.js\": 36,\n\t\"./LRQuickSort.js\": 37,\n\t\"./LSDRadixSort.js\": 38,\n\t\"./MergeSort.js\": 39,\n\t\"./PseudoTimSort.js\": 40,\n\t\"./SelectionSort.js\": 41,\n\t\"./SlowSort.js\": 42,\n\t\"./Sort.js\": 5,\n\t\"./Sorts.js\": 17,\n\t\"./StoogeSort.js\": 43,\n\t\"./TimSort.js\": 44\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 31;","import {Sort} from \"./Sort\";\r\n\r\nexport class BitonicSort extends Sort{\r\n    constructor(arrayVisualizer) {\r\n        super(arrayVisualizer);\r\n        this.sortName = \"BitonicSort\"\r\n    }\r\n    // kernel(p, q) {\r\n    //     const d = 1 << (p - q);\r\n    //\r\n    //     for (let i = 0; i < this.arrLength; i++) {\r\n    //         const up = ((i >> p) & 2) === 0;\r\n    //         // if ((i & d) === 0 && (x[i] > x[i | d]) === up) {\r\n    //         if ((i & d) === 0 && ((this.Reads.compare(i, i | d, \">\")) === up)) {\r\n    //             // const tmp = x[i];\r\n    //             // x[i] = x[i | d];\r\n    //             // x[i | d] = tmp;\r\n    //             this.Writes.swap(i, i | d)\r\n    //         }\r\n    //     }\r\n    // }\r\n    //\r\n    // bitonicSort(n) {\r\n    //     for (let i = 0; i < n; i++) {\r\n    //         for(let j = 0; j <= i; j++) {\r\n    //             this.kernel(i, j);\r\n    //         }\r\n    //     }\r\n    // }\r\n    bitonicSort(sortLength){\r\n        let i, j, k;\r\n\r\n        for(k = 2; k < sortLength*2; k = 2 * k) {\r\n            let m = (Math.trunc((sortLength + (k - 1)) / k) % 2) !== 0;\r\n\r\n            for(j = k >> 1; j > 0; j = j >> 1) {\r\n                for(i = 0; i < sortLength; i++) {\r\n                    let ij = i ^ j;\r\n\r\n                    if((ij) > i && ij < sortLength) {\r\n                        if((((i & k) === 0) === m) && this.Reads.compareInArr(i, ij) > 0)\r\n                            this.Writes.swap(i, ij);\r\n                        if((((i & k) !== 0) === m) && this.Reads.compareInArr(i, ij) < 0)\r\n                            this.Writes.swap(i, ij);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n    runSort(low, high, bucketsNum) {\r\n        // this.bitonicSort(Math.trunc(Math.log2(high-1)))\r\n        this.bitonicSort(high+1)\r\n    }\r\n\r\n}\r\n","import {Sort} from \"./Sort\";\r\n\r\nexport class BubbleSort extends Sort{\r\n    constructor(arrayVisualizer) {\r\n        super(arrayVisualizer);\r\n        this.sortName = \"BubbleSort\"\r\n    }\r\n    BubbleSort() {\r\n        let len = this.arrLength;\r\n        for (let i = 0; i < len; i++) {\r\n            for (let j = 0; j < len - i - 1; j++) {\r\n                if (this.Reads.compareInArr(j, j + 1) > 0) {\r\n                    this.Writes.swap(j, j + 1)\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    runSort(low, high) {\r\n        this.BubbleSort(low, high)\r\n    }\r\n}","import {Sort} from \"./Sort\";\r\nimport {InsertionSort} from \"./InsertionSort\";\r\n\r\nexport class DualPivotQuickSort extends Sort {\r\n    constructor(arrayVisualizer) {\r\n        super(arrayVisualizer);\r\n        this.sortName = \"Dual Pivot QuickSort\"\r\n    }\r\n\r\n    dualPivot(left, right, divisor) {\r\n        let length = right - left;\r\n\r\n        // insertion sort for tiny array\r\n        if (length < 4) {\r\n            let insertSorter = new InsertionSort(this.arrayVisualizer)\r\n            insertSorter.runSort(left, right)\r\n            return;\r\n        }\r\n        // if(length === 1){\r\n        //     return\r\n        // }\r\n\r\n        let third = Math.trunc(length / divisor);\r\n\r\n// \"medians\"\r\n        let med1 = left + third;\r\n        let med2 = right - third;\r\n\r\n        if (med1 <= left) {\r\n            med1 = left + 1;\r\n        }\r\n        if (med2 >= right) {\r\n            med2 = right - 1;\r\n        }\r\n\r\n\r\n        // if(Reads.compareValues(array[med1], array[med2]) == -1) {\r\n        if (this.Reads.compareInArr(med1, med2) < 0) {\r\n            this.Writes.swap(med1, left);\r\n            this.Writes.swap(med2, right);\r\n        } else {\r\n            this.Writes.swap(med1, right);\r\n            this.Writes.swap(med2, left);\r\n        }\r\n\r\n// pivots\r\n        let pivot1 = this.Reads.readValue(left);\r\n        let pivot2 = this.Reads.readValue(right);\r\n\r\n// pointers\r\n        let less = left + 1;\r\n        let great = right - 1;\r\n\r\n// sorting\r\n        for (let k = less; k <= great; k++) {\r\n\r\n            // if (this.Reads.read(k) < pivot1) {\r\n            if (this.Reads.compareValues(this.Reads.get(k), pivot1) < 0) {\r\n\r\n                this.Writes.swap(k, less++);\r\n            // } else if (this.Reads.read(k) > pivot2) {\r\n            } else if (this.Reads.compareValues(this.Reads.get(k), pivot2) > 0) {\r\n                // while (k < great && this.Reads.read(great) > pivot2) {\r\n                while (k < great && this.Reads.compareValues(this.Reads.get(great), pivot2) > 0) {\r\n                    great--;\r\n                }\r\n                this.Writes.swap(k, great--);\r\n\r\n                // if (this.Reads.read(k) < pivot1) {\r\n                if (this.Reads.compareValues(this.Reads.get(k), pivot1) < 0) {\r\n                    this.Writes.swap(k, less++);\r\n                }\r\n            }\r\n        }\r\n\r\n// swaps\r\n        let dist = great - less;\r\n\r\n        if (dist < 13) {\r\n            divisor++;\r\n        }\r\n        this.Writes.swap(less - 1, left);\r\n        this.Writes.swap(great + 1, right);\r\n\r\n// subarrays\r\n        this.dualPivot(left, less - 2, divisor);\r\n        if (pivot1 < pivot2) {\r\n            this.dualPivot(less, great, divisor);\r\n        }\r\n        this.dualPivot(great + 2, right, divisor);\r\n    }\r\n\r\n    runSort(low, high) {\r\n        this.dualPivot(low, high, 3)\r\n    }\r\n}","/*\r\n * MIT License\r\n * \r\n * Copyright (c) 2013 Andrey Astrelin\r\n * Copyright (c) 2020 The Holy Grail Sort Project\r\n * \r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal\r\n * in the Software without restriction, including without limitation the rights\r\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n * copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n * \r\n * The above copyright notice and this permission notice shall be included in all\r\n * copies or substantial portions of the Software.\r\n * \r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n * SOFTWARE.\r\n */\r\n\r\n/*\r\n * The Holy Grail Sort Project\r\n * Project Manager:      Summer Dragonfly\r\n * Project Contributors: 666666t\r\n *                       Anonymous0726\r\n *                       aphitorite\r\n *                       dani_dlg\r\n *                       EilrahcF\r\n *                       Enver\r\n *                       lovebuny\r\n *                       MP\r\n *                       phoenixbound\r\n *                       thatsOven\r\n *                       \r\n * Special thanks to \"The Studio\" Discord community!\r\n */\r\n\r\n// Credit to phoenixbound for this clever idea\r\n\r\nimport {Sort} from \"./Sort\";\r\n\r\nconst Subarray = {\r\n    LEFT: 1,\r\n    RIGHT: 2,\r\n};\r\n\r\n// REWRITTEN GRAILSORT FOR JAVASCRIPT - A heavily refactored C/C++-to-JavaScript version of\r\n//                                      Andrey Astrelin's GrailSort.h, aiming to be as\r\n//                                      readable and intuitive as possible.\r\n//\r\n// ** Written and maintained by The Holy Grail Sort Project\r\n//\r\n// Primary author: Enver\r\n//\r\n// Current status: Finished. Potentially 100% working... Passing most tests, some tests capped by V8 Engine memory allocation limits\r\n\r\nexport class GrailSort extends Sort {\r\n    static GRAIL_STATIC_EXT_BUF_LEN = 512;\r\n\r\n    constructor(arrayVisualizer) {\r\n        super(arrayVisualizer);\r\n        this.sortName = \"GrailSort\"\r\n    }\r\n\r\n    grailSwap(a, b) {\r\n        // let temp = array[a];\r\n        // array[a] = array[b];\r\n        // array[b] = temp;\r\n        this.Writes.swap(a, b)\r\n    }\r\n\r\n    grailBlockSwap(a, b, blockLen) {\r\n        for (let i = 0; i < blockLen; i++) {\r\n            this.grailSwap(a + i, b + i);\r\n        }\r\n    }\r\n\r\n    // Object src, int srcPos, Object dest, int destPos, int length\r\n    // Custom method for copying parts of the array either:\r\n    //      within itself to a different destination, or\r\n    //      to another array\r\n    arraycopy(srcArray, srcPos, destArray, destPos, copyLen) {\r\n\r\n        if (srcArray === -1 && destArray === -1) {\r\n            for (let i = 0; i < copyLen; i++) {\r\n                this.Writes.write(destPos + i, this.Reads.get(srcPos + i))\r\n            }\r\n        } else if (srcArray !== -1 && destArray !== -1) {\r\n            for (let i = 0; i < copyLen; i++) {\r\n                this.Writes.auxWrite(destPos + i, this.Reads.auxGet(srcPos + i, srcArray), destArray)\r\n            }\r\n        } else if (srcArray === -1 && destArray !== -1) {\r\n            for (let i = 0; i < copyLen; i++) {\r\n                this.Writes.auxWrite(destPos + i, this.Reads.get(srcPos + i), destArray)\r\n            }\r\n        } else if (destArray === -1 && srcArray !== 0) {\r\n            for (let i = 0; i < copyLen; i++) {\r\n                this.Writes.write(destPos + i, this.Reads.auxGet(srcPos + i, destArray))\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    grailRotate(start, leftLen, rightLen) {\r\n        while (leftLen > 0 && rightLen > 0) {\r\n            if (leftLen <= rightLen) {\r\n                this.grailBlockSwap(start, start + leftLen, leftLen);\r\n                start += leftLen;\r\n                rightLen -= leftLen;\r\n            } else {\r\n                this.grailBlockSwap(start + leftLen - rightLen, start + leftLen, rightLen);\r\n                leftLen -= rightLen;\r\n            }\r\n        }\r\n    }\r\n\r\n    // Variant of Insertion Sort that utilizes swaps instead of overwrites.\r\n    // Also known as \"Optimized Gnomesort\".\r\n    grailInsertSort(start, length) {\r\n        for (let item = 1; item < length; item++) {\r\n            let left = start + item - 1;\r\n            let right = start + item;\r\n\r\n            while (left >= start && this.Reads.compareInArr(left,\r\n                right) > 0) {\r\n                this.grailSwap(left, right);\r\n                left--;\r\n                right--;\r\n            }\r\n        }\r\n    }\r\n\r\n    grailBinarySearchLeft(start, length, target) {\r\n        let left = 0;\r\n        let right = length;\r\n        while (left < right) {\r\n            let middle = left + parseInt((right - left) / 2);\r\n            if (this.Reads.compareValues(this.Reads.readValue(start + middle), target) < 0) {\r\n                left = middle + 1;\r\n            } else {\r\n                right = middle;\r\n            }\r\n        }\r\n        return left;\r\n    }\r\n\r\n    // Credit to Anonymous0726 for debugging\r\n    grailBinarySearchRight(start, length, target) {\r\n        let left = 0;\r\n        let right = length;\r\n        while (left < right) {\r\n            let middle = left + parseInt((right - left) / 2);\r\n            if (this.Reads.compareValues(this.Reads.readValue(start + middle), target) > 0) {\r\n                right = middle;\r\n            } else {\r\n                left = middle + 1;\r\n            }\r\n        }\r\n        // OFF-BY-ONE BUG FIXED: used to be `return right - 1;`\r\n        return right;\r\n    }\r\n\r\n    // cost: 2 * length + idealKeys^2 / 2\r\n    grailCollectKeys(start, length, idealKeys) {\r\n        let keysFound = 1; // by itself, the first item in the array is our first unique key\r\n        let firstKey = 0; // the first item in the array is at the first position in the array\r\n        let currentKey = 1; // the index used for finding potentially unique items (\"keys\") in the array\r\n\r\n        while (currentKey < length && keysFound < idealKeys) {\r\n\r\n            // Find the location in the key-buffer where our current key can be inserted in sorted order.\r\n            // If the key at insertPos is equal to currentKey, then currentKey isn't unique and we move on.\r\n            let insertPos = this.grailBinarySearchLeft(start + firstKey, keysFound, this.Reads.readValue(start + currentKey));\r\n\r\n            // The second part of this conditional does the equal check we were just talking about; however,\r\n            // if currentKey is larger than everything in the key-buffer (meaning insertPos == keysFound),\r\n            // then that also tells us it wasn't *equal* to anything in the key-buffer. Magic! :) \r\n            if (insertPos == keysFound || this.Reads.compareInArr(start + currentKey,\r\n                start + firstKey + insertPos) != 0) {\r\n\r\n                // First, rotate the key-buffer over to currentKey's immediate left...\r\n                // (this helps save a TON of swaps/writes!!!)\r\n                this.grailRotate(start + firstKey, keysFound, currentKey - (firstKey + keysFound));\r\n\r\n                // Update the new position of firstKey...\r\n                firstKey = currentKey - keysFound;\r\n\r\n                // Then, \"insertion sort\" currentKey to its spot in the key-buffer!\r\n                this.grailRotate(start + firstKey + insertPos, keysFound - insertPos, 1);\r\n\r\n                // One step closer to idealKeys.\r\n                keysFound++;\r\n            }\r\n            // Move on and test the next key...\r\n            currentKey++;\r\n        }\r\n\r\n        // Bring however many keys we found back to the beginning of our array,\r\n        // and return the number of keys collected.\r\n        this.grailRotate(start, firstKey, keysFound);\r\n        return keysFound;\r\n    }\r\n\r\n    grailPairwiseSwaps(start, length) {\r\n        let index;\r\n        for (index = 1; index < length; index += 2) {\r\n            let left = start + index - 1;\r\n            let right = start + index;\r\n\r\n            if (this.Reads.compareInArr(left, right) > 0) {\r\n                this.grailSwap(left - 2, right);\r\n                this.grailSwap(right - 2, left);\r\n            } else {\r\n                this.grailSwap(left - 2, left);\r\n                this.grailSwap(right - 2, right);\r\n            }\r\n        }\r\n\r\n        let left = start + index - 1;\r\n        if (left < start + length) {\r\n            this.grailSwap(left - 2, left);\r\n        }\r\n    }\r\n\r\n    grailPairwiseWrites(start, length) {\r\n        let index;\r\n        for (index = 1; index < length; index += 2) {\r\n            let left = start + index - 1;\r\n            let right = start + index;\r\n\r\n            if (this.Reads.compareInArr(left, right) > 0) {\r\n                this.Writes.write(left - 2, this.Reads.get(right))\r\n                this.Writes.write(right - 2, this.Reads.get(left))\r\n            } else {\r\n                this.Writes.write(left - 2, this.Reads.get(left))\r\n                this.Writes.write(right - 2, this.Reads.get(right))\r\n            }\r\n        }\r\n\r\n        let left = start + index - 1;\r\n        if (left < start + length) {\r\n            this.Writes.write(left - 2, this.Reads.get(left))\r\n        }\r\n    }\r\n\r\n    // array[buffer .. start - 1] <=> \"scrolling buffer\"\r\n    // \r\n    // \"scrolling buffer\" + array[start, middle - 1] + array[middle, end - 1]\r\n    // --> array[buffer, buffer + end - 1] + \"scrolling buffer\"\r\n    grailMergeForwards(start, leftLen, rightLen, bufferOffset) {\r\n        let left = start;\r\n        let middle = start + leftLen;\r\n        let right = middle;\r\n        let end = middle + rightLen;\r\n        let buffer = start - bufferOffset;\r\n\r\n        while (right < end) {\r\n            if (left == middle || this.Reads.compareInArr(left,\r\n                right) > 0) {\r\n\r\n                this.grailSwap(buffer, right);\r\n                right++;\r\n            } else {\r\n                this.grailSwap(buffer, left);\r\n                left++;\r\n            }\r\n            buffer++;\r\n        }\r\n\r\n        if (buffer != left) {\r\n            this.grailBlockSwap(buffer, left, middle - left);\r\n        }\r\n    }\r\n\r\n    // credit to 666666t for thorough bug-checking/fixing\r\n    grailMergeBackwards(start, leftLen, rightLen, bufferOffset) {\r\n        let left = start + leftLen - 1;\r\n        let middle = left;\r\n        // OFF-BY-ONE BUG FIXED: used to be `let  right = middle + rightLen - 1;`\r\n        let right = middle + rightLen;\r\n        let end = start;\r\n        // OFF-BY-ONE BUG FIXED: used to be `let buffer = right  + bufferOffset - 1;`\r\n        let buffer = right + bufferOffset;\r\n\r\n        while (left >= end) {\r\n            if (right == middle || this.Reads.compareInArr(left,\r\n                right) > 0) {\r\n\r\n                this.grailSwap(buffer, left);\r\n                left--;\r\n            } else {\r\n                this.grailSwap(buffer, right);\r\n                right--;\r\n            }\r\n            buffer--;\r\n        }\r\n\r\n        if (right != buffer) {\r\n            while (right > middle) {\r\n                this.grailSwap(buffer, right);\r\n                buffer--;\r\n                right--;\r\n            }\r\n        }\r\n    }\r\n\r\n    // array[buffer .. start - 1] <=> \"free space\"    \r\n    //\r\n    // \"free space\" + array[start, middle - 1] + array[middle, end - 1]\r\n    // --> array[buffer, buffer + end - 1] + \"free space\"\r\n    //\r\n    // FUNCTION RENAMED: More consistent with \"out-of-place\" being at the end\r\n    grailMergeOutOfPlace(start, leftLen, rightLen, bufferOffset) {\r\n        let left = start;\r\n        let middle = start + leftLen;\r\n        let right = middle;\r\n        let end = middle + rightLen;\r\n        let buffer = start - bufferOffset;\r\n\r\n        while (right < end) {\r\n            if (left == middle || this.Reads.compareInArr(left,\r\n                right) > 0) {\r\n\r\n                this.Writes.write(buffer, this.Reads.get(right))\r\n                right++;\r\n            } else {\r\n                this.Writes.write(buffer, this.Reads.get(left))\r\n                left++;\r\n            }\r\n            buffer++;\r\n        }\r\n\r\n        if (buffer != left) {\r\n            while (left < middle) {\r\n                this.Writes(buffer, this.Reads.get(left))\r\n                buffer++;\r\n                left++;\r\n            }\r\n        }\r\n    }\r\n\r\n    grailBuildInPlace(start, length, currentMerge, bufferLen) {\r\n        for (let mergeLen = currentMerge; mergeLen < bufferLen; mergeLen *= 2) {\r\n            let mergeIndex;\r\n            let mergeEnd = start + length - (2 * mergeLen);\r\n            let bufferOffset = mergeLen;\r\n\r\n            for (mergeIndex = start; mergeIndex <= mergeEnd; mergeIndex += (2 * mergeLen)) {\r\n                this.grailMergeForwards(mergeIndex, mergeLen, mergeLen, bufferOffset);\r\n            }\r\n\r\n            let leftOver = length - (mergeIndex - start);\r\n\r\n            if (leftOver > mergeLen) {\r\n                this.grailMergeForwards(mergeIndex, mergeLen, leftOver - mergeLen, bufferOffset);\r\n            } else {\r\n                this.grailRotate(mergeIndex - mergeLen, mergeLen, leftOver);\r\n            }\r\n\r\n            start -= mergeLen;\r\n        }\r\n\r\n        let finalBlock = length % (2 * bufferLen);\r\n        let finalOffset = start + length - finalBlock;\r\n\r\n        if (finalBlock <= bufferLen) {\r\n            this.grailRotate(finalOffset, finalBlock, bufferLen);\r\n        } else {\r\n            this.grailMergeBackwards(finalOffset, bufferLen, finalBlock - bufferLen, bufferLen);\r\n        }\r\n\r\n        for (let mergeIndex = finalOffset - (2 * bufferLen); mergeIndex >= start; mergeIndex -= (2 * bufferLen)) {\r\n            this.grailMergeBackwards(mergeIndex, bufferLen, bufferLen, bufferLen);\r\n        }\r\n    }\r\n\r\n    grailBuildOutOfPlace(start, length, bufferLen, externLen) {\r\n        this.arraycopy(-1, start - externLen, this.externalBuffer, 0, externLen);\r\n\r\n        this.grailPairwiseWrites(start, length);\r\n        start -= 2;\r\n\r\n        let mergeLen;\r\n        for (mergeLen = 2; mergeLen < externLen; mergeLen *= 2) {\r\n            let mergeIndex;\r\n            let mergeEnd = start + length - (2 * mergeLen);\r\n            let bufferOffset = mergeLen;\r\n\r\n            for (mergeIndex = start; mergeIndex <= mergeEnd; mergeIndex += (2 * mergeLen)) {\r\n                this.grailMergeOutOfPlace(mergeIndex, mergeLen, mergeLen, bufferOffset);\r\n            }\r\n\r\n            let leftOver = length - (mergeIndex - start);\r\n\r\n            if (leftOver > mergeLen) {\r\n                this.grailMergeOutOfPlace(mergeIndex, mergeLen, leftOver - mergeLen, bufferOffset);\r\n            } else {\r\n                // TODO: Is this correct??\r\n                for (let offset = 0; offset < leftOver; offset++) {\r\n                    // array[mergeIndex + offset - mergeLen] = array[mergeIndex + offset];\r\n                    this.Writes.write(mergeIndex + offset - mergeLen, this.Reads.get(mergeIndex + offset))\r\n                }\r\n            }\r\n\r\n            start -= mergeLen;\r\n        }\r\n\r\n        this.arraycopy(this.externalBuffer, 0, -1, start + length, externLen);\r\n        this.grailBuildInPlace(start, length, mergeLen, bufferLen);\r\n    }\r\n\r\n    // build blocks of length 'bufferLen'\r\n    // input: [start - mergeLen, start - 1] elements are buffer\r\n    // output: first 'bufferLen' elements are buffer, blocks (2 * bufferLen) and last subblock sorted\r\n    grailBuildBlocks(start, length, bufferLen) {\r\n        if (this.externalBuffer != null) {\r\n            let externLen;\r\n\r\n            if (bufferLen < this.externalBufferLen) {\r\n                externLen = bufferLen;\r\n            } else {\r\n                // max power of 2 -- just in case\r\n                externLen = 1;\r\n                while ((externLen * 2) <= this.externalBufferLen) {\r\n                    externLen *= 2;\r\n                }\r\n            }\r\n\r\n            this.grailBuildOutOfPlace(start, length, bufferLen, externLen);\r\n        } else {\r\n            this.grailPairwiseSwaps(start, length);\r\n            this.grailBuildInPlace(start - 2, length, 2, bufferLen);\r\n        }\r\n    }\r\n\r\n    // Returns the final position of 'medianKey'.\r\n    grailBlockSelectSort(keys, start, medianKey, blockCount, blockLen) {\r\n        for (let block = 1; block < blockCount; block++) {\r\n            let left = block - 1;\r\n            let right = left;\r\n\r\n            for (let index = block; index < blockCount; index++) {\r\n                let compare = this.Reads.compareInArr(start + (right * blockLen),\r\n                    start + (index * blockLen));\r\n\r\n                if (compare > 0 || (compare == 0 && this.Reads.compareInArr(keys + right,\r\n                    keys + index) > 0)) {\r\n                    right = index;\r\n                }\r\n            }\r\n\r\n            if (right != left) {\r\n                // Swap the left and right selected blocks...\r\n                this.grailBlockSwap(start + (left * blockLen), start + (right * blockLen), blockLen);\r\n\r\n                // Swap the keys...\r\n                this.grailSwap(keys + left, keys + right);\r\n\r\n                // ...and follow the 'medianKey' if it was swapped\r\n\r\n                // ORIGINAL LOC: if(midkey==u-1 || midkey==p) midkey^=(u-1)^p;\r\n                // MASSIVE, MASSIVE credit to lovebuny for figuring this one out!\r\n                if (medianKey == left) {\r\n                    medianKey = right;\r\n                } else if (medianKey == right) {\r\n                    medianKey = left;\r\n                }\r\n            }\r\n        }\r\n\r\n        return medianKey;\r\n    }\r\n\r\n    // Swaps Grailsort's \"scrolling buffer\" from the right side of the array all the way back to 'start'.\r\n    // Costs O(n) operations.\r\n    //\r\n    // OFF-BY-ONE BUG FIXED: used to be `int index = start + resetLen`; credit to 666666t for debugging\r\n    grailInPlaceBufferReset(start, resetLen, bufferLen) {\r\n        for (let index = start + resetLen - 1; index >= start; index--) {\r\n            this.grailSwap(index, index - bufferLen);\r\n        }\r\n    }\r\n\r\n    // Shifts entire array over 'bufferSize' spaces to make room for the out-of-place merging buffer.\r\n    // Costs O(n) operations.\r\n    //\r\n    // OFF-BY-ONE BUG FIXED: used to be `int index = start + resetLen`; credit to 666666t for debugging\r\n    grailOutOfPlaceBufferReset(start, resetLen, bufferLen) {\r\n        for (let index = start + resetLen - 1; index >= start; index--) {\r\n            this.Writes.write(index, this.Reads.get(index - bufferLen))\r\n        }\r\n    }\r\n\r\n    // Rewinds Grailsort's \"scrolling buffer\" such that any items from a left subarray block left over by a \"smart merge\" are moved to\r\n    // the right of the buffer. This is used to maintain stability and to continue an ongoing merge that has run out of buffer space.\r\n    // Costs O(sqrt n) swaps in the *absolute* worst-case. \r\n    //\r\n    // NAMING IMPROVED: the left over items are in the middle of the merge while the buffer is at the end\r\n    grailInPlaceBufferRewind(start, leftOvers, buffer) {\r\n        while (leftOvers > start) {\r\n            leftOvers--;\r\n            buffer--;\r\n            this.grailSwap(buffer, leftOvers);\r\n        }\r\n    }\r\n\r\n    // Rewinds Grailsort's out-of-place buffer such that any items from a left subarray block left over by a \"smart merge\" are moved to\r\n    // the right of the buffer. This is used to maintain stability and to continue an ongoing merge that has run out of buffer space.\r\n    // Costs O(sqrt n) writes in the *absolute* worst-case.\r\n    //\r\n    // INCORRECT ORDER OF PARAMETERS BUG FIXED: `leftOvers` should be the middle, and `buffer` should be the end\r\n    grailOutOfPlaceBufferRewind(start, leftOvers, buffer) {\r\n        while (leftOvers > start) {\r\n            leftOvers--;\r\n            buffer--;\r\n            // array[buffer] = array[leftOvers];\r\n            this.Writes.write(buffer, this.Reads.get(leftOvers))\r\n        }\r\n    }\r\n\r\n    grailGetSubarray(currentKey, medianKey) {\r\n        if (this.Reads.compareInArr(currentKey, medianKey) < 0) {\r\n            return Subarray.LEFT;\r\n        } else {\r\n            return Subarray.RIGHT;\r\n        }\r\n    }\r\n\r\n    // FUNCTION RENAMED: more clear *which* left blocks are being counted\r\n    grailCountFinalLeftBlocks(offset, blockCount, blockLen) {\r\n        let leftBlocks = 0;\r\n\r\n        let firstRightBlock = offset + (blockCount * blockLen);\r\n        let prevLeftBlock = firstRightBlock - blockLen;\r\n\r\n        while (leftBlocks < blockCount && this.Reads.compareInArr(firstRightBlock,\r\n            prevLeftBlock) < 0) {\r\n            leftBlocks++;\r\n            prevLeftBlock -= blockLen;\r\n        }\r\n\r\n        return leftBlocks;\r\n    }\r\n\r\n    grailSmartMerge(start, leftLen, leftOrigin, rightLen, bufferOffset) {\r\n        let left = start;\r\n        let middle = start + leftLen;\r\n        let right = middle;\r\n        let end = middle + rightLen;\r\n        let buffer = start - bufferOffset;\r\n\r\n        if (leftOrigin == Subarray.LEFT) {\r\n            while (left < middle && right < end) {\r\n                if (this.Reads.compareInArr(left, right) <= 0) {\r\n                    this.grailSwap(buffer, left);\r\n                    left++;\r\n                } else {\r\n                    this.grailSwap(buffer, right);\r\n                    right++;\r\n                }\r\n                buffer++;\r\n            }\r\n        } else {\r\n            while (left < middle && right < end) {\r\n                if (this.Reads.compareInArr(left, right) < 0) {\r\n                    this.grailSwap(buffer, left);\r\n                    left++;\r\n                } else {\r\n                    this.grailSwap(buffer, right);\r\n                    right++;\r\n                }\r\n                buffer++;\r\n            }\r\n        }\r\n\r\n        if (left < middle) {\r\n            this.currentBlockLen = middle - left;\r\n            this.grailInPlaceBufferRewind(left, middle, end);\r\n        } else {\r\n            this.currentBlockLen = end - right;\r\n            if (leftOrigin == Subarray.LEFT) {\r\n                this.currentBlockOrigin = Subarray.RIGHT;\r\n            } else {\r\n                this.currentBlockOrigin = Subarray.LEFT;\r\n            }\r\n        }\r\n    }\r\n\r\n    grailSmartLazyMerge(start, leftLen, leftOrigin, rightLen) {\r\n        if (leftOrigin == Subarray.LEFT) {\r\n            if (this.Reads.compareInArr(start + leftLen - 1, start + leftLen) > 0) {\r\n                while (leftLen != 0) {\r\n                    let insertPos = this.grailBinarySearchLeft(start + leftLen, rightLen, this.Reads.readValue(start));\r\n\r\n                    if (insertPos != 0) {\r\n                        this.grailRotate(start, leftLen, insertPos);\r\n                        start += insertPos;\r\n                        rightLen -= insertPos;\r\n                    }\r\n\r\n                    if (rightLen == 0) {\r\n                        this.currentBlockLen = leftLen;\r\n                        return;\r\n                    } else {\r\n                        do {\r\n                            start++;\r\n                            leftLen--;\r\n                        } while (leftLen != 0 && this.Reads.compareInArr(start,\r\n                            start + leftLen) <= 0);\r\n                    }\r\n                }\r\n            }\r\n        } else {\r\n            if (this.Reads.compareInArr(start + leftLen - 1, start + leftLen) >= 0) {\r\n                while (leftLen != 0) {\r\n                    let insertPos = this.grailBinarySearchRight(start + leftLen, rightLen, this.Reads.readValue(start));\r\n\r\n                    if (insertPos != 0) {\r\n                        this.grailRotate(start, leftLen, insertPos);\r\n                        start += insertPos;\r\n                        rightLen -= insertPos;\r\n                    }\r\n\r\n                    if (rightLen == 0) {\r\n                        this.currentBlockLen = leftLen;\r\n                        return;\r\n                    } else {\r\n                        do {\r\n                            start++;\r\n                            leftLen--;\r\n                        } while (leftLen != 0 && this.Reads.compareInArr(start,\r\n                            start + leftLen) < 0);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        this.currentBlockLen = rightLen;\r\n        if (leftOrigin == Subarray.LEFT) {\r\n            this.currentBlockOrigin = Subarray.RIGHT;\r\n        } else {\r\n            this.currentBlockOrigin = Subarray.LEFT;\r\n        }\r\n    }\r\n\r\n    // FUNCTION RENAMED: more consistent with other \"out-of-place\" merges\r\n    grailSmartMergeOutOfPlace(start, leftLen, leftOrigin, rightLen, bufferOffset) {\r\n        let left = start;\r\n        let middle = start + leftLen;\r\n        let right = middle;\r\n        let end = middle + rightLen;\r\n        let buffer = start - bufferOffset;\r\n\r\n        if (leftOrigin == Subarray.LEFT) {\r\n            while (left < middle && right < end) {\r\n                if (this.Reads.compareInArr(left, right) <= 0) {\r\n                    this.Writes.write(buffer, this.Reads.get(left))\r\n                    left++;\r\n                } else {\r\n                    this.Writes.write(buffer, this.Reads.get(right))\r\n                    right++;\r\n                }\r\n                buffer++;\r\n            }\r\n        } else {\r\n            while (left < middle && right < end) {\r\n                if (this.Reads.compareInArr(left, right) < 0) {\r\n                    this.Writes.write(buffer, this.Reads.get(left))\r\n                    left++;\r\n                } else {\r\n                    this.Writes.write(buffer, this.Reads.get(right))\r\n                    right++;\r\n                }\r\n                buffer++;\r\n            }\r\n        }\r\n\r\n        if (left < middle) {\r\n            this.currentBlockLen = middle - left;\r\n            this.grailOutOfPlaceBufferRewind(left, middle, end);\r\n        } else {\r\n            this.currentBlockLen = end - right;\r\n            if (leftOrigin == Subarray.LEFT) {\r\n                this.currentBlockOrigin = Subarray.RIGHT;\r\n            } else {\r\n                this.currentBlockOrigin = Subarray.LEFT;\r\n            }\r\n        }\r\n    }\r\n\r\n    grailMergeBlocks(keys, medianKey, start, blockCount, blockLen, finalLeftBlocks, finalLen) {\r\n        let currentBlock;\r\n        let blockIndex = blockLen;\r\n\r\n        this.currentBlockLen = blockLen;\r\n        this.currentBlockOrigin = this.grailGetSubarray(keys, medianKey);\r\n\r\n        for (let keyIndex = 1; keyIndex < blockCount; keyIndex++, blockIndex += blockLen) {\r\n            currentBlock = blockIndex - this.currentBlockLen;\r\n\r\n            let nextBlockOrigin = this.grailGetSubarray(keys + keyIndex, medianKey);\r\n\r\n            if (nextBlockOrigin == this.currentBlockOrigin) {\r\n                this.grailBlockSwap(start + currentBlock - blockLen, start + currentBlock, this.currentBlockLen);\r\n                currentBlock = blockIndex;\r\n\r\n                this.currentBlockLen = blockLen;\r\n            } else {\r\n                this.grailSmartMerge(start + currentBlock, this.currentBlockLen, this.currentBlockOrigin, blockLen, blockLen);\r\n            }\r\n        }\r\n\r\n        currentBlock = blockIndex - this.currentBlockLen;\r\n\r\n        if (finalLen != 0) {\r\n            if (this.currentBlockOrigin == Subarray.RIGHT) {\r\n                this.grailBlockSwap(start + currentBlock - blockLen, start + currentBlock, this.currentBlockLen);\r\n                currentBlock = blockIndex;\r\n\r\n                this.currentBlockLen = blockLen * finalLeftBlocks;\r\n                this.currentBlockOrigin = Subarray.LEFT;\r\n            } else {\r\n                this.currentBlockLen += blockLen * finalLeftBlocks;\r\n            }\r\n\r\n            this.grailMergeForwards(start + currentBlock, this.currentBlockLen, finalLen, blockLen);\r\n        } else {\r\n            this.grailBlockSwap(start + currentBlock, start + currentBlock - blockLen, this.currentBlockLen);\r\n        }\r\n    }\r\n\r\n    grailLazyMergeBlocks(keys, medianKey, start, blockCount, blockLen, finalLeftBlocks, finalLen) {\r\n        let currentBlock;\r\n        let blockIndex = blockLen;\r\n\r\n        this.currentBlockLen = blockLen;\r\n        this.currentBlockOrigin = this.grailGetSubarray(keys, medianKey);\r\n\r\n        for (let keyIndex = 1; keyIndex < blockCount; keyIndex++, blockIndex += blockLen) {\r\n            currentBlock = blockIndex - this.currentBlockLen;\r\n\r\n            let nextBlockOrigin = this.grailGetSubarray(keys + keyIndex, medianKey);\r\n\r\n            if (nextBlockOrigin == this.currentBlockOrigin) {\r\n                currentBlock = blockIndex;\r\n\r\n                this.currentBlockLen = blockLen;\r\n            } else {\r\n                // These checks were included in the original code... but why???\r\n                if (blockLen != 0 && this.currentBlockLen != 0) {\r\n                    this.grailSmartLazyMerge(start + currentBlock, this.currentBlockLen, this.currentBlockOrigin, blockLen);\r\n                }\r\n            }\r\n        }\r\n\r\n        currentBlock = blockIndex - this.currentBlockLen;\r\n\r\n        if (finalLen != 0) {\r\n            if (this.currentBlockOrigin == Subarray.RIGHT) {\r\n                currentBlock = blockIndex;\r\n\r\n                this.currentBlockLen = blockLen * finalLeftBlocks;\r\n                this.currentBlockOrigin = Subarray.LEFT;\r\n            } else {\r\n                this.currentBlockLen += blockLen * finalLeftBlocks;\r\n            }\r\n\r\n            this.grailLazyMerge(start + currentBlock, this.currentBlockLen, finalLen);\r\n        }\r\n    }\r\n\r\n    grailMergeBlocksOutOfPlace(keys, medianKey, start, blockCount, blockLen, finalLeftBlocks, finalLen) {\r\n        let currentBlock;\r\n        let blockIndex = blockLen;\r\n\r\n        this.currentBlockLen = blockLen;\r\n        this.currentBlockOrigin = this.grailGetSubarray(keys, medianKey);\r\n\r\n        for (let keyIndex = 1; keyIndex < blockCount; keyIndex++, blockIndex += blockLen) {\r\n            currentBlock = blockIndex - this.currentBlockLen;\r\n\r\n            let nextBlockOrigin = this.grailGetSubarray(keys + keyIndex, medianKey);\r\n\r\n            if (nextBlockOrigin == this.currentBlockOrigin) {\r\n                this.arraycopy(-1, start + currentBlock, -1, start + currentBlock - blockLen, this.currentBlockLen);\r\n                currentBlock = blockIndex;\r\n\r\n                this.currentBlockLen = blockLen;\r\n            } else {\r\n                this.grailSmartMergeOutOfPlace(start + currentBlock, this.currentBlockLen, this.currentBlockOrigin, blockLen, blockLen);\r\n            }\r\n        }\r\n\r\n        currentBlock = blockIndex - this.currentBlockLen;\r\n\r\n        if (finalLen != 0) {\r\n            if (this.currentBlockOrigin == Subarray.RIGHT) {\r\n                this.arraycopy(-1, start + currentBlock, -1, start + currentBlock - blockLen, this.currentBlockLen);\r\n                currentBlock = blockIndex;\r\n\r\n                this.currentBlockLen = blockLen * finalLeftBlocks;\r\n                this.currentBlockOrigin = Subarray.LEFT;\r\n            } else {\r\n                this.currentBlockLen += blockLen * finalLeftBlocks;\r\n            }\r\n\r\n            this.grailMergeOutOfPlace(start + currentBlock, this.currentBlockLen, finalLen, blockLen);\r\n        } else {\r\n            this.arraycopy(-1, start + currentBlock, -1, start + currentBlock - blockLen, this.currentBlockLen);\r\n        }\r\n    }\r\n\r\n    //TODO: Double-check \"Merge Blocks\" arguments\r\n    grailCombineInPlace(keys, start, length, subarrayLen, blockLen, mergeCount, lastSubarray, buffer) {\r\n        for (let mergeIndex = 0; mergeIndex < mergeCount; mergeIndex++) {\r\n            let offset = start + (mergeIndex * (2 * subarrayLen));\r\n            let blockCount = parseInt((2 * subarrayLen) / blockLen);\r\n\r\n            this.grailInsertSort(keys, blockCount);\r\n\r\n            // INCORRECT PARAMETER BUG FIXED: `block select sort` should be using `offset`, not `start`\r\n            let medianKey = parseInt(subarrayLen / blockLen);\r\n            medianKey = this.grailBlockSelectSort(keys, offset, medianKey, blockCount, blockLen);\r\n\r\n            if (buffer) {\r\n                this.grailMergeBlocks(keys, keys + medianKey, offset, blockCount, blockLen, 0, 0);\r\n            } else {\r\n                this.grailLazyMergeBlocks(keys, keys + medianKey, offset, blockCount, blockLen, 0, 0);\r\n            }\r\n        }\r\n\r\n        // INCORRECT CONDITIONAL/PARAMETER BUG FIXED: Credit to 666666t for debugging.\r\n        if (lastSubarray != 0) {\r\n            let offset = start + (mergeCount * (2 * subarrayLen));\r\n            let rightBlocks = parseInt(lastSubarray / blockLen);\r\n\r\n            this.grailInsertSort(keys, rightBlocks + 1);\r\n\r\n            // INCORRECT PARAMETER BUG FIXED: `block select sort` should be using `offset`, not `start`\r\n            let medianKey = parseInt(subarrayLen / blockLen);\r\n            medianKey = this.grailBlockSelectSort(keys, offset, medianKey, rightBlocks, blockLen);\r\n\r\n            // MISSING BOUNDS CHECK BUG FIXED: `lastFragment` *can* be 0 if the `lastSubarray` is evenly\r\n            //                                 divided into blocks. This prevents Grailsort from going\r\n            //                                 out of bounds.\r\n            let lastFragment = lastSubarray % blockLen;\r\n            let leftBlocks;\r\n            if (lastFragment != 0) {\r\n                leftBlocks = this.grailCountFinalLeftBlocks(offset, rightBlocks, blockLen);\r\n            } else {\r\n                leftBlocks = 0;\r\n            }\r\n\r\n            let blockCount = rightBlocks - leftBlocks;\r\n\r\n            //TODO: Double-check if this micro-optimization works correctly like the original\r\n            if (blockCount == 0) {\r\n                let leftLength = leftBlocks * blockLen;\r\n\r\n                // INCORRECT PARAMETER BUG FIXED: these merges should be using `offset`, not `start`\r\n                if (buffer) {\r\n                    this.grailMergeForwards(offset, leftLength, lastFragment, blockLen);\r\n                } else {\r\n                    this.grailLazyMerge(offset, leftLength, lastFragment);\r\n                }\r\n            } else {\r\n                if (buffer) {\r\n                    this.grailMergeBlocks(keys, keys + medianKey, offset, blockCount, blockLen, leftBlocks, lastFragment);\r\n                } else {\r\n                    this.grailLazyMergeBlocks(keys, keys + medianKey, offset, blockCount, blockLen, leftBlocks, lastFragment);\r\n                }\r\n            }\r\n        }\r\n\r\n        if (buffer) {\r\n            this.grailInPlaceBufferReset(start, length, blockLen);\r\n        }\r\n    }\r\n\r\n    grailCombineOutOfPlace(keys, start, length, subarrayLen, blockLen, mergeCount, lastSubarray) {\r\n        this.arraycopy(-1, start - blockLen, this.externalBuffer, 0, blockLen);\r\n\r\n        for (let mergeIndex = 0; mergeIndex < mergeCount; mergeIndex++) {\r\n            let offset = start + (mergeIndex * (2 * subarrayLen));\r\n            let blockCount = parseInt((2 * subarrayLen) / blockLen);\r\n\r\n            this.grailInsertSort(keys, blockCount);\r\n\r\n            // INCORRECT PARAMETER BUG FIXED: `block select sort` should be using `offset`, not `start`\r\n            let medianKey = parseInt(subarrayLen / blockLen);\r\n            medianKey = this.grailBlockSelectSort(keys, offset, medianKey, blockCount, blockLen);\r\n\r\n            this.grailMergeBlocksOutOfPlace(keys, keys + medianKey, offset, blockCount, blockLen, 0, 0);\r\n        }\r\n\r\n        // INCORRECT CONDITIONAL/PARAMETER BUG FIXED: Credit to 666666t for debugging.\r\n        if (lastSubarray != 0) {\r\n            let offset = start + (mergeCount * (2 * subarrayLen));\r\n            let rightBlocks = parseInt(lastSubarray / blockLen);\r\n\r\n            this.grailInsertSort(keys, rightBlocks + 1);\r\n\r\n            // INCORRECT PARAMETER BUG FIXED: `block select sort` should be using `offset`, not `start`\r\n            let medianKey = subarrayLen / blockLen;\r\n            medianKey = this.grailBlockSelectSort(keys, offset, medianKey, rightBlocks, blockLen);\r\n\r\n            // MISSING BOUNDS CHECK BUG FIXED: `lastFragment` *can* be 0 if the `lastSubarray` is evenly\r\n            //                                 divided into blocks. This prevents Grailsort from going\r\n            //                                 out of bounds.\r\n            let lastFragment = lastSubarray % blockLen;\r\n            let leftBlocks;\r\n            if (lastFragment != 0) {\r\n                leftBlocks = this.grailCountFinalLeftBlocks(offset, rightBlocks, blockLen);\r\n            } else {\r\n                leftBlocks = 0;\r\n            }\r\n\r\n            let blockCount = rightBlocks - leftBlocks;\r\n\r\n            if (blockCount == 0) {\r\n                // INCORRECT PARAMETER BUG FIXED: this merge should be using `offset`, not `start`\r\n                let leftLength = leftBlocks * blockLen;\r\n                this.grailMergeOutOfPlace(offset, leftLength, lastFragment, blockLen);\r\n            } else {\r\n                this.grailMergeBlocksOutOfPlace(keys, keys + medianKey, offset, blockCount, blockLen, leftBlocks, lastFragment);\r\n            }\r\n        }\r\n\r\n        this.grailOutOfPlaceBufferReset(start, length, blockLen);\r\n        this.arraycopy(this.externalBuffer, 0, -1, start - blockLen, blockLen);\r\n    }\r\n\r\n    // 'keys' are on the left side of array. Blocks of length 'subarrayLen' combined. We'll combine them in pairs\r\n    // 'subarrayLen' is a power of 2. (2 * subarrayLen / blockLen) keys are guaranteed\r\n    grailCombineBlocks(keys, start, length, subarrayLen, blockLen, buffer) {\r\n        let mergeCount = parseInt(length / (2 * subarrayLen));\r\n        let lastSubarray = parseInt(length % (2 * subarrayLen));\r\n\r\n        if (lastSubarray <= subarrayLen) {\r\n            length -= lastSubarray;\r\n            lastSubarray = 0;\r\n        }\r\n\r\n        // INCOMPLETE CONDITIONAL BUG FIXED: In order to combine blocks out-of-place, we must check if a full-sized\r\n        //                                   block fits into our external buffer.\r\n        if (buffer && blockLen <= this.externalBufferLen) {\r\n            this.grailCombineOutOfPlace(keys, start, length, subarrayLen, blockLen, mergeCount, lastSubarray);\r\n        } else {\r\n            this.grailCombineInPlace(keys, start, length, subarrayLen, blockLen, mergeCount, lastSubarray, buffer);\r\n        }\r\n    }\r\n\r\n    // \"Classic\" in-place merge sort using binary searches and rotations\r\n    //\r\n    // cost: min(leftLen, rightLen)^2 + max(leftLen, rightLen)\r\n    grailLazyMerge(start, leftLen, rightLen) {\r\n        if (leftLen < rightLen) {\r\n            while (leftLen != 0) {\r\n                let insertPos = this.grailBinarySearchLeft(start + leftLen, rightLen, this.Reads.readValue(start));\r\n\r\n                if (insertPos != 0) {\r\n                    this.grailRotate(start, leftLen, insertPos);\r\n                    start += insertPos;\r\n                    rightLen -= insertPos;\r\n                }\r\n\r\n                if (rightLen == 0) {\r\n                    break;\r\n                } else {\r\n                    do {\r\n                        start++;\r\n                        leftLen--;\r\n                    } while (leftLen != 0 && this.Reads.compareInArr(start,\r\n                        start + leftLen) <= 0);\r\n                }\r\n            }\r\n        } else {\r\n            let end = start + leftLen + rightLen - 1;\r\n            while (rightLen != 0) {\r\n                let insertPos = this.grailBinarySearchRight(start, leftLen, this.Reads.readValue(end));\r\n\r\n                if (insertPos != leftLen) {\r\n                    this.grailRotate(start + insertPos, leftLen - insertPos, rightLen);\r\n                    end -= leftLen - insertPos;\r\n                    leftLen = insertPos;\r\n                }\r\n\r\n                if (leftLen == 0) {\r\n                    break;\r\n                } else {\r\n                    let leftEnd = start + leftLen - 1;\r\n                    do {\r\n                        rightLen--;\r\n                        end--;\r\n                    } while (rightLen != 0 && this.Reads.compareInArr(leftEnd,\r\n                        end) <= 0);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    grailLazyStableSort(start, length) {\r\n        for (let index = 1; index < length; index += 2) {\r\n            let left = start + index - 1;\r\n            let right = start + index;\r\n\r\n            if (this.Reads.compareInArr(left, right) > 0) {\r\n                this.grailSwap(left, right);\r\n            }\r\n        }\r\n        for (let mergeLen = 2; mergeLen < length; mergeLen *= 2) {\r\n            let mergeIndex;\r\n            let mergeEnd = length - (2 * mergeLen);\r\n\r\n            for (mergeIndex = 0; mergeIndex <= mergeEnd; mergeIndex += (2 * mergeLen)) {\r\n                this.grailLazyMerge(start + mergeIndex, mergeLen, mergeLen);\r\n            }\r\n\r\n            let leftOver = length - mergeIndex;\r\n            if (leftOver > mergeLen) {\r\n                this.grailLazyMerge(start + mergeIndex, mergeLen, leftOver - mergeLen);\r\n            }\r\n        }\r\n    }\r\n\r\n    static calcMinKeys(numKeys, blockKeysSum) {\r\n        let minKeys = 1;\r\n        while (minKeys < numKeys && blockKeysSum != 0) {\r\n            minKeys *= 2;\r\n            blockKeysSum = parseInt(blockKeysSum / 8);\r\n        }\r\n        return minKeys;\r\n    }\r\n\r\n    grailCommonSort(start, length, extBuf, extBufLen) {\r\n        if (length < 16) {\r\n            this.grailInsertSort(start, length);\r\n            return;\r\n        } else {\r\n            let blockLen = 1;\r\n\r\n            // find the smallest power of two greater than or equal to\r\n            // the square root of the input's length\r\n            while ((blockLen * blockLen) < length) {\r\n                blockLen *= 2;\r\n            }\r\n\r\n            // '((a - 1) / b) + 1' is actually a clever and very efficient\r\n            // formula for the ceiling of (a / b)\r\n            //\r\n            // credit to Anonymous0726 for figuring this out!\r\n            let keyLen = parseInt((length - 1) / blockLen) + 1;\r\n\r\n            // Grailsort is hoping to find `2 * sqrt(n)` unique items\r\n            // throughout the array\r\n            let idealKeys = keyLen + blockLen;\r\n\r\n            //TODO: Clean up `start +` offsets\r\n            let keysFound = this.grailCollectKeys(start, length, idealKeys);\r\n\r\n            let idealBuffer;\r\n            if (keysFound < idealKeys) {\r\n                if (keysFound < 4) {\r\n                    // GRAILSORT STRATEGY 3 -- No block swaps or scrolling buffer; resort to Lazy Stable Sort\r\n                    this.grailLazyStableSort(start, length);\r\n                    return;\r\n                } else {\r\n                    // GRAILSORT STRATEGY 2 -- Block swaps with small scrolling buffer and/or lazy merges\r\n                    keyLen = blockLen;\r\n                    blockLen = 0;\r\n                    idealBuffer = false;\r\n\r\n                    while (keyLen > keysFound) {\r\n                        keyLen = parseInt(keyLen / 2);\r\n                    }\r\n                }\r\n            } else {\r\n                // GRAILSORT STRATEGY 1 -- Block swaps with scrolling buffer\r\n                idealBuffer = true;\r\n            }\r\n\r\n            let bufferEnd = blockLen + keyLen;\r\n            let bufferLen;\r\n            if (idealBuffer) {\r\n                bufferLen = blockLen;\r\n            } else {\r\n                bufferLen = keyLen;\r\n            }\r\n\r\n            if (idealBuffer && extBuf != null) {\r\n                // GRAILSORT + EXTRA SPACE\r\n                this.externalBuffer = extBuf;\r\n                this.externalBufferLen = extBufLen;\r\n            }\r\n\r\n            this.grailBuildBlocks(start + bufferEnd, length - bufferEnd, bufferLen);\r\n\r\n            while ((length - bufferEnd) > (2 * bufferLen)) {\r\n                bufferLen *= 2;\r\n\r\n                let currentBlockLen = blockLen;\r\n                let scrollingBuffer = idealBuffer;\r\n\r\n                if (!scrollingBuffer) {\r\n                    if (keyLen > 4 && (parseInt(keyLen / 8) * keyLen) >= bufferLen) {\r\n                        currentBlockLen = parseInt(keyLen / 2);\r\n                        scrollingBuffer = true;\r\n                    } else {\r\n                        let blockKeysSum = parseInt(bufferLen * keysFound) / 2;\r\n                        let minKeys = GrailSort.calcMinKeys(keyLen, blockKeysSum);\r\n\r\n                        currentBlockLen = parseInt(2 * bufferLen) / minKeys;\r\n                    }\r\n                }\r\n\r\n                this.grailCombineBlocks(start, start + bufferEnd, length - bufferEnd, bufferLen, currentBlockLen, scrollingBuffer);\r\n            }\r\n\r\n            this.grailInsertSort(start, bufferEnd);\r\n            this.grailLazyMerge(start, bufferEnd, length - bufferEnd);\r\n        }\r\n    }\r\n\r\n    grailSortInPlace(start, length) {\r\n        this.grailCommonSort(start, length, null, 0);\r\n    }\r\n\r\n    /*\r\n    grailSortStaticOOP(array, start, length) {\r\n        let buffer = Array.newInstance(array[0].getClass(), GRAIL_STATIC_EXT_BUF_LEN);\r\n        this.grailCommonSort(array, start, length, buffer, GRAIL_STATIC_EXT_BUF_LEN);\r\n    }\r\n    \r\n    grailSortDynamicOOP(array, start, length) {\r\n        let bufferLen = 1;\r\n        while((bufferLen * bufferLen) < length) {\r\n            bufferLen *= 2;\r\n        }\r\n\r\n        let buffer = Array.newInstance(array[0].getClass(), bufferLen);\r\n\r\n        this.grailCommonSort(array, start, length, buffer, bufferLen);\r\n    }*/\r\n    runSort(low, high, bucketsNum) {\r\n        this.grailSortInPlace(low, high + 1)\r\n    }\r\n}\r\n\r\n","import {Sort} from \"./Sort\";\r\n\r\nexport class LLQuickSort extends Sort{\r\n    constructor(arrayVisualizer) {\r\n        super(arrayVisualizer);\r\n        this.sortName = \"LLQuickSort\"\r\n    }\r\n    partition(lo, hi) {\r\n        let pivot = hi;\r\n        let i = lo;\r\n        for (let j = lo; j < hi; j++) {\r\n            if (this.Reads.compareInArr(j, pivot) < 0) {\r\n                this.Writes.swap(i, j);\r\n                i++;\r\n            }\r\n        }\r\n        this.Writes.swap(i, hi);\r\n        return i;\r\n    }\r\n\r\n    LLQuickSort(lo, hi) {\r\n        if (lo < hi) {\r\n            let p = this.partition(lo, hi);\r\n            this.LLQuickSort(lo, p - 1);\r\n            this.LLQuickSort(p + 1, hi);\r\n        }\r\n    }\r\n    runSort(low, high) {\r\n        this.LLQuickSort(low, high)\r\n    }\r\n}","import {Sort} from \"./Sort\";\r\n\r\nexport class LRQuickSort extends Sort{\r\n    constructor(arrayVisualizer) {\r\n        super(arrayVisualizer);\r\n        this.sortName=\"LRQuickSort\"\r\n    }\r\n\r\n    quickSort(p, r){\r\n        let pivot = Math.trunc(p + (r - p + 1) / 2);\r\n        let x = this.Reads.readValue(pivot);\r\n\r\n        let i = p;\r\n        let j = r;\r\n\r\n        while (i <= j) {\r\n            while (this.Reads.readValue(i) < x){\r\n                i++;\r\n            }\r\n            while (this.Reads.readValue(j) > x){\r\n                j--;\r\n            }\r\n\r\n            if (i <= j) {\r\n                this.Writes.swap(i, j);\r\n                i++;\r\n                j--;\r\n            }\r\n        }\r\n\r\n        if(p < j) {\r\n            this.quickSort(p, j);\r\n        }\r\n        if(i < r) {\r\n            this.quickSort(i, r);\r\n        }\r\n    }\r\n\r\n    runSort(low, high) {\r\n        this.quickSort(low, high)\r\n    }\r\n}","import {Sort} from \"./Sort\";\r\nimport {Element} from \"../classes/Element\";\r\n\r\nexport class LSDRadixSort extends Sort {\r\n    constructor(arrayVisualizer) {\r\n        super(arrayVisualizer);\r\n        this.sortName = \"LSD RadixSort\"\r\n        this.isNeedBucketsNum = true;\r\n    }\r\n\r\n    LSDRadixSort(bucketsNum) {\r\n        let len = this.arrayVisualizer.getArrLength()\r\n        let max = this.Reads.readValue(0);\r\n        for (let i = 1; i < len; ++i) {\r\n            let tmp = this.Reads.readValue(i)\r\n            if (max < tmp) {\r\n                max = tmp\r\n            }\r\n        }\r\n        let highestPower = Math.log(max) / Math.log(bucketsNum);\r\n\r\n        let registers = new Array(bucketsNum)\r\n        for (let i = 0; i < bucketsNum; i++) {\r\n            registers[i] = [];\r\n        }\r\n\r\n        for (let p = 0; p <= highestPower; p++) {\r\n            for (let i = 0; i < len; i++) {\r\n                let stabVal = Math.max(0, Math.min(this.Reads.readValue(i), len - 1))\r\n                let digit = Math.trunc(stabVal / (bucketsNum ** p) % bucketsNum)\r\n                // console.log(digit)\r\n                registers[digit].push(this.Reads.get(i))\r\n                //PseudoWrite\r\n            }\r\n\r\n\r\n            let tempArray = this.Writes.createAuxArray(len)\r\n            let tempWrite = new Array(len)\r\n            let radix = registers.length\r\n\r\n\r\n            let total = 0;\r\n            for (let index = 0; index < registers.length; index++) {\r\n                for (let i = 0; i < registers[index].length; i++) {\r\n                    this.Writes.auxWrite(total++, registers[index][i], tempArray)\r\n                }\r\n                registers[index] = []\r\n            }\r\n\r\n            for (let i = 0; i < len; i++) {\r\n                let register = i % radix\r\n                let pos = (register * Math.trunc(len / radix) + Math.trunc(i / radix))\r\n\r\n                this.Writes.write(pos, this.Reads.auxGet(pos, tempArray))\r\n                tempWrite[pos] = true\r\n            }\r\n            for (let i = 0; i < len; i++) {\r\n                if (!tempWrite[i]) {\r\n                    this.Writes.write(i, this.Reads.auxGet(i, tempArray))\r\n                }\r\n            }\r\n\r\n            this.Writes.removeAuxArray(tempArray)\r\n\r\n        }\r\n\r\n    }\r\n\r\n    runSort(low, high, bucketsNum) {\r\n        this.LSDRadixSort(bucketsNum)\r\n    }\r\n}","import {Sort} from \"./Sort\";\r\nimport {Writes} from \"../ArrayAccess/Writes\";\r\n\r\nexport class MergeSort extends Sort {\r\n    constructor(arrayVisualizer) {\r\n        super(arrayVisualizer);\r\n        this.sortName = \"MergeSort\"\r\n    }\r\n\r\n    merge(tmp, start, mid, end) {\r\n        if (start === mid) {\r\n            return\r\n        }\r\n\r\n        this.merge(tmp, start, Math.trunc((mid + start) / 2), mid);\r\n        this.merge(tmp, mid, Math.trunc((mid + end) / 2), end);\r\n\r\n        let low = start\r\n        let high = mid\r\n\r\n        for (let nxt = 0; nxt < end - start; nxt++) {\r\n            if (low >= mid && high >= end) break;\r\n\r\n            if (low < mid && high >= end) {\r\n                this.Writes.auxWrite(nxt, this.Reads.get(low++), tmp)\r\n            } else if (low >= mid && high < end) {\r\n                this.Writes.auxWrite(nxt, this.Reads.get(high++), tmp)\r\n            } else if (this.Reads.compareInArr(low, high) <= 0) {\r\n                this.Writes.auxWrite(nxt, this.Reads.get(low++), tmp)\r\n            } else {\r\n                this.Writes.auxWrite(nxt, this.Reads.get(high++), tmp)\r\n            }\r\n        }\r\n        for (let i = 0; i < end - start; i++) {\r\n            this.Writes.write(start + i, this.Reads.auxGet(i, tmp))\r\n        }\r\n\r\n    }\r\n\r\n    MergeSort(low, high) {\r\n        let tmp = this.Writes.createAuxArray(low - high)\r\n\r\n        let mid = low + (Math.trunc((high - low) / 2))\r\n\r\n        this.merge(tmp, low, mid, high+1)\r\n\r\n        this.Writes.removeAuxArray(tmp)\r\n    }\r\n\r\n    runSort(low, high) {\r\n        this.MergeSort(low, high)\r\n    }\r\n}","import {Sort} from \"./Sort\";\r\nimport {InsertionSort} from \"./InsertionSort\";\r\n\r\nexport class PseudoTimSort extends Sort {\r\n    MIN_MERGE\r\n    constructor(arrayVisualizer) {\r\n        super(arrayVisualizer);\r\n        this.sortName = \"PseudoTimSort\"\r\n        this.MIN_MERGE = 32\r\n    }\r\n\r\n    minRunLength(n) {\r\n        let r = 0;\r\n        while (n >= this.MIN_MERGE)\r\n        {\r\n            r |= (n & 1);\r\n            n >>= 1;\r\n        }\r\n        return n + r;\r\n    }\r\n    merge(l, m, r) {\r\n        let len1 = m - l + 1, len2 = r - m;\r\n        let left = this.Writes.createAuxArray(len1);\r\n        let right = this.Writes.createAuxArray(len2);\r\n        for(let x = 0; x < len1; x++)\r\n        {\r\n            // left[x] = arr[l + x];\r\n            this.Writes.auxWrite(x, this.Reads.get(l + x), left)\r\n        }\r\n        for(let x = 0; x < len2; x++)\r\n        {\r\n            // right[x] = arr[m + 1 + x];\r\n            this.Writes.auxWrite(x, this.Reads.get(m + 1 + x), right)\r\n        }\r\n\r\n        let i = 0;\r\n        let j = 0;\r\n        let k = l;\r\n\r\n        while (i < len1 && j < len2)\r\n        {\r\n            // if (left[i] <= right[j])\r\n            if(this.Reads.compareValues(this.Reads.auxGet(i, left), this.Reads.auxGet(j, right))<=0)\r\n            {\r\n                // arr[k] = left[i];\r\n                this.Writes.write(k, this.Reads.auxGet(i, left))\r\n                i++;\r\n            }\r\n            else\r\n            {\r\n                // arr[k] = right[j];\r\n                this.Writes.write(k, this.Reads.auxGet(j, right))\r\n                j++;\r\n            }\r\n            k++;\r\n        }\r\n\r\n        while (i < len1) {\r\n            // arr[k] = left[i];\r\n            this.Writes.write(k, this.Reads.auxGet(i, left))\r\n            k++;\r\n            i++;\r\n        }\r\n\r\n        while (j < len2) {\r\n            this.Writes.write(k, this.Reads.auxGet(j, right))\r\n            k++;\r\n            j++;\r\n        }\r\n        this.Writes.removeAuxArray(right)\r\n        this.Writes.removeAuxArray(left)\r\n    }\r\n\r\n    pseudoTimSort(n)\r\n    {\r\n        let minRun = this.minRunLength(this.MIN_MERGE);\r\n\r\n        for(let i = 0; i < n; i += minRun)\r\n        {\r\n            let insertionSort = new InsertionSort(this.arrayVisualizer)\r\n\r\n            insertionSort.runSort(i, Math.min(\r\n                (i + this.MIN_MERGE - 1), (n - 1)));\r\n        }\r\n\r\n        for(let size = minRun; size < n; size = 2 * size) {\r\n            for(let left = 0; left < n; left += 2 * size) {\r\n                let mid = left + size - 1;\r\n                let right = Math.min((left + 2 * size - 1), (n - 1));\r\n                if(mid < right) {\r\n                    this.merge(left, mid, right);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    runSort(low, high) {\r\n        this.pseudoTimSort(high+1)\r\n    }\r\n}","import {Sort} from \"./Sort\";\r\n\r\nexport class SelectionSort extends Sort{\r\n    constructor(arrayVisualizer) {\r\n        super(arrayVisualizer);\r\n        this.sortName = \"SelectionSort\"\r\n    }\r\n\r\n    SelectionSort() {\r\n        for (let i=0; i < this.arrLength; i++) {\r\n            let minIndex = i\r\n            for (let j=i; j < this.arrLength; j++) {\r\n                if (this.Reads.compareInArr(j, minIndex) < 0) {\r\n                    minIndex = j\r\n                }\r\n            }\r\n\r\n            if (this.Reads.compareInArr(i, minIndex) > 0) {\r\n                this.Writes.swap(i, minIndex);\r\n            }\r\n        }\r\n    }\r\n\r\n    runSort(low, high) {\r\n        this.SelectionSort(low, high)\r\n    }\r\n}","import {Sort} from \"./Sort\";\r\n\r\nexport class SlowSort extends Sort{\r\n    constructor(arrayVisualizer) {\r\n        super(arrayVisualizer);\r\n        this.sortName = \"SlowSort\"\r\n        this.warnLen = 120\r\n    }\r\n\r\n    SlowSort(i, j) {\r\n        if (i >= j) {\r\n            return;\r\n        }\r\n        let m = Math.floor((i + j) / 2);\r\n        this.SlowSort(i, m);\r\n        this.SlowSort(m + 1, j);\r\n        if (this.Reads.compareInArr(j, m) < 0) {\r\n            this.Writes.swap(j, m)\r\n        }\r\n        this.SlowSort(i, j - 1)\r\n    }\r\n\r\n    runSort(low, high) {\r\n        this.SlowSort(low, high)\r\n    }\r\n}","import {Sort} from \"./Sort\";\r\n\r\nexport class StoogeSort extends Sort{\r\n    constructor(arrayVisualizer) {\r\n        super(arrayVisualizer);\r\n        this.sortName = \"StoogeSort\"\r\n    }\r\n\r\n    StoogeSort(i, j) {\r\n        if (this.Reads.compareInArr(i, j) > 0) {\r\n            this.Writes.swap(i, j)\r\n        }\r\n        if (j - i > 1) {\r\n            let t = Math.trunc((j - i + 1) / 3)\r\n            this.StoogeSort(i, j - t)\r\n            this.StoogeSort(i + t, j)\r\n            this.StoogeSort(i, j - t)\r\n        }\r\n    }\r\n\r\n    runSort(low, high) {\r\n        this.StoogeSort(low, high)\r\n    }\r\n}","import {Sort} from \"./Sort\";\r\n\r\n/**\r\n * Default minimum size of a run.\r\n */\r\nconst DEFAULT_MIN_MERGE = 32\r\n\r\n/**\r\n * Minimum ordered subsequece required to do galloping.\r\n */\r\nconst DEFAULT_MIN_GALLOPING = 7\r\n\r\n/**\r\n * Default tmp storage length. Can increase depending on the size of the\r\n * smallest run to merge.\r\n */\r\nconst DEFAULT_TMP_STORAGE_LENGTH = 256\r\n\r\n/**\r\n * Pre-computed powers of 10 for efficient lexicographic comparison of\r\n * small integers.\r\n */\r\nconst POWERS_OF_TEN = [1e0, 1e1, 1e2, 1e3, 1e4, 1e5, 1e6, 1e7, 1e8, 1e9]\r\n\r\nlet results\r\n\r\n/**\r\n * Estimate the logarithm base 10 of a small integer.\r\n *\r\n * @param {number} x - The integer to estimate the logarithm of.\r\n * @return {number} - The estimated logarithm of the integer.\r\n */\r\nconst log10 = x => x < 1e5\r\n    ? x < 1e2\r\n        ? x < 1e1\r\n            ? 0\r\n            : 1\r\n        : x < 1e4\r\n            ? x < 1e3\r\n                ? 2\r\n                : 3\r\n            : 4\r\n    : x < 1e7\r\n        ? x < 1e6\r\n            ? 5\r\n            : 6\r\n        : x < 1e9\r\n            ? x < 1e8\r\n                ? 7\r\n                : 8\r\n            : 9\r\n\r\n/**\r\n * Default alphabetical comparison of items.\r\n *\r\n * @param {string|object|number} a - First element to compare.\r\n * @param {string|object|number} b - Second element to compare.\r\n * @return {number} - A positive number if a.toString() > b.toString(), a\r\n * negative number if .toString() < b.toString(), 0 otherwise.\r\n */\r\nfunction alphabeticalCompare(a, b) {\r\n    if (a === b) {\r\n        return 0\r\n    }\r\n\r\n    if (~~a === a && ~~b === b) {\r\n        if (a === 0 || b === 0) {\r\n            return a < b ? -1 : 1\r\n        }\r\n\r\n        if (a < 0 || b < 0) {\r\n            if (b >= 0) {\r\n                return -1\r\n            }\r\n\r\n            if (a >= 0) {\r\n                return 1\r\n            }\r\n\r\n            a = -a\r\n            b = -b\r\n        }\r\n\r\n        const al = log10(a)\r\n        const bl = log10(b)\r\n\r\n        let t = 0\r\n\r\n        if (al < bl) {\r\n            a *= POWERS_OF_TEN[bl - al - 1]\r\n            b /= 10\r\n            t = -1\r\n        } else if (al > bl) {\r\n            b *= POWERS_OF_TEN[al - bl - 1]\r\n            a /= 10\r\n            t = 1\r\n        }\r\n\r\n        if (a === b) {\r\n            return t\r\n        }\r\n\r\n        return a < b ? -1 : 1\r\n    }\r\n\r\n    const aStr = String(a)\r\n    const bStr = String(b)\r\n\r\n    if (aStr === bStr) {\r\n        return 0\r\n    }\r\n\r\n    return aStr < bStr ? -1 : 1\r\n}\r\n\r\n/**\r\n * Compute minimum run length for TimSort\r\n *\r\n * @param {number} n - The size of the array to sort.\r\n */\r\nfunction minRunLength(n) {\r\n    let r = 0\r\n\r\n    while (n >= DEFAULT_MIN_MERGE) {\r\n        r |= (n & 1)\r\n        n >>= 1\r\n    }\r\n\r\n    return n + r\r\n}\r\n\r\n/**\r\n * Counts the length of a monotonically ascending or strictly monotonically\r\n * descending sequence (run) starting at array[lo] in the range [lo, hi). If\r\n * the run is descending it is made ascending.\r\n *\r\n * @param {array} array - The array to reverse.\r\n * @param {number} lo - First element in the range (inclusive).\r\n * @param {number} hi - Last element in the range.\r\n * @param {function} compare - Item comparison function.\r\n * @return {number} - The length of the run.\r\n */\r\n\r\nexport class TimSort extends Sort {\r\n    constructor(arrayVisualizer) {\r\n        super(arrayVisualizer);\r\n\r\n        this.minGallop = DEFAULT_MIN_GALLOPING\r\n\r\n        this.tmpStorageLength = this.arrLength < 2 * DEFAULT_TMP_STORAGE_LENGTH\r\n            ? this.arrLength >>> 1\r\n            : DEFAULT_TMP_STORAGE_LENGTH\r\n\r\n        // this.tmp = new Array(this.tmpStorageLength)\r\n        this.tmp = this.Writes.createAuxArray(this.tmpStorageLength)\r\n\r\n        this.stackLength = this.arrLength < 120\r\n            ? 5\r\n            : this.arrLength < 1542\r\n                ? 10\r\n                : this.arrLength < 119151\r\n                    ? 19\r\n                    : 40\r\n\r\n        this.runStart = new Array(this.stackLength)\r\n        this.runLength = new Array(this.stackLength)\r\n\r\n        this.stackSize = 0\r\n        this.sortName = \"TimSort\"\r\n    }\r\n\r\n    makeAscendingRun(lo, hi) {\r\n        let runHi = lo + 1\r\n\r\n        if (runHi === hi) {\r\n            return 1\r\n        }\r\n\r\n        // Descending\r\n        // if (compare(array[runHi++], array[lo]) < 0) {\r\n        if (this.Reads.compareInArr(runHi++, lo)<0) {\r\n            // while (runHi < hi && compare(array[runHi], array[runHi - 1]) < 0) {\r\n            while (runHi < hi && this.Reads.compareInArr(runHi, runHi - 1)<0) {\r\n                runHi++\r\n            }\r\n\r\n            // this.reverseRun(array, lo, runHi)\r\n            this.reverseRun(lo, runHi)\r\n            // reverseRun(results, lo, runHi)\r\n            // Ascending\r\n        } else {\r\n            // while (runHi < hi && compare(array[runHi], array[runHi - 1]) >= 0) {\r\n            while (runHi < hi && this.Reads.compareInArr(runHi, runHi - 1)>=0) {\r\n                runHi++\r\n            }\r\n        }\r\n\r\n        return runHi - lo\r\n    }\r\n\r\n    /**\r\n     * Reverse an array in the range [lo, hi).\r\n     *\r\n     * @param {array} array - The array to reverse.\r\n     * @param {number} lo - First element in the range (inclusive).\r\n     * @param {number} hi - Last element in the range.\r\n     */\r\n\r\n\r\n    reverseRun(lo, hi) {\r\n        hi--\r\n\r\n        while (lo < hi) {\r\n            // const t = array[lo]\r\n            // array[lo++] = array[hi]\r\n            // array[hi--] = t\r\n            const t = this.Reads.get(lo)\r\n            this.Writes.write(lo++, this.Reads.get(hi))\r\n            this.Writes.write(hi--, t)\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Perform the binary sort of the array in the range [lo, hi) where start is\r\n     * the first element possibly out of order.\r\n     *\r\n     * @param {array} array - The array to sort.\r\n     * @param {number} lo - First element in the range (inclusive).\r\n     * @param {number} hi - Last element in the range.\r\n     * @param {number} start - First element possibly out of order.\r\n     * @param {} compare - Item comparison function.\r\n     */\r\n\r\n\r\n    binaryInsertionSort(lo, hi, start) {\r\n        if (start === lo) {\r\n            start++\r\n        }\r\n\r\n        for (; start < hi; start++) {\r\n            // const pivot = array[start]\r\n            const pivot = this.Reads.get(start)\r\n\r\n            // const pivotIndex = results[start]\r\n\r\n            // Ranges of the array where pivot belongs\r\n            let left = lo\r\n            let right = start\r\n\r\n            /*\r\n             *   pivot >= array[i] for i in [lo, left)\r\n             *   pivot <  array[i] for i in  in [right, start)\r\n             */\r\n            while (left < right) {\r\n                const mid = (left + right) >>> 1\r\n\r\n                // if (compare(pivot, array[mid]) < 0) {\r\n                if (pivot.getValue() < this.Reads.readValue(mid)) {\r\n                    right = mid\r\n                } else {\r\n                    left = mid + 1\r\n                }\r\n            }\r\n\r\n            /*\r\n             * Move elements right to make room for the pivot. If there are elements\r\n             * equal to pivot, left points to the first slot after them: this is also\r\n             * a reason for which TimSort is stable\r\n             */\r\n            let n = start - left\r\n            // Switch is just an optimization for small arrays\r\n            switch (n) {\r\n                case 3:\r\n                    // array[left + 3] = array[left + 2]\r\n                    this.Writes.write(left + 3, this.Reads.get(left + 2))\r\n                /* falls through */\r\n                case 2:\r\n                    // array[left + 2] = array[left + 1]\r\n                    this.Writes.write(left + 2, this.Reads.get(left + 1))\r\n                /* falls through */\r\n                case 1:\r\n                    // array[left + 1] = array[left]\r\n                    this.Writes.write(left + 1, this.Reads.get(left))\r\n                    break\r\n                default:\r\n                    while (n > 0) {\r\n                        // array[left + n] = array[left + n - 1]\r\n                        this.Writes.write(left + n, this.Reads.get(left + n - 1))\r\n                        n--\r\n                    }\r\n            }\r\n\r\n            // array[left] = pivot\r\n            this.Writes.write(left, pivot)\r\n            // results[left] = pivotIndex\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Find the position at which to insert a value in a sorted range. If the range\r\n     * contains elements equal to the value the leftmost element index is returned\r\n     * (for stability).\r\n     *\r\n     * @param {number} value - Value to insert.\r\n     * @param {array} array - The array in which to insert value.\r\n     * @param {number} start - First element in the range.\r\n     * @param {number} length - Length of the range.\r\n     * @param {number} hint - The index at which to begin the search.\r\n     * @param {function} compare - Item comparison function.\r\n     * @return {number} - The index where to insert value.\r\n     */\r\n\r\n\r\n    gallopLeft(value, isAux, start, length, hint) {\r\n        let lastOffset = 0\r\n        let maxOffset = 0\r\n        let offset = 1\r\n        if (!isAux) {\r\n            // if (compare(value, array[start + hint]) > 0) {\r\n            if (value > this.Reads.readValue(start + hint)) {\r\n                maxOffset = length - hint\r\n\r\n                while (\r\n                    offset < maxOffset\r\n                    // && compare(value, array[start + hint + offset]) > 0\r\n                    && value > this.Reads.readValue(start + hint + offset)\r\n                    ) {\r\n                    lastOffset = offset\r\n                    offset = (offset << 1) + 1\r\n\r\n                    if (offset <= 0) {\r\n                        offset = maxOffset\r\n                    }\r\n                }\r\n\r\n                if (offset > maxOffset) {\r\n                    offset = maxOffset\r\n                }\r\n\r\n                // Make offsets relative to start\r\n                lastOffset += hint\r\n                offset += hint\r\n\r\n                // value <= array[start + hint]\r\n            } else {\r\n                maxOffset = hint + 1\r\n                while (\r\n                    offset < maxOffset\r\n                    // && compare(value, array[start + hint - offset]) <= 0\r\n                    // && value <= this.Reads.readValue(start + hint + offset)\r\n                    && value <= this.Reads.readValue(start + hint - offset)\r\n                    ) {\r\n                    lastOffset = offset\r\n                    offset = (offset << 1) + 1\r\n\r\n                    if (offset <= 0) {\r\n                        offset = maxOffset\r\n                    }\r\n                }\r\n                if (offset > maxOffset) {\r\n                    offset = maxOffset\r\n                }\r\n\r\n                // Make offsets relative to start\r\n                const tmp = lastOffset\r\n                lastOffset = hint - offset\r\n                offset = hint - tmp\r\n            }\r\n\r\n            /*\r\n             * Now array[start+lastOffset] < value <= array[start+offset], so value\r\n             * belongs somewhere in the range (start + lastOffset, start + offset]. Do a\r\n             * binary search, with invariant array[start + lastOffset - 1] < value <=\r\n             * array[start + offset].\r\n             */\r\n            lastOffset++\r\n            while (lastOffset < offset) {\r\n                const m = lastOffset + ((offset - lastOffset) >>> 1)\r\n\r\n                // if (compare(value, array[start + m]) > 0) {\r\n                if (value > this.Reads.readValue(start + m)) {\r\n                    lastOffset = m + 1\r\n                } else {\r\n                    offset = m\r\n                }\r\n            }\r\n        } else {\r\n            // if (compare(value, array[start + hint]) > 0) {\r\n            if (value > this.Reads.auxReadValue(start + hint, this.tmp)) {\r\n                maxOffset = length - hint\r\n\r\n                while (\r\n                    offset < maxOffset\r\n                    // && compare(value, array[start + hint + offset]) > 0\r\n                    && value > this.Reads.auxReadValue(start + hint + offset, this.tmp)\r\n                    ) {\r\n                    lastOffset = offset\r\n                    offset = (offset << 1) + 1\r\n\r\n                    if (offset <= 0) {\r\n                        offset = maxOffset\r\n                    }\r\n                }\r\n\r\n                if (offset > maxOffset) {\r\n                    offset = maxOffset\r\n                }\r\n\r\n                // Make offsets relative to start\r\n                lastOffset += hint\r\n                offset += hint\r\n\r\n                // value <= array[start + hint]\r\n            } else {\r\n                maxOffset = hint + 1\r\n                while (\r\n                    offset < maxOffset\r\n                    // && compare(value, array[start + hint - offset]) <= 0\r\n                    // && value <= this.Reads.auxRead(start + hint + offset, this.tmp)\r\n                    && value <= this.Reads.auxReadValue(start + hint - offset, this.tmp)\r\n                    ) {\r\n                    lastOffset = offset\r\n                    offset = (offset << 1) + 1\r\n\r\n                    if (offset <= 0) {\r\n                        offset = maxOffset\r\n                    }\r\n                }\r\n                if (offset > maxOffset) {\r\n                    offset = maxOffset\r\n                }\r\n\r\n                // Make offsets relative to start\r\n                const tmp = lastOffset\r\n                lastOffset = hint - offset\r\n                offset = hint - tmp\r\n            }\r\n\r\n            /*\r\n             * Now array[start+lastOffset] < value <= array[start+offset], so value\r\n             * belongs somewhere in the range (start + lastOffset, start + offset]. Do a\r\n             * binary search, with invariant array[start + lastOffset - 1] < value <=\r\n             * array[start + offset].\r\n             */\r\n            lastOffset++\r\n            while (lastOffset < offset) {\r\n                const m = lastOffset + ((offset - lastOffset) >>> 1)\r\n\r\n                // if (compare(value, array[start + m]) > 0) {\r\n                if (value > this.Reads.auxReadValue(start + m, this.tmp)) {\r\n                    lastOffset = m + 1\r\n                } else {\r\n                    offset = m\r\n                }\r\n            }\r\n        }\r\n        return offset\r\n    }\r\n\r\n    /**\r\n     * Find the position at which to insert a value in a sorted range. If the range\r\n     * contains elements equal to the value the rightmost element index is returned\r\n     * (for stability).\r\n     *\r\n     * @param {number} value - Value to insert.\r\n     * @param {array} array - The array in which to insert value.\r\n     * @param {number} start - First element in the range.\r\n     * @param {number} length - Length of the range.\r\n     * @param {number} hint - The index at which to begin the search.\r\n     * @param {function} compare - Item comparison function.\r\n     * @return {number} - The index where to insert value.\r\n     */\r\n\r\n\r\n    gallopRight(value, isAux, start, length, hint) {\r\n        let lastOffset = 0\r\n        let maxOffset = 0\r\n        let offset = 1\r\n\r\n        if (!isAux) {\r\n            // if (compare(value, array[start + hint]) < 0) {\r\n            if (value < this.Reads.readValue(start + hint)) {\r\n                maxOffset = hint + 1\r\n\r\n                while (\r\n                    offset < maxOffset\r\n                    // && compare(value, array[start + hint - offset]) < 0\r\n                    && value < this.Reads.readValue(start + hint - offset)\r\n                    ) {\r\n                    lastOffset = offset\r\n                    offset = (offset << 1) + 1\r\n\r\n                    if (offset <= 0) {\r\n                        offset = maxOffset\r\n                    }\r\n                }\r\n\r\n                if (offset > maxOffset) {\r\n                    offset = maxOffset\r\n                }\r\n\r\n                // Make offsets relative to start\r\n                const tmp = lastOffset\r\n                lastOffset = hint - offset\r\n                offset = hint - tmp\r\n\r\n                // value >= array[start + hint]\r\n            } else {\r\n                maxOffset = length - hint\r\n\r\n                while (\r\n                    offset < maxOffset\r\n                    // && compare(value, array[start + hint + offset]) >= 0\r\n                    && value >= this.Reads.readValue(start + hint + offset)\r\n                    ) {\r\n                    lastOffset = offset\r\n                    offset = (offset << 1) + 1\r\n\r\n                    if (offset <= 0) {\r\n                        offset = maxOffset\r\n                    }\r\n                }\r\n\r\n                if (offset > maxOffset) {\r\n                    offset = maxOffset\r\n                }\r\n\r\n                // Make offsets relative to start\r\n                lastOffset += hint\r\n                offset += hint\r\n            }\r\n\r\n            /*\r\n             * Now array[start+lastOffset] < value <= array[start+offset], so value\r\n             * belongs somewhere in the range (start + lastOffset, start + offset]. Do a\r\n             * binary search, with invariant array[start + lastOffset - 1] < value <=\r\n             * array[start + offset].\r\n             */\r\n            lastOffset++\r\n\r\n            while (lastOffset < offset) {\r\n                const m = lastOffset + ((offset - lastOffset) >>> 1)\r\n\r\n                // if (compare(value, array[start + m]) < 0) {\r\n                if (value < this.Reads.readValue(start + m)) {\r\n                    offset = m\r\n                } else {\r\n                    lastOffset = m + 1\r\n                }\r\n            }\r\n\r\n        } else {\r\n            //AUX\r\n            // if (compare(value, array[start + hint]) < 0) {\r\n            if (value < this.Reads.auxReadValue(start + hint, this.tmp)) {\r\n                maxOffset = hint + 1\r\n\r\n                while (\r\n                    offset < maxOffset\r\n                    // && compare(value, array[start + hint - offset]) < 0\r\n                    && value < this.Reads.auxReadValue(start + hint - offset, this.tmp)\r\n                    ) {\r\n                    lastOffset = offset\r\n                    offset = (offset << 1) + 1\r\n\r\n                    if (offset <= 0) {\r\n                        offset = maxOffset\r\n                    }\r\n                }\r\n\r\n                if (offset > maxOffset) {\r\n                    offset = maxOffset\r\n                }\r\n\r\n                // Make offsets relative to start\r\n                const tmp = lastOffset\r\n                lastOffset = hint - offset\r\n                offset = hint - tmp\r\n\r\n                // value >= array[start + hint]\r\n            } else {\r\n                maxOffset = length - hint\r\n\r\n                while (\r\n                    offset < maxOffset\r\n                    // && compare(value, array[start + hint + offset]) >= 0\r\n                    && value >= this.Reads.auxReadValue(start + hint + offset, this.tmp)\r\n                    ) {\r\n                    lastOffset = offset\r\n                    offset = (offset << 1) + 1\r\n\r\n                    if (offset <= 0) {\r\n                        offset = maxOffset\r\n                    }\r\n                }\r\n\r\n                if (offset > maxOffset) {\r\n                    offset = maxOffset\r\n                }\r\n\r\n                // Make offsets relative to start\r\n                lastOffset += hint\r\n                offset += hint\r\n            }\r\n\r\n            /*\r\n             * Now array[start+lastOffset] < value <= array[start+offset], so value\r\n             * belongs somewhere in the range (start + lastOffset, start + offset]. Do a\r\n             * binary search, with invariant array[start + lastOffset - 1] < value <=\r\n             * array[start + offset].\r\n             */\r\n            lastOffset++\r\n\r\n            while (lastOffset < offset) {\r\n                const m = lastOffset + ((offset - lastOffset) >>> 1)\r\n\r\n                // if (compare(value, array[start + m]) < 0) {\r\n                if (value < this.Reads.auxReadValue(start + m, this.tmp)) {\r\n                    offset = m\r\n                } else {\r\n                    lastOffset = m + 1\r\n                }\r\n            }\r\n        }\r\n\r\n        return offset\r\n    }\r\n\r\n\r\n    /**\r\n     * Push a new run on TimSort's stack.\r\n     *\r\n     * @param {number} runStart - Start index of the run in the original array.\r\n     * @param {number} runLength - Length of the run;\r\n     */\r\n    pushRun(runStart, runLength) {\r\n        this.runStart[this.stackSize] = runStart\r\n        this.runLength[this.stackSize] = runLength\r\n        this.stackSize += 1\r\n    }\r\n\r\n    /**\r\n     * Merge runs on TimSort's stack so that the following holds for all i:\r\n     * 1) runLength[i - 3] > runLength[i - 2] + runLength[i - 1]\r\n     * 2) runLength[i - 2] > runLength[i - 1]\r\n     */\r\n    mergeRuns() {\r\n        while (this.stackSize > 1) {\r\n            let n = this.stackSize - 2\r\n\r\n            if (\r\n                (\r\n                    n >= 1\r\n                    && this.runLength[n - 1] <= this.runLength[n] + this.runLength[n + 1]\r\n                )\r\n                || (\r\n                    n >= 2\r\n                    && this.runLength[n - 2] <= this.runLength[n] + this.runLength[n - 1]\r\n                )\r\n            ) {\r\n                if (this.runLength[n - 1] < this.runLength[n + 1]) {\r\n                    n--\r\n                }\r\n            } else if (this.runLength[n] > this.runLength[n + 1]) {\r\n                break\r\n            }\r\n            this.mergeAt(n)\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Merge all runs on TimSort's stack until only one remains.\r\n     */\r\n    forceMergeRuns() {\r\n        while (this.stackSize > 1) {\r\n            let n = this.stackSize - 2\r\n\r\n            if (n > 0 && this.runLength[n - 1] < this.runLength[n + 1]) {\r\n                n--\r\n            }\r\n\r\n            this.mergeAt(n)\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Merge the runs on the stack at positions i and i+1. Must be always be called\r\n     * with i=stackSize-2 or i=stackSize-3 (that is, we merge on top of the stack).\r\n     *\r\n     * @param {number} i - Index of the run to merge in TimSort's stack.\r\n     */\r\n    mergeAt(i) {\r\n        let start1 = this.runStart[i]\r\n        let length1 = this.runLength[i]\r\n        const start2 = this.runStart[i + 1]\r\n        let length2 = this.runLength[i + 1]\r\n\r\n        this.runLength[i] = length1 + length2\r\n\r\n        if (i === this.stackSize - 3) {\r\n            this.runStart[i + 1] = this.runStart[i + 2]\r\n            this.runLength[i + 1] = this.runLength[i + 2]\r\n        }\r\n\r\n        this.stackSize--\r\n\r\n        /*\r\n         * Find where the first element in the second run goes in run1. Previous\r\n         * elements in run1 are already in place\r\n         */\r\n        // const k = gallopRight(array[start2], array, start1, length1, 0, compare)\r\n        const k = this.gallopRight(this.Reads.readValue(start2), false, start1, length1, 0)\r\n        start1 += k\r\n        length1 -= k\r\n\r\n        if (length1 === 0) {\r\n            return\r\n        }\r\n\r\n        /*\r\n         * Find where the last element in the first run goes in run2. Next elements\r\n         * in run2 are already in place\r\n         */\r\n        // length2 = gallopLeft(\r\n        //     array[start1 + length1 - 1],\r\n        //     array,\r\n        //     start2,\r\n        //     length2,\r\n        //     length2 - 1,\r\n        //     compare\r\n        // )\r\n        length2 = this.gallopLeft(\r\n            // array[start1 + length1 - 1],\r\n            this.Reads.readValue(start1 + length1 - 1),\r\n            false,\r\n            start2,\r\n            length2,\r\n            length2 - 1,\r\n        )\r\n\r\n        if (length2 === 0) {\r\n            return\r\n        }\r\n\r\n        /*\r\n         * Merge remaining runs. A tmp array with length = min(length1, length2) is\r\n         * used\r\n         */\r\n        if (length1 <= length2) {\r\n            this.mergeLow(start1, length1, start2, length2)\r\n        } else {\r\n            this.mergeHigh(start1, length1, start2, length2)\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Merge two adjacent runs in a stable way. The runs must be such that the\r\n     * first element of run1 is bigger than the first element in run2 and the\r\n     * last element of run1 is greater than all the elements in run2.\r\n     * The method should be called when run1.length <= run2.length as it uses\r\n     * TimSort temporary array to store run1. Use mergeHigh if run1.length >\r\n     * run2.length.\r\n     *\r\n     * @param {number} start1 - First element in run1.\r\n     * @param {number} length1 - Length of run1.\r\n     * @param {number} start2 - First element in run2.\r\n     * @param {number} length2 - Length of run2.\r\n     */\r\n    mergeLow(start1, length1, start2, length2) {\r\n        // const {compare} = this\r\n        // const {array} = this\r\n        // const {tmp} = this\r\n        // const {tmpIndex} = this\r\n        // const {compare} = this\r\n        // const {array} = this\r\n        // const {tmp} = this\r\n        // const {tmpIndex} = this\r\n        let i = 0\r\n\r\n        for (i = 0; i < length1; i++) {\r\n            // tmp[i] = array[start1 + i]\r\n            this.Writes.auxWrite(i, this.Reads.get(start1 + i), this.tmp)\r\n        }\r\n\r\n        let cursor1 = 0\r\n        let cursor2 = start2\r\n        let dest = start1\r\n\r\n\r\n        // array[dest] = array[cursor2]\r\n        this.Writes.write(dest, this.Reads.get(cursor2))\r\n\r\n\r\n        dest++\r\n        cursor2++\r\n\r\n        if (--length2 === 0) {\r\n            for (i = 0; i < length1; i++) {\r\n                // array[dest + i] = tmp[cursor1 + i]\r\n                this.Writes.write(dest + i, this.Reads.auxReadValue(cursor1 + i, this.tmp))\r\n            }\r\n            return\r\n        }\r\n\r\n        if (length1 === 1) {\r\n            for (i = 0; i < length2; i++) {\r\n                // array[dest + i] = array[cursor2 + i]\r\n\r\n                this.Writes.write(dest + i, this.Reads.get(cursor2 + i))\r\n            }\r\n            // array[dest + length2] = tmp[cursor1]\r\n            this.Writes.write(dest + length2, this.Reads.auxReadValue(cursor1, this.tmp))\r\n            return\r\n        }\r\n\r\n        let {minGallop} = this\r\n\r\n        while (true) {\r\n            let count1 = 0\r\n            let count2 = 0\r\n            let exit = false\r\n\r\n            do {\r\n                // if (compare(array[cursor2], tmp[cursor1]) < 0) {\r\n                if (this.Reads.readValue(cursor2) < this.Reads.auxReadValue(cursor1, this.tmp)) {\r\n                    // array[dest] = array[cursor2]\r\n                    this.Writes.write(dest, this.Reads.get(cursor2))\r\n                    dest++\r\n                    cursor2++\r\n                    count2++\r\n                    count1 = 0\r\n\r\n                    if (--length2 === 0) {\r\n                        exit = true\r\n                        break\r\n                    }\r\n                } else {\r\n                    // array[dest] = tmp[cursor1]\r\n                    this.Writes.write(dest, this.Reads.auxGet(cursor1, this.tmp))\r\n\r\n                    dest++\r\n                    cursor1++\r\n                    count1++\r\n                    count2 = 0\r\n                    if (--length1 === 1) {\r\n                        exit = true\r\n                        break\r\n                    }\r\n                }\r\n            } while ((count1 | count2) < minGallop)\r\n\r\n            if (exit) {\r\n                break\r\n            }\r\n\r\n            do {\r\n                // count1 = gallopRight(array[cursor2], tmp, cursor1, length1, 0, compare)\r\n                count1 = this.gallopRight(this.Reads.readValue(cursor2), true, cursor1, length1, 0)\r\n\r\n                if (count1 !== 0) {\r\n                    for (i = 0; i < count1; i++) {\r\n                        // array[dest + i] = tmp[cursor1 + i]\r\n                        // results[dest + i] = tmpIndex[cursor1 + i]\r\n                        this.Writes.write(dest + i, this.Reads.auxGet(cursor1 + i, this.tmp))\r\n                    }\r\n\r\n                    dest += count1\r\n                    cursor1 += count1\r\n                    length1 -= count1\r\n                    if (length1 <= 1) {\r\n                        exit = true\r\n                        break\r\n                    }\r\n                }\r\n\r\n                // array[dest] = array[cursor2]\r\n                // results[dest] = results[cursor2]\r\n                this.Writes.write(dest, this.Reads.get(cursor2))\r\n\r\n                dest++\r\n                cursor2++\r\n\r\n                if (--length2 === 0) {\r\n                    exit = true\r\n                    break\r\n                }\r\n\r\n                // count2 = this.gallopLeft(tmp[cursor1], array, cursor2, length2, 0, compare)\r\n                count2 = this.gallopLeft(this.Reads.auxReadValue(cursor1, this.tmp), false, cursor2, length2, 0)\r\n\r\n                if (count2 !== 0) {\r\n                    for (i = 0; i < count2; i++) {\r\n                        // array[dest + i] = array[cursor2 + i]\r\n                        // results[dest + i] = results[cursor2 + i]\r\n                        this.Writes.write(dest + i, this.Reads.get(cursor2 + i))\r\n                    }\r\n\r\n                    dest += count2\r\n                    cursor2 += count2\r\n                    length2 -= count2\r\n\r\n                    if (length2 === 0) {\r\n                        exit = true\r\n                        break\r\n                    }\r\n                }\r\n                // array[dest] = tmp[cursor1]\r\n                // results[dest] = tmpIndex[cursor1]\r\n\r\n                this.Writes.write(dest, this.Reads.auxGet(cursor1, this.tmp))\r\n\r\n                dest++\r\n                cursor1++\r\n\r\n                if (--length1 === 1) {\r\n                    exit = true\r\n                    break\r\n                }\r\n\r\n                minGallop--\r\n            } while (\r\n                count1 >= DEFAULT_MIN_GALLOPING\r\n                || count2 >= DEFAULT_MIN_GALLOPING\r\n                )\r\n\r\n            if (exit) {\r\n                break\r\n            }\r\n\r\n            if (minGallop < 0) {\r\n                minGallop = 0\r\n            }\r\n\r\n            minGallop += 2\r\n        }\r\n\r\n        this.minGallop = minGallop\r\n\r\n        if (minGallop < 1) {\r\n            this.minGallop = 1\r\n        }\r\n\r\n        if (length1 === 1) {\r\n            for (i = 0; i < length2; i++) {\r\n                // array[dest + i] = array[cursor2 + i]\r\n                // results[dest + i] = results[cursor2 + i]\r\n                this.Writes.write(dest + i, this.Reads.get(cursor2 + i))\r\n            }\r\n            // array[dest + length2] = tmp[cursor1]\r\n            // results[dest + length2] = tmpIndex[cursor1]\r\n            this.Writes.write(dest + length2, this.Reads.auxGet(cursor1, this.tmp))\r\n        } else if (length1 === 0) {\r\n            throw new Error('mergeLow preconditions were not respected')\r\n        } else {\r\n            for (i = 0; i < length1; i++) {\r\n                // array[dest + i] = tmp[cursor1 + i]\r\n                // results[dest + i] = tmpIndex[cursor1 + i]\r\n                this.Writes.write(dest + i, this.Reads.auxGet(cursor1 + i, this.tmp))\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Merge two adjacent runs in a stable way. The runs must be such that the\r\n     * first element of run1 is bigger than the first element in run2 and the\r\n     * last element of run1 is greater than all the elements in run2.\r\n     * The method should be called when run1.length > run2.length as it uses\r\n     * TimSort temporary array to store run2. Use mergeLow if run1.length <=\r\n     * run2.length.\r\n     *\r\n     * @param {number} start1 - First element in run1.\r\n     * @param {number} length1 - Length of run1.\r\n     * @param {number} start2 - First element in run2.\r\n     * @param {number} length2 - Length of run2.\r\n     */\r\n    mergeHigh(start1, length1, start2, length2) {\r\n        // const {compare} = this\r\n        // const {array} = this\r\n        // const {tmp} = this\r\n        // const {tmpIndex} = this\r\n        let i = 0\r\n\r\n        for (i = 0; i < length2; i++) {\r\n            // tmp[i] = array[start2 + i]\r\n            this.Writes.auxWrite(i, this.Reads.get(start2 + i), this.tmp)\r\n        }\r\n\r\n        let cursor1 = start1 + length1 - 1\r\n        let cursor2 = length2 - 1\r\n        let dest = start2 + length2 - 1\r\n        let customCursor = 0\r\n        let customDest = 0\r\n\r\n        // array[dest] = array[cursor1]\r\n        this.Writes.write(dest, this.Reads.get(cursor1))\r\n\r\n        dest--\r\n        cursor1--\r\n\r\n        if (--length1 === 0) {\r\n            customCursor = dest - (length2 - 1)\r\n\r\n            for (i = 0; i < length2; i++) {\r\n                // array[customCursor + i] = tmp[i]\r\n                this.Writes.write(customCursor + i, this.Reads.auxGet(i, this.tmp))\r\n            }\r\n\r\n            return\r\n        }\r\n\r\n        if (length2 === 1) {\r\n            dest -= length1\r\n            cursor1 -= length1\r\n            customDest = dest + 1\r\n            customCursor = cursor1 + 1\r\n\r\n            for (i = length1 - 1; i >= 0; i--) {\r\n                // array[customDest + i] = array[customCursor + i]\r\n                this.Writes.write(customDest + i, this.Reads.get(customCursor + i))\r\n            }\r\n\r\n            // array[dest] = tmp[cursor2]\r\n            this.Writes.write(dest, this.Reads.auxGet(cursor2, this.tmp))\r\n            return\r\n        }\r\n\r\n        let {minGallop} = this\r\n\r\n        while (true) {\r\n            let count1 = 0\r\n            let count2 = 0\r\n            let exit = false\r\n\r\n            do {\r\n                // if (compare(tmp[cursor2], array[cursor1]) < 0) {\r\n                if (this.Reads.auxReadValue(cursor2, this.tmp) < this.Reads.readValue(cursor1)) {\r\n                    // array[dest] = array[cursor1]\r\n                    this.Writes.write(dest, this.Reads.get(cursor1))\r\n                    dest--\r\n                    cursor1--\r\n                    count1++\r\n                    count2 = 0\r\n                    if (--length1 === 0) {\r\n                        exit = true\r\n                        break\r\n                    }\r\n                } else {\r\n                    // array[dest] = tmp[cursor2]\r\n                    this.Writes.write(dest, this.Reads.auxGet(cursor2, this.tmp))\r\n                    dest--\r\n                    cursor2--\r\n                    count2++\r\n                    count1 = 0\r\n                    if (--length2 === 1) {\r\n                        exit = true\r\n                        break\r\n                    }\r\n                }\r\n            } while ((count1 | count2) < minGallop)\r\n\r\n            if (exit) {\r\n                break\r\n            }\r\n\r\n            do {\r\n                // count1 = length1 - gallopRight(\r\n                //     tmp[cursor2],\r\n                //     array,\r\n                //     start1,\r\n                //     length1,\r\n                //     length1 - 1,\r\n                //     compare\r\n                // )\r\n                count1 = length1 - this.gallopRight(\r\n                    this.Reads.auxReadValue(cursor2, this.tmp),\r\n                    false,\r\n                    start1,\r\n                    length1,\r\n                    length1 - 1\r\n                )\r\n\r\n                if (count1 !== 0) {\r\n                    dest -= count1\r\n                    cursor1 -= count1\r\n                    length1 -= count1\r\n                    customDest = dest + 1\r\n                    customCursor = cursor1 + 1\r\n\r\n                    for (i = count1 - 1; i >= 0; i--) {\r\n                        // array[customDest + i] = array[customCursor + i]\r\n                        this.Writes.write(customDest + i, this.Reads.get(customCursor + i))\r\n                    }\r\n\r\n                    if (length1 === 0) {\r\n                        exit = true\r\n                        break\r\n                    }\r\n                }\r\n\r\n                // array[dest] = tmp[cursor2]\r\n                this.Writes.write(dest, this.Reads.auxGet(cursor2, this.tmp))\r\n\r\n                dest--\r\n                cursor2--\r\n\r\n                if (--length2 === 1) {\r\n                    exit = true\r\n                    break\r\n                }\r\n\r\n                // count2 = length2 - gallopLeft(\r\n                //     array[cursor1],\r\n                //     tmp,\r\n                //     0,\r\n                //     length2,\r\n                //     length2 - 1,\r\n                //     compare\r\n                // )\r\n\r\n                count2 = length2 - this.gallopLeft(\r\n                    this.Reads.readValue(cursor1),\r\n                    true,\r\n                    0,\r\n                    length2,\r\n                    length2 - 1\r\n                )\r\n\r\n                if (count2 !== 0) {\r\n                    dest -= count2\r\n                    cursor2 -= count2\r\n                    length2 -= count2\r\n                    customDest = dest + 1\r\n                    customCursor = cursor2 + 1\r\n\r\n                    for (i = 0; i < count2; i++) {\r\n                        // array[customDest + i] = tmp[customCursor + i]\r\n                        this.Writes.write(customDest + i, this.Reads.auxGet(customCursor + i, this.tmp))\r\n                    }\r\n\r\n                    if (length2 <= 1) {\r\n                        exit = true\r\n                        break\r\n                    }\r\n                }\r\n\r\n                // array[dest] = array[cursor1]\r\n                this.Writes.write(dest, this.Reads.get(cursor1))\r\n\r\n                dest--\r\n                cursor1--\r\n\r\n                if (--length1 === 0) {\r\n                    exit = true\r\n                    break\r\n                }\r\n\r\n                minGallop--\r\n            } while (\r\n                count1 >= DEFAULT_MIN_GALLOPING\r\n                || count2 >= DEFAULT_MIN_GALLOPING\r\n                )\r\n\r\n            if (exit) {\r\n                break\r\n            }\r\n\r\n            if (minGallop < 0) {\r\n                minGallop = 0\r\n            }\r\n\r\n            minGallop += 2\r\n        }\r\n\r\n        this.minGallop = minGallop\r\n\r\n        if (minGallop < 1) {\r\n            this.minGallop = 1\r\n        }\r\n\r\n        if (length2 === 1) {\r\n            dest -= length1\r\n            cursor1 -= length1\r\n            customDest = dest + 1\r\n            customCursor = cursor1 + 1\r\n\r\n            for (i = length1 - 1; i >= 0; i--) {\r\n                // array[customDest + i] = array[customCursor + i]\r\n                this.Writes.write(customDest + i, this.Reads.get(customCursor + i))\r\n            }\r\n\r\n            // array[dest] = tmp[cursor2]\r\n            // results[dest] = tmpIndex[cursor2]\r\n\r\n            this.Writes.write(dest, this.Reads.auxGet(cursor2, this.tmp))\r\n\r\n\r\n        } else if (length2 === 0) {\r\n            throw new Error('mergeHigh preconditions were not respected')\r\n        } else {\r\n            customCursor = dest - (length2 - 1)\r\n            for (i = 0; i < length2; i++) {\r\n                // array[customCursor + i] = tmp[i]\r\n                this.Writes.write(customCursor + i, this.Reads.auxGet(i, this.tmp))\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    /**\r\n     * Sort an array in the range [lo, hi) using TimSort.\r\n     *\r\n     * @param {array} array - The array to sort.\r\n     * @param {function=} compare - Item comparison function. Default is\r\n     *     alphabetical\r\n     * @param {number} lo - First element in the range (inclusive).\r\n     * @param {number} hi - Last element in the range.\r\n     *     comparator.\r\n     */\r\n    runSort(low, high) {\r\n        this.sort(low, high+1)\r\n    }\r\n\r\n    sort(lo, hi) {\r\n\r\n        let i = 0\r\n\r\n        let remaining = hi - lo\r\n\r\n        // The array is already sorted\r\n        if (remaining < 2) {\r\n            return results\r\n        }\r\n\r\n        let runLength = 0\r\n        // On small arrays binary sort can be used directly\r\n        if (remaining < DEFAULT_MIN_MERGE) {\r\n            runLength = this.makeAscendingRun(lo, hi)\r\n            this.binaryInsertionSort(lo, hi, lo + runLength)\r\n        }\r\n\r\n\r\n        const minRun = minRunLength(remaining)\r\n\r\n        do {\r\n            runLength = this.makeAscendingRun(lo, hi)\r\n            if (runLength < minRun) {\r\n                let force = remaining\r\n                if (force > minRun) {\r\n                    force = minRun\r\n                }\r\n\r\n                this.binaryInsertionSort(lo, lo + force, lo + runLength)\r\n                runLength = force\r\n            }\r\n            // Push new run and merge if necessary\r\n            this.pushRun(lo, runLength)\r\n            this.mergeRuns()\r\n\r\n            // Go find next run\r\n            remaining -= runLength\r\n            lo += runLength\r\n        } while (remaining !== 0)\r\n\r\n        // Force merging of remaining runs\r\n        this.forceMergeRuns()\r\n        this.Writes.removeAuxArray(this.tmp)\r\n    }\r\n}","import React from 'react';\r\nimport styles from \"./ArrayWindow.module.scss\";\r\nimport {objLength} from \"../utils/utils\";\r\n\r\nexport function ArrayWindow(props) {\r\n    let array = props.array\r\n    let mainArray = props.mainArray\r\n    let height = props.height\r\n    let visualProps = props.visualProps\r\n    let borderEnabled = visualProps.barsStroke\r\n    let visualStyle = visualProps.style\r\n    // console.log(array)\r\n    let arr = []\r\n\r\n    let len = objLength(array)\r\n\r\n    const sizeStyle = {width: \"100%\", height: height + \"%\"};\r\n\r\n    if (len === 0) {\r\n        return <div style={sizeStyle}/>\r\n    }\r\n\r\n    if (visualStyle === \"bars\") {\r\n        let border = borderEnabled ? {} : {border: \"none\"}\r\n        for (let i = 0; i < len; ++i) {\r\n            let styleSheet = {\r\n                height: array[i].getValue() / mainArray.length * 100 + \"%\",\r\n                backgroundColor: \"rgb(\" + array[i].getColorForRender() + \")\",\r\n                ...border\r\n            }\r\n            arr.push(<div key={i} style={styleSheet} className={styles.bar}/>);\r\n        }\r\n        let styleSheet = {\r\n            height: \"0%\",\r\n            backgroundColor: \"rgb(255,255,255)\",\r\n        }\r\n        for (let i = len; i < mainArray.length; ++i) {\r\n            arr.push(<div key={i} style={styleSheet} className={styles.bar}/>);\r\n        }\r\n    } else if (visualStyle === \"dots\") {\r\n        for (let i = 0; i < len; ++i) {\r\n            let value = array[i].getValue()\r\n            let height = (value===-1) ? {height: 0} : {}\r\n            let styleSheet = {\r\n                bottom: \"calc(\" + value / mainArray.length * 100 + \"% - 0.25rem)\",\r\n                backgroundColor: \"rgb(\" + array[i].getColorForRender() + \")\",\r\n                ...height\r\n            }\r\n            arr.push(<div className={styles.dotContainer}>\r\n                <div key={i} style={styleSheet} className={styles.dot}/>\r\n            </div>);\r\n        }\r\n        let styleSheet = {\r\n            bottom: 0,\r\n            backgroundColor: \"rgb(0, 0, 0)\",\r\n        }\r\n        for (let i = len; i < mainArray.length; ++i) {\r\n            arr.push(<div className={styles.dotContainer}>\r\n                <div key={i} style={styleSheet} className={styles.dot}/>\r\n            </div>);\r\n        }\r\n    }\r\n    return (\r\n        <div style={sizeStyle}>\r\n            <div className={styles.arrayContainer}>\r\n                {arr}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n","import React from 'react';\r\nimport styles from \"./Stats.module.scss\";\r\n\r\nexport function Stats(props){\r\n    return(\r\n        <div className={styles.statsContainer}>\r\n            <div><b>Sort: {props.sortName}</b></div>\r\n            <div>Length: {props.arrLength}</div>\r\n            {/*<div>Comparisons: {props.comparisons}</div>*/}\r\n            <div>Writes: {props.writes}</div>\r\n        </div>\r\n    )\r\n}","export let initFunctions = {\r\n    linear: function (x, length) {\r\n        return x;\r\n    },\r\n    // reverse: function (x, length) {\r\n    //     return length - x;\r\n    // },\r\n    // pipeOrgan: function (x, length) {\r\n    //     if (x < length / 2) {\r\n    //         return 2 * x;\r\n    //     } else {\r\n    //         return 2 * (length - x) - 1;\r\n    //     }\r\n    // },\r\n    // inversedPipeOrgan: function (x, length){\r\n    //     if (x < length / 2) {\r\n    //         return (length - 2*x) - 1;\r\n    //     } else {\r\n    //         return x*2-length;\r\n    //     }\r\n    // },\r\n    manySimular: function (x, length){\r\n        const GAP_FACTOR = 10\r\n        let divider = Math.trunc(length/GAP_FACTOR)\r\n        return Math.trunc(x/divider)*divider\r\n    }\r\n}","import {randomInt} from \"./utils\";\r\nimport {HeapSort} from \"../Sorts/HeapSort\";\r\n\r\nexport let shuffles = {\r\n    FullShuffle: function (arrayVisualizer) {\r\n        let len = arrayVisualizer.getArrLength()\r\n        for (let i = 0; i < len; ++i) {\r\n            let randomIndex = randomInt(i, len)\r\n            arrayVisualizer.getWrites().swapWithDelay(i, randomIndex, arrayVisualizer.getMainArray(), true, arrayVisualizer.getDelays().getDelayInc()/5, true)\r\n        }\r\n        // return instructions\r\n    },\r\n\r\n    AlmostSorted: function (arrayVisualizer) {\r\n        let len = arrayVisualizer.getArrLength()\r\n        const AMOUNT = 0.1\r\n        for (let i = 0; i < len * AMOUNT; ++i) {\r\n            let randomIndexA = randomInt(i, len)\r\n            let randomIndexB = randomInt(i, len)\r\n            arrayVisualizer.getWrites().swapWithDelay(randomIndexA, randomIndexB, arrayVisualizer.getMainArray(), true, arrayVisualizer.getDelays().getDelayInc()/5, true)\r\n        }\r\n    },\r\n    Reverse: function (arrayVisualizer){\r\n        let len = arrayVisualizer.getArrLength()\r\n        for (let i = 0; i < Math.trunc(len/2); ++i){\r\n            arrayVisualizer.getWrites().swapWithDelay(i, len-i-1, arrayVisualizer.getMainArray(), true, arrayVisualizer.getDelays().getDelayInc()/5, true)\r\n        }\r\n    },\r\n    BlockShuffle: function (arrayVisualizer) {\r\n        const GAP_FACTOR = 10\r\n        let len = arrayVisualizer.getArrLength()\r\n        let gap = len/GAP_FACTOR\r\n        for (let i = 0; i < GAP_FACTOR-1; ++i) {\r\n            let factor = randomInt(i+1, GAP_FACTOR)\r\n            for(let j = 0; j < gap; ++j){\r\n                arrayVisualizer.getWrites().swapWithDelay(j+i*gap, j+factor*gap, arrayVisualizer.getMainArray(), true, arrayVisualizer.getDelays().getDelayInc()/5, true)\r\n            }\r\n        }\r\n    },\r\n    PipeOrgan: function (arrayVisualizer){\r\n        let len = arrayVisualizer.getArrLength()\r\n        let Reads = arrayVisualizer.getReads()\r\n        let temp = new Array(len);\r\n        for(let i = 0, j = 0; i < len; i+=2){\r\n            temp[j++] = Reads.get(i, arrayVisualizer.getMainArray())\r\n        }\r\n        for(let i = 1, j = len; i < len ;i+=2) {\r\n            temp[--j] = Reads.get(i, arrayVisualizer.getMainArray())\r\n        }\r\n        for(let i = 0; i < len; i++){\r\n            arrayVisualizer.getWrites().writeWithDelay(i, temp[i], arrayVisualizer.getMainArray(), true, arrayVisualizer.getDelays().getDelayInc()/5, true)\r\n        }\r\n    },\r\n    InversedPipeOrgan: function (arrayVisualizer){\r\n        let len = arrayVisualizer.getArrLength()\r\n        let Reads = arrayVisualizer.getReads()\r\n        let temp = new Array(len);\r\n        for(let i = 0, j = 0; i < len; i+=2){\r\n            temp[j++] = Reads.get(len-i-1, arrayVisualizer.getMainArray())\r\n        }\r\n        for(let i = 1, j = len; i < len ;i+=2) {\r\n            temp[--j] = Reads.get(len-i-1, arrayVisualizer.getMainArray())\r\n        }\r\n        for(let i = 0; i < len; i++){\r\n            arrayVisualizer.getWrites().writeWithDelay(i, temp[i], arrayVisualizer.getMainArray(), true, arrayVisualizer.getDelays().getDelayInc()/5, true)\r\n        }\r\n    },\r\n    Heap: function (arrayVisualizer){\r\n        let n = arrayVisualizer.getArrLength()\r\n        arrayVisualizer.initPseudoArray()\r\n        let heapSort = new HeapSort(arrayVisualizer)\r\n        for (let i = Math.trunc(n / 2) - 1; i >= 0; i--) {\r\n            heapSort.heapify(n, i);\r\n        }\r\n    },\r\n    QuickSortKiller: function (arrayVisualizer){\r\n        let len = arrayVisualizer.getArrLength()\r\n        for(let j = len-len%2-2, i = j-1; i >= 0; i-=2, j--) {\r\n            arrayVisualizer.getWrites().swapWithDelay(i, j, arrayVisualizer.getMainArray(), true, arrayVisualizer.getDelays().getDelayInc() / 5, true)\r\n        }\r\n    }\r\n}","import React from 'react';\r\nimport styles from \"./Controls.module.scss\";\r\nimport {initFunctions} from \"../utils/initFunctions\";\r\nimport {shuffles} from \"../utils/shuffles\";\r\n\r\n\r\nexport class Controls extends React.PureComponent {\r\n    isControlShow\r\n    arrayVisualizer\r\n    sorts\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.isControlShow = true;\r\n        this.arrayVisualizer = props.arrayVisualizer\r\n        this.sorts = props.sorts\r\n        this.arrayVisualizer.updateArrLength(this.arrayVisualizer.DEFAULT_ARR_LEN)\r\n        // this.arrayVisualizer.initArray(initFunctions.linear)\r\n    }\r\n\r\n    updateArrLength() {\r\n        let slider = document.getElementById(styles.slider)\r\n\r\n        if (slider !== null) {\r\n            let len = slider.value\r\n            this.arrayVisualizer.updateArrLength(len)\r\n        }\r\n\r\n    }\r\n\r\n    toggleControlShow() {\r\n        // console.log(styles.controls)\r\n        let controlsContainer = document.getElementById(styles.controlsContainer)\r\n        let controls = document.getElementById(styles.controls)\r\n        let btn = document.getElementById(styles.showToggleBtn)\r\n        if (this.isControlShow) {\r\n            controls.style.display = \"none\"\r\n            controlsContainer.style.width = \"0\"\r\n            btn.innerHTML = \"&gt;&gt;\";\r\n        } else {\r\n            controls.style.display = \"block\"\r\n            controlsContainer.style.width = \"20rem\"\r\n            btn.innerHTML = \"&lt;&lt\";\r\n        }\r\n        this.isControlShow = !this.isControlShow\r\n    }\r\n\r\n    initArray(func) {\r\n        this.arrayVisualizer.initArray(func, this.arrayVisualizer.getArrLength(), true)\r\n    }\r\n\r\n    shuffleArray(func) {\r\n        this.arrayVisualizer.shuffleArray(func)\r\n        // func(this.arrayVisualizer)\r\n    }\r\n\r\n    sortArray(sortName) {\r\n        this.sorts.runSort(sortName, 0, this.arrayVisualizer.getArrLength() - 1)\r\n    }\r\n\r\n    stopSort() {\r\n        this.arrayVisualizer.stopSort()\r\n    }\r\n\r\n    abortSort() {\r\n        this.stopSort()\r\n        this.initArray(initFunctions.linear)\r\n    }\r\n\r\n    genInitFunctions() {\r\n        // console.log(initFunctions)\r\n        let tmp = []\r\n        for (let i in initFunctions) {\r\n            tmp.push(\r\n                <button key={i} onClick={this.initArray.bind(this, initFunctions[i])}>{i}</button>\r\n            )\r\n        }\r\n        return tmp;\r\n    }\r\n\r\n    getSorts() {\r\n        let tmp = []\r\n        let sortsNames = this.sorts.getSortsPaths()\r\n        for (let i of sortsNames) {\r\n            tmp.push(\r\n                <button key={i} onClick={this.sortArray.bind(this, i)}>{i}</button>)\r\n        }\r\n        return tmp;\r\n    }\r\n\r\n    getShuffles() {\r\n        let tmp = []\r\n        for (let i in shuffles) {\r\n            tmp.push(\r\n                <button key={i} onClick={this.shuffleArray.bind(this, shuffles[i])}>{i}</button>\r\n            )\r\n        }\r\n        return tmp;\r\n    }\r\n\r\n    toggleShowAuxArrays() {\r\n        let element = document.getElementById(\"auxArrShowCB\")\r\n        this.arrayVisualizer.setShowAuxArrays(element.checked)\r\n    }\r\n\r\n    toggleBarsStroke() {\r\n        let element = document.getElementById(\"enableStrokeCB\")\r\n        this.arrayVisualizer.setEnableBarsStroke(element.checked)\r\n    }\r\n\r\n    toggleEnableMarks() {\r\n        let element = document.getElementById(\"enableMarksCB\")\r\n        this.arrayVisualizer.setEnableMarks(element.checked)\r\n    }\r\n\r\n    toggleVisualStyle(val) {\r\n        this.arrayVisualizer.setVisualStyle(val)\r\n    }\r\n\r\n    toggleRainbow(val){\r\n        this.arrayVisualizer.getMarks().setRainbow(val)\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div id={styles.controlsContainer}>\r\n                {/*<div onClick={this.toggleControlShow.bind(this)} id={styles.showToggleBtn}>&lt;&lt;</div>*/}\r\n                <div id={styles.controls}>\r\n                    <div>\r\n                        <div>\r\n                            <div className={styles.sectionHeader}>Array Size</div>\r\n                            <input id={styles.slider} type=\"range\" min=\"10\" max=\"500\"\r\n                                   defaultValue={this.arrayVisualizer.DEFAULT_ARR_LEN}\r\n                                   step=\"10\"\r\n                                   onChange={this.updateArrLength.bind(this)}/>\r\n                        </div>\r\n                        <div>\r\n                            <div className={styles.sectionHeader}>Visuals</div>\r\n                            <div style={{display: \"flex\", justifyContent:\"center\"}}>\r\n                                <div style={{textAlign: \"left\"}}>\r\n                                    <div className={styles.checkBoxContainer}>\r\n                                        <input onChange={this.toggleShowAuxArrays.bind(this)} type=\"checkbox\"\r\n                                               id=\"auxArrShowCB\"\r\n                                               name=\"auxArrShowCB\" defaultChecked={true}/>\r\n                                        <label htmlFor=\"auxArrShowCB\">Show Aux Arrays</label>\r\n                                    </div>\r\n                                    <div className={styles.checkBoxContainer}>\r\n                                        <input onChange={this.toggleBarsStroke.bind(this)} type=\"checkbox\"\r\n                                               id=\"enableStrokeCB\"\r\n                                               name=\"enableStrokeCB\" defaultChecked={true}/>\r\n                                        <label htmlFor=\"enableStrokeCB\">Enable Bars Stroke</label>\r\n                                    </div>\r\n                                    <div className={styles.checkBoxContainer}>\r\n                                        <input onChange={this.toggleEnableMarks.bind(this)} type=\"checkbox\"\r\n                                               id=\"enableMarksCB\"\r\n                                               name=\"enableMarksCB\" defaultChecked={true}/>\r\n                                        <label htmlFor=\"enableMarksCB\">Enable Marks(Disable to reduce lags)</label>\r\n                                    </div>\r\n                                    <div className={styles.checkBoxContainer}>\r\n                                        <button onClick={this.toggleRainbow.bind(this, true)}>Paint to Rainbow</button>\r\n                                        <button onClick={this.toggleRainbow.bind(this, false)}>Clear Color</button>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                        <div>\r\n                            <div className={styles.sectionHeader}>Visual Styles</div>\r\n                            <div>\r\n                                <input onChange={this.toggleVisualStyle.bind(this, \"bars\")} type=\"radio\"\r\n                                       id=\"barsRadioBtn\"\r\n                                       name=\"visualStyle\" value=\"bars\" defaultChecked={true}/>\r\n                                <label htmlFor=\"barsRadioBtn\">Bars</label>\r\n\r\n                                <input onChange={this.toggleVisualStyle.bind(this, \"dots\")} type=\"radio\"\r\n                                       id=\"dotsRadioBtn\"\r\n                                       name=\"visualStyle\" value=\"dots\"/>\r\n                                <label htmlFor=\"dotsRadioBtn\">Dots</label>\r\n                            </div>\r\n                        </div>\r\n                        <div>\r\n                            <div className={styles.sectionHeader}>Init Array</div>\r\n                            <div>{this.genInitFunctions()}</div>\r\n                        </div>\r\n\r\n                        <div>\r\n                            <div className={styles.sectionHeader}>Shuffle Array</div>\r\n                            <div>\r\n                                {/*<button onClick={this.shuffleArray.bind(this)}>Random</button>*/}\r\n                                <div>{this.getShuffles()}</div>\r\n                            </div>\r\n                        </div>\r\n                        <div>\r\n                            <div className={styles.sectionHeader}>Sort control</div>\r\n                            <div>\r\n                                <button onClick={this.abortSort.bind(this)}>Abort Sort(Recommended)</button>\r\n                                <button onClick={this.stopSort.bind(this)}>Stop Sort(Not Recommended)</button>\r\n                            </div>\r\n                        </div>\r\n                        <div>\r\n                            <div className={styles.sectionHeader}>Sort Array</div>\r\n                            <div>\r\n                                {this.getSorts()}\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}","export class Delays {\r\n    arrayVisualizer\r\n    timeoutArray\r\n    delays\r\n    delayIncFactor\r\n    delayInc\r\n    DELAY_INC_CONST\r\n\r\n    constructor(arrayVisualizer) {\r\n        this.arrayVisualizer = arrayVisualizer\r\n        this.timeoutArray = []\r\n        this.delays = {\r\n            Swap: 0,\r\n            Write: 0,\r\n            Comp: 0,\r\n            Unmark: 0,\r\n            CreateAuxArray: 0,\r\n            RemoveAuxArray: 0\r\n        }\r\n        this.DELAY_INC_CONST = 3000\r\n        this.updateDelayInc()\r\n        // this.delayIncFactor = this.DELAY_INC_CONST-arrayVisualizer.getArrLength()*3\r\n        // this.delayInc = this.delayIncFactor/arrayVisualizer.getArrLength()\r\n    }\r\n\r\n    updateDelayInc(){\r\n        this.delayIncFactor = this.DELAY_INC_CONST-this.arrayVisualizer.getArrLength()*3\r\n        this.delayInc = this.delayIncFactor/this.arrayVisualizer.getArrLength()\r\n    }\r\n\r\n    push(timeout){\r\n        this.timeoutArray.push(timeout)\r\n    }\r\n\r\n    pushFunc(func, obj, delayName, delay, args) {\r\n        this.timeoutArray.push(setTimeout(func.bind(obj), this.delays[delayName] += delay, args))\r\n    }\r\n\r\n    resetDelays() {\r\n        this.delays = {\r\n            Swap: 0,\r\n            Write: 0,\r\n            Comp: 0,\r\n            Unmark: 0,\r\n            CreateAuxArray: 0,\r\n            RemoveAuxArray: 0\r\n        }\r\n        for (let i of this.timeoutArray) {\r\n            clearTimeout(i);\r\n        }\r\n        this.timeoutArray = []\r\n    }\r\n\r\n    setDelay(name, value){\r\n        this.delays[name] = value\r\n    }\r\n\r\n    incDelay(name, inc=this.delayIncFactor){\r\n        return this.delays[name]+=inc\r\n    }\r\n\r\n    getDelayInc(){\r\n        return this.delayInc\r\n    }\r\n}","export class Sounds{\r\n    arrayVisualizer\r\n    ctx\r\n    Delays\r\n    constructor(arrayVisualizer) {\r\n        this.arrayVisualizer = arrayVisualizer\r\n        this.Delays = arrayVisualizer.getDelays()\r\n        this.ctx = new (window.AudioContext || window.webkitAudioContext)();\r\n    }\r\n    async playSound(value) {\r\n        let osc = this.ctx.createOscillator();\r\n        osc.type = 'sine';\r\n\r\n        let k = value / this.arrayVisualizer.getArrLength()\r\n        osc.frequency.value = 2000 * k + 200;\r\n\r\n        let addTime = 50\r\n\r\n        let gainNode = this.ctx.createGain()\r\n        gainNode.gain.value = 0;\r\n        osc.connect(gainNode)\r\n        gainNode.connect(this.ctx.destination)\r\n        // console.log(this.Delays.getDelayInc())\r\n        gainNode.gain.linearRampToValueAtTime(0.05, this.ctx.currentTime + (this.Delays.getDelayInc() + addTime) / 1000 / 2)\r\n        gainNode.gain.linearRampToValueAtTime(0, this.ctx.currentTime + (this.Delays.getDelayInc() + addTime) / 1000)\r\n\r\n        osc.start();\r\n        osc.stop(this.ctx.currentTime + (this.Delays.getDelayInc() + addTime) / 1000);\r\n    }\r\n}","import {HSL2RGB, randomInt} from \"../utils/utils\";\r\n\r\nexport const colors = {\r\n    \"Unmarked\": [255, 255, 255],\r\n    \"Default\": [255, 0, 0],\r\n    \"Additional\": [randomInt(0, 256), randomInt(0, 256), randomInt(0, 256)],\r\n    \"Sorted\": [0, 255, 0],\r\n    \"Analysis\": [0, 0, 255]\r\n}\r\nexport class Marks{\r\n    arrayVisualizer\r\n    Delays\r\n\r\n    constructor(arrayVisualizer) {\r\n        this.arrayVisualizer = arrayVisualizer\r\n        this.Delays = arrayVisualizer.getDelays()\r\n    }\r\n\r\n    mark(index, args, saveArr = true) {\r\n        if(!this.arrayVisualizer.getEnableMarks()){\r\n            return;\r\n        }\r\n        let type = \"Default\"\r\n        let color = colors[\"Default\"]\r\n        let tmpArr = this.arrayVisualizer.getMainArray()\r\n        // Additional\r\n        if (args.type === \"Additional\") {\r\n            type = \"Additional\"\r\n            color = args.color\r\n            // console.log(color)\r\n        }\r\n        //Default\r\n        else if (!args.type || args.type === \"Default\") {\r\n            type = \"Default\"\r\n            color = colors[\"Default\"]\r\n        } else {\r\n            type = args.type\r\n            color = args.color\r\n        }\r\n\r\n        tmpArr[index].setType(type)\r\n        tmpArr[index].setMarkColor(color)\r\n        if (saveArr) {\r\n            this.arrayVisualizer.setState({\r\n                array: tmpArr\r\n            })\r\n        } else {\r\n            return tmpArr\r\n        }\r\n        // console.log(color);\r\n    }\r\n\r\n    markMany(indexes, args, saveArr) {\r\n        let tmpArr = this.arrayVisualizer.getMainArray()\r\n        for (let i of indexes) {\r\n            if (saveArr) {\r\n                this.mark(i, args, saveArr)\r\n            } else {\r\n                tmpArr = this.mark(i, args, saveArr)\r\n            }\r\n        }\r\n        if (!saveArr) {\r\n            return tmpArr\r\n        }\r\n    }\r\n\r\n    unmark(index, saveArr = true) {\r\n        let tmpArr = this.arrayVisualizer.getMainArray()\r\n        // tmpArr[index].setMarkColor(colors[\"Unmarked\"])\r\n        tmpArr[index].setType(\"Unmarked\")\r\n        if (saveArr) {\r\n            this.arrayVisualizer.setState({\r\n                array: tmpArr\r\n            })\r\n        } else {\r\n            return tmpArr\r\n        }\r\n    }\r\n\r\n    unmarkMany(indexes, saveArr, saveOnce) {\r\n        let tmpArr = this.arrayVisualizer.getMainArray()\r\n        for (let i of indexes) {\r\n            if (saveArr) {\r\n                this.unmark(i, saveArr)\r\n            } else {\r\n                tmpArr = this.unmark(i, saveArr)\r\n            }\r\n        }\r\n        if (saveOnce) {\r\n            this.arrayVisualizer.setState({\r\n                array: tmpArr\r\n            })\r\n        }\r\n        if (!saveArr) {\r\n            return tmpArr\r\n        }\r\n    }\r\n\r\n    setRainbow(val){\r\n        let tmpArr = this.arrayVisualizer.getMainArray()\r\n        if(val){\r\n            for(let i = 0; i < tmpArr.length; ++i){\r\n                let hsl = [i / tmpArr.length, 0.8, 0.5]\r\n                let rgb = HSL2RGB(hsl[0], hsl[1], hsl[2])\r\n                tmpArr[i].setColor(rgb)\r\n            }\r\n        }else{\r\n            for(let i of tmpArr){\r\n                i.setColor([255, 255, 255])\r\n            }\r\n        }\r\n        this.arrayVisualizer.setState({\r\n            array: tmpArr\r\n        })\r\n    }\r\n\r\n    markUnmarkMany(markIndexes, markArgs) {\r\n        this.markMany(markIndexes, markArgs, true)\r\n        this.Delays.push(setTimeout(this.unmarkMany.bind(this), this.Delays.incDelay(\"Unmark\", this.Delays.getDelayInc() / 100), markIndexes, false, true))\r\n    }\r\n\r\n    clearAllMarks(){\r\n        this.markUnmarkMany(Array.from(Array(this.arrayVisualizer.getArrLength()).keys()), false, true)\r\n    }\r\n\r\n}","export class Reads{\r\n    arrayVisualizer;\r\n    Sounds\r\n    constructor(arrayVisualizer){\r\n        this.arrayVisualizer = arrayVisualizer\r\n        this.Sounds = arrayVisualizer.getSounds()\r\n    }\r\n\r\n    readValue(index, arr = this.arrayVisualizer.getPseudoArray()) {\r\n        return arr[index].getValue()\r\n    }\r\n\r\n    compareInArr(a, b, arr = this.arrayVisualizer.getPseudoArray()) {\r\n        return this.compareValues(arr[a], arr[b])\r\n    }\r\n\r\n    get(index, arr = this.arrayVisualizer.getPseudoArray()){\r\n        return arr[index];\r\n    }\r\n\r\n    compareValues(a, b){\r\n        let tmpA = typeof a === \"object\" ? a.getValue() : a\r\n        let tmpB = typeof b === \"object\" ? b.getValue() : b\r\n        return tmpA - tmpB;\r\n        // if (sign === \"<\") {\r\n        //     return a.getValue() < b.getValue()\r\n        // } else if (sign === \"<=\") {\r\n        //     return a.getValue() <= b.getValue()\r\n        // } else if (sign === \">\") {\r\n        //     return a.getValue() > b.getValue()\r\n        // } else if (sign === \">=\") {\r\n        //     return a.getValue() >= b.getValue()\r\n        // } else {\r\n        //     return a.getValue() === b.getValue()\r\n        // }\r\n    }\r\n\r\n    auxGet(index, arrIndex, isPseudo = true){\r\n        if(isPseudo){\r\n            return this.arrayVisualizer.getPseudoAuxArrays()[arrIndex][index]\r\n        }else {\r\n            return this.arrayVisualizer.getAuxArrays()[arrIndex][index]\r\n        }\r\n    }\r\n\r\n\r\n    auxReadValue(index, arrIndex, isPseudo = true){\r\n        if(isPseudo){\r\n            return this.arrayVisualizer.getPseudoAuxArrays()[arrIndex][index].getValue()\r\n        }else {\r\n            return this.arrayVisualizer.getAuxArrays()[arrIndex][index].getValue()\r\n        }\r\n    }\r\n}","import React from 'react';\r\nimport {arraysEquals, deepArrayCopy, getAllMethods, objLength, randomInt} from \"../utils/utils\";\r\nimport {Sorts} from \"../Sorts/Sorts\"\r\nimport {ArrayWindow} from \"../ArrayWindow/ArrayWindow\";\r\nimport {Element} from \"../classes/Element\";\r\nimport {Stats} from \"../Stats/Stats\";\r\nimport {Controls} from \"../Controls/Controls\";\r\nimport {initFunctions} from \"../utils/initFunctions\";\r\nimport {Delays} from \"../ArrayAccess/Delays\";\r\nimport {Sounds} from \"../ArrayAccess/Sounds\";\r\nimport {Marks} from \"../ArrayAccess/Marks\";\r\nimport {Reads} from \"../ArrayAccess/Reads\";\r\nimport {Writes} from \"../ArrayAccess/Writes\";\r\n\r\nconst colors = {\r\n    \"Unmarked\": [255, 255, 255],\r\n    \"Default\": [255, 0, 0],\r\n    \"Additional\": [randomInt(0, 256), randomInt(0, 256), randomInt(0, 256)],\r\n    \"Sorted\": [0, 255, 0],\r\n    \"Analysis\": [0, 0, 255]\r\n}\r\n\r\nexport class ArrayVisualizer extends React.Component {\r\n    delays;\r\n    delayInc;\r\n    pseudoArray;\r\n    pseudoAuxArrays;\r\n\r\n    Sorts\r\n    delayIncConst\r\n    showAuxArrays\r\n    enableBarsStroke\r\n    visualStyle\r\n    enableMarks\r\n\r\n    Delays\r\n    Sounds\r\n    Marks\r\n    Reads\r\n    Writes\r\n\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.DEFAULT_ARR_LEN = 100\r\n        this.state = {\r\n            array: this.initArray(initFunctions.linear, this.DEFAULT_ARR_LEN),\r\n            sortName: \"\",\r\n            comparisons: 0,\r\n            writes: 0,\r\n            auxArrays: {}\r\n        }\r\n        this.pseudoArray = deepArrayCopy(this.state.array)\r\n        this.Delays = new Delays(this)\r\n        this.Sounds = new Sounds(this)\r\n        this.Marks = new Marks(this)\r\n        this.Reads = new Reads(this)\r\n\r\n        this.Writes = new Writes(this)\r\n        this.pseudoAuxArrays = []\r\n        this.Sorts = new Sorts(this);\r\n        this.showAuxArrays = true\r\n        this.enableBarsStroke = true\r\n        this.enableMarks = true\r\n        this.visualStyle = {\r\n            // style: \"bars\",\r\n            style: \"bars\",\r\n            barsStroke: true,\r\n        }\r\n    }\r\n\r\n    initArray(func, length, setToState=false) {\r\n        let arr = []\r\n        for (let i = 0; i < length; ++i) {\r\n            let element = new Element(func(i, length), \"Unmarked\", [255, 255, 255], [0,0,0,0])\r\n            arr.push(element)\r\n        }\r\n        if(setToState){\r\n            this.setState({\r\n                array: arr\r\n            })\r\n        }else {\r\n            return arr;\r\n        }\r\n    }\r\n\r\n    nullify() {\r\n        this.Delays.resetDelays()\r\n        this.setState(\r\n            {\r\n                comparisons: 0,\r\n                writes: 0\r\n            }\r\n        )\r\n        // eslint-disable-next-line react/no-direct-mutation-state\r\n        this.state.writes = 0;\r\n        // eslint-disable-next-line react/no-direct-mutation-state\r\n        this.state.comparisons = 0;\r\n    }\r\n\r\n    setShowAuxArrays(val){\r\n        this.showAuxArrays = val\r\n    }\r\n\r\n    setEnableBarsStroke(val){\r\n        this.visualStyle.barsStroke = val;\r\n        this.forceMainArrayUpdate()\r\n    }\r\n\r\n    setVisualStyle(val){\r\n        this.visualStyle.style = val;\r\n        this.forceMainArrayUpdate()\r\n    }\r\n\r\n    setEnableMarks(val){\r\n        this.enableMarks = val;\r\n        if(!val){\r\n            this.Marks.clearAllMarks()\r\n        }\r\n    }\r\n\r\n    getEnableMarks(){\r\n        return this.enableMarks;\r\n    }\r\n\r\n    getArrayVisualizer() {\r\n        return this;\r\n    }\r\n\r\n    getPseudoArray() {\r\n        return this.pseudoArray;\r\n    }\r\n\r\n    getState(){\r\n        return this.state\r\n    }\r\n\r\n    getArrLength(){\r\n        return this.state.array.length;\r\n    }\r\n\r\n    getMainArray(){\r\n        return this.state.array\r\n    }\r\n\r\n    getPseudoAuxArrays(){\r\n        return this.pseudoAuxArrays\r\n    }\r\n\r\n    getDelays(){\r\n        return this.Delays\r\n    }\r\n\r\n    getSounds(){\r\n        return this.Sounds;\r\n    }\r\n\r\n    getMarks(){\r\n        return this.Marks;\r\n    }\r\n\r\n    getAuxArrays(){\r\n        return this.state.auxArrays\r\n    }\r\n\r\n    getReads(){\r\n        return this.Reads;\r\n    }\r\n\r\n    getWrites(){\r\n        return this.Writes\r\n    }\r\n\r\n\r\n    stopSort(){\r\n        // this.resetDelay()\r\n        this.Delays.resetDelays()\r\n        this.Marks.clearAllMarks()\r\n        this.setState({\r\n                auxArrays: []\r\n            }\r\n        )\r\n    }\r\n\r\n    shuffleArray(func) {\r\n        this.nullify()\r\n        this.setState({\r\n            sortName: \"Shuffle\"\r\n        })\r\n\r\n        func(this);\r\n        // let instructions = func(this);\r\n        // for(let i of instructions){\r\n        //     if(i.cmd === \"swap\"){\r\n        //         this.Writes.swapWithDelay(i.a, i.b, this.state.array, true, this.Delays.getDelayInc()/5, true)\r\n        //     }\r\n        // }\r\n\r\n    }\r\n\r\n    setSortName(sortName){\r\n        this.setState({\r\n            sortName: sortName\r\n        })\r\n    }\r\n\r\n    initPseudoArray(){\r\n        this.pseudoArray = deepArrayCopy(this.state.array)\r\n    }\r\n\r\n    sortClickEvent() {\r\n    }\r\n\r\n    forceMainArrayUpdate(){\r\n        let tmp = this.state.array;\r\n        this.setState({\r\n            array: tmp\r\n        })\r\n    }\r\n\r\n    updateDelayInc(val){\r\n        this.delayInc = val/this.getArrLength();\r\n    }\r\n\r\n    updateArrLength(len){\r\n        this.setState({\r\n            array: this.initArray(initFunctions.linear, len)\r\n        })\r\n        this.pseudoArray = deepArrayCopy(this.state.array)\r\n\r\n        this.Sorts.arrLength = this.getArrLength()\r\n        // this.updateDelayInc(this.delayIncConst)\r\n        this.Delays.updateDelayInc();\r\n    }\r\n\r\n    genArrayWindows(){\r\n        let tmp = []\r\n        if(this.showAuxArrays) {\r\n            for (let i = objLength(this.state.auxArrays) - 1; i >= 0; i--) {\r\n                tmp.push(\r\n                    <ArrayWindow key={objLength(this.state.auxArrays) - i} array={this.state.auxArrays[i]}\r\n                                 mainArray={this.state.array} height={100 / (1 + objLength(this.state.auxArrays))} visualProps = {this.visualStyle} />\r\n                )\r\n            }\r\n        }\r\n        return tmp\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Stats sortName={this.state.sortName} comparisons={this.state.comparisons} writes={this.state.writes} arrLength={this.getArrLength()}/>\r\n                <div style={{height: \"100vh\"}}>\r\n                {/*<div>*/}\r\n                    {this.genArrayWindows()}\r\n                    <ArrayWindow array={this.state.array} mainArray={this.state.array} height={this.showAuxArrays ? 100/(1+objLength(this.state.auxArrays)) : 100} visualProps={this.visualStyle}/>\r\n                </div>\r\n                <div>\r\n                    <Controls arrayVisualizer={this} sorts={this.Sorts}/>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport {ArrayVisualizer} from \"./components/ArrayVisualizer/ArrayVisualizer\";\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\n\r\n\r\n\r\n\r\n\r\nReactDOM.render(\r\n    <ArrayVisualizer></ArrayVisualizer>,\r\n  document.getElementById('root')\r\n);\r\n\r\n\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}