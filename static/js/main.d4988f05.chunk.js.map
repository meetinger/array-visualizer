{"version":3,"sources":["components/Sorts/Sort.js","components/Controls/Controls.module.scss","components/ArrayWindow/ArrayWindow.module.scss","components/classes/Element.js","components/Sorts/InsertionSort.js","components/Sorts/Sorts.js","components/Sorts/HeapSort.js","components/Stats/Stats.module.scss","components/Sorts sync /^/.*/.js$","components/Sorts/BitonicSort.js","components/Sorts/BubbleSort.js","components/Sorts/DualPivotQuickSort.js","components/Sorts/LLQuickSort.js","components/Sorts/LRQuickSort.js","components/Sorts/LSDRadixSort.js","components/Sorts/MergeSort.js","components/Sorts/PseudoTimSort.js","components/Sorts/SelectionSort.js","components/Sorts/SlowSort.js","components/Sorts/StoogeSort.js","components/Sorts/TimSort.js","components/utils/utils.js","components/ArrayWindow/ArrayWindow.js","components/Stats/Stats.js","components/utils/initFunctions.js","components/utils/shuffles.js","components/Controls/Controls.js","components/ArrayAccess/Delays.js","components/ArrayAccess/Sounds.js","components/ArrayAccess/Marks.js","components/ArrayAccess/Reads.js","components/ArrayAccess/Writes.js","components/ArrayVisualizer/ArrayVisualizer.js","reportWebVitals.js","index.js"],"names":["Sort","arrayVisualizer","this","state","getState","Reads","getReads","Writes","getWrites","arrLength","getArrLength","sortName","warnLen","isDisabled","isNeedBucketsNum","low","high","bucketsNum","module","exports","Element","value","type","color","markColor","unMark","toString","InsertionSort","length","i","key","get","j","compareValues","write","Sorts","sortsPaths","sortPath","require","getDelays","resetDelays","nullify","sort","getSortObject","getWarnLen","parseInt","prompt","isNaN","window","confirm","initPseudoArray","setSortName","getSortName","runSort","sortClickEvent","HeapSort","n","largest","l","r","compareInArr","swap","heapify","Math","trunc","map","webpackContext","req","id","webpackContextResolve","__webpack_require__","o","e","Error","code","keys","Object","resolve","BitonicSort","sortLength","k","m","ij","bitonicSort","BubbleSort","len","DualPivotQuickSort","left","right","divisor","third","med1","med2","pivot1","readValue","pivot2","less","great","dualPivot","LLQuickSort","lo","hi","pivot","p","partition","LRQuickSort","x","quickSort","LSDRadixSort","max","tmp","highestPower","log","registers","Array","stabVal","min","digit","console","push","tempArray","createAuxArray","tempWrite","radix","total","index","auxWrite","pos","auxGet","removeAuxArray","MergeSort","mid","leftArrayLen","rightArrayLen","leftArrayIndex","rightArrayIndex","leftIndex","rightIndex","merge","PseudoTimSort","MIN_MERGE","len1","len2","minRun","minRunLength","size","pseudoTimSort","SelectionSort","minIndex","compare","SlowSort","floor","StoogeSort","t","TimSort","minGallop","tmpStorageLength","stackLength","runStart","runLength","stackSize","runHi","reverseRun","start","getValue","isAux","hint","lastOffset","maxOffset","offset","auxReadValue","mergeAt","start1","length1","start2","length2","gallopRight","gallopLeft","mergeLow","mergeHigh","cursor1","cursor2","dest","count1","count2","exit","customCursor","customDest","remaining","makeAscendingRun","binaryInsertionSort","force","pushRun","mergeRuns","forceMergeRuns","randomInt","a","b","random","deepArrayCopy","arr","out","getType","getColor","getMarkColor","objLength","obj","undefined","HSL2RGB","h","s","g","hue2rgb","q","round","ArrayWindow","props","array","mainArray","height","visualProps","borderEnabled","barsStroke","visualStyle","style","border","styleSheet","backgroundColor","getColorForRender","className","styles","bar","bottom","dotContainer","dot","width","arrayContainer","Stats","statsContainer","writes","initFunctions","linear","manySimular","divider","shuffles","FullShuffle","randomIndex","swapWithDelay","getMainArray","getDelayInc","AlmostSorted","randomIndexA","randomIndexB","Reverse","BlockShuffle","gap","GAP_FACTOR","factor","PipeOrgan","temp","writeWithDelay","InversedPipeOrgan","Heap","heapSort","QuickSortKiller","Controls","isControlShow","sorts","updateArrLength","DEFAULT_ARR_LEN","slider","document","getElementById","controlsContainer","controls","btn","showToggleBtn","display","innerHTML","func","initArray","shuffleArray","stopSort","onClick","bind","sortsNames","getSortsPaths","sortArray","element","setShowAuxArrays","checked","setEnableBarsStroke","setEnableMarks","val","setVisualStyle","getMarks","setRainbow","sectionHeader","defaultValue","step","onChange","justifyContent","textAlign","checkBoxContainer","toggleShowAuxArrays","name","defaultChecked","htmlFor","toggleBarsStroke","toggleEnableMarks","toggleRainbow","toggleVisualStyle","genInitFunctions","getShuffles","abortSort","getSorts","React","Component","Delays","timeoutArray","delays","Swap","Write","Comp","Unmark","CreateAuxArray","RemoveAuxArray","delayIncFactor","delayInc","timeout","delayName","delay","args","setTimeout","clearTimeout","inc","Sounds","ctx","AudioContext","webkitAudioContext","osc","createOscillator","frequency","gainNode","createGain","gain","connect","destination","linearRampToValueAtTime","currentTime","stop","colors","Marks","saveArr","getEnableMarks","tmpArr","setType","setMarkColor","setState","indexes","mark","saveOnce","unmark","hsl","rgb","setColor","markIndexes","markArgs","markMany","unmarkMany","incDelay","markUnmarkMany","from","getSounds","getPseudoArray","arrIndex","isPseudo","getPseudoAuxArrays","getAuxArrays","playSound","swapInArr","copy","curWrites","toWrite","writeInArr","pseudoAuxArrays","auxArrIndex","createAuxArrayWithDelay","auxArrays","removeAuxArrayWithDelay","auxWriteWithDelay","ArrayVisualizer","comparisons","pseudoArray","showAuxArrays","enableBarsStroke","enableMarks","setToState","forceMainArrayUpdate","clearAllMarks","updateDelayInc","delayIncConst","genArrayWindows","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render"],"mappings":"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","file":"static/js/main.d4988f05.chunk.js","sourcesContent":["export class Sort {\r\n    arrayVisualizer;\r\n\r\n    Reads\r\n    Writes\r\n\r\n    createAuxArray\r\n    removeAuxArray\r\n\r\n    auxRead\r\n    auxWrite\r\n\r\n    arrLength;\r\n\r\n    sortName;\r\n    warnLen;\r\n    isDisabled;\r\n    isNeedBucketsNum;\r\n\r\n\r\n    constructor(arrayVisualizer) {\r\n        this.arrayVisualizer = arrayVisualizer\r\n        this.state = this.arrayVisualizer.getState()\r\n\r\n        this.Reads = this.arrayVisualizer.getReads()\r\n        this.Writes = this.arrayVisualizer.getWrites()\r\n\r\n        \r\n        this.arrLength = this.arrayVisualizer.getArrLength();\r\n        this.sortName = \"\"\r\n        this.warnLen = -1;\r\n        this.isDisabled = false;\r\n        this.isNeedBucketsNum = false;\r\n    }\r\n\r\n    getSortName(){\r\n        return this.sortName\r\n    }\r\n\r\n    getWarnLen(){\r\n        return this.warnLen\r\n    }\r\n\r\n    runSort(low, high, bucketsNum){\r\n    }\r\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"textCenter\":\"Controls_textCenter__3_8jn\",\"controls\":\"Controls_controls__3X5vt\",\"showToggleBtn\":\"Controls_showToggleBtn__2CbSs\",\"slider\":\"Controls_slider__3IxWj\",\"sectionHeader\":\"Controls_sectionHeader__2EvBB\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"arrayContainer\":\"ArrayWindow_arrayContainer__jfaB8\",\"bar\":\"ArrayWindow_bar__30QYB\",\"dotContainer\":\"ArrayWindow_dotContainer__3porX\",\"dot\":\"ArrayWindow_dot__29TqH\"};","const types = {\r\n\r\n}\r\n\r\nconst colors = {\r\n\r\n}\r\n\r\nexport class Element{\r\n\r\n    value;\r\n    type;\r\n    color;\r\n    markColor;\r\n\r\n    // constructor(args){\r\n    //     this.value = args.value;\r\n    //     this.type = args.type;\r\n    //     this.color = args.color || colors[args.type];\r\n    // }\r\n\r\n    constructor(value, type, color, markColor) {\r\n        this.value = value;\r\n        this.type = type;\r\n        this.color = color;\r\n        this.markColor = markColor;\r\n    }\r\n\r\n\r\n    getValue(){\r\n        return this.value;\r\n    }\r\n    setValue(value){\r\n        this.value = value;\r\n    }\r\n\r\n    getColor(){\r\n        return this.color;\r\n    }\r\n\r\n    setColor(color){\r\n        this.color = color;\r\n    }\r\n\r\n    getMarkColor(){\r\n        return this.markColor;\r\n    }\r\n    setMarkColor(markColor){\r\n        this.markColor = markColor;\r\n    }\r\n\r\n    getColorForRender(){\r\n        if(this.type === \"Default\"){\r\n            return this.markColor\r\n        }else{\r\n            return this.color\r\n        }\r\n    }\r\n\r\n    getType(){\r\n        return this.type;\r\n    }\r\n    setType(type){\r\n        this.type = type;\r\n    }\r\n\r\n    copy(unMark = true){\r\n        if(unMark){\r\n            return new Element(this.value, \"Unmarked\", this.color, [0,0,0])\r\n        }else{\r\n            return new Element(this.value, this.type, this.color, this.markColor)\r\n        }\r\n    }\r\n\r\n    toString(){\r\n        return this.value.toString()\r\n    }\r\n}","import {Sort} from \"./Sort\";\r\n\r\nexport class InsertionSort extends Sort{\r\n    constructor(arrayVisualizer) {\r\n        super(arrayVisualizer);\r\n        this.sortName = \"InsertionSort\"\r\n    }\r\n\r\n    InsertionSort(low, high) {\r\n        let length = high+1;\r\n        for (let i = low+1; i < length; i++) {\r\n            let key = this.Reads.get(i);\r\n            let j = i - 1;\r\n            while (j >= 0 && this.Reads.compareValues(this.Reads.get(j), key) > 0) {\r\n                this.Writes.write(j + 1, this.Reads.get(j))\r\n                j = j - 1;\r\n            }\r\n            this.Writes.write(j + 1, key)\r\n        }\r\n    }\r\n\r\n    runSort(low, high) {\r\n        this.InsertionSort(low, high)\r\n    }\r\n}","export class Sorts {\r\n    arrayVisualizer;\r\n    sortsPaths\r\n\r\n    constructor(arrayVisualizer) {\r\n        this.arrayVisualizer = arrayVisualizer\r\n        this.sortsPaths = [\"BubbleSort\", \"MergeSort\", \"LLQuickSort\", \"LRQuickSort\",\r\n            \"DualPivotQuickSort\", \"InsertionSort\", \"SelectionSort\", \"TimSort\", \"PseudoTimSort\",\r\n            \"HeapSort\", \"LSDRadixSort\", \"BitonicSort\", \"SlowSort\", \"StoogeSort\"]\r\n    }\r\n\r\n    getSortsPaths() {\r\n        return this.sortsPaths;\r\n    }\r\n\r\n    getSortObject(sortPath) {\r\n        let Sort = require(\"./\" + sortPath + \".js\")[sortPath]\r\n        return new Sort(this.arrayVisualizer)\r\n    }\r\n\r\n    runSort(sortName, low, high) {\r\n        this.arrayVisualizer.getDelays().resetDelays()\r\n        this.arrayVisualizer.nullify()\r\n        let sort = this.getSortObject(sortName)\r\n        let warnLen = sort.getWarnLen()\r\n        let bucketsNum = 4\r\n        if (sort.isNeedBucketsNum) {\r\n            bucketsNum = parseInt(prompt(\"Enter the base:\", \"4\"))\r\n            if (isNaN(bucketsNum)) {\r\n                return;\r\n            }\r\n        }\r\n        if (warnLen !== -1 && this.arrayVisualizer.getArrLength() > warnLen &&\r\n            !window.confirm(\"WARNING!!!\\nThe array size(\" + this.arrayVisualizer.getArrLength() + \") \" +\r\n            \"more than recommended(\" + warnLen + \")\\nApplication may freeze\\nDo you want continue?\")) {\r\n            return\r\n        }\r\n        this.arrayVisualizer.initPseudoArray()\r\n        this.arrayVisualizer.setSortName(sort.getSortName())\r\n        sort.runSort(low, high, bucketsNum)\r\n        this.arrayVisualizer.sortClickEvent()\r\n    }\r\n}","import {Sort} from \"./Sort\";\r\n\r\nexport class HeapSort extends Sort{\r\n    constructor(arrayVisualizer) {\r\n        super(arrayVisualizer);\r\n        this.sortName = \"HeapSort\"\r\n    }\r\n\r\n    heapify(n, i) {\r\n        let largest = i;\r\n\r\n        let l = 2 * i + 1;\r\n        let r = 2 * i + 2;\r\n\r\n        if (l < n && this.Reads.compareInArr(l, largest) > 0) {\r\n            largest = l;\r\n        }\r\n        if (r < n && this.Reads.compareInArr(r, largest) > 0) {\r\n            largest = r;\r\n        }\r\n\r\n        if (largest !== i) {\r\n            this.Writes.swap(i, largest);\r\n            this.heapify(n, largest);\r\n        }\r\n    }\r\n\r\n    HeapSort() {\r\n        let n = this.arrLength;\r\n\r\n\r\n        for (let i = Math.trunc(n / 2) - 1; i >= 0; i--) {\r\n            this.heapify(n, i);\r\n        }\r\n\r\n        for (let i = n - 1; i >= 0; i--) {\r\n            this.Writes.swap(0, i);\r\n            this.heapify(i, 0)\r\n        }\r\n    }\r\n\r\n    runSort(low, high) {\r\n        this.HeapSort(low, high)\r\n    }\r\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"statsContainer\":\"Stats_statsContainer__1qOnq\"};","var map = {\n\t\"./BitonicSort.js\": 28,\n\t\"./BubbleSort.js\": 29,\n\t\"./DualPivotQuickSort.js\": 30,\n\t\"./HeapSort.js\": 17,\n\t\"./InsertionSort.js\": 12,\n\t\"./LLQuickSort.js\": 31,\n\t\"./LRQuickSort.js\": 32,\n\t\"./LSDRadixSort.js\": 33,\n\t\"./MergeSort.js\": 34,\n\t\"./PseudoTimSort.js\": 35,\n\t\"./SelectionSort.js\": 36,\n\t\"./SlowSort.js\": 37,\n\t\"./Sort.js\": 5,\n\t\"./Sorts.js\": 16,\n\t\"./StoogeSort.js\": 38,\n\t\"./TimSort.js\": 39\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 27;","import {Sort} from \"./Sort\";\r\n\r\nexport class BitonicSort extends Sort{\r\n    constructor(arrayVisualizer) {\r\n        super(arrayVisualizer);\r\n        this.sortName = \"BitonicSort\"\r\n    }\r\n    // kernel(p, q) {\r\n    //     const d = 1 << (p - q);\r\n    //\r\n    //     for (let i = 0; i < this.arrLength; i++) {\r\n    //         const up = ((i >> p) & 2) === 0;\r\n    //         // if ((i & d) === 0 && (x[i] > x[i | d]) === up) {\r\n    //         if ((i & d) === 0 && ((this.Reads.compare(i, i | d, \">\")) === up)) {\r\n    //             // const tmp = x[i];\r\n    //             // x[i] = x[i | d];\r\n    //             // x[i | d] = tmp;\r\n    //             this.Writes.swap(i, i | d)\r\n    //         }\r\n    //     }\r\n    // }\r\n    //\r\n    // bitonicSort(n) {\r\n    //     for (let i = 0; i < n; i++) {\r\n    //         for(let j = 0; j <= i; j++) {\r\n    //             this.kernel(i, j);\r\n    //         }\r\n    //     }\r\n    // }\r\n    bitonicSort(sortLength){\r\n        let i, j, k;\r\n\r\n        for(k = 2; k < sortLength*2; k = 2 * k) {\r\n            let m = (Math.trunc((sortLength + (k - 1)) / k) % 2) !== 0;\r\n\r\n            for(j = k >> 1; j > 0; j = j >> 1) {\r\n                for(i = 0; i < sortLength; i++) {\r\n                    let ij = i ^ j;\r\n\r\n                    if((ij) > i && ij < sortLength) {\r\n                        if((((i & k) === 0) === m) && this.Reads.compareInArr(i, ij) > 0)\r\n                            this.Writes.swap(i, ij);\r\n                        if((((i & k) !== 0) === m) && this.Reads.compareInArr(i, ij) < 0)\r\n                            this.Writes.swap(i, ij);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n    runSort(low, high, bucketsNum) {\r\n        // this.bitonicSort(Math.trunc(Math.log2(high-1)))\r\n        this.bitonicSort(high+1)\r\n    }\r\n\r\n}\r\n","import {Sort} from \"./Sort\";\r\n\r\nexport class BubbleSort extends Sort{\r\n    constructor(arrayVisualizer) {\r\n        super(arrayVisualizer);\r\n        this.sortName = \"BubbleSort\"\r\n    }\r\n    BubbleSort() {\r\n        let len = this.arrLength;\r\n        for (let i = 0; i < len; i++) {\r\n            for (let j = 0; j < len - i - 1; j++) {\r\n                if (this.Reads.compareInArr(j, j + 1) > 0) {\r\n                    this.Writes.swap(j, j + 1)\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    runSort(low, high) {\r\n        this.BubbleSort(low, high)\r\n    }\r\n}","import {Sort} from \"./Sort\";\r\nimport {InsertionSort} from \"./InsertionSort\";\r\n\r\nexport class DualPivotQuickSort extends Sort {\r\n    constructor(arrayVisualizer) {\r\n        super(arrayVisualizer);\r\n        this.sortName = \"Dual Pivot QuickSort\"\r\n    }\r\n\r\n    dualPivot(left, right, divisor) {\r\n        let length = right - left;\r\n\r\n        // insertion sort for tiny array\r\n        if (length < 4) {\r\n            let insertSorter = new InsertionSort(this.arrayVisualizer)\r\n            insertSorter.runSort(left, right)\r\n            return;\r\n        }\r\n        // if(length === 1){\r\n        //     return\r\n        // }\r\n\r\n        let third = Math.trunc(length / divisor);\r\n\r\n// \"medians\"\r\n        let med1 = left + third;\r\n        let med2 = right - third;\r\n\r\n        if (med1 <= left) {\r\n            med1 = left + 1;\r\n        }\r\n        if (med2 >= right) {\r\n            med2 = right - 1;\r\n        }\r\n\r\n\r\n        // if(Reads.compareValues(array[med1], array[med2]) == -1) {\r\n        if (this.Reads.compareInArr(med1, med2) < 0) {\r\n            this.Writes.swap(med1, left);\r\n            this.Writes.swap(med2, right);\r\n        } else {\r\n            this.Writes.swap(med1, right);\r\n            this.Writes.swap(med2, left);\r\n        }\r\n\r\n// pivots\r\n        let pivot1 = this.Reads.readValue(left);\r\n        let pivot2 = this.Reads.readValue(right);\r\n\r\n// pointers\r\n        let less = left + 1;\r\n        let great = right - 1;\r\n\r\n// sorting\r\n        for (let k = less; k <= great; k++) {\r\n\r\n            // if (this.Reads.read(k) < pivot1) {\r\n            if (this.Reads.compareValues(this.Reads.get(k), pivot1) < 0) {\r\n\r\n                this.Writes.swap(k, less++);\r\n            // } else if (this.Reads.read(k) > pivot2) {\r\n            } else if (this.Reads.compareValues(this.Reads.get(k), pivot2) > 0) {\r\n                // while (k < great && this.Reads.read(great) > pivot2) {\r\n                while (k < great && this.Reads.compareValues(this.Reads.get(great), pivot2) > 0) {\r\n                    great--;\r\n                }\r\n                this.Writes.swap(k, great--);\r\n\r\n                // if (this.Reads.read(k) < pivot1) {\r\n                if (this.Reads.compareValues(this.Reads.get(k), pivot1) < 0) {\r\n                    this.Writes.swap(k, less++);\r\n                }\r\n            }\r\n        }\r\n\r\n// swaps\r\n        let dist = great - less;\r\n\r\n        if (dist < 13) {\r\n            divisor++;\r\n        }\r\n        this.Writes.swap(less - 1, left);\r\n        this.Writes.swap(great + 1, right);\r\n\r\n// subarrays\r\n        this.dualPivot(left, less - 2, divisor);\r\n        if (pivot1 < pivot2) {\r\n            this.dualPivot(less, great, divisor);\r\n        }\r\n        this.dualPivot(great + 2, right, divisor);\r\n    }\r\n\r\n    runSort(low, high) {\r\n        this.dualPivot(low, high, 3)\r\n    }\r\n}","import {Sort} from \"./Sort\";\r\n\r\nexport class LLQuickSort extends Sort{\r\n    constructor(arrayVisualizer) {\r\n        super(arrayVisualizer);\r\n        this.sortName = \"LLQuickSort\"\r\n    }\r\n    partition(lo, hi) {\r\n        let pivot = hi;\r\n        let i = lo;\r\n        for (let j = lo; j < hi; j++) {\r\n            if (this.Reads.compareInArr(j, pivot) < 0) {\r\n                this.Writes.swap(i, j);\r\n                i++;\r\n            }\r\n        }\r\n        this.Writes.swap(i, hi);\r\n        return i;\r\n    }\r\n\r\n    LLQuickSort(lo, hi) {\r\n        if (lo < hi) {\r\n            let p = this.partition(lo, hi);\r\n            this.LLQuickSort(lo, p - 1);\r\n            this.LLQuickSort(p + 1, hi);\r\n        }\r\n    }\r\n    runSort(low, high) {\r\n        this.LLQuickSort(low, high)\r\n    }\r\n}","import {Sort} from \"./Sort\";\r\n\r\nexport class LRQuickSort extends Sort{\r\n    constructor(arrayVisualizer) {\r\n        super(arrayVisualizer);\r\n        this.sortName=\"LRQuickSort\"\r\n    }\r\n\r\n    quickSort(p, r){\r\n        let pivot = Math.trunc(p + (r - p + 1) / 2);\r\n        let x = this.Reads.readValue(pivot);\r\n\r\n        let i = p;\r\n        let j = r;\r\n\r\n        while (i <= j) {\r\n            while (this.Reads.readValue(i) < x){\r\n                i++;\r\n            }\r\n            while (this.Reads.readValue(j) > x){\r\n                j--;\r\n            }\r\n\r\n            if (i <= j) {\r\n                this.Writes.swap(i, j);\r\n                i++;\r\n                j--;\r\n            }\r\n        }\r\n\r\n        if(p < j) {\r\n            this.quickSort(p, j);\r\n        }\r\n        if(i < r) {\r\n            this.quickSort(i, r);\r\n        }\r\n    }\r\n\r\n    runSort(low, high) {\r\n        this.quickSort(low, high)\r\n    }\r\n}","import {Sort} from \"./Sort\";\r\nimport {Element} from \"../classes/Element\";\r\n\r\nexport class LSDRadixSort extends Sort {\r\n    constructor(arrayVisualizer) {\r\n        super(arrayVisualizer);\r\n        this.sortName = \"LSD RadixSort\"\r\n        this.isNeedBucketsNum = true;\r\n    }\r\n\r\n    LSDRadixSort(bucketsNum) {\r\n        let len = this.arrayVisualizer.getArrLength()\r\n        let max = this.Reads.readValue(0);\r\n        for (let i = 1; i < len; ++i) {\r\n            let tmp = this.Reads.readValue(i)\r\n            if (max < tmp) {\r\n                max = tmp\r\n            }\r\n        }\r\n        let highestPower = Math.log(max) / Math.log(bucketsNum);\r\n\r\n        let registers = new Array(bucketsNum)\r\n        for (let i = 0; i < bucketsNum; i++) {\r\n            registers[i] = [];\r\n        }\r\n\r\n        for (let p = 0; p <= highestPower; p++) {\r\n            for (let i = 0; i < len; i++) {\r\n                let stabVal = Math.max(0, Math.min(this.Reads.readValue(i), len - 1))\r\n                let digit = Math.trunc(stabVal / (bucketsNum ** p) % bucketsNum)\r\n                console.log(digit)\r\n                registers[digit].push(this.Reads.get(i))\r\n\r\n            }\r\n\r\n\r\n            let tempArray = this.Writes.createAuxArray(len)\r\n            let tempWrite = new Array(len)\r\n            let radix = registers.length\r\n\r\n\r\n            let total = 0;\r\n            for (let index = 0; index < registers.length; index++) {\r\n                for (let i = 0; i < registers[index].length; i++) {\r\n                    this.Writes.auxWrite(total++, registers[index][i], tempArray)\r\n                }\r\n                registers[index] = []\r\n            }\r\n\r\n            for (let i = 0; i < len; i++) {\r\n                let register = i % radix\r\n                let pos = (register * Math.trunc(len / radix) + Math.trunc(i / radix))\r\n\r\n                this.Writes.write(pos, this.Reads.auxGet(pos, tempArray))\r\n                tempWrite[pos] = true\r\n            }\r\n            for (let i = 0; i < len; i++) {\r\n                if (!tempWrite) {\r\n                    this.Writes.write(i, this.Reads.auxGet(i, tempArray))\r\n                }\r\n            }\r\n\r\n            this.Writes.removeAuxArray(tempArray)\r\n\r\n        }\r\n\r\n    }\r\n\r\n    runSort(low, high, bucketsNum) {\r\n        this.LSDRadixSort(bucketsNum)\r\n    }\r\n}","import {Sort} from \"./Sort\";\r\n\r\nexport class MergeSort extends Sort{\r\n    constructor(arrayVisualizer) {\r\n        super(arrayVisualizer);\r\n        this.sortName = \"MergeSort\"\r\n    }\r\n    merge(low, mid, high) {\r\n        // let leftArray = new Array(mid - low + 1);\r\n        // let rightArray = new Array(high - mid);\r\n\r\n        let leftArrayLen = mid - low + 1\r\n        let rightArrayLen = high - mid\r\n\r\n        let leftArrayIndex = this.Writes.createAuxArray(leftArrayLen);\r\n        let rightArrayIndex = this.Writes.createAuxArray(rightArrayLen);\r\n\r\n        for (let i = 0; i < leftArrayLen; i++) {\r\n            // leftArray[i] = this.Reads.read(low + i)\r\n            this.Writes.auxWrite(i, this.Reads.get(low + i), leftArrayIndex)\r\n        }\r\n        for (let i = 0; i < rightArrayLen; i++) {\r\n            // rightArray[i] = this.Reads.read(mid + i + 1);\r\n            this.Writes.auxWrite(i, this.Reads.get(mid + i + 1), rightArrayIndex)\r\n        }\r\n\r\n        let leftIndex = 0;\r\n        let rightIndex = 0;\r\n\r\n        for (let i = low; i < high + 1; i++) {\r\n            if (leftIndex < leftArrayLen && rightIndex < rightArrayLen) {\r\n                // if (leftArray[leftIndex] < rightArray[rightIndex]) {\r\n                if (this.Reads.compareValues(this.Reads.auxGet(leftIndex, leftArrayIndex), this.Reads.auxGet(rightIndex, rightArrayIndex)) < 0) {\r\n                    this.Writes.write(i, this.Reads.auxGet(leftIndex, leftArrayIndex))\r\n                    leftIndex++;\r\n                } else {\r\n                    this.Writes.write(i, this.Reads.auxGet(rightIndex, rightArrayIndex))\r\n                    rightIndex++;\r\n                }\r\n            } else if (leftIndex < leftArrayLen) {\r\n                this.Writes.write(i, this.Reads.auxGet(leftIndex, leftArrayIndex))\r\n                leftIndex++;\r\n            } else if (rightIndex < rightArrayLen) {\r\n                this.Writes.write(i, this.Reads.auxGet(rightIndex, rightArrayIndex))\r\n                rightIndex++;\r\n            }\r\n        }\r\n        // console.log(leftArray)\r\n        this.Writes.removeAuxArray(leftArrayIndex)\r\n        // console.log(rightArray)\r\n        this.Writes.removeAuxArray(rightArrayIndex)\r\n    }\r\n\r\n    MergeSort(low, high) {\r\n        if (high <= low) return;\r\n\r\n        let mid = Math.trunc((low + high) / 2)\r\n        this.MergeSort(low, mid);\r\n        this.MergeSort(mid + 1, high);\r\n        this.merge(low, mid, high);\r\n    }\r\n\r\n    runSort(low, high) {\r\n        this.MergeSort(low, high)\r\n    }\r\n}","import {Sort} from \"./Sort\";\r\nimport {InsertionSort} from \"./InsertionSort\";\r\n\r\nexport class PseudoTimSort extends Sort {\r\n    MIN_MERGE\r\n    constructor(arrayVisualizer) {\r\n        super(arrayVisualizer);\r\n        this.sortName = \"PseudoTimSort\"\r\n        this.MIN_MERGE = 32\r\n    }\r\n\r\n    minRunLength(n) {\r\n        let r = 0;\r\n        while (n >= this.MIN_MERGE)\r\n        {\r\n            r |= (n & 1);\r\n            n >>= 1;\r\n        }\r\n        return n + r;\r\n    }\r\n    merge(l, m, r) {\r\n        let len1 = m - l + 1, len2 = r - m;\r\n        let left = this.Writes.createAuxArray(len1);\r\n        let right = this.Writes.createAuxArray(len2);\r\n        for(let x = 0; x < len1; x++)\r\n        {\r\n            // left[x] = arr[l + x];\r\n            this.Writes.auxWrite(x, this.Reads.get(l + x), left)\r\n        }\r\n        for(let x = 0; x < len2; x++)\r\n        {\r\n            // right[x] = arr[m + 1 + x];\r\n            this.Writes.auxWrite(x, this.Reads.get(m + 1 + x), right)\r\n        }\r\n\r\n        let i = 0;\r\n        let j = 0;\r\n        let k = l;\r\n\r\n        while (i < len1 && j < len2)\r\n        {\r\n            // if (left[i] <= right[j])\r\n            if(this.Reads.compareValues(this.Reads.auxGet(i, left), this.Reads.auxGet(j, right))<=0)\r\n            {\r\n                // arr[k] = left[i];\r\n                this.Writes.write(k, this.Reads.auxGet(i, left))\r\n                i++;\r\n            }\r\n            else\r\n            {\r\n                // arr[k] = right[j];\r\n                this.Writes.write(k, this.Reads.auxGet(j, right))\r\n                j++;\r\n            }\r\n            k++;\r\n        }\r\n\r\n        while (i < len1) {\r\n            // arr[k] = left[i];\r\n            this.Writes.write(k, this.Reads.auxGet(i, left))\r\n            k++;\r\n            i++;\r\n        }\r\n\r\n        while (j < len2) {\r\n            this.Writes.write(k, this.Reads.auxGet(j, right))\r\n            k++;\r\n            j++;\r\n        }\r\n        this.Writes.removeAuxArray(right)\r\n        this.Writes.removeAuxArray(left)\r\n    }\r\n\r\n    pseudoTimSort(n)\r\n    {\r\n        let minRun = this.minRunLength(this.MIN_MERGE);\r\n\r\n        for(let i = 0; i < n; i += minRun)\r\n        {\r\n            let insertionSort = new InsertionSort(this.arrayVisualizer)\r\n\r\n            insertionSort.runSort(i, Math.min(\r\n                (i + this.MIN_MERGE - 1), (n - 1)));\r\n        }\r\n\r\n        for(let size = minRun; size < n; size = 2 * size) {\r\n            for(let left = 0; left < n; left += 2 * size) {\r\n                let mid = left + size - 1;\r\n                let right = Math.min((left + 2 * size - 1), (n - 1));\r\n                if(mid < right) {\r\n                    this.merge(left, mid, right);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    runSort(low, high) {\r\n        this.pseudoTimSort(high+1)\r\n    }\r\n}","import {Sort} from \"./Sort\";\r\n\r\nexport class SelectionSort extends Sort{\r\n    constructor(arrayVisualizer) {\r\n        super(arrayVisualizer);\r\n        this.sortName = \"SelectionSort\"\r\n    }\r\n\r\n    SelectionSort() {\r\n        for (let i=0; i < this.arrLength; i++) {\r\n            let minIndex = i\r\n            for (let j=i; j < this.arrLength; j++) {\r\n                if (this.Reads.compare(j, minIndex, \"<\")) {\r\n                    minIndex = j\r\n                }\r\n            }\r\n\r\n            if (this.Reads.compare(i, minIndex, \">\")) {\r\n                this.Writes.swap(i, minIndex);\r\n            }\r\n        }\r\n    }\r\n\r\n    runSort(low, high) {\r\n        this.SelectionSort(low, high)\r\n    }\r\n}","import {Sort} from \"./Sort\";\r\n\r\nexport class SlowSort extends Sort{\r\n    constructor(arrayVisualizer) {\r\n        super(arrayVisualizer);\r\n        this.sortName = \"SlowSort\"\r\n        this.warnLen = 120\r\n    }\r\n\r\n    SlowSort(i, j) {\r\n        if (i >= j) {\r\n            return;\r\n        }\r\n        let m = Math.floor((i + j) / 2);\r\n        this.SlowSort(i, m);\r\n        this.SlowSort(m + 1, j);\r\n        if (this.Reads.compareInArr(j, m) < 0) {\r\n            this.Writes.swap(j, m)\r\n        }\r\n        this.SlowSort(i, j - 1)\r\n    }\r\n\r\n    runSort(low, high) {\r\n        this.SlowSort(low, high)\r\n    }\r\n}","import {Sort} from \"./Sort\";\r\n\r\nexport class StoogeSort extends Sort{\r\n    constructor(arrayVisualizer) {\r\n        super(arrayVisualizer);\r\n        this.sortName = \"StoogeSort\"\r\n    }\r\n\r\n    StoogeSort(i, j) {\r\n        if (this.Reads.compareInArr(i, j) > 0) {\r\n            this.Writes.swap(i, j)\r\n        }\r\n        if (j - i > 1) {\r\n            let t = Math.trunc((j - i + 1) / 3)\r\n            this.StoogeSort(i, j - t)\r\n            this.StoogeSort(i + t, j)\r\n            this.StoogeSort(i, j - t)\r\n        }\r\n    }\r\n\r\n    runSort(low, high) {\r\n        this.StoogeSort(low, high)\r\n    }\r\n}","import {Sort} from \"./Sort\";\r\n\r\n/**\r\n * Default minimum size of a run.\r\n */\r\nconst DEFAULT_MIN_MERGE = 32\r\n\r\n/**\r\n * Minimum ordered subsequece required to do galloping.\r\n */\r\nconst DEFAULT_MIN_GALLOPING = 7\r\n\r\n/**\r\n * Default tmp storage length. Can increase depending on the size of the\r\n * smallest run to merge.\r\n */\r\nconst DEFAULT_TMP_STORAGE_LENGTH = 256\r\n\r\n/**\r\n * Pre-computed powers of 10 for efficient lexicographic comparison of\r\n * small integers.\r\n */\r\nconst POWERS_OF_TEN = [1e0, 1e1, 1e2, 1e3, 1e4, 1e5, 1e6, 1e7, 1e8, 1e9]\r\n\r\nlet results\r\n\r\n/**\r\n * Estimate the logarithm base 10 of a small integer.\r\n *\r\n * @param {number} x - The integer to estimate the logarithm of.\r\n * @return {number} - The estimated logarithm of the integer.\r\n */\r\nconst log10 = x => x < 1e5\r\n    ? x < 1e2\r\n        ? x < 1e1\r\n            ? 0\r\n            : 1\r\n        : x < 1e4\r\n            ? x < 1e3\r\n                ? 2\r\n                : 3\r\n            : 4\r\n    : x < 1e7\r\n        ? x < 1e6\r\n            ? 5\r\n            : 6\r\n        : x < 1e9\r\n            ? x < 1e8\r\n                ? 7\r\n                : 8\r\n            : 9\r\n\r\n/**\r\n * Default alphabetical comparison of items.\r\n *\r\n * @param {string|object|number} a - First element to compare.\r\n * @param {string|object|number} b - Second element to compare.\r\n * @return {number} - A positive number if a.toString() > b.toString(), a\r\n * negative number if .toString() < b.toString(), 0 otherwise.\r\n */\r\nfunction alphabeticalCompare(a, b) {\r\n    if (a === b) {\r\n        return 0\r\n    }\r\n\r\n    if (~~a === a && ~~b === b) {\r\n        if (a === 0 || b === 0) {\r\n            return a < b ? -1 : 1\r\n        }\r\n\r\n        if (a < 0 || b < 0) {\r\n            if (b >= 0) {\r\n                return -1\r\n            }\r\n\r\n            if (a >= 0) {\r\n                return 1\r\n            }\r\n\r\n            a = -a\r\n            b = -b\r\n        }\r\n\r\n        const al = log10(a)\r\n        const bl = log10(b)\r\n\r\n        let t = 0\r\n\r\n        if (al < bl) {\r\n            a *= POWERS_OF_TEN[bl - al - 1]\r\n            b /= 10\r\n            t = -1\r\n        } else if (al > bl) {\r\n            b *= POWERS_OF_TEN[al - bl - 1]\r\n            a /= 10\r\n            t = 1\r\n        }\r\n\r\n        if (a === b) {\r\n            return t\r\n        }\r\n\r\n        return a < b ? -1 : 1\r\n    }\r\n\r\n    const aStr = String(a)\r\n    const bStr = String(b)\r\n\r\n    if (aStr === bStr) {\r\n        return 0\r\n    }\r\n\r\n    return aStr < bStr ? -1 : 1\r\n}\r\n\r\n/**\r\n * Compute minimum run length for TimSort\r\n *\r\n * @param {number} n - The size of the array to sort.\r\n */\r\nfunction minRunLength(n) {\r\n    let r = 0\r\n\r\n    while (n >= DEFAULT_MIN_MERGE) {\r\n        r |= (n & 1)\r\n        n >>= 1\r\n    }\r\n\r\n    return n + r\r\n}\r\n\r\n/**\r\n * Counts the length of a monotonically ascending or strictly monotonically\r\n * descending sequence (run) starting at array[lo] in the range [lo, hi). If\r\n * the run is descending it is made ascending.\r\n *\r\n * @param {array} array - The array to reverse.\r\n * @param {number} lo - First element in the range (inclusive).\r\n * @param {number} hi - Last element in the range.\r\n * @param {function} compare - Item comparison function.\r\n * @return {number} - The length of the run.\r\n */\r\n\r\nexport class TimSort extends Sort {\r\n    constructor(arrayVisualizer) {\r\n        super(arrayVisualizer);\r\n\r\n        this.minGallop = DEFAULT_MIN_GALLOPING\r\n\r\n        this.tmpStorageLength = this.arrLength < 2 * DEFAULT_TMP_STORAGE_LENGTH\r\n            ? this.arrLength >>> 1\r\n            : DEFAULT_TMP_STORAGE_LENGTH\r\n\r\n        // this.tmp = new Array(this.tmpStorageLength)\r\n        this.tmp = this.Writes.createAuxArray(this.tmpStorageLength)\r\n\r\n        this.stackLength = this.arrLength < 120\r\n            ? 5\r\n            : this.arrLength < 1542\r\n                ? 10\r\n                : this.arrLength < 119151\r\n                    ? 19\r\n                    : 40\r\n\r\n        this.runStart = new Array(this.stackLength)\r\n        this.runLength = new Array(this.stackLength)\r\n\r\n        this.stackSize = 0\r\n        this.sortName = \"TimSort\"\r\n    }\r\n\r\n    makeAscendingRun(lo, hi) {\r\n        let runHi = lo + 1\r\n\r\n        if (runHi === hi) {\r\n            return 1\r\n        }\r\n\r\n        // Descending\r\n        // if (compare(array[runHi++], array[lo]) < 0) {\r\n        if (this.Reads.compareInArr(runHi++, lo)<0) {\r\n            // while (runHi < hi && compare(array[runHi], array[runHi - 1]) < 0) {\r\n            while (runHi < hi && this.Reads.compareInArr(runHi, runHi - 1)<0) {\r\n                runHi++\r\n            }\r\n\r\n            // this.reverseRun(array, lo, runHi)\r\n            this.reverseRun(lo, runHi)\r\n            // reverseRun(results, lo, runHi)\r\n            // Ascending\r\n        } else {\r\n            // while (runHi < hi && compare(array[runHi], array[runHi - 1]) >= 0) {\r\n            while (runHi < hi && this.Reads.compareInArr(runHi, runHi - 1)>=0) {\r\n                runHi++\r\n            }\r\n        }\r\n\r\n        return runHi - lo\r\n    }\r\n\r\n    /**\r\n     * Reverse an array in the range [lo, hi).\r\n     *\r\n     * @param {array} array - The array to reverse.\r\n     * @param {number} lo - First element in the range (inclusive).\r\n     * @param {number} hi - Last element in the range.\r\n     */\r\n\r\n\r\n    reverseRun(lo, hi) {\r\n        hi--\r\n\r\n        while (lo < hi) {\r\n            // const t = array[lo]\r\n            // array[lo++] = array[hi]\r\n            // array[hi--] = t\r\n            const t = this.Reads.get(lo)\r\n            this.Writes.write(lo++, this.Reads.get(hi))\r\n            this.Writes.write(hi--, t)\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Perform the binary sort of the array in the range [lo, hi) where start is\r\n     * the first element possibly out of order.\r\n     *\r\n     * @param {array} array - The array to sort.\r\n     * @param {number} lo - First element in the range (inclusive).\r\n     * @param {number} hi - Last element in the range.\r\n     * @param {number} start - First element possibly out of order.\r\n     * @param {} compare - Item comparison function.\r\n     */\r\n\r\n\r\n    binaryInsertionSort(lo, hi, start) {\r\n        if (start === lo) {\r\n            start++\r\n        }\r\n\r\n        for (; start < hi; start++) {\r\n            // const pivot = array[start]\r\n            const pivot = this.Reads.get(start)\r\n\r\n            // const pivotIndex = results[start]\r\n\r\n            // Ranges of the array where pivot belongs\r\n            let left = lo\r\n            let right = start\r\n\r\n            /*\r\n             *   pivot >= array[i] for i in [lo, left)\r\n             *   pivot <  array[i] for i in  in [right, start)\r\n             */\r\n            while (left < right) {\r\n                const mid = (left + right) >>> 1\r\n\r\n                // if (compare(pivot, array[mid]) < 0) {\r\n                if (pivot.getValue() < this.Reads.readValue(mid)) {\r\n                    right = mid\r\n                } else {\r\n                    left = mid + 1\r\n                }\r\n            }\r\n\r\n            /*\r\n             * Move elements right to make room for the pivot. If there are elements\r\n             * equal to pivot, left points to the first slot after them: this is also\r\n             * a reason for which TimSort is stable\r\n             */\r\n            let n = start - left\r\n            // Switch is just an optimization for small arrays\r\n            switch (n) {\r\n                case 3:\r\n                    // array[left + 3] = array[left + 2]\r\n                    this.Writes.write(left + 3, this.Reads.get(left + 2))\r\n                /* falls through */\r\n                case 2:\r\n                    // array[left + 2] = array[left + 1]\r\n                    this.Writes.write(left + 2, this.Reads.get(left + 1))\r\n                /* falls through */\r\n                case 1:\r\n                    // array[left + 1] = array[left]\r\n                    this.Writes.write(left + 1, this.Reads.get(left))\r\n                    break\r\n                default:\r\n                    while (n > 0) {\r\n                        // array[left + n] = array[left + n - 1]\r\n                        this.Writes.write(left + n, this.Reads.get(left + n - 1))\r\n                        n--\r\n                    }\r\n            }\r\n\r\n            // array[left] = pivot\r\n            this.Writes.write(left, pivot)\r\n            // results[left] = pivotIndex\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Find the position at which to insert a value in a sorted range. If the range\r\n     * contains elements equal to the value the leftmost element index is returned\r\n     * (for stability).\r\n     *\r\n     * @param {number} value - Value to insert.\r\n     * @param {array} array - The array in which to insert value.\r\n     * @param {number} start - First element in the range.\r\n     * @param {number} length - Length of the range.\r\n     * @param {number} hint - The index at which to begin the search.\r\n     * @param {function} compare - Item comparison function.\r\n     * @return {number} - The index where to insert value.\r\n     */\r\n\r\n\r\n    gallopLeft(value, isAux, start, length, hint) {\r\n        let lastOffset = 0\r\n        let maxOffset = 0\r\n        let offset = 1\r\n        if (!isAux) {\r\n            // if (compare(value, array[start + hint]) > 0) {\r\n            if (value > this.Reads.readValue(start + hint)) {\r\n                maxOffset = length - hint\r\n\r\n                while (\r\n                    offset < maxOffset\r\n                    // && compare(value, array[start + hint + offset]) > 0\r\n                    && value > this.Reads.readValue(start + hint + offset)\r\n                    ) {\r\n                    lastOffset = offset\r\n                    offset = (offset << 1) + 1\r\n\r\n                    if (offset <= 0) {\r\n                        offset = maxOffset\r\n                    }\r\n                }\r\n\r\n                if (offset > maxOffset) {\r\n                    offset = maxOffset\r\n                }\r\n\r\n                // Make offsets relative to start\r\n                lastOffset += hint\r\n                offset += hint\r\n\r\n                // value <= array[start + hint]\r\n            } else {\r\n                maxOffset = hint + 1\r\n                while (\r\n                    offset < maxOffset\r\n                    // && compare(value, array[start + hint - offset]) <= 0\r\n                    // && value <= this.Reads.readValue(start + hint + offset)\r\n                    && value <= this.Reads.readValue(start + hint - offset)\r\n                    ) {\r\n                    lastOffset = offset\r\n                    offset = (offset << 1) + 1\r\n\r\n                    if (offset <= 0) {\r\n                        offset = maxOffset\r\n                    }\r\n                }\r\n                if (offset > maxOffset) {\r\n                    offset = maxOffset\r\n                }\r\n\r\n                // Make offsets relative to start\r\n                const tmp = lastOffset\r\n                lastOffset = hint - offset\r\n                offset = hint - tmp\r\n            }\r\n\r\n            /*\r\n             * Now array[start+lastOffset] < value <= array[start+offset], so value\r\n             * belongs somewhere in the range (start + lastOffset, start + offset]. Do a\r\n             * binary search, with invariant array[start + lastOffset - 1] < value <=\r\n             * array[start + offset].\r\n             */\r\n            lastOffset++\r\n            while (lastOffset < offset) {\r\n                const m = lastOffset + ((offset - lastOffset) >>> 1)\r\n\r\n                // if (compare(value, array[start + m]) > 0) {\r\n                if (value > this.Reads.readValue(start + m)) {\r\n                    lastOffset = m + 1\r\n                } else {\r\n                    offset = m\r\n                }\r\n            }\r\n        } else {\r\n            // if (compare(value, array[start + hint]) > 0) {\r\n            if (value > this.Reads.auxReadValue(start + hint, this.tmp)) {\r\n                maxOffset = length - hint\r\n\r\n                while (\r\n                    offset < maxOffset\r\n                    // && compare(value, array[start + hint + offset]) > 0\r\n                    && value > this.Reads.auxReadValue(start + hint + offset, this.tmp)\r\n                    ) {\r\n                    lastOffset = offset\r\n                    offset = (offset << 1) + 1\r\n\r\n                    if (offset <= 0) {\r\n                        offset = maxOffset\r\n                    }\r\n                }\r\n\r\n                if (offset > maxOffset) {\r\n                    offset = maxOffset\r\n                }\r\n\r\n                // Make offsets relative to start\r\n                lastOffset += hint\r\n                offset += hint\r\n\r\n                // value <= array[start + hint]\r\n            } else {\r\n                maxOffset = hint + 1\r\n                while (\r\n                    offset < maxOffset\r\n                    // && compare(value, array[start + hint - offset]) <= 0\r\n                    // && value <= this.Reads.auxRead(start + hint + offset, this.tmp)\r\n                    && value <= this.Reads.auxReadValue(start + hint - offset, this.tmp)\r\n                    ) {\r\n                    lastOffset = offset\r\n                    offset = (offset << 1) + 1\r\n\r\n                    if (offset <= 0) {\r\n                        offset = maxOffset\r\n                    }\r\n                }\r\n                if (offset > maxOffset) {\r\n                    offset = maxOffset\r\n                }\r\n\r\n                // Make offsets relative to start\r\n                const tmp = lastOffset\r\n                lastOffset = hint - offset\r\n                offset = hint - tmp\r\n            }\r\n\r\n            /*\r\n             * Now array[start+lastOffset] < value <= array[start+offset], so value\r\n             * belongs somewhere in the range (start + lastOffset, start + offset]. Do a\r\n             * binary search, with invariant array[start + lastOffset - 1] < value <=\r\n             * array[start + offset].\r\n             */\r\n            lastOffset++\r\n            while (lastOffset < offset) {\r\n                const m = lastOffset + ((offset - lastOffset) >>> 1)\r\n\r\n                // if (compare(value, array[start + m]) > 0) {\r\n                if (value > this.Reads.auxReadValue(start + m, this.tmp)) {\r\n                    lastOffset = m + 1\r\n                } else {\r\n                    offset = m\r\n                }\r\n            }\r\n        }\r\n        return offset\r\n    }\r\n\r\n    /**\r\n     * Find the position at which to insert a value in a sorted range. If the range\r\n     * contains elements equal to the value the rightmost element index is returned\r\n     * (for stability).\r\n     *\r\n     * @param {number} value - Value to insert.\r\n     * @param {array} array - The array in which to insert value.\r\n     * @param {number} start - First element in the range.\r\n     * @param {number} length - Length of the range.\r\n     * @param {number} hint - The index at which to begin the search.\r\n     * @param {function} compare - Item comparison function.\r\n     * @return {number} - The index where to insert value.\r\n     */\r\n\r\n\r\n    gallopRight(value, isAux, start, length, hint) {\r\n        let lastOffset = 0\r\n        let maxOffset = 0\r\n        let offset = 1\r\n\r\n        if (!isAux) {\r\n            // if (compare(value, array[start + hint]) < 0) {\r\n            if (value < this.Reads.readValue(start + hint)) {\r\n                maxOffset = hint + 1\r\n\r\n                while (\r\n                    offset < maxOffset\r\n                    // && compare(value, array[start + hint - offset]) < 0\r\n                    && value < this.Reads.readValue(start + hint - offset)\r\n                    ) {\r\n                    lastOffset = offset\r\n                    offset = (offset << 1) + 1\r\n\r\n                    if (offset <= 0) {\r\n                        offset = maxOffset\r\n                    }\r\n                }\r\n\r\n                if (offset > maxOffset) {\r\n                    offset = maxOffset\r\n                }\r\n\r\n                // Make offsets relative to start\r\n                const tmp = lastOffset\r\n                lastOffset = hint - offset\r\n                offset = hint - tmp\r\n\r\n                // value >= array[start + hint]\r\n            } else {\r\n                maxOffset = length - hint\r\n\r\n                while (\r\n                    offset < maxOffset\r\n                    // && compare(value, array[start + hint + offset]) >= 0\r\n                    && value >= this.Reads.readValue(start + hint + offset)\r\n                    ) {\r\n                    lastOffset = offset\r\n                    offset = (offset << 1) + 1\r\n\r\n                    if (offset <= 0) {\r\n                        offset = maxOffset\r\n                    }\r\n                }\r\n\r\n                if (offset > maxOffset) {\r\n                    offset = maxOffset\r\n                }\r\n\r\n                // Make offsets relative to start\r\n                lastOffset += hint\r\n                offset += hint\r\n            }\r\n\r\n            /*\r\n             * Now array[start+lastOffset] < value <= array[start+offset], so value\r\n             * belongs somewhere in the range (start + lastOffset, start + offset]. Do a\r\n             * binary search, with invariant array[start + lastOffset - 1] < value <=\r\n             * array[start + offset].\r\n             */\r\n            lastOffset++\r\n\r\n            while (lastOffset < offset) {\r\n                const m = lastOffset + ((offset - lastOffset) >>> 1)\r\n\r\n                // if (compare(value, array[start + m]) < 0) {\r\n                if (value < this.Reads.readValue(start + m)) {\r\n                    offset = m\r\n                } else {\r\n                    lastOffset = m + 1\r\n                }\r\n            }\r\n\r\n        } else {\r\n            //AUX\r\n            // if (compare(value, array[start + hint]) < 0) {\r\n            if (value < this.Reads.auxReadValue(start + hint, this.tmp)) {\r\n                maxOffset = hint + 1\r\n\r\n                while (\r\n                    offset < maxOffset\r\n                    // && compare(value, array[start + hint - offset]) < 0\r\n                    && value < this.Reads.auxReadValue(start + hint - offset, this.tmp)\r\n                    ) {\r\n                    lastOffset = offset\r\n                    offset = (offset << 1) + 1\r\n\r\n                    if (offset <= 0) {\r\n                        offset = maxOffset\r\n                    }\r\n                }\r\n\r\n                if (offset > maxOffset) {\r\n                    offset = maxOffset\r\n                }\r\n\r\n                // Make offsets relative to start\r\n                const tmp = lastOffset\r\n                lastOffset = hint - offset\r\n                offset = hint - tmp\r\n\r\n                // value >= array[start + hint]\r\n            } else {\r\n                maxOffset = length - hint\r\n\r\n                while (\r\n                    offset < maxOffset\r\n                    // && compare(value, array[start + hint + offset]) >= 0\r\n                    && value >= this.Reads.auxReadValue(start + hint + offset, this.tmp)\r\n                    ) {\r\n                    lastOffset = offset\r\n                    offset = (offset << 1) + 1\r\n\r\n                    if (offset <= 0) {\r\n                        offset = maxOffset\r\n                    }\r\n                }\r\n\r\n                if (offset > maxOffset) {\r\n                    offset = maxOffset\r\n                }\r\n\r\n                // Make offsets relative to start\r\n                lastOffset += hint\r\n                offset += hint\r\n            }\r\n\r\n            /*\r\n             * Now array[start+lastOffset] < value <= array[start+offset], so value\r\n             * belongs somewhere in the range (start + lastOffset, start + offset]. Do a\r\n             * binary search, with invariant array[start + lastOffset - 1] < value <=\r\n             * array[start + offset].\r\n             */\r\n            lastOffset++\r\n\r\n            while (lastOffset < offset) {\r\n                const m = lastOffset + ((offset - lastOffset) >>> 1)\r\n\r\n                // if (compare(value, array[start + m]) < 0) {\r\n                if (value < this.Reads.auxReadValue(start + m, this.tmp)) {\r\n                    offset = m\r\n                } else {\r\n                    lastOffset = m + 1\r\n                }\r\n            }\r\n        }\r\n\r\n        return offset\r\n    }\r\n\r\n\r\n    /**\r\n     * Push a new run on TimSort's stack.\r\n     *\r\n     * @param {number} runStart - Start index of the run in the original array.\r\n     * @param {number} runLength - Length of the run;\r\n     */\r\n    pushRun(runStart, runLength) {\r\n        this.runStart[this.stackSize] = runStart\r\n        this.runLength[this.stackSize] = runLength\r\n        this.stackSize += 1\r\n    }\r\n\r\n    /**\r\n     * Merge runs on TimSort's stack so that the following holds for all i:\r\n     * 1) runLength[i - 3] > runLength[i - 2] + runLength[i - 1]\r\n     * 2) runLength[i - 2] > runLength[i - 1]\r\n     */\r\n    mergeRuns() {\r\n        while (this.stackSize > 1) {\r\n            let n = this.stackSize - 2\r\n\r\n            if (\r\n                (\r\n                    n >= 1\r\n                    && this.runLength[n - 1] <= this.runLength[n] + this.runLength[n + 1]\r\n                )\r\n                || (\r\n                    n >= 2\r\n                    && this.runLength[n - 2] <= this.runLength[n] + this.runLength[n - 1]\r\n                )\r\n            ) {\r\n                if (this.runLength[n - 1] < this.runLength[n + 1]) {\r\n                    n--\r\n                }\r\n            } else if (this.runLength[n] > this.runLength[n + 1]) {\r\n                break\r\n            }\r\n            this.mergeAt(n)\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Merge all runs on TimSort's stack until only one remains.\r\n     */\r\n    forceMergeRuns() {\r\n        while (this.stackSize > 1) {\r\n            let n = this.stackSize - 2\r\n\r\n            if (n > 0 && this.runLength[n - 1] < this.runLength[n + 1]) {\r\n                n--\r\n            }\r\n\r\n            this.mergeAt(n)\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Merge the runs on the stack at positions i and i+1. Must be always be called\r\n     * with i=stackSize-2 or i=stackSize-3 (that is, we merge on top of the stack).\r\n     *\r\n     * @param {number} i - Index of the run to merge in TimSort's stack.\r\n     */\r\n    mergeAt(i) {\r\n        let start1 = this.runStart[i]\r\n        let length1 = this.runLength[i]\r\n        const start2 = this.runStart[i + 1]\r\n        let length2 = this.runLength[i + 1]\r\n\r\n        this.runLength[i] = length1 + length2\r\n\r\n        if (i === this.stackSize - 3) {\r\n            this.runStart[i + 1] = this.runStart[i + 2]\r\n            this.runLength[i + 1] = this.runLength[i + 2]\r\n        }\r\n\r\n        this.stackSize--\r\n\r\n        /*\r\n         * Find where the first element in the second run goes in run1. Previous\r\n         * elements in run1 are already in place\r\n         */\r\n        // const k = gallopRight(array[start2], array, start1, length1, 0, compare)\r\n        const k = this.gallopRight(this.Reads.readValue(start2), false, start1, length1, 0)\r\n        start1 += k\r\n        length1 -= k\r\n\r\n        if (length1 === 0) {\r\n            return\r\n        }\r\n\r\n        /*\r\n         * Find where the last element in the first run goes in run2. Next elements\r\n         * in run2 are already in place\r\n         */\r\n        // length2 = gallopLeft(\r\n        //     array[start1 + length1 - 1],\r\n        //     array,\r\n        //     start2,\r\n        //     length2,\r\n        //     length2 - 1,\r\n        //     compare\r\n        // )\r\n        length2 = this.gallopLeft(\r\n            // array[start1 + length1 - 1],\r\n            this.Reads.readValue(start1 + length1 - 1),\r\n            false,\r\n            start2,\r\n            length2,\r\n            length2 - 1,\r\n        )\r\n\r\n        if (length2 === 0) {\r\n            return\r\n        }\r\n\r\n        /*\r\n         * Merge remaining runs. A tmp array with length = min(length1, length2) is\r\n         * used\r\n         */\r\n        if (length1 <= length2) {\r\n            this.mergeLow(start1, length1, start2, length2)\r\n        } else {\r\n            this.mergeHigh(start1, length1, start2, length2)\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Merge two adjacent runs in a stable way. The runs must be such that the\r\n     * first element of run1 is bigger than the first element in run2 and the\r\n     * last element of run1 is greater than all the elements in run2.\r\n     * The method should be called when run1.length <= run2.length as it uses\r\n     * TimSort temporary array to store run1. Use mergeHigh if run1.length >\r\n     * run2.length.\r\n     *\r\n     * @param {number} start1 - First element in run1.\r\n     * @param {number} length1 - Length of run1.\r\n     * @param {number} start2 - First element in run2.\r\n     * @param {number} length2 - Length of run2.\r\n     */\r\n    mergeLow(start1, length1, start2, length2) {\r\n        // const {compare} = this\r\n        // const {array} = this\r\n        // const {tmp} = this\r\n        // const {tmpIndex} = this\r\n        // const {compare} = this\r\n        // const {array} = this\r\n        // const {tmp} = this\r\n        // const {tmpIndex} = this\r\n        let i = 0\r\n\r\n        for (i = 0; i < length1; i++) {\r\n            // tmp[i] = array[start1 + i]\r\n            this.Writes.auxWrite(i, this.Reads.get(start1 + i), this.tmp)\r\n        }\r\n\r\n        let cursor1 = 0\r\n        let cursor2 = start2\r\n        let dest = start1\r\n\r\n\r\n        // array[dest] = array[cursor2]\r\n        this.Writes.write(dest, this.Reads.get(cursor2))\r\n\r\n\r\n        dest++\r\n        cursor2++\r\n\r\n        if (--length2 === 0) {\r\n            for (i = 0; i < length1; i++) {\r\n                // array[dest + i] = tmp[cursor1 + i]\r\n                this.Writes.write(dest + i, this.Reads.auxReadValue(cursor1 + i, this.tmp))\r\n            }\r\n            return\r\n        }\r\n\r\n        if (length1 === 1) {\r\n            for (i = 0; i < length2; i++) {\r\n                // array[dest + i] = array[cursor2 + i]\r\n\r\n                this.Writes.write(dest + i, this.Reads.get(cursor2 + i))\r\n            }\r\n            // array[dest + length2] = tmp[cursor1]\r\n            this.Writes.write(dest + length2, this.Reads.auxReadValue(cursor1, this.tmp))\r\n            return\r\n        }\r\n\r\n        let {minGallop} = this\r\n\r\n        while (true) {\r\n            let count1 = 0\r\n            let count2 = 0\r\n            let exit = false\r\n\r\n            do {\r\n                // if (compare(array[cursor2], tmp[cursor1]) < 0) {\r\n                if (this.Reads.readValue(cursor2) < this.Reads.auxReadValue(cursor1, this.tmp)) {\r\n                    // array[dest] = array[cursor2]\r\n                    this.Writes.write(dest, this.Reads.get(cursor2))\r\n                    dest++\r\n                    cursor2++\r\n                    count2++\r\n                    count1 = 0\r\n\r\n                    if (--length2 === 0) {\r\n                        exit = true\r\n                        break\r\n                    }\r\n                } else {\r\n                    // array[dest] = tmp[cursor1]\r\n                    this.Writes.write(dest, this.Reads.auxGet(cursor1, this.tmp))\r\n\r\n                    dest++\r\n                    cursor1++\r\n                    count1++\r\n                    count2 = 0\r\n                    if (--length1 === 1) {\r\n                        exit = true\r\n                        break\r\n                    }\r\n                }\r\n            } while ((count1 | count2) < minGallop)\r\n\r\n            if (exit) {\r\n                break\r\n            }\r\n\r\n            do {\r\n                // count1 = gallopRight(array[cursor2], tmp, cursor1, length1, 0, compare)\r\n                count1 = this.gallopRight(this.Reads.readValue(cursor2), true, cursor1, length1, 0)\r\n\r\n                if (count1 !== 0) {\r\n                    for (i = 0; i < count1; i++) {\r\n                        // array[dest + i] = tmp[cursor1 + i]\r\n                        // results[dest + i] = tmpIndex[cursor1 + i]\r\n                        this.Writes.write(dest + i, this.Reads.auxGet(cursor1 + i, this.tmp))\r\n                    }\r\n\r\n                    dest += count1\r\n                    cursor1 += count1\r\n                    length1 -= count1\r\n                    if (length1 <= 1) {\r\n                        exit = true\r\n                        break\r\n                    }\r\n                }\r\n\r\n                // array[dest] = array[cursor2]\r\n                // results[dest] = results[cursor2]\r\n                this.Writes.write(dest, this.Reads.get(cursor2))\r\n\r\n                dest++\r\n                cursor2++\r\n\r\n                if (--length2 === 0) {\r\n                    exit = true\r\n                    break\r\n                }\r\n\r\n                // count2 = this.gallopLeft(tmp[cursor1], array, cursor2, length2, 0, compare)\r\n                count2 = this.gallopLeft(this.Reads.auxReadValue(cursor1, this.tmp), false, cursor2, length2, 0)\r\n\r\n                if (count2 !== 0) {\r\n                    for (i = 0; i < count2; i++) {\r\n                        // array[dest + i] = array[cursor2 + i]\r\n                        // results[dest + i] = results[cursor2 + i]\r\n                        this.Writes.write(dest + i, this.Reads.get(cursor2 + i))\r\n                    }\r\n\r\n                    dest += count2\r\n                    cursor2 += count2\r\n                    length2 -= count2\r\n\r\n                    if (length2 === 0) {\r\n                        exit = true\r\n                        break\r\n                    }\r\n                }\r\n                // array[dest] = tmp[cursor1]\r\n                // results[dest] = tmpIndex[cursor1]\r\n\r\n                this.Writes.write(dest, this.Reads.auxGet(cursor1, this.tmp))\r\n\r\n                dest++\r\n                cursor1++\r\n\r\n                if (--length1 === 1) {\r\n                    exit = true\r\n                    break\r\n                }\r\n\r\n                minGallop--\r\n            } while (\r\n                count1 >= DEFAULT_MIN_GALLOPING\r\n                || count2 >= DEFAULT_MIN_GALLOPING\r\n                )\r\n\r\n            if (exit) {\r\n                break\r\n            }\r\n\r\n            if (minGallop < 0) {\r\n                minGallop = 0\r\n            }\r\n\r\n            minGallop += 2\r\n        }\r\n\r\n        this.minGallop = minGallop\r\n\r\n        if (minGallop < 1) {\r\n            this.minGallop = 1\r\n        }\r\n\r\n        if (length1 === 1) {\r\n            for (i = 0; i < length2; i++) {\r\n                // array[dest + i] = array[cursor2 + i]\r\n                // results[dest + i] = results[cursor2 + i]\r\n                this.Writes.write(dest + i, this.Reads.get(cursor2 + i))\r\n            }\r\n            // array[dest + length2] = tmp[cursor1]\r\n            // results[dest + length2] = tmpIndex[cursor1]\r\n            this.Writes.write(dest + length2, this.Reads.auxGet(cursor1, this.tmp))\r\n        } else if (length1 === 0) {\r\n            throw new Error('mergeLow preconditions were not respected')\r\n        } else {\r\n            for (i = 0; i < length1; i++) {\r\n                // array[dest + i] = tmp[cursor1 + i]\r\n                // results[dest + i] = tmpIndex[cursor1 + i]\r\n                this.Writes.write(dest + i, this.Reads.auxGet(cursor1 + i, this.tmp))\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Merge two adjacent runs in a stable way. The runs must be such that the\r\n     * first element of run1 is bigger than the first element in run2 and the\r\n     * last element of run1 is greater than all the elements in run2.\r\n     * The method should be called when run1.length > run2.length as it uses\r\n     * TimSort temporary array to store run2. Use mergeLow if run1.length <=\r\n     * run2.length.\r\n     *\r\n     * @param {number} start1 - First element in run1.\r\n     * @param {number} length1 - Length of run1.\r\n     * @param {number} start2 - First element in run2.\r\n     * @param {number} length2 - Length of run2.\r\n     */\r\n    mergeHigh(start1, length1, start2, length2) {\r\n        // const {compare} = this\r\n        // const {array} = this\r\n        // const {tmp} = this\r\n        // const {tmpIndex} = this\r\n        let i = 0\r\n\r\n        for (i = 0; i < length2; i++) {\r\n            // tmp[i] = array[start2 + i]\r\n            this.Writes.auxWrite(i, this.Reads.get(start2 + i), this.tmp)\r\n        }\r\n\r\n        let cursor1 = start1 + length1 - 1\r\n        let cursor2 = length2 - 1\r\n        let dest = start2 + length2 - 1\r\n        let customCursor = 0\r\n        let customDest = 0\r\n\r\n        // array[dest] = array[cursor1]\r\n        this.Writes.write(dest, this.Reads.get(cursor1))\r\n\r\n        dest--\r\n        cursor1--\r\n\r\n        if (--length1 === 0) {\r\n            customCursor = dest - (length2 - 1)\r\n\r\n            for (i = 0; i < length2; i++) {\r\n                // array[customCursor + i] = tmp[i]\r\n                this.Writes.write(customCursor + i, this.Reads.auxGet(i, this.tmp))\r\n            }\r\n\r\n            return\r\n        }\r\n\r\n        if (length2 === 1) {\r\n            dest -= length1\r\n            cursor1 -= length1\r\n            customDest = dest + 1\r\n            customCursor = cursor1 + 1\r\n\r\n            for (i = length1 - 1; i >= 0; i--) {\r\n                // array[customDest + i] = array[customCursor + i]\r\n                this.Writes.write(customDest + i, this.Reads.get(customCursor + i))\r\n            }\r\n\r\n            // array[dest] = tmp[cursor2]\r\n            this.Writes.write(dest, this.Reads.auxGet(cursor2, this.tmp))\r\n            return\r\n        }\r\n\r\n        let {minGallop} = this\r\n\r\n        while (true) {\r\n            let count1 = 0\r\n            let count2 = 0\r\n            let exit = false\r\n\r\n            do {\r\n                // if (compare(tmp[cursor2], array[cursor1]) < 0) {\r\n                if (this.Reads.auxReadValue(cursor2, this.tmp) < this.Reads.readValue(cursor1)) {\r\n                    // array[dest] = array[cursor1]\r\n                    this.Writes.write(dest, this.Reads.get(cursor1))\r\n                    dest--\r\n                    cursor1--\r\n                    count1++\r\n                    count2 = 0\r\n                    if (--length1 === 0) {\r\n                        exit = true\r\n                        break\r\n                    }\r\n                } else {\r\n                    // array[dest] = tmp[cursor2]\r\n                    this.Writes.write(dest, this.Reads.auxGet(cursor2, this.tmp))\r\n                    dest--\r\n                    cursor2--\r\n                    count2++\r\n                    count1 = 0\r\n                    if (--length2 === 1) {\r\n                        exit = true\r\n                        break\r\n                    }\r\n                }\r\n            } while ((count1 | count2) < minGallop)\r\n\r\n            if (exit) {\r\n                break\r\n            }\r\n\r\n            do {\r\n                // count1 = length1 - gallopRight(\r\n                //     tmp[cursor2],\r\n                //     array,\r\n                //     start1,\r\n                //     length1,\r\n                //     length1 - 1,\r\n                //     compare\r\n                // )\r\n                count1 = length1 - this.gallopRight(\r\n                    this.Reads.auxReadValue(cursor2, this.tmp),\r\n                    false,\r\n                    start1,\r\n                    length1,\r\n                    length1 - 1\r\n                )\r\n\r\n                if (count1 !== 0) {\r\n                    dest -= count1\r\n                    cursor1 -= count1\r\n                    length1 -= count1\r\n                    customDest = dest + 1\r\n                    customCursor = cursor1 + 1\r\n\r\n                    for (i = count1 - 1; i >= 0; i--) {\r\n                        // array[customDest + i] = array[customCursor + i]\r\n                        this.Writes.write(customDest + i, this.Reads.get(customCursor + i))\r\n                    }\r\n\r\n                    if (length1 === 0) {\r\n                        exit = true\r\n                        break\r\n                    }\r\n                }\r\n\r\n                // array[dest] = tmp[cursor2]\r\n                this.Writes.write(dest, this.Reads.auxGet(cursor2, this.tmp))\r\n\r\n                dest--\r\n                cursor2--\r\n\r\n                if (--length2 === 1) {\r\n                    exit = true\r\n                    break\r\n                }\r\n\r\n                // count2 = length2 - gallopLeft(\r\n                //     array[cursor1],\r\n                //     tmp,\r\n                //     0,\r\n                //     length2,\r\n                //     length2 - 1,\r\n                //     compare\r\n                // )\r\n\r\n                count2 = length2 - this.gallopLeft(\r\n                    this.Reads.readValue(cursor1),\r\n                    true,\r\n                    0,\r\n                    length2,\r\n                    length2 - 1\r\n                )\r\n\r\n                if (count2 !== 0) {\r\n                    dest -= count2\r\n                    cursor2 -= count2\r\n                    length2 -= count2\r\n                    customDest = dest + 1\r\n                    customCursor = cursor2 + 1\r\n\r\n                    for (i = 0; i < count2; i++) {\r\n                        // array[customDest + i] = tmp[customCursor + i]\r\n                        this.Writes.write(customDest + i, this.Reads.auxGet(customCursor + i, this.tmp))\r\n                    }\r\n\r\n                    if (length2 <= 1) {\r\n                        exit = true\r\n                        break\r\n                    }\r\n                }\r\n\r\n                // array[dest] = array[cursor1]\r\n                this.Writes.write(dest, this.Reads.get(cursor1))\r\n\r\n                dest--\r\n                cursor1--\r\n\r\n                if (--length1 === 0) {\r\n                    exit = true\r\n                    break\r\n                }\r\n\r\n                minGallop--\r\n            } while (\r\n                count1 >= DEFAULT_MIN_GALLOPING\r\n                || count2 >= DEFAULT_MIN_GALLOPING\r\n                )\r\n\r\n            if (exit) {\r\n                break\r\n            }\r\n\r\n            if (minGallop < 0) {\r\n                minGallop = 0\r\n            }\r\n\r\n            minGallop += 2\r\n        }\r\n\r\n        this.minGallop = minGallop\r\n\r\n        if (minGallop < 1) {\r\n            this.minGallop = 1\r\n        }\r\n\r\n        if (length2 === 1) {\r\n            dest -= length1\r\n            cursor1 -= length1\r\n            customDest = dest + 1\r\n            customCursor = cursor1 + 1\r\n\r\n            for (i = length1 - 1; i >= 0; i--) {\r\n                // array[customDest + i] = array[customCursor + i]\r\n                this.Writes.write(customDest + i, this.Reads.get(customCursor + i))\r\n            }\r\n\r\n            // array[dest] = tmp[cursor2]\r\n            // results[dest] = tmpIndex[cursor2]\r\n\r\n            this.Writes.write(dest, this.Reads.auxGet(cursor2, this.tmp))\r\n\r\n\r\n        } else if (length2 === 0) {\r\n            throw new Error('mergeHigh preconditions were not respected')\r\n        } else {\r\n            customCursor = dest - (length2 - 1)\r\n            for (i = 0; i < length2; i++) {\r\n                // array[customCursor + i] = tmp[i]\r\n                this.Writes.write(customCursor + i, this.Reads.auxGet(i, this.tmp))\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    /**\r\n     * Sort an array in the range [lo, hi) using TimSort.\r\n     *\r\n     * @param {array} array - The array to sort.\r\n     * @param {function=} compare - Item comparison function. Default is\r\n     *     alphabetical\r\n     * @param {number} lo - First element in the range (inclusive).\r\n     * @param {number} hi - Last element in the range.\r\n     *     comparator.\r\n     */\r\n    runSort(low, high) {\r\n        this.sort(low, high+1)\r\n    }\r\n\r\n    sort(lo, hi) {\r\n\r\n        let i = 0\r\n\r\n        let remaining = hi - lo\r\n\r\n        // The array is already sorted\r\n        if (remaining < 2) {\r\n            return results\r\n        }\r\n\r\n        let runLength = 0\r\n        // On small arrays binary sort can be used directly\r\n        if (remaining < DEFAULT_MIN_MERGE) {\r\n            runLength = this.makeAscendingRun(lo, hi)\r\n            this.binaryInsertionSort(lo, hi, lo + runLength)\r\n        }\r\n\r\n\r\n        const minRun = minRunLength(remaining)\r\n\r\n        do {\r\n            runLength = this.makeAscendingRun(lo, hi)\r\n            if (runLength < minRun) {\r\n                let force = remaining\r\n                if (force > minRun) {\r\n                    force = minRun\r\n                }\r\n\r\n                this.binaryInsertionSort(lo, lo + force, lo + runLength)\r\n                runLength = force\r\n            }\r\n            // Push new run and merge if necessary\r\n            this.pushRun(lo, runLength)\r\n            this.mergeRuns()\r\n\r\n            // Go find next run\r\n            remaining -= runLength\r\n            lo += runLength\r\n        } while (remaining !== 0)\r\n\r\n        // Force merging of remaining runs\r\n        this.forceMergeRuns()\r\n        this.Writes.removeAuxArray(this.tmp)\r\n    }\r\n}","import {Element} from \"../classes/Element\";\r\nexport function random(a, b) {\r\n    return Math.random() * (b - a) + a;\r\n}\r\n\r\nexport function randomInt(a, b) {\r\n    return Math.trunc(random(a, b))\r\n}\r\n\r\nexport function swapObj(json) {\r\n    let ret = {};\r\n    for (let key in json) {\r\n        ret[json[key]] = key;\r\n    }\r\n    return ret;\r\n}\r\n\r\nexport function sleep(ms) {\r\n    ms += new Date().getTime();\r\n    while (new Date() < ms) {\r\n    }\r\n}\r\n\r\nexport function getAllMethods(toCheck) {\r\n    const props = [];\r\n    let obj = toCheck;\r\n    do {\r\n        props.push(...Object.getOwnPropertyNames(obj));\r\n    } while (obj = Object.getPrototypeOf(obj));\r\n\r\n    return props.sort().filter((e, i, arr) => {\r\n        if (e!=arr[i+1] && typeof toCheck[e] == 'function') return true;\r\n    });\r\n}\r\n\r\nexport function deepArrayCopy(arr){\r\n    let out = [];\r\n    for(let i of arr){\r\n        let value = i.getValue();\r\n        let type = i.getType();\r\n        let color = i.getColor();\r\n        let markColor = i.getMarkColor();\r\n        out.push(new Element(value, type, color, markColor))\r\n    }\r\n    return out;\r\n}\r\n\r\nexport function arraysEquals(a, b){\r\n    return a.length === b.length &&\r\n    a.every((v, i) => v === b[i]);\r\n}\r\n\r\nexport function objLength(obj){\r\n    return (obj!==undefined) ? Object.keys(obj).length: 0\r\n}\r\n\r\nexport function HSL2RGB(h, s, l){\r\n    let r, g, b;\r\n\r\n    if(s === 0){\r\n        r = g = b = l;\r\n    }else{\r\n        let hue2rgb = function hue2rgb(p, q, t){\r\n            if(t < 0) t += 1;\r\n            if(t > 1) t -= 1;\r\n            if(t < 1/6) return p + (q - p) * 6 * t;\r\n            if(t < 1/2) return q;\r\n            if(t < 2/3) return p + (q - p) * (2/3 - t) * 6;\r\n            return p;\r\n        }\r\n\r\n        let q = l < 0.5 ? l * (1 + s) : l + s - l * s;\r\n        let p = 2 * l - q;\r\n        r = hue2rgb(p, q, h + 1/3);\r\n        g = hue2rgb(p, q, h);\r\n        b = hue2rgb(p, q, h - 1/3);\r\n    }\r\n\r\n    return [Math.round(r * 255), Math.round(g * 255), Math.round(b * 255)];\r\n}","import React from 'react';\r\nimport styles from \"./ArrayWindow.module.scss\";\r\nimport {objLength} from \"../utils/utils\";\r\n\r\nexport function ArrayWindow(props) {\r\n    let array = props.array\r\n    let mainArray = props.mainArray\r\n    let height = props.height\r\n    let visualProps = props.visualProps\r\n    let borderEnabled = visualProps.barsStroke\r\n    let visualStyle = visualProps.style\r\n    // console.log(array)\r\n    let arr = []\r\n\r\n    if (visualStyle === \"bars\") {\r\n        let border = borderEnabled ? {} : {border: \"none\"}\r\n        for (let i = 0; i < objLength(array); ++i) {\r\n            let styleSheet = {\r\n                height: array[i].getValue() / mainArray.length * 100 + \"%\",\r\n                backgroundColor: \"rgb(\" + array[i].getColorForRender() + \")\",\r\n                ...border\r\n            }\r\n            arr.push(<div key={i} style={styleSheet} className={styles.bar}/>);\r\n        }\r\n        for (let i = objLength(array); i < mainArray.length; ++i) {\r\n            let styleSheet = {\r\n                height: \"0%\",\r\n                backgroundColor: \"rgb(255,255,255)\",\r\n            }\r\n            arr.push(<div key={i} style={styleSheet} className={styles.bar}/>);\r\n        }\r\n    } else if (visualStyle === \"dots\") {\r\n        for (let i = 0; i < objLength(array); ++i) {\r\n            let value = array[i].getValue()\r\n            let height = (value===-1) ? {height: 0} : {}\r\n            let styleSheet = {\r\n                bottom: \"calc(\" + value / mainArray.length * 100 + \"% - 0.25rem)\",\r\n                backgroundColor: \"rgb(\" + array[i].getColorForRender() + \")\",\r\n                ...height\r\n            }\r\n            arr.push(<div className={styles.dotContainer}>\r\n                <div key={i} style={styleSheet} className={styles.dot}/>\r\n            </div>);\r\n        }\r\n        for (let i = objLength(array); i < mainArray.length; ++i) {\r\n            let styleSheet = {\r\n                bottom: 0,\r\n                backgroundColor: \"rgb(0, 0, 0)\",\r\n            }\r\n            arr.push(<div className={styles.dotContainer}>\r\n                <div key={i} style={styleSheet} className={styles.dot}/>\r\n            </div>);\r\n        }\r\n    }\r\n    if (objLength(array) === 0) {\r\n        return <div/>\r\n    }\r\n    return (\r\n        <div style={{width: \"100%\", height: height + \"%\"}}>\r\n            <div className={styles.arrayContainer}>\r\n                {arr}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react';\r\nimport styles from \"./Stats.module.scss\";\r\n\r\nexport function Stats(props){\r\n    return(\r\n        <div className={styles.statsContainer}>\r\n            <div><b>Sort: {props.sortName}</b></div>\r\n            <div>Length: {props.arrLength}</div>\r\n            {/*<div>Comparisons: {props.comparisons}</div>*/}\r\n            <div>Writes: {props.writes}</div>\r\n        </div>\r\n    )\r\n}","export let initFunctions = {\r\n    linear: function (x, length) {\r\n        return x;\r\n    },\r\n    // reverse: function (x, length) {\r\n    //     return length - x;\r\n    // },\r\n    // pipeOrgan: function (x, length) {\r\n    //     if (x < length / 2) {\r\n    //         return 2 * x;\r\n    //     } else {\r\n    //         return 2 * (length - x) - 1;\r\n    //     }\r\n    // },\r\n    // inversedPipeOrgan: function (x, length){\r\n    //     if (x < length / 2) {\r\n    //         return (length - 2*x) - 1;\r\n    //     } else {\r\n    //         return x*2-length;\r\n    //     }\r\n    // },\r\n    manySimular: function (x, length){\r\n        let divider = Math.trunc(length/10)\r\n        return Math.trunc(x/divider)*divider\r\n    }\r\n}","import {randomInt} from \"./utils\";\r\nimport {HeapSort} from \"../Sorts/HeapSort\";\r\n\r\nexport let shuffles = {\r\n    FullShuffle: function (arrayVisualizer) {\r\n        let len = arrayVisualizer.getArrLength()\r\n        for (let i = 0; i < len; ++i) {\r\n            let randomIndex = randomInt(i, len)\r\n            arrayVisualizer.getWrites().swapWithDelay(i, randomIndex, arrayVisualizer.getMainArray(), true, arrayVisualizer.getDelays().getDelayInc()/5, true)\r\n        }\r\n        // return instructions\r\n    },\r\n\r\n    AlmostSorted: function (arrayVisualizer) {\r\n        let len = arrayVisualizer.getArrLength()\r\n        const AMOUNT = 0.1\r\n        for (let i = 0; i < len * AMOUNT; ++i) {\r\n            let randomIndexA = randomInt(i, len)\r\n            let randomIndexB = randomInt(i, len)\r\n            arrayVisualizer.getWrites().swapWithDelay(randomIndexA, randomIndexB, arrayVisualizer.getMainArray(), true, arrayVisualizer.getDelays().getDelayInc()/5, true)\r\n        }\r\n    },\r\n    //\r\n    Reverse: function (arrayVisualizer){\r\n        let len = arrayVisualizer.getArrLength()\r\n        for (let i = 0; i < Math.trunc(len/2); ++i){\r\n            arrayVisualizer.getWrites().swapWithDelay(i, len-i-1, arrayVisualizer.getMainArray(), true, arrayVisualizer.getDelays().getDelayInc()/5, true)\r\n        }\r\n    },\r\n    BlockShuffle: function (arrayVisualizer) {\r\n        const GAP_FACTOR = 10\r\n        let len = arrayVisualizer.getArrLength()\r\n        let gap = len/GAP_FACTOR\r\n        let instructions = []\r\n        for (let i = 0; i < GAP_FACTOR-1; ++i) {\r\n            let factor = randomInt(i+1, GAP_FACTOR)\r\n            for(let j = 0; j < gap; ++j){\r\n                arrayVisualizer.getWrites().swapWithDelay(j+i*gap, j+factor*gap, arrayVisualizer.getMainArray(), true, arrayVisualizer.getDelays().getDelayInc()/5, true)\r\n            }\r\n        }\r\n        return instructions\r\n    },\r\n    PipeOrgan: function (arrayVisualizer){\r\n        let len = arrayVisualizer.getArrLength()\r\n        let Reads = arrayVisualizer.getReads()\r\n        let temp = new Array(len);\r\n        for(let i = 0, j = 0; i < len; i+=2){\r\n            temp[j++] = Reads.get(i, arrayVisualizer.getMainArray())\r\n        }\r\n        for(let i = 1, j = len; i < len ;i+=2) {\r\n            temp[--j] = Reads.get(i, arrayVisualizer.getMainArray())\r\n        }\r\n        for(let i = 0; i < len; i++){\r\n            arrayVisualizer.getWrites().writeWithDelay(i, temp[i], arrayVisualizer.getMainArray(), true, arrayVisualizer.getDelays().getDelayInc()/5, true)\r\n        }\r\n    },\r\n    InversedPipeOrgan: function (arrayVisualizer){\r\n        let len = arrayVisualizer.getArrLength()\r\n        let Reads = arrayVisualizer.getReads()\r\n        let temp = new Array(len);\r\n        for(let i = 0, j = 0; i < len; i+=2){\r\n            temp[j++] = Reads.get(len-i-1, arrayVisualizer.getMainArray())\r\n        }\r\n        for(let i = 1, j = len; i < len ;i+=2) {\r\n            temp[--j] = Reads.get(len-i-1, arrayVisualizer.getMainArray())\r\n        }\r\n        for(let i = 0; i < len; i++){\r\n            arrayVisualizer.getWrites().writeWithDelay(i, temp[i], arrayVisualizer.getMainArray(), true, arrayVisualizer.getDelays().getDelayInc()/5, true)\r\n        }\r\n    },\r\n    Heap: function (arrayVisualizer){\r\n        let n = arrayVisualizer.getArrLength()\r\n        arrayVisualizer.initPseudoArray()\r\n        let heapSort = new HeapSort(arrayVisualizer)\r\n        for (let i = Math.trunc(n / 2) - 1; i >= 0; i--) {\r\n            heapSort.heapify(n, i);\r\n        }\r\n    },\r\n    QuickSortKiller: function (arrayVisualizer){\r\n        let len = arrayVisualizer.getArrLength()\r\n        for(let j = len-len%2-2, i = j-1; i >= 0; i-=2, j--) {\r\n            arrayVisualizer.getWrites().swapWithDelay(i, j, arrayVisualizer.getMainArray(), true, arrayVisualizer.getDelays().getDelayInc() / 5, true)\r\n        }\r\n    }\r\n}","import React from 'react';\r\nimport styles from \"./Controls.module.scss\";\r\nimport {initFunctions} from \"../utils/initFunctions\";\r\nimport {getAllMethods} from \"../utils/utils\";\r\nimport {shuffles} from \"../utils/shuffles\";\r\n\r\n\r\nexport class Controls extends React.Component {\r\n    isControlShow\r\n    arrayVisualizer\r\n    sorts\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.isControlShow = true;\r\n        this.arrayVisualizer = props.arrayVisualizer\r\n        this.sorts = props.sorts\r\n        this.arrayVisualizer.updateArrLength(this.arrayVisualizer.DEFAULT_ARR_LEN)\r\n        // this.arrayVisualizer.initArray(initFunctions.linear)\r\n    }\r\n\r\n    updateArrLength() {\r\n        let slider = document.getElementById(styles.slider)\r\n\r\n        if (slider !== null) {\r\n            let len = slider.value\r\n            this.arrayVisualizer.updateArrLength(len)\r\n        }\r\n    }\r\n\r\n    toggleControlShow() {\r\n        // console.log(styles.controls)\r\n        let controlsContainer = document.getElementById(styles.controlsContainer)\r\n        let controls = document.getElementById(styles.controls)\r\n        let btn = document.getElementById(styles.showToggleBtn)\r\n        if (this.isControlShow) {\r\n            controls.style.display = \"none\"\r\n            controlsContainer.style.width = \"0\"\r\n            btn.innerHTML = \"&gt;&gt;\";\r\n        } else {\r\n            controls.style.display = \"block\"\r\n            controlsContainer.style.width = \"20rem\"\r\n            btn.innerHTML = \"&lt;&lt\";\r\n        }\r\n        this.isControlShow = !this.isControlShow\r\n    }\r\n\r\n    initArray(func) {\r\n        this.arrayVisualizer.initArray(func, this.arrayVisualizer.getArrLength(), true)\r\n    }\r\n\r\n    shuffleArray(func) {\r\n        this.arrayVisualizer.shuffleArray(func)\r\n        // func(this.arrayVisualizer)\r\n    }\r\n\r\n    sortArray(sortName) {\r\n        this.sorts.runSort(sortName, 0, this.arrayVisualizer.getArrLength() - 1)\r\n    }\r\n\r\n    stopSort() {\r\n        this.arrayVisualizer.stopSort()\r\n    }\r\n\r\n    abortSort() {\r\n        this.stopSort()\r\n        this.initArray(initFunctions.linear)\r\n    }\r\n\r\n    genInitFunctions() {\r\n        // console.log(initFunctions)\r\n        let tmp = []\r\n        for (let i in initFunctions) {\r\n            tmp.push(\r\n                <button key={i} onClick={this.initArray.bind(this, initFunctions[i])}>{i}</button>\r\n            )\r\n        }\r\n        return tmp;\r\n    }\r\n\r\n    getSorts() {\r\n        let tmp = []\r\n        let sortsNames = this.sorts.getSortsPaths()\r\n        for (let i of sortsNames) {\r\n            tmp.push(\r\n                <button key={i} onClick={this.sortArray.bind(this, i)}>{i}</button>)\r\n        }\r\n        return tmp;\r\n    }\r\n\r\n    getShuffles() {\r\n        let tmp = []\r\n        for (let i in shuffles) {\r\n            tmp.push(\r\n                <button key={i} onClick={this.shuffleArray.bind(this, shuffles[i])}>{i}</button>\r\n            )\r\n        }\r\n        return tmp;\r\n    }\r\n\r\n    toggleShowAuxArrays() {\r\n        let element = document.getElementById(\"auxArrShowCB\")\r\n        this.arrayVisualizer.setShowAuxArrays(element.checked)\r\n    }\r\n\r\n    toggleBarsStroke() {\r\n        let element = document.getElementById(\"enableStrokeCB\")\r\n        this.arrayVisualizer.setEnableBarsStroke(element.checked)\r\n    }\r\n\r\n    toggleEnableMarks() {\r\n        let element = document.getElementById(\"enableMarksCB\")\r\n        this.arrayVisualizer.setEnableMarks(element.checked)\r\n    }\r\n\r\n    toggleVisualStyle(val) {\r\n        this.arrayVisualizer.setVisualStyle(val)\r\n    }\r\n\r\n    toggleRainbow(val){\r\n        this.arrayVisualizer.getMarks().setRainbow(val)\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div id={styles.controlsContainer}>\r\n                {/*<div onClick={this.toggleControlShow.bind(this)} id={styles.showToggleBtn}>&lt;&lt;</div>*/}\r\n                <div id={styles.controls}>\r\n                    <div>\r\n                        <div>\r\n                            <div className={styles.sectionHeader}>Array Size</div>\r\n                            <input id={styles.slider} type=\"range\" min=\"10\" max=\"500\"\r\n                                   defaultValue={this.arrayVisualizer.DEFAULT_ARR_LEN}\r\n                                   step=\"10\"\r\n                                   onChange={this.updateArrLength.bind(this)}/>\r\n                        </div>\r\n                        <div>\r\n                            <div className={styles.sectionHeader}>Visuals</div>\r\n                            <div style={{display: \"flex\", justifyContent:\"center\"}}>\r\n                                <div style={{textAlign: \"left\"}}>\r\n                                    <div className={styles.checkBoxContainer}>\r\n                                        <input onChange={this.toggleShowAuxArrays.bind(this)} type=\"checkbox\"\r\n                                               id=\"auxArrShowCB\"\r\n                                               name=\"auxArrShowCB\" defaultChecked={true}/>\r\n                                        <label htmlFor=\"auxArrShowCB\">Show Aux Arrays</label>\r\n                                    </div>\r\n                                    <div className={styles.checkBoxContainer}>\r\n                                        <input onChange={this.toggleBarsStroke.bind(this)} type=\"checkbox\"\r\n                                               id=\"enableStrokeCB\"\r\n                                               name=\"enableStrokeCB\" defaultChecked={true}/>\r\n                                        <label htmlFor=\"enableStrokeCB\">Enable Bars Stroke</label>\r\n                                    </div>\r\n                                    <div className={styles.checkBoxContainer}>\r\n                                        <input onChange={this.toggleEnableMarks.bind(this)} type=\"checkbox\"\r\n                                               id=\"enableMarksCB\"\r\n                                               name=\"enableMarksCB\" defaultChecked={true}/>\r\n                                        <label htmlFor=\"enableMarksCB\">Enable Marks(Disable to reduce lags)</label>\r\n                                    </div>\r\n                                    <div className={styles.checkBoxContainer}>\r\n                                        <button onClick={this.toggleRainbow.bind(this, true)}>Paint to Rainbow</button>\r\n                                        <button onClick={this.toggleRainbow.bind(this, false)}>Clear Color</button>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                        <div>\r\n                            <div className={styles.sectionHeader}>Visual Styles</div>\r\n                            <div>\r\n                                <input onChange={this.toggleVisualStyle.bind(this, \"bars\")} type=\"radio\"\r\n                                       id=\"barsRadioBtn\"\r\n                                       name=\"visualStyle\" value=\"bars\" defaultChecked={true}/>\r\n                                <label htmlFor=\"barsRadioBtn\">Bars</label>\r\n\r\n                                <input onChange={this.toggleVisualStyle.bind(this, \"dots\")} type=\"radio\"\r\n                                       id=\"dotsRadioBtn\"\r\n                                       name=\"visualStyle\" value=\"dots\"/>\r\n                                <label htmlFor=\"dotsRadioBtn\">Dots</label>\r\n                            </div>\r\n                        </div>\r\n                        <div>\r\n                            <div className={styles.sectionHeader}>Init Array</div>\r\n                            <div>{this.genInitFunctions()}</div>\r\n                        </div>\r\n\r\n                        <div>\r\n                            <div className={styles.sectionHeader}>Shuffle Array</div>\r\n                            <div>\r\n                                {/*<button onClick={this.shuffleArray.bind(this)}>Random</button>*/}\r\n                                <div>{this.getShuffles()}</div>\r\n                            </div>\r\n                        </div>\r\n                        <div>\r\n                            <div className={styles.sectionHeader}>Sort control</div>\r\n                            <div>\r\n                                <button onClick={this.abortSort.bind(this)}>Abort Sort(Recommended)</button>\r\n                                <button onClick={this.stopSort.bind(this)}>Stop Sort(Not Recommended)</button>\r\n                            </div>\r\n                        </div>\r\n                        <div>\r\n                            <div className={styles.sectionHeader}>Sort Array</div>\r\n                            <div>\r\n                                {this.getSorts()}\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}","export class Delays {\r\n    arrayVisualizer\r\n    timeoutArray\r\n    delays\r\n    delayIncFactor\r\n    delayInc\r\n\r\n\r\n    constructor(arrayVisualizer) {\r\n        this.arrayVisualizer = arrayVisualizer\r\n        this.timeoutArray = []\r\n        this.delays = {\r\n            Swap: 0,\r\n            Write: 0,\r\n            Comp: 0,\r\n            Unmark: 0,\r\n            CreateAuxArray: 0,\r\n            RemoveAuxArray: 0\r\n        }\r\n        this.delayIncFactor = 3000\r\n        // console.log(arrayVisualizer.getArrLength())\r\n        this.delayInc = this.delayIncFactor/arrayVisualizer.getArrLength()\r\n    }\r\n\r\n    push(timeout){\r\n        this.timeoutArray.push(timeout)\r\n    }\r\n\r\n    pushFunc(func, obj, delayName, delay, args) {\r\n        this.timeoutArray.push(setTimeout(func.bind(obj), this.delays[delayName] += delay, args))\r\n    }\r\n\r\n    resetDelays() {\r\n        this.delays = {\r\n            Swap: 0,\r\n            Write: 0,\r\n            Comp: 0,\r\n            Unmark: 0,\r\n            CreateAuxArray: 0,\r\n            RemoveAuxArray: 0\r\n        }\r\n        for (let i of this.timeoutArray) {\r\n            clearTimeout(i);\r\n        }\r\n        this.timeoutArray = []\r\n    }\r\n\r\n    setDelay(name, value){\r\n        this.delays[name] = value\r\n    }\r\n\r\n    incDelay(name, inc=this.delayIncFactor){\r\n        return this.delays[name]+=inc\r\n    }\r\n\r\n    getDelayInc(){\r\n        return this.delayInc\r\n    }\r\n}","export class Sounds{\r\n    arrayVisualizer\r\n    ctx\r\n    Delays\r\n    constructor(arrayVisualizer) {\r\n        this.arrayVisualizer = arrayVisualizer\r\n        this.Delays = arrayVisualizer.getDelays()\r\n        this.ctx = new (window.AudioContext || window.webkitAudioContext)();\r\n    }\r\n    playSound(value) {\r\n        let osc = this.ctx.createOscillator();\r\n        osc.type = 'sine';\r\n\r\n        let k = value / this.arrayVisualizer.getArrLength()\r\n        osc.frequency.value = 2000 * k + 200;\r\n\r\n        let addTime = 50\r\n\r\n        let gainNode = this.ctx.createGain()\r\n        gainNode.gain.value = 0;\r\n        osc.connect(gainNode)\r\n        gainNode.connect(this.ctx.destination)\r\n        // console.log(this.Delays.getDelayInc())\r\n        gainNode.gain.linearRampToValueAtTime(0.05, this.ctx.currentTime + (this.Delays.getDelayInc() + addTime) / 1000 / 2)\r\n        gainNode.gain.linearRampToValueAtTime(0, this.ctx.currentTime + (this.Delays.getDelayInc() + addTime) / 1000)\r\n\r\n        osc.start();\r\n        osc.stop(this.ctx.currentTime + (this.Delays.getDelayInc() + addTime) / 1000);\r\n    }\r\n}","import {HSL2RGB, randomInt} from \"../utils/utils\";\r\n\r\nexport const colors = {\r\n    \"Unmarked\": [255, 255, 255],\r\n    \"Default\": [255, 0, 0],\r\n    \"Additional\": [randomInt(0, 256), randomInt(0, 256), randomInt(0, 256)],\r\n    \"Sorted\": [0, 255, 0],\r\n    \"Analysis\": [0, 0, 255]\r\n}\r\nexport class Marks{\r\n    arrayVisualizer\r\n    Delays\r\n\r\n    constructor(arrayVisualizer) {\r\n        this.arrayVisualizer = arrayVisualizer\r\n        this.Delays = arrayVisualizer.getDelays()\r\n    }\r\n\r\n    mark(index, args, saveArr = true) {\r\n        if(!this.arrayVisualizer.getEnableMarks()){\r\n            return;\r\n        }\r\n        let type = \"Default\"\r\n        let color = colors[\"Default\"]\r\n        let tmpArr = this.arrayVisualizer.getMainArray()\r\n        // Additional\r\n        if (args.type === \"Additional\") {\r\n            type = \"Additional\"\r\n            color = args.color\r\n            // console.log(color)\r\n        }\r\n        //Default\r\n        else if (!args.type || args.type === \"Default\") {\r\n            type = \"Default\"\r\n            color = colors[\"Default\"]\r\n        } else {\r\n            type = args.type\r\n            color = args.color\r\n        }\r\n\r\n        tmpArr[index].setType(type)\r\n        tmpArr[index].setMarkColor(color)\r\n        if (saveArr) {\r\n            this.arrayVisualizer.setState({\r\n                array: tmpArr\r\n            })\r\n        } else {\r\n            return tmpArr\r\n        }\r\n        // console.log(color);\r\n    }\r\n\r\n    markMany(indexes, args, saveArr) {\r\n        let tmpArr = this.arrayVisualizer.getMainArray()\r\n        for (let i of indexes) {\r\n            if (saveArr) {\r\n                this.mark(i, args, saveArr)\r\n            } else {\r\n                tmpArr = this.mark(i, args, saveArr)\r\n            }\r\n        }\r\n        if (!saveArr) {\r\n            return tmpArr\r\n        }\r\n    }\r\n\r\n    unmark(index, saveArr = true) {\r\n        let tmpArr = this.arrayVisualizer.getMainArray()\r\n        // tmpArr[index].setMarkColor(colors[\"Unmarked\"])\r\n        tmpArr[index].setType(\"Unmarked\")\r\n        if (saveArr) {\r\n            this.arrayVisualizer.setState({\r\n                array: tmpArr\r\n            })\r\n        } else {\r\n            return tmpArr\r\n        }\r\n    }\r\n\r\n    unmarkMany(indexes, saveArr, saveOnce) {\r\n        let tmpArr = this.arrayVisualizer.getMainArray()\r\n        for (let i of indexes) {\r\n            if (saveArr) {\r\n                this.unmark(i, saveArr)\r\n            } else {\r\n                tmpArr = this.unmark(i, saveArr)\r\n            }\r\n        }\r\n        if (saveOnce) {\r\n            this.arrayVisualizer.setState({\r\n                array: tmpArr\r\n            })\r\n        }\r\n        if (!saveArr) {\r\n            return tmpArr\r\n        }\r\n    }\r\n\r\n    setRainbow(val){\r\n        let tmpArr = this.arrayVisualizer.getMainArray()\r\n        if(val){\r\n            for(let i = 0; i < tmpArr.length; ++i){\r\n                let hsl = [i / tmpArr.length, 0.8, 0.5]\r\n                let rgb = HSL2RGB(hsl[0], hsl[1], hsl[2])\r\n                tmpArr[i].setColor(rgb)\r\n            }\r\n        }else{\r\n            for(let i of tmpArr){\r\n                i.setColor([255, 255, 255])\r\n            }\r\n        }\r\n        this.arrayVisualizer.setState({\r\n            array: tmpArr\r\n        })\r\n    }\r\n\r\n    markUnmarkMany(markIndexes, markArgs) {\r\n        this.markMany(markIndexes, markArgs, true)\r\n        this.Delays.push(setTimeout(this.unmarkMany.bind(this), this.Delays.incDelay(\"Unmark\", this.Delays.getDelayInc() / 100), markIndexes, false, true))\r\n    }\r\n\r\n    clearAllMarks(){\r\n        this.markUnmarkMany(Array.from(Array(this.arrayVisualizer.getArrLength()).keys()), false, true)\r\n    }\r\n\r\n}","export class Reads{\r\n    arrayVisualizer;\r\n    Sounds\r\n    constructor(arrayVisualizer){\r\n        this.arrayVisualizer = arrayVisualizer\r\n        this.Sounds = arrayVisualizer.getSounds()\r\n    }\r\n\r\n    readValue(index, arr = this.arrayVisualizer.getPseudoArray()) {\r\n        return arr[index].getValue()\r\n    }\r\n\r\n    compareInArr(a, b, arr = this.arrayVisualizer.getPseudoArray()) {\r\n        return this.compareValues(arr[a], arr[b])\r\n    }\r\n\r\n    get(index, arr = this.arrayVisualizer.getPseudoArray()){\r\n        return arr[index];\r\n    }\r\n\r\n    compareValues(a, b){\r\n        let tmpA = typeof a === \"object\" ? a.getValue() : a\r\n        let tmpB = typeof b === \"object\" ? b.getValue() : b\r\n        return tmpA - tmpB;\r\n        // if (sign === \"<\") {\r\n        //     return a.getValue() < b.getValue()\r\n        // } else if (sign === \"<=\") {\r\n        //     return a.getValue() <= b.getValue()\r\n        // } else if (sign === \">\") {\r\n        //     return a.getValue() > b.getValue()\r\n        // } else if (sign === \">=\") {\r\n        //     return a.getValue() >= b.getValue()\r\n        // } else {\r\n        //     return a.getValue() === b.getValue()\r\n        // }\r\n    }\r\n\r\n    auxGet(index, arrIndex, isPseudo = true){\r\n        if(isPseudo){\r\n            return this.arrayVisualizer.getPseudoAuxArrays()[arrIndex][index]\r\n        }else {\r\n            return this.arrayVisualizer.getAuxArrays()[arrIndex][index]\r\n        }\r\n    }\r\n\r\n\r\n    auxReadValue(index, arrIndex, isPseudo = true){\r\n        if(isPseudo){\r\n            return this.arrayVisualizer.getPseudoAuxArrays()[arrIndex][index].getValue()\r\n        }else {\r\n            return this.arrayVisualizer.getAuxArrays()[arrIndex][index].getValue()\r\n        }\r\n    }\r\n}","import {Element} from \"../classes/Element\";\r\nimport {objLength} from \"../utils/utils\";\r\n\r\nexport class Writes{\r\n    arrayVisualizer;\r\n    Sounds\r\n    Delays\r\n    Marks\r\n\r\n    constructor(arrayVisualizer){\r\n        this.arrayVisualizer = arrayVisualizer\r\n        this.Sounds = arrayVisualizer.getSounds()\r\n        this.Delays = arrayVisualizer.getDelays()\r\n        this.Marks = arrayVisualizer.getMarks()\r\n    }\r\n\r\n\r\n\r\n    swapWithDelay(a, b, arr = this.arrayVisualizer.getPseudoArray(), mark, delay = this.Delays.getDelayInc(), playSound) {\r\n        this.Delays.push(setTimeout(this.swapInArr.bind(this), this.Delays.incDelay(\"Write\", delay), a, b, arr, mark, playSound))\r\n    }\r\n\r\n\r\n    swapInArr(a, b, arr = this.arrayVisualizer.getPseudoArray(), mark = true, playSound = false) {\r\n        if(playSound) {\r\n            this.Sounds.playSound(arr[b].getValue());\r\n        }\r\n        let tmpArr = arr\r\n        // let tmp = tmpArr[a]\r\n        // tmpArr[a] = tmpArr[b]\r\n        // tmpArr[b] = tmp\r\n        let tmp = tmpArr[a]\r\n        tmpArr[a] = tmpArr[b].copy(true)\r\n        tmpArr[b] = tmp.copy(true)\r\n        if (mark) {\r\n            this.Marks.markUnmarkMany([a, b], {type: \"Default\"})\r\n        }\r\n        let curWrites = this.arrayVisualizer.getState().writes;\r\n        this.arrayVisualizer.setState({\r\n            writes: curWrites + 2\r\n        })\r\n    }\r\n\r\n    swap(a, b, arr = this.arrayVisualizer.getPseudoArray()) {\r\n        this.swapInArr(a, b, arr, false, false)\r\n        this.swapWithDelay(a, b, this.arrayVisualizer.getMainArray(), true, this.Delays.getDelayInc(), true)\r\n    }\r\n\r\n    // writeInArr(index, value, arr = this.arrayVisualizer.getPseudoArray(), mark = true, playSound = false) {\r\n    //     if(playSound) {\r\n    //         this.Sounds.playSound(value)\r\n    //     }\r\n    //     arr[index].setValue(value)\r\n    //     if (mark) {\r\n    //         this.Marks.markUnmarkMany([index], {type: \"Default\"})\r\n    //     }\r\n    //     let curWrites = this.arrayVisualizer.getState().writes;\r\n    //     this.arrayVisualizer.setState({\r\n    //         writes: curWrites + 1\r\n    //     })\r\n    // }\r\n\r\n\r\n    writeInArr(index, toWrite, arr = this.arrayVisualizer.getPseudoArray(), mark = true, playSound = false) {\r\n        if(playSound) {\r\n            this.Sounds.playSound(toWrite.getValue())\r\n        }\r\n        arr[index] = toWrite.copy(true)\r\n        if (mark) {\r\n            this.Marks.markUnmarkMany([index], {type: \"Default\"})\r\n        }\r\n        let curWrites = this.arrayVisualizer.getState().writes;\r\n        this.arrayVisualizer.setState({\r\n            writes: curWrites + 1\r\n        })\r\n    }\r\n\r\n    writeWithDelay(index, toWrite, arr = this.arrayVisualizer.getPseudoArray(), mark, delay = this.Delays.getDelayInc(), playSound = true) {\r\n        this.Delays.push(setTimeout(this.writeInArr.bind(this), this.Delays.incDelay(\"Write\", delay), index, toWrite, arr, mark, playSound))\r\n    }\r\n\r\n    write(index, toWrite, arr = this.arrayVisualizer.getPseudoArray()) {\r\n        this.writeInArr(index, toWrite, arr, false, false)\r\n        this.writeWithDelay(index, toWrite, this.arrayVisualizer.getMainArray(), true, this.Delays.getDelayInc(), true)\r\n    }\r\n\r\n    createAuxArray(len, isPseudo = true){\r\n        if(isPseudo) {\r\n            let pseudoAuxArrays = this.arrayVisualizer.getPseudoAuxArrays()\r\n            let auxArrIndex = objLength(pseudoAuxArrays)\r\n            pseudoAuxArrays[auxArrIndex]=(this.arrayVisualizer.initArray(() => -1, len, false))\r\n            this.createAuxArrayWithDelay(len, this.Delays.getDelayInc(), false)\r\n            return auxArrIndex\r\n        }else{\r\n            let tmpArr = this.arrayVisualizer.getAuxArrays()\r\n            let auxArrIndex = objLength(tmpArr)\r\n\r\n            tmpArr[auxArrIndex]=(this.arrayVisualizer.initArray(() => -1, len, false))\r\n            this.arrayVisualizer.setState({\r\n                    auxArrays: tmpArr\r\n                }\r\n            )\r\n        }\r\n    }\r\n\r\n    createAuxArrayWithDelay(len, delay, isPseudo = false){\r\n        this.Delays.push(setTimeout(this.createAuxArray.bind(this), this.Delays.incDelay(\"Write\", delay), len, isPseudo))\r\n    }\r\n\r\n    removeAuxArray(index, isPseudo = true){\r\n        if(isPseudo) {\r\n            // this.arrayVisualizer.getPseudoAuxArrays().splice(index, 1)\r\n            delete this.arrayVisualizer.getPseudoAuxArrays()[index]\r\n            this.removeAuxArrayWithDelay(index, this.Delays.getDelayInc(), false)\r\n        }else{\r\n            let tmp = this.arrayVisualizer.getAuxArrays()\r\n            // tmp.splice(index, 1)\r\n            delete tmp[index]\r\n            this.arrayVisualizer.setState({\r\n                auxArrays: tmp\r\n            })\r\n        }\r\n    }\r\n\r\n    removeAuxArrayWithDelay(index, delay, isPseudo = false){\r\n        this.Delays.push(setTimeout(this.removeAuxArray.bind(this), this.Delays.incDelay(\"Write\", delay), index, isPseudo))\r\n    }\r\n\r\n\r\n    auxWrite(index, toWrite, arrIndex, isPseudo = true, playSound = false){\r\n        if(playSound){\r\n            this.Sounds.playSound(toWrite.getValue())\r\n        }\r\n        if(isPseudo){\r\n            this.arrayVisualizer.getPseudoAuxArrays()[arrIndex][index] = toWrite.copy()\r\n            this.auxWriteWithDelay(index, toWrite, arrIndex, this.Delays.getDelayInc(), false, true)\r\n        }else{\r\n            this.arrayVisualizer.getAuxArrays()[arrIndex][index] = toWrite.copy()\r\n            let tmp = this.arrayVisualizer.getAuxArrays()\r\n            this.arrayVisualizer.setState({\r\n                auxArrays: tmp\r\n            })\r\n        }\r\n    }\r\n\r\n    auxWriteWithDelay(index, value, arrIndex, delay, isPseudo = false, playSound = true, ){\r\n        this.Delays.push(setTimeout(this.auxWrite.bind(this), this.Delays.incDelay(\"Write\", delay), index, value, arrIndex, isPseudo, playSound))\r\n    }\r\n\r\n}","import React from 'react';\r\nimport {arraysEquals, deepArrayCopy, getAllMethods, objLength, randomInt} from \"../utils/utils\";\r\nimport {Sorts} from \"../Sorts/Sorts\"\r\nimport {ArrayWindow} from \"../ArrayWindow/ArrayWindow\";\r\nimport {Element} from \"../classes/Element\";\r\nimport {Stats} from \"../Stats/Stats\";\r\nimport {Controls} from \"../Controls/Controls\";\r\nimport {initFunctions} from \"../utils/initFunctions\";\r\nimport {Delays} from \"../ArrayAccess/Delays\";\r\nimport {Sounds} from \"../ArrayAccess/Sounds\";\r\nimport {Marks} from \"../ArrayAccess/Marks\";\r\nimport {Reads} from \"../ArrayAccess/Reads\";\r\nimport {Writes} from \"../ArrayAccess/Writes\";\r\n\r\nconst colors = {\r\n    \"Unmarked\": [255, 255, 255],\r\n    \"Default\": [255, 0, 0],\r\n    \"Additional\": [randomInt(0, 256), randomInt(0, 256), randomInt(0, 256)],\r\n    \"Sorted\": [0, 255, 0],\r\n    \"Analysis\": [0, 0, 255]\r\n}\r\n\r\nexport class ArrayVisualizer extends React.Component {\r\n    delays;\r\n    delayInc;\r\n    pseudoArray;\r\n    pseudoAuxArrays;\r\n\r\n    Sorts\r\n    delayIncConst\r\n    showAuxArrays\r\n    enableBarsStroke\r\n    visualStyle\r\n    enableMarks\r\n\r\n    Delays\r\n    Sounds\r\n    Marks\r\n    Reads\r\n    Writes\r\n\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.DEFAULT_ARR_LEN = 100\r\n        this.state = {\r\n            array: this.initArray(initFunctions.linear, this.DEFAULT_ARR_LEN),\r\n            sortName: \"\",\r\n            comparisons: 0,\r\n            writes: 0,\r\n            auxArrays: {}\r\n        }\r\n        this.pseudoArray = deepArrayCopy(this.state.array)\r\n        this.Delays = new Delays(this)\r\n        this.Sounds = new Sounds(this)\r\n        this.Marks = new Marks(this)\r\n        this.Reads = new Reads(this)\r\n\r\n        this.Writes = new Writes(this)\r\n        this.pseudoAuxArrays = []\r\n        this.Sorts = new Sorts(this);\r\n        this.showAuxArrays = true\r\n        this.enableBarsStroke = true\r\n        this.enableMarks = true\r\n        this.visualStyle = {\r\n            // style: \"bars\",\r\n            style: \"bars\",\r\n            barsStroke: true,\r\n        }\r\n    }\r\n\r\n    initArray(func, length, setToState=false) {\r\n        let arr = []\r\n        for (let i = 0; i < length; ++i) {\r\n            let element = new Element(func(i, length), \"Unmarked\", [255, 255, 255], [0,0,0,0])\r\n            arr.push(element)\r\n        }\r\n        if(setToState){\r\n            this.setState({\r\n                array: arr\r\n            })\r\n        }else {\r\n            return arr;\r\n        }\r\n    }\r\n\r\n    nullify() {\r\n        this.Delays.resetDelays()\r\n        this.setState(\r\n            {\r\n                comparisons: 0,\r\n                writes: 0\r\n            }\r\n        )\r\n        // eslint-disable-next-line react/no-direct-mutation-state\r\n        this.state.writes = 0;\r\n        // eslint-disable-next-line react/no-direct-mutation-state\r\n        this.state.comparisons = 0;\r\n    }\r\n\r\n    setShowAuxArrays(val){\r\n        this.showAuxArrays = val\r\n    }\r\n\r\n    setEnableBarsStroke(val){\r\n        this.visualStyle.barsStroke = val;\r\n        this.forceMainArrayUpdate()\r\n    }\r\n\r\n    setVisualStyle(val){\r\n        this.visualStyle.style = val;\r\n        this.forceMainArrayUpdate()\r\n    }\r\n\r\n    setEnableMarks(val){\r\n        this.enableMarks = val;\r\n        if(!val){\r\n            this.Marks.clearAllMarks()\r\n        }\r\n    }\r\n\r\n    getEnableMarks(){\r\n        return this.enableMarks;\r\n    }\r\n\r\n    getArrayVisualizer() {\r\n        return this;\r\n    }\r\n\r\n    getPseudoArray() {\r\n        return this.pseudoArray;\r\n    }\r\n\r\n    getState(){\r\n        return this.state\r\n    }\r\n\r\n    getArrLength(){\r\n        return this.state.array.length;\r\n    }\r\n\r\n    getMainArray(){\r\n        return this.state.array\r\n    }\r\n\r\n    getPseudoAuxArrays(){\r\n        return this.pseudoAuxArrays\r\n    }\r\n\r\n    getDelays(){\r\n        return this.Delays\r\n    }\r\n\r\n    getSounds(){\r\n        return this.Sounds;\r\n    }\r\n\r\n    getMarks(){\r\n        return this.Marks;\r\n    }\r\n\r\n    getAuxArrays(){\r\n        return this.state.auxArrays\r\n    }\r\n\r\n    getReads(){\r\n        return this.Reads;\r\n    }\r\n\r\n    getWrites(){\r\n        return this.Writes\r\n    }\r\n\r\n\r\n    stopSort(){\r\n        // this.resetDelay()\r\n        this.Delays.resetDelays()\r\n        this.Marks.clearAllMarks()\r\n        this.setState({\r\n                auxArrays: []\r\n            }\r\n        )\r\n    }\r\n\r\n    shuffleArray(func) {\r\n        this.nullify()\r\n        this.setState({\r\n            sortName: \"Shuffle\"\r\n        })\r\n\r\n        func(this);\r\n        // let instructions = func(this);\r\n        // for(let i of instructions){\r\n        //     if(i.cmd === \"swap\"){\r\n        //         this.Writes.swapWithDelay(i.a, i.b, this.state.array, true, this.Delays.getDelayInc()/5, true)\r\n        //     }\r\n        // }\r\n\r\n    }\r\n\r\n    setSortName(sortName){\r\n        this.setState({\r\n            sortName: sortName\r\n        })\r\n    }\r\n\r\n    initPseudoArray(){\r\n        this.pseudoArray = deepArrayCopy(this.state.array)\r\n    }\r\n\r\n    sortClickEvent() {\r\n    }\r\n\r\n    forceMainArrayUpdate(){\r\n        let tmp = this.state.array;\r\n        this.setState({\r\n            array: tmp\r\n        })\r\n    }\r\n\r\n    updateDelayInc(val){\r\n        this.delayInc = val/this.getArrLength();\r\n    }\r\n\r\n    updateArrLength(len){\r\n        this.setState({\r\n            array: this.initArray(initFunctions.linear, len)\r\n        })\r\n        this.pseudoArray = deepArrayCopy(this.state.array)\r\n\r\n        this.Sorts.arrLength = this.getArrLength()\r\n        this.updateDelayInc(this.delayIncConst)\r\n    }\r\n\r\n    genArrayWindows(){\r\n        let tmp = []\r\n        if(this.showAuxArrays) {\r\n            for (let i = objLength(this.state.auxArrays) - 1; i >= 0; i--) {\r\n                tmp.push(\r\n                    <ArrayWindow key={objLength(this.state.auxArrays) - i} array={this.state.auxArrays[i]}\r\n                                 mainArray={this.state.array} height={100 / (1 + objLength(this.state.auxArrays))} visualProps = {this.visualStyle} />\r\n                )\r\n            }\r\n        }\r\n        return tmp\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Stats sortName={this.state.sortName} comparisons={this.state.comparisons} writes={this.state.writes} arrLength={this.getArrLength()}/>\r\n                <div style={{height: \"100vh\"}}>\r\n                {/*<div>*/}\r\n                    {this.genArrayWindows()}\r\n                    <ArrayWindow array={this.state.array} mainArray={this.state.array} height={this.showAuxArrays ? 100/(1+objLength(this.state.auxArrays)) : 100} visualProps={this.visualStyle}/>\r\n                </div>\r\n                <div>\r\n                    <Controls arrayVisualizer={this} sorts={this.Sorts}/>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport {ArrayVisualizer} from \"./components/ArrayVisualizer/ArrayVisualizer\";\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\n\r\n\r\n\r\n\r\n\r\nReactDOM.render(\r\n    <ArrayVisualizer></ArrayVisualizer>,\r\n  document.getElementById('root')\r\n);\r\n\r\n\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}