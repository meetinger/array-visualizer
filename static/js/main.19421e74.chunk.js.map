{"version":3,"sources":["components/Sorts/Sort.js","components/Controls/Controls.module.scss","components/ArrayWindow/ArrayWindow.module.scss","components/Sorts/Sorts.js","components/Stats/Stats.module.scss","components/Sorts sync /^/.*/.js$","components/Sorts/BubbleSort.js","components/Sorts/HeapSort.js","components/Sorts/InsertionSort.js","components/Sorts/LLQuickSort.js","components/Sorts/MergeSort.js","components/Sorts/PseudoTimSort.js","components/Sorts/SelectionSort.js","components/Sorts/SlowSort.js","components/Sorts/StoogeSort.js","components/Sorts/TimSort.js","components/classes/Element.js","components/utils/utils.js","components/ArrayWindow/ArrayWindow.js","components/Stats/Stats.js","components/utils/initFunctions.js","components/utils/shuffles.js","components/Controls/Controls.js","components/ArrayAccess/Delays.js","components/ArrayAccess/Sounds.js","components/ArrayAccess/Marks.js","components/ArrayAccess/Reads.js","components/ArrayAccess/Writes.js","components/ArrayVisualizer/ArrayVisualizer.js","reportWebVitals.js","index.js"],"names":["Sort","arrayVisualizer","this","state","getState","Reads","getReads","Writes","getWrites","compare","bind","read","auxRead","swap","write","createAuxArray","removeAuxArray","auxWrite","arrLength","getArrLength","sortName","warnLen","isDisabled","low","high","bucketsNum","module","exports","Sorts","sortsPaths","sortPath","require","getDelays","resetDelays","sort","getSortObject","getWarnLen","window","confirm","initPseudoArray","setSortName","getSortName","runSort","sortClickEvent","map","webpackContext","req","id","webpackContextResolve","__webpack_require__","o","e","Error","code","keys","Object","resolve","BubbleSort","len","i","j","HeapSort","n","largest","l","r","heapify","Math","trunc","InsertionSort","length","key","LLQuickSort","lo","hi","pivot","p","partition","MergeSort","mid","leftArrayLen","rightArrayLen","leftArrayIndex","rightArrayIndex","leftIndex","rightIndex","merge","PseudoTimSort","MIN_MERGE","left","right","temp","m","len1","len2","x","k","minRun","minRunLength","insertionSort","min","size","timSort","SelectionSort","minIndex","SlowSort","floor","StoogeSort","t","TimSort","minGallop","tmpStorageLength","tmp","stackLength","runStart","Array","runLength","stackSize","runHi","reverseRun","start","value","isAux","hint","lastOffset","maxOffset","offset","mergeAt","start1","length1","start2","length2","gallopRight","gallopLeft","mergeLow","mergeHigh","cursor1","cursor2","dest","count1","count2","exit","customCursor","customDest","remaining","makeAscendingRun","binaryInsertionSort","force","pushRun","mergeRuns","forceMergeRuns","Element","type","color","randomInt","a","b","random","deepArrayCopy","arr","out","getValue","getType","getColor","push","ArrayWindow","props","array","mainArray","height","styleSheet","backgroundColor","style","className","styles","bar","width","arrayContainer","Stats","statsContainer","writes","initFunctions","linear","reverse","pipeOrgan","inversedPipeOrgan","shuffles","fullShuffle","instructions","randomIndex","cmd","almostSorted","randomIndexA","randomIndexB","Controls","isControlShow","sorts","updateArrLength","DEFAULT_ARR_LEN","slider","document","getElementById","controlsContainer","controls","btn","showToggleBtn","display","innerHTML","func","initArray","shuffleArray","stopSort","onClick","sortsNames","getSortsPaths","sortArray","element","setShowAuxArrays","checked","textCenter","max","defaultValue","step","onChange","toggleShowAuxArrays","name","defaultChecked","htmlFor","genInitFunctions","getShuffles","abortSort","getSorts","React","Component","Delays","timeoutArray","delays","Swap","Write","Comp","Unmark","CreateAuxArray","RemoveAuxArray","delayIncFactor","delayInc","timeout","obj","delayName","delay","args","setTimeout","clearTimeout","inc","Sounds","ctx","AudioContext","webkitAudioContext","osc","createOscillator","frequency","gainNode","createGain","gain","connect","destination","linearRampToValueAtTime","currentTime","getDelayInc","stop","colors","Marks","index","saveArr","tmpArr","getMainArray","setType","setColor","setState","indexes","mark","saveOnce","unmark","markIndexes","markArgs","markMany","unmarkMany","incDelay","getSounds","getPseudoArray","sign","arrIndex","isPseudo","getPseudoAuxArrays","getAuxArrays","getMarks","playSound","swapInArr","markUnmarkMany","curWrites","swapWithDelay","setValue","writeInArr","writeWithDelay","pseudoAuxArrays","auxArrIndex","createAuxArrayWithDelay","auxArrays","splice","removeAuxArrayWithDelay","auxWriteWithDelay","ArrayVisualizer","comparisons","pseudoArray","showAuxArrays","setToState","console","log","val","from","nullify","updateDelayInc","delayIncConst","genArrayWindows","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render"],"mappings":"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","file":"static/js/main.19421e74.chunk.js","sourcesContent":["export class Sort {\r\n    arrayVisualizer;\r\n\r\n    Reads\r\n    Writes\r\n\r\n    compare;\r\n    swap;\r\n    write;\r\n    read;\r\n\r\n    createAuxArray\r\n    removeAuxArray\r\n\r\n    auxRead\r\n    auxWrite\r\n\r\n    arrLength;\r\n\r\n    sortName;\r\n    warnLen;\r\n    isDisabled;\r\n\r\n    constructor(arrayVisualizer) {\r\n        this.arrayVisualizer = arrayVisualizer\r\n        this.state = this.arrayVisualizer.getState()\r\n\r\n        this.Reads = this.arrayVisualizer.getReads()\r\n        this.Writes = this.arrayVisualizer.getWrites()\r\n\r\n        this.compare = this.Reads.compare.bind(this.Reads)\r\n        this.read = this.Reads.read.bind(this.Reads)\r\n        this.auxRead = this.Reads.auxRead.bind(this.Reads)\r\n        this.swap = this.Writes.swap.bind(this.Writes)\r\n        this.write = this.Writes.write.bind(this.Writes)\r\n        this.createAuxArray = this.Writes.createAuxArray.bind(this.Writes)\r\n        this.removeAuxArray = this.Writes.removeAuxArray.bind(this.Writes)\r\n        this.auxWrite = this.Writes.auxWrite.bind(this.Writes)\r\n        this.arrLength = this.arrayVisualizer.getArrLength();\r\n        this.sortName = \"\"\r\n        this.warnLen = -1;\r\n        this.isDisabled = false;\r\n    }\r\n\r\n    getSortName(){\r\n        return this.sortName\r\n    }\r\n\r\n    getWarnLen(){\r\n        return this.warnLen\r\n    }\r\n\r\n    runSort(low, high, bucketsNum){\r\n    }\r\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"textCenter\":\"Controls_textCenter__3_8jn\",\"controls\":\"Controls_controls__3X5vt\",\"showToggleBtn\":\"Controls_showToggleBtn__2CbSs\",\"slider\":\"Controls_slider__3IxWj\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"arrayContainer\":\"ArrayWindow_arrayContainer__jfaB8\",\"bar\":\"ArrayWindow_bar__30QYB\"};","export class Sorts {\r\n    arrayVisualizer;\r\n    sortsPaths\r\n\r\n    constructor(arrayVisualizer) {\r\n        this.arrayVisualizer = arrayVisualizer\r\n        this.sortsPaths = [\"BubbleSort\", \"MergeSort\", \"LLQuickSort\", \"InsertionSort\", \"SelectionSort\", \"TimSort\", \"PseudoTimSort\", \"HeapSort\", \"SlowSort\", \"StoogeSort\"]\r\n    }\r\n\r\n    getSortsPaths() {\r\n        return this.sortsPaths;\r\n    }\r\n\r\n    getSortObject(sortPath) {\r\n        let Sort = require(\"./\" + sortPath + \".js\")[sortPath]\r\n        return new Sort(this.arrayVisualizer)\r\n    }\r\n\r\n    runSort(sortName, low, high, bucketsNum) {\r\n        this.arrayVisualizer.getDelays().resetDelays()\r\n        let sort = this.getSortObject(sortName)\r\n        let warnLen = sort.getWarnLen()\r\n        if (warnLen !== -1 && this.arrayVisualizer.getArrLength() > warnLen && !window.confirm(\"WARNING!!!\\nThe array size(\" + this.arrayVisualizer.getArrLength() + \") \" +\r\n            \"more than recommended(\" + warnLen + \")\\nApplication may freeze\\nDo you want continue?\")) {\r\n            return\r\n        }\r\n        this.arrayVisualizer.initPseudoArray()\r\n        this.arrayVisualizer.setSortName(sort.getSortName())\r\n        sort.runSort(low, high, bucketsNum)\r\n        this.arrayVisualizer.sortClickEvent()\r\n    }\r\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"statsContainer\":\"Stats_statsContainer__1qOnq\"};","var map = {\n\t\"./BubbleSort.js\": 24,\n\t\"./HeapSort.js\": 25,\n\t\"./InsertionSort.js\": 26,\n\t\"./LLQuickSort.js\": 27,\n\t\"./MergeSort.js\": 28,\n\t\"./PseudoTimSort.js\": 29,\n\t\"./SelectionSort.js\": 30,\n\t\"./SlowSort.js\": 31,\n\t\"./Sort.js\": 5,\n\t\"./Sorts.js\": 14,\n\t\"./StoogeSort.js\": 32,\n\t\"./TimSort.js\": 33\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 23;","import {Sort} from \"./Sort\";\r\n\r\nexport class BubbleSort extends Sort{\r\n    constructor(arrayVisualizer) {\r\n        super(arrayVisualizer);\r\n        this.sortName = \"BubbleSort\"\r\n    }\r\n    BubbleSort() {\r\n        let len = this.arrLength;\r\n        for (let i = 0; i < len; i++) {\r\n            for (let j = 0; j < len - i - 1; j++) {\r\n                if (this.compare(j, j + 1, \">\")) {\r\n                    this.swap(j, j + 1)\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    runSort(low, high) {\r\n        this.BubbleSort(low, high)\r\n    }\r\n}","import {Sort} from \"./Sort\";\r\n\r\nexport class HeapSort extends Sort{\r\n    constructor(arrayVisualizer) {\r\n        super(arrayVisualizer);\r\n        this.sortName = \"HeapSort\"\r\n    }\r\n    \r\n    heapify(n, i) {\r\n        let largest = i;\r\n\r\n        let l = 2 * i + 1;\r\n        let r = 2 * i + 2;\r\n\r\n        if (l < n && this.compare(l, largest, \">\")) {\r\n            largest = l;\r\n        }\r\n        if (r < n && this.compare(r, largest, \">\")) {\r\n            largest = r;\r\n        }\r\n\r\n        if (largest !== i) {\r\n            this.swap(i, largest);\r\n            this.heapify(n, largest);\r\n        }\r\n    }\r\n\r\n    HeapSort() {\r\n        let n = this.arrLength;\r\n\r\n\r\n        for (let i = Math.trunc(n / 2) - 1; i >= 0; i--) {\r\n            this.heapify(n, i);\r\n        }\r\n\r\n        for (let i = n - 1; i >= 0; i--) {\r\n            this.swap(0, i);\r\n            this.heapify(i, 0)\r\n        }\r\n    }\r\n\r\n    runSort(low, high) {\r\n        this.HeapSort(low, high)\r\n    }\r\n}","import {Sort} from \"./Sort\";\r\n\r\nexport class InsertionSort extends Sort{\r\n    constructor(arrayVisualizer) {\r\n        super(arrayVisualizer);\r\n        this.sortName = \"InsertionSort\"\r\n    }\r\n\r\n    InsertionSort() {\r\n        let length = this.arrLength;\r\n        for (let i = 1; i < length; i++) {\r\n            let key = this.read(i);\r\n            let j = i - 1;\r\n            while (j >= 0 && this.read(j) > key) {\r\n                this.write(j + 1, this.read(j))\r\n                j = j - 1;\r\n            }\r\n            this.write(j + 1, key)\r\n        }\r\n    }\r\n\r\n    runSort(low, high) {\r\n        this.InsertionSort(low, high)\r\n    }\r\n}","import {Sort} from \"./Sort\";\r\n\r\nexport class LLQuickSort extends Sort{\r\n    constructor(arrayVisualizer) {\r\n        super(arrayVisualizer);\r\n        this.sortName = \"LLQuickSort\"\r\n    }\r\n    partition(lo, hi) {\r\n        let pivot = hi;\r\n        let i = lo;\r\n        for (let j = lo; j < hi; j++) {\r\n            if (this.compare(j, pivot, \"<\")) {\r\n                this.swap(i, j);\r\n                i++;\r\n            }\r\n        }\r\n        this.swap(i, hi);\r\n        return i;\r\n    }\r\n\r\n    LLQuickSort(lo, hi) {\r\n        if (lo < hi) {\r\n            let p = this.partition(lo, hi);\r\n            this.LLQuickSort(lo, p - 1);\r\n            this.LLQuickSort(p + 1, hi);\r\n        }\r\n    }\r\n    runSort(low, high) {\r\n        this.LLQuickSort(low, high)\r\n    }\r\n}","import {Sort} from \"./Sort\";\r\n\r\nexport class MergeSort extends Sort{\r\n    constructor(arrayVisualizer) {\r\n        super(arrayVisualizer);\r\n        this.sortName = \"MergeSort\"\r\n    }\r\n    merge(low, mid, high) {\r\n        // let leftArray = new Array(mid - low + 1);\r\n        // let rightArray = new Array(high - mid);\r\n\r\n        let leftArrayLen = mid - low + 1\r\n        let rightArrayLen = high - mid\r\n\r\n        let leftArrayIndex = this.createAuxArray(leftArrayLen);\r\n        let rightArrayIndex = this.createAuxArray(rightArrayLen);\r\n\r\n        for (let i = 0; i < leftArrayLen; i++) {\r\n            // leftArray[i] = this.read(low + i)\r\n            this.auxWrite(i, this.read(low + i), leftArrayIndex)\r\n        }\r\n        for (let i = 0; i < rightArrayLen; i++) {\r\n            // rightArray[i] = this.read(mid + i + 1);\r\n            this.auxWrite(i, this.read(mid + i + 1), rightArrayIndex)\r\n        }\r\n\r\n        let leftIndex = 0;\r\n        let rightIndex = 0;\r\n\r\n        for (let i = low; i < high + 1; i++) {\r\n            if (leftIndex < leftArrayLen && rightIndex < rightArrayLen) {\r\n                // if (leftArray[leftIndex] < rightArray[rightIndex]) {\r\n                if (this.auxRead(leftIndex, leftArrayIndex) < this.auxRead(rightIndex, rightArrayIndex)) {\r\n                    this.write(i, this.auxRead(leftIndex, leftArrayIndex))\r\n                    leftIndex++;\r\n                } else {\r\n                    this.write(i, this.auxRead(rightIndex, rightArrayIndex))\r\n                    rightIndex++;\r\n                }\r\n            } else if (leftIndex < leftArrayLen) {\r\n                this.write(i, this.auxRead(leftIndex, leftArrayIndex))\r\n                leftIndex++;\r\n            } else if (rightIndex < rightArrayLen) {\r\n                this.write(i, this.auxRead(rightIndex, rightArrayIndex))\r\n                rightIndex++;\r\n            }\r\n        }\r\n        // console.log(leftArray)\r\n        // console.log(rightArray)\r\n        this.removeAuxArray(rightArrayIndex)\r\n        this.removeAuxArray(leftArrayIndex)\r\n    }\r\n\r\n    MergeSort(low, high) {\r\n        if (high <= low) return;\r\n\r\n        let mid = Math.trunc((low + high) / 2)\r\n        this.MergeSort(low, mid);\r\n        this.MergeSort(mid + 1, high);\r\n        this.merge(low, mid, high);\r\n    }\r\n\r\n    runSort(low, high) {\r\n        this.MergeSort(low, high)\r\n    }\r\n}","import {Sort} from \"./Sort\";\r\n\r\nexport class PseudoTimSort extends Sort {\r\n    MIN_MERGE\r\n    constructor(arrayVisualizer) {\r\n        super(arrayVisualizer);\r\n        this.sortName = \"PseudoTimSort\"\r\n        this.MIN_MERGE = 32\r\n    }\r\n\r\n    minRunLength(n) {\r\n        let r = 0;\r\n        while (n >= this.MIN_MERGE)\r\n        {\r\n            r |= (n & 1);\r\n            n >>= 1;\r\n        }\r\n        return n + r;\r\n    }\r\n\r\n    insertionSort(left, right) {\r\n        for (let i = left + 1; i <= right; i++) {\r\n            let temp = this.read(i);\r\n            let j = i - 1;\r\n            while (j >= left && this.read(j) > temp) {\r\n                this.write(j + 1, this.read(j))\r\n                j--;\r\n            }\r\n            this.write(j + 1, temp)\r\n        }\r\n    }\r\n\r\n    merge(l, m, r) {\r\n        let len1 = m - l + 1, len2 = r - m;\r\n        let left = this.createAuxArray(len1);\r\n        let right = this.createAuxArray(len2);\r\n        for(let x = 0; x < len1; x++)\r\n        {\r\n            // left[x] = arr[l + x];\r\n            this.auxWrite(x, this.read(l+x), left)\r\n        }\r\n        for(let x = 0; x < len2; x++)\r\n        {\r\n            // right[x] = arr[m + 1 + x];\r\n            this.auxWrite(x, this.read(m + 1 + x), right)\r\n        }\r\n\r\n        let i = 0;\r\n        let j = 0;\r\n        let k = l;\r\n\r\n        while (i < len1 && j < len2)\r\n        {\r\n            // if (left[i] <= right[j])\r\n            if(this.auxRead(i, left) <= this.auxRead(j, right))\r\n            {\r\n                // arr[k] = left[i];\r\n                this.write(k, this.auxRead(i, left))\r\n                i++;\r\n            }\r\n            else\r\n            {\r\n                // arr[k] = right[j];\r\n                this.write(k, this.auxRead(j, right))\r\n                j++;\r\n            }\r\n            k++;\r\n        }\r\n\r\n        while (i < len1) {\r\n            // arr[k] = left[i];\r\n            this.write(k, this.auxRead(i, left))\r\n            k++;\r\n            i++;\r\n        }\r\n\r\n        while (j < len2) {\r\n            this.write(k, this.auxRead(j, right))\r\n            k++;\r\n            j++;\r\n        }\r\n        this.removeAuxArray(right)\r\n        this.removeAuxArray(left)\r\n    }\r\n\r\n    timSort(n)\r\n    {\r\n        let minRun = this.minRunLength(this.MIN_MERGE);\r\n\r\n        for(let i = 0; i < n; i += minRun)\r\n        {\r\n            this.insertionSort(i, Math.min(\r\n                (i + this.MIN_MERGE - 1), (n - 1)));\r\n        }\r\n\r\n        for(let size = minRun; size < n; size = 2 * size) {\r\n            for(let left = 0; left < n; left += 2 * size) {\r\n                let mid = left + size - 1;\r\n                let right = Math.min((left + 2 * size - 1), (n - 1));\r\n                if(mid < right) {\r\n                    this.merge(left, mid, right);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    runSort(low, high) {\r\n        this.timSort(high+1)\r\n    }\r\n}","import {Sort} from \"./Sort\";\r\n\r\nexport class SelectionSort extends Sort{\r\n    constructor(arrayVisualizer) {\r\n        super(arrayVisualizer);\r\n        this.sortName = \"SelectionSort\"\r\n    }\r\n\r\n    SelectionSort() {\r\n        for (let i=0; i < this.arrLength; i++) {\r\n            let minIndex = i\r\n            for (let j=i; j < this.arrLength; j++) {\r\n                if (this.compare(j, minIndex, \"<\")) {\r\n                    minIndex = j\r\n                }\r\n            }\r\n\r\n            if (this.compare(i, minIndex, \">\")) {\r\n                this.swap(i, minIndex);\r\n            }\r\n        }\r\n    }\r\n\r\n    runSort(low, high) {\r\n        this.SelectionSort(low, high)\r\n    }\r\n}","import {Sort} from \"./Sort\";\r\n\r\nexport class SlowSort extends Sort{\r\n    constructor(arrayVisualizer) {\r\n        super(arrayVisualizer);\r\n        this.sortName = \"SlowSort\"\r\n        this.warnLen = 120\r\n    }\r\n\r\n    SlowSort(i, j) {\r\n        if (i >= j) {\r\n            return;\r\n        }\r\n        let m = Math.floor((i + j) / 2);\r\n        this.SlowSort(i, m);\r\n        this.SlowSort(m + 1, j);\r\n        if (this.compare(j, m, \"<\")) {\r\n            this.swap(j, m)\r\n        }\r\n        this.SlowSort(i, j - 1)\r\n    }\r\n\r\n    runSort(low, high) {\r\n        this.SlowSort(low, high)\r\n    }\r\n}","import {Sort} from \"./Sort\";\r\n\r\nexport class StoogeSort extends Sort{\r\n    constructor(arrayVisualizer) {\r\n        super(arrayVisualizer);\r\n        this.sortName = \"StoogeSort\"\r\n    }\r\n\r\n    StoogeSort(i, j) {\r\n        if (this.compare(i, j, \">\")) {\r\n            this.swap(i, j)\r\n        }\r\n        if (j - i > 1) {\r\n            let t = Math.trunc((j - i + 1) / 3)\r\n            this.StoogeSort(i, j - t)\r\n            this.StoogeSort(i + t, j)\r\n            this.StoogeSort(i, j - t)\r\n        }\r\n    }\r\n\r\n    runSort(low, high) {\r\n        this.StoogeSort(low, high)\r\n    }\r\n}","import {Sort} from \"./Sort\";\r\n\r\n/**\r\n * Default minimum size of a run.\r\n */\r\nconst DEFAULT_MIN_MERGE = 32\r\n\r\n/**\r\n * Minimum ordered subsequece required to do galloping.\r\n */\r\nconst DEFAULT_MIN_GALLOPING = 7\r\n\r\n/**\r\n * Default tmp storage length. Can increase depending on the size of the\r\n * smallest run to merge.\r\n */\r\nconst DEFAULT_TMP_STORAGE_LENGTH = 256\r\n\r\n/**\r\n * Pre-computed powers of 10 for efficient lexicographic comparison of\r\n * small integers.\r\n */\r\nconst POWERS_OF_TEN = [1e0, 1e1, 1e2, 1e3, 1e4, 1e5, 1e6, 1e7, 1e8, 1e9]\r\n\r\nlet results\r\n\r\n/**\r\n * Estimate the logarithm base 10 of a small integer.\r\n *\r\n * @param {number} x - The integer to estimate the logarithm of.\r\n * @return {number} - The estimated logarithm of the integer.\r\n */\r\nconst log10 = x => x < 1e5\r\n    ? x < 1e2\r\n        ? x < 1e1\r\n            ? 0\r\n            : 1\r\n        : x < 1e4\r\n            ? x < 1e3\r\n                ? 2\r\n                : 3\r\n            : 4\r\n    : x < 1e7\r\n        ? x < 1e6\r\n            ? 5\r\n            : 6\r\n        : x < 1e9\r\n            ? x < 1e8\r\n                ? 7\r\n                : 8\r\n            : 9\r\n\r\n/**\r\n * Default alphabetical comparison of items.\r\n *\r\n * @param {string|object|number} a - First element to compare.\r\n * @param {string|object|number} b - Second element to compare.\r\n * @return {number} - A positive number if a.toString() > b.toString(), a\r\n * negative number if .toString() < b.toString(), 0 otherwise.\r\n */\r\nfunction alphabeticalCompare(a, b) {\r\n    if (a === b) {\r\n        return 0\r\n    }\r\n\r\n    if (~~a === a && ~~b === b) {\r\n        if (a === 0 || b === 0) {\r\n            return a < b ? -1 : 1\r\n        }\r\n\r\n        if (a < 0 || b < 0) {\r\n            if (b >= 0) {\r\n                return -1\r\n            }\r\n\r\n            if (a >= 0) {\r\n                return 1\r\n            }\r\n\r\n            a = -a\r\n            b = -b\r\n        }\r\n\r\n        const al = log10(a)\r\n        const bl = log10(b)\r\n\r\n        let t = 0\r\n\r\n        if (al < bl) {\r\n            a *= POWERS_OF_TEN[bl - al - 1]\r\n            b /= 10\r\n            t = -1\r\n        } else if (al > bl) {\r\n            b *= POWERS_OF_TEN[al - bl - 1]\r\n            a /= 10\r\n            t = 1\r\n        }\r\n\r\n        if (a === b) {\r\n            return t\r\n        }\r\n\r\n        return a < b ? -1 : 1\r\n    }\r\n\r\n    const aStr = String(a)\r\n    const bStr = String(b)\r\n\r\n    if (aStr === bStr) {\r\n        return 0\r\n    }\r\n\r\n    return aStr < bStr ? -1 : 1\r\n}\r\n\r\n/**\r\n * Compute minimum run length for TimSort\r\n *\r\n * @param {number} n - The size of the array to sort.\r\n */\r\nfunction minRunLength(n) {\r\n    let r = 0\r\n\r\n    while (n >= DEFAULT_MIN_MERGE) {\r\n        r |= (n & 1)\r\n        n >>= 1\r\n    }\r\n\r\n    return n + r\r\n}\r\n\r\n/**\r\n * Counts the length of a monotonically ascending or strictly monotonically\r\n * descending sequence (run) starting at array[lo] in the range [lo, hi). If\r\n * the run is descending it is made ascending.\r\n *\r\n * @param {array} array - The array to reverse.\r\n * @param {number} lo - First element in the range (inclusive).\r\n * @param {number} hi - Last element in the range.\r\n * @param {function} compare - Item comparison function.\r\n * @return {number} - The length of the run.\r\n */\r\n\r\nexport class TimSort extends Sort {\r\n    constructor(arrayVisualizer) {\r\n        super(arrayVisualizer);\r\n\r\n        this.minGallop = DEFAULT_MIN_GALLOPING\r\n\r\n        this.tmpStorageLength = this.arrLength < 2 * DEFAULT_TMP_STORAGE_LENGTH\r\n            ? this.arrLength >>> 1\r\n            : DEFAULT_TMP_STORAGE_LENGTH\r\n\r\n        // this.tmp = new Array(this.tmpStorageLength)\r\n        this.tmp = this.createAuxArray(this.tmpStorageLength)\r\n\r\n        this.stackLength = this.arrLength < 120\r\n            ? 5\r\n            : this.arrLength < 1542\r\n                ? 10\r\n                : this.arrLength < 119151\r\n                    ? 19\r\n                    : 40\r\n\r\n        this.runStart = new Array(this.stackLength)\r\n        this.runLength = new Array(this.stackLength)\r\n\r\n        this.stackSize = 0\r\n        this.sortName = \"TimSort\"\r\n    }\r\n\r\n    makeAscendingRun(lo, hi) {\r\n        let runHi = lo + 1\r\n\r\n        if (runHi === hi) {\r\n            return 1\r\n        }\r\n\r\n        // Descending\r\n        // if (compare(array[runHi++], array[lo]) < 0) {\r\n        if (this.compare(runHi++, lo, \"<\")) {\r\n            // while (runHi < hi && compare(array[runHi], array[runHi - 1]) < 0) {\r\n            while (runHi < hi && this.compare(runHi, runHi - 1, \"<\")) {\r\n                runHi++\r\n            }\r\n\r\n            // this.reverseRun(array, lo, runHi)\r\n            this.reverseRun(lo, runHi)\r\n            // reverseRun(results, lo, runHi)\r\n            // Ascending\r\n        } else {\r\n            // while (runHi < hi && compare(array[runHi], array[runHi - 1]) >= 0) {\r\n            while (runHi < hi && this.compare(runHi, runHi - 1, \">=\")) {\r\n                runHi++\r\n            }\r\n        }\r\n\r\n        return runHi - lo\r\n    }\r\n\r\n    /**\r\n     * Reverse an array in the range [lo, hi).\r\n     *\r\n     * @param {array} array - The array to reverse.\r\n     * @param {number} lo - First element in the range (inclusive).\r\n     * @param {number} hi - Last element in the range.\r\n     */\r\n\r\n\r\n    reverseRun(lo, hi) {\r\n        hi--\r\n\r\n        while (lo < hi) {\r\n            // const t = array[lo]\r\n            // array[lo++] = array[hi]\r\n            // array[hi--] = t\r\n            const t = this.read(lo)\r\n            this.write(lo++, this.read(hi))\r\n            this.write(hi--, t)\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Perform the binary sort of the array in the range [lo, hi) where start is\r\n     * the first element possibly out of order.\r\n     *\r\n     * @param {array} array - The array to sort.\r\n     * @param {number} lo - First element in the range (inclusive).\r\n     * @param {number} hi - Last element in the range.\r\n     * @param {number} start - First element possibly out of order.\r\n     * @param {} compare - Item comparison function.\r\n     */\r\n\r\n\r\n    binaryInsertionSort(lo, hi, start) {\r\n        if (start === lo) {\r\n            start++\r\n        }\r\n\r\n        for (; start < hi; start++) {\r\n            // const pivot = array[start]\r\n            const pivot = this.read(start)\r\n\r\n            // const pivotIndex = results[start]\r\n\r\n            // Ranges of the array where pivot belongs\r\n            let left = lo\r\n            let right = start\r\n\r\n            /*\r\n             *   pivot >= array[i] for i in [lo, left)\r\n             *   pivot <  array[i] for i in  in [right, start)\r\n             */\r\n            while (left < right) {\r\n                const mid = (left + right) >>> 1\r\n\r\n                // if (compare(pivot, array[mid]) < 0) {\r\n                if (pivot < this.read(mid)) {\r\n                    right = mid\r\n                } else {\r\n                    left = mid + 1\r\n                }\r\n            }\r\n\r\n            /*\r\n             * Move elements right to make room for the pivot. If there are elements\r\n             * equal to pivot, left points to the first slot after them: this is also\r\n             * a reason for which TimSort is stable\r\n             */\r\n            let n = start - left\r\n            // Switch is just an optimization for small arrays\r\n            switch (n) {\r\n                case 3:\r\n                    // array[left + 3] = array[left + 2]\r\n                    this.write(left + 3, this.read(left + 2))\r\n                /* falls through */\r\n                case 2:\r\n                    // array[left + 2] = array[left + 1]\r\n                    this.write(left + 2, this.read(left + 1))\r\n                /* falls through */\r\n                case 1:\r\n                    // array[left + 1] = array[left]\r\n                    this.write(left + 1, this.read(left))\r\n                    break\r\n                default:\r\n                    while (n > 0) {\r\n                        // array[left + n] = array[left + n - 1]\r\n                        this.write(left + n, this.read(left + n - 1))\r\n                        n--\r\n                    }\r\n            }\r\n\r\n            // array[left] = pivot\r\n            this.write(left, pivot)\r\n            // results[left] = pivotIndex\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Find the position at which to insert a value in a sorted range. If the range\r\n     * contains elements equal to the value the leftmost element index is returned\r\n     * (for stability).\r\n     *\r\n     * @param {number} value - Value to insert.\r\n     * @param {array} array - The array in which to insert value.\r\n     * @param {number} start - First element in the range.\r\n     * @param {number} length - Length of the range.\r\n     * @param {number} hint - The index at which to begin the search.\r\n     * @param {function} compare - Item comparison function.\r\n     * @return {number} - The index where to insert value.\r\n     */\r\n\r\n\r\n    gallopLeft(value, isAux, start, length, hint) {\r\n        let lastOffset = 0\r\n        let maxOffset = 0\r\n        let offset = 1\r\n        if (!isAux) {\r\n            // if (compare(value, array[start + hint]) > 0) {\r\n            if (value > this.read(start + hint)) {\r\n                maxOffset = length - hint\r\n\r\n                while (\r\n                    offset < maxOffset\r\n                    // && compare(value, array[start + hint + offset]) > 0\r\n                    && value > this.read(start + hint + offset)\r\n                    ) {\r\n                    lastOffset = offset\r\n                    offset = (offset << 1) + 1\r\n\r\n                    if (offset <= 0) {\r\n                        offset = maxOffset\r\n                    }\r\n                }\r\n\r\n                if (offset > maxOffset) {\r\n                    offset = maxOffset\r\n                }\r\n\r\n                // Make offsets relative to start\r\n                lastOffset += hint\r\n                offset += hint\r\n\r\n                // value <= array[start + hint]\r\n            } else {\r\n                maxOffset = hint + 1\r\n                while (\r\n                    offset < maxOffset\r\n                    // && compare(value, array[start + hint - offset]) <= 0\r\n                    // && value <= this.read(start + hint + offset)\r\n                    && value <= this.read(start + hint - offset)\r\n                    ) {\r\n                    lastOffset = offset\r\n                    offset = (offset << 1) + 1\r\n\r\n                    if (offset <= 0) {\r\n                        offset = maxOffset\r\n                    }\r\n                }\r\n                if (offset > maxOffset) {\r\n                    offset = maxOffset\r\n                }\r\n\r\n                // Make offsets relative to start\r\n                const tmp = lastOffset\r\n                lastOffset = hint - offset\r\n                offset = hint - tmp\r\n            }\r\n\r\n            /*\r\n             * Now array[start+lastOffset] < value <= array[start+offset], so value\r\n             * belongs somewhere in the range (start + lastOffset, start + offset]. Do a\r\n             * binary search, with invariant array[start + lastOffset - 1] < value <=\r\n             * array[start + offset].\r\n             */\r\n            lastOffset++\r\n            while (lastOffset < offset) {\r\n                const m = lastOffset + ((offset - lastOffset) >>> 1)\r\n\r\n                // if (compare(value, array[start + m]) > 0) {\r\n                if (value > this.read(start + m)) {\r\n                    lastOffset = m + 1\r\n                } else {\r\n                    offset = m\r\n                }\r\n            }\r\n        } else {\r\n            // if (compare(value, array[start + hint]) > 0) {\r\n            if (value > this.auxRead(start + hint, this.tmp)) {\r\n                maxOffset = length - hint\r\n\r\n                while (\r\n                    offset < maxOffset\r\n                    // && compare(value, array[start + hint + offset]) > 0\r\n                    && value > this.auxRead(start + hint + offset, this.tmp)\r\n                    ) {\r\n                    lastOffset = offset\r\n                    offset = (offset << 1) + 1\r\n\r\n                    if (offset <= 0) {\r\n                        offset = maxOffset\r\n                    }\r\n                }\r\n\r\n                if (offset > maxOffset) {\r\n                    offset = maxOffset\r\n                }\r\n\r\n                // Make offsets relative to start\r\n                lastOffset += hint\r\n                offset += hint\r\n\r\n                // value <= array[start + hint]\r\n            } else {\r\n                maxOffset = hint + 1\r\n                while (\r\n                    offset < maxOffset\r\n                    // && compare(value, array[start + hint - offset]) <= 0\r\n                    // && value <= this.auxRead(start + hint + offset, this.tmp)\r\n                    && value <= this.auxRead(start + hint - offset, this.tmp)\r\n                    ) {\r\n                    lastOffset = offset\r\n                    offset = (offset << 1) + 1\r\n\r\n                    if (offset <= 0) {\r\n                        offset = maxOffset\r\n                    }\r\n                }\r\n                if (offset > maxOffset) {\r\n                    offset = maxOffset\r\n                }\r\n\r\n                // Make offsets relative to start\r\n                const tmp = lastOffset\r\n                lastOffset = hint - offset\r\n                offset = hint - tmp\r\n            }\r\n\r\n            /*\r\n             * Now array[start+lastOffset] < value <= array[start+offset], so value\r\n             * belongs somewhere in the range (start + lastOffset, start + offset]. Do a\r\n             * binary search, with invariant array[start + lastOffset - 1] < value <=\r\n             * array[start + offset].\r\n             */\r\n            lastOffset++\r\n            while (lastOffset < offset) {\r\n                const m = lastOffset + ((offset - lastOffset) >>> 1)\r\n\r\n                // if (compare(value, array[start + m]) > 0) {\r\n                if (value > this.auxRead(start + m, this.tmp)) {\r\n                    lastOffset = m + 1\r\n                } else {\r\n                    offset = m\r\n                }\r\n            }\r\n        }\r\n        return offset\r\n    }\r\n\r\n    /**\r\n     * Find the position at which to insert a value in a sorted range. If the range\r\n     * contains elements equal to the value the rightmost element index is returned\r\n     * (for stability).\r\n     *\r\n     * @param {number} value - Value to insert.\r\n     * @param {array} array - The array in which to insert value.\r\n     * @param {number} start - First element in the range.\r\n     * @param {number} length - Length of the range.\r\n     * @param {number} hint - The index at which to begin the search.\r\n     * @param {function} compare - Item comparison function.\r\n     * @return {number} - The index where to insert value.\r\n     */\r\n\r\n\r\n    gallopRight(value, isAux, start, length, hint) {\r\n        let lastOffset = 0\r\n        let maxOffset = 0\r\n        let offset = 1\r\n\r\n        if (!isAux) {\r\n            // if (compare(value, array[start + hint]) < 0) {\r\n            if (value < this.read(start + hint)) {\r\n                maxOffset = hint + 1\r\n\r\n                while (\r\n                    offset < maxOffset\r\n                    // && compare(value, array[start + hint - offset]) < 0\r\n                    && value < this.read(start + hint - offset)\r\n                    ) {\r\n                    lastOffset = offset\r\n                    offset = (offset << 1) + 1\r\n\r\n                    if (offset <= 0) {\r\n                        offset = maxOffset\r\n                    }\r\n                }\r\n\r\n                if (offset > maxOffset) {\r\n                    offset = maxOffset\r\n                }\r\n\r\n                // Make offsets relative to start\r\n                const tmp = lastOffset\r\n                lastOffset = hint - offset\r\n                offset = hint - tmp\r\n\r\n                // value >= array[start + hint]\r\n            } else {\r\n                maxOffset = length - hint\r\n\r\n                while (\r\n                    offset < maxOffset\r\n                    // && compare(value, array[start + hint + offset]) >= 0\r\n                    && value >= this.read(start + hint + offset)\r\n                    ) {\r\n                    lastOffset = offset\r\n                    offset = (offset << 1) + 1\r\n\r\n                    if (offset <= 0) {\r\n                        offset = maxOffset\r\n                    }\r\n                }\r\n\r\n                if (offset > maxOffset) {\r\n                    offset = maxOffset\r\n                }\r\n\r\n                // Make offsets relative to start\r\n                lastOffset += hint\r\n                offset += hint\r\n            }\r\n\r\n            /*\r\n             * Now array[start+lastOffset] < value <= array[start+offset], so value\r\n             * belongs somewhere in the range (start + lastOffset, start + offset]. Do a\r\n             * binary search, with invariant array[start + lastOffset - 1] < value <=\r\n             * array[start + offset].\r\n             */\r\n            lastOffset++\r\n\r\n            while (lastOffset < offset) {\r\n                const m = lastOffset + ((offset - lastOffset) >>> 1)\r\n\r\n                // if (compare(value, array[start + m]) < 0) {\r\n                if (value < this.read(start + m)) {\r\n                    offset = m\r\n                } else {\r\n                    lastOffset = m + 1\r\n                }\r\n            }\r\n\r\n        } else {\r\n            //AUX\r\n            // if (compare(value, array[start + hint]) < 0) {\r\n            if (value < this.auxRead(start + hint, this.tmp)) {\r\n                maxOffset = hint + 1\r\n\r\n                while (\r\n                    offset < maxOffset\r\n                    // && compare(value, array[start + hint - offset]) < 0\r\n                    && value < this.auxRead(start + hint - offset, this.tmp)\r\n                    ) {\r\n                    lastOffset = offset\r\n                    offset = (offset << 1) + 1\r\n\r\n                    if (offset <= 0) {\r\n                        offset = maxOffset\r\n                    }\r\n                }\r\n\r\n                if (offset > maxOffset) {\r\n                    offset = maxOffset\r\n                }\r\n\r\n                // Make offsets relative to start\r\n                const tmp = lastOffset\r\n                lastOffset = hint - offset\r\n                offset = hint - tmp\r\n\r\n                // value >= array[start + hint]\r\n            } else {\r\n                maxOffset = length - hint\r\n\r\n                while (\r\n                    offset < maxOffset\r\n                    // && compare(value, array[start + hint + offset]) >= 0\r\n                    && value >= this.auxRead(start + hint + offset, this.tmp)\r\n                    ) {\r\n                    lastOffset = offset\r\n                    offset = (offset << 1) + 1\r\n\r\n                    if (offset <= 0) {\r\n                        offset = maxOffset\r\n                    }\r\n                }\r\n\r\n                if (offset > maxOffset) {\r\n                    offset = maxOffset\r\n                }\r\n\r\n                // Make offsets relative to start\r\n                lastOffset += hint\r\n                offset += hint\r\n            }\r\n\r\n            /*\r\n             * Now array[start+lastOffset] < value <= array[start+offset], so value\r\n             * belongs somewhere in the range (start + lastOffset, start + offset]. Do a\r\n             * binary search, with invariant array[start + lastOffset - 1] < value <=\r\n             * array[start + offset].\r\n             */\r\n            lastOffset++\r\n\r\n            while (lastOffset < offset) {\r\n                const m = lastOffset + ((offset - lastOffset) >>> 1)\r\n\r\n                // if (compare(value, array[start + m]) < 0) {\r\n                if (value < this.auxRead(start + m, this.tmp)) {\r\n                    offset = m\r\n                } else {\r\n                    lastOffset = m + 1\r\n                }\r\n            }\r\n        }\r\n\r\n        return offset\r\n    }\r\n\r\n\r\n    /**\r\n     * Push a new run on TimSort's stack.\r\n     *\r\n     * @param {number} runStart - Start index of the run in the original array.\r\n     * @param {number} runLength - Length of the run;\r\n     */\r\n    pushRun(runStart, runLength) {\r\n        this.runStart[this.stackSize] = runStart\r\n        this.runLength[this.stackSize] = runLength\r\n        this.stackSize += 1\r\n    }\r\n\r\n    /**\r\n     * Merge runs on TimSort's stack so that the following holds for all i:\r\n     * 1) runLength[i - 3] > runLength[i - 2] + runLength[i - 1]\r\n     * 2) runLength[i - 2] > runLength[i - 1]\r\n     */\r\n    mergeRuns() {\r\n        while (this.stackSize > 1) {\r\n            let n = this.stackSize - 2\r\n\r\n            if (\r\n                (\r\n                    n >= 1\r\n                    && this.runLength[n - 1] <= this.runLength[n] + this.runLength[n + 1]\r\n                )\r\n                || (\r\n                    n >= 2\r\n                    && this.runLength[n - 2] <= this.runLength[n] + this.runLength[n - 1]\r\n                )\r\n            ) {\r\n                if (this.runLength[n - 1] < this.runLength[n + 1]) {\r\n                    n--\r\n                }\r\n            } else if (this.runLength[n] > this.runLength[n + 1]) {\r\n                break\r\n            }\r\n            this.mergeAt(n)\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Merge all runs on TimSort's stack until only one remains.\r\n     */\r\n    forceMergeRuns() {\r\n        while (this.stackSize > 1) {\r\n            let n = this.stackSize - 2\r\n\r\n            if (n > 0 && this.runLength[n - 1] < this.runLength[n + 1]) {\r\n                n--\r\n            }\r\n\r\n            this.mergeAt(n)\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Merge the runs on the stack at positions i and i+1. Must be always be called\r\n     * with i=stackSize-2 or i=stackSize-3 (that is, we merge on top of the stack).\r\n     *\r\n     * @param {number} i - Index of the run to merge in TimSort's stack.\r\n     */\r\n    mergeAt(i) {\r\n        let start1 = this.runStart[i]\r\n        let length1 = this.runLength[i]\r\n        const start2 = this.runStart[i + 1]\r\n        let length2 = this.runLength[i + 1]\r\n\r\n        this.runLength[i] = length1 + length2\r\n\r\n        if (i === this.stackSize - 3) {\r\n            this.runStart[i + 1] = this.runStart[i + 2]\r\n            this.runLength[i + 1] = this.runLength[i + 2]\r\n        }\r\n\r\n        this.stackSize--\r\n\r\n        /*\r\n         * Find where the first element in the second run goes in run1. Previous\r\n         * elements in run1 are already in place\r\n         */\r\n        // const k = gallopRight(array[start2], array, start1, length1, 0, compare)\r\n        const k = this.gallopRight(this.read(start2), false, start1, length1, 0)\r\n        start1 += k\r\n        length1 -= k\r\n\r\n        if (length1 === 0) {\r\n            return\r\n        }\r\n\r\n        /*\r\n         * Find where the last element in the first run goes in run2. Next elements\r\n         * in run2 are already in place\r\n         */\r\n        // length2 = gallopLeft(\r\n        //     array[start1 + length1 - 1],\r\n        //     array,\r\n        //     start2,\r\n        //     length2,\r\n        //     length2 - 1,\r\n        //     compare\r\n        // )\r\n        length2 = this.gallopLeft(\r\n            // array[start1 + length1 - 1],\r\n            this.read(start1 + length1 - 1),\r\n            false,\r\n            start2,\r\n            length2,\r\n            length2 - 1,\r\n        )\r\n\r\n        if (length2 === 0) {\r\n            return\r\n        }\r\n\r\n        /*\r\n         * Merge remaining runs. A tmp array with length = min(length1, length2) is\r\n         * used\r\n         */\r\n        if (length1 <= length2) {\r\n            this.mergeLow(start1, length1, start2, length2)\r\n        } else {\r\n            this.mergeHigh(start1, length1, start2, length2)\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Merge two adjacent runs in a stable way. The runs must be such that the\r\n     * first element of run1 is bigger than the first element in run2 and the\r\n     * last element of run1 is greater than all the elements in run2.\r\n     * The method should be called when run1.length <= run2.length as it uses\r\n     * TimSort temporary array to store run1. Use mergeHigh if run1.length >\r\n     * run2.length.\r\n     *\r\n     * @param {number} start1 - First element in run1.\r\n     * @param {number} length1 - Length of run1.\r\n     * @param {number} start2 - First element in run2.\r\n     * @param {number} length2 - Length of run2.\r\n     */\r\n    mergeLow(start1, length1, start2, length2) {\r\n        // const {compare} = this\r\n        // const {array} = this\r\n        // const {tmp} = this\r\n        // const {tmpIndex} = this\r\n        // const {compare} = this\r\n        // const {array} = this\r\n        // const {tmp} = this\r\n        // const {tmpIndex} = this\r\n        let i = 0\r\n\r\n        for (i = 0; i < length1; i++) {\r\n            // tmp[i] = array[start1 + i]\r\n            this.auxWrite(i, this.read(start1 + i), this.tmp)\r\n        }\r\n\r\n        let cursor1 = 0\r\n        let cursor2 = start2\r\n        let dest = start1\r\n\r\n\r\n        // array[dest] = array[cursor2]\r\n        this.write(dest, this.read(cursor2))\r\n\r\n\r\n        dest++\r\n        cursor2++\r\n\r\n        if (--length2 === 0) {\r\n            for (i = 0; i < length1; i++) {\r\n                // array[dest + i] = tmp[cursor1 + i]\r\n                this.write(dest + i, this.auxRead(cursor1 + i, this.tmp))\r\n            }\r\n            return\r\n        }\r\n\r\n        if (length1 === 1) {\r\n            for (i = 0; i < length2; i++) {\r\n                // array[dest + i] = array[cursor2 + i]\r\n\r\n                this.write(dest + i, this.read(cursor2 + i))\r\n            }\r\n            // array[dest + length2] = tmp[cursor1]\r\n            this.write(dest + length2, this.auxRead(cursor1, this.tmp))\r\n            return\r\n        }\r\n\r\n        let {minGallop} = this\r\n\r\n        while (true) {\r\n            let count1 = 0\r\n            let count2 = 0\r\n            let exit = false\r\n\r\n            do {\r\n                // if (compare(array[cursor2], tmp[cursor1]) < 0) {\r\n                if (this.read(cursor2) < this.auxRead(cursor1, this.tmp)) {\r\n                    // array[dest] = array[cursor2]\r\n                    this.write(dest, this.read(cursor2))\r\n                    dest++\r\n                    cursor2++\r\n                    count2++\r\n                    count1 = 0\r\n\r\n                    if (--length2 === 0) {\r\n                        exit = true\r\n                        break\r\n                    }\r\n                } else {\r\n                    // array[dest] = tmp[cursor1]\r\n                    this.write(dest, this.auxRead(cursor1, this.tmp))\r\n\r\n                    dest++\r\n                    cursor1++\r\n                    count1++\r\n                    count2 = 0\r\n                    if (--length1 === 1) {\r\n                        exit = true\r\n                        break\r\n                    }\r\n                }\r\n            } while ((count1 | count2) < minGallop)\r\n\r\n            if (exit) {\r\n                break\r\n            }\r\n\r\n            do {\r\n                // count1 = gallopRight(array[cursor2], tmp, cursor1, length1, 0, compare)\r\n                count1 = this.gallopRight(this.read(cursor2), true, cursor1, length1, 0)\r\n\r\n                if (count1 !== 0) {\r\n                    for (i = 0; i < count1; i++) {\r\n                        // array[dest + i] = tmp[cursor1 + i]\r\n                        // results[dest + i] = tmpIndex[cursor1 + i]\r\n                        this.write(dest + i, this.auxRead(cursor1 + i, this.tmp))\r\n                    }\r\n\r\n                    dest += count1\r\n                    cursor1 += count1\r\n                    length1 -= count1\r\n                    if (length1 <= 1) {\r\n                        exit = true\r\n                        break\r\n                    }\r\n                }\r\n\r\n                // array[dest] = array[cursor2]\r\n                // results[dest] = results[cursor2]\r\n                this.write(dest, this.read(cursor2))\r\n\r\n                dest++\r\n                cursor2++\r\n\r\n                if (--length2 === 0) {\r\n                    exit = true\r\n                    break\r\n                }\r\n\r\n                // count2 = this.gallopLeft(tmp[cursor1], array, cursor2, length2, 0, compare)\r\n                count2 = this.gallopLeft(this.auxRead(cursor1, this.tmp), false, cursor2, length2, 0)\r\n\r\n                if (count2 !== 0) {\r\n                    for (i = 0; i < count2; i++) {\r\n                        // array[dest + i] = array[cursor2 + i]\r\n                        // results[dest + i] = results[cursor2 + i]\r\n                        this.write(dest + i, this.read(cursor2 + i))\r\n                    }\r\n\r\n                    dest += count2\r\n                    cursor2 += count2\r\n                    length2 -= count2\r\n\r\n                    if (length2 === 0) {\r\n                        exit = true\r\n                        break\r\n                    }\r\n                }\r\n                // array[dest] = tmp[cursor1]\r\n                // results[dest] = tmpIndex[cursor1]\r\n\r\n                this.write(dest, this.auxRead(cursor1, this.tmp))\r\n\r\n                dest++\r\n                cursor1++\r\n\r\n                if (--length1 === 1) {\r\n                    exit = true\r\n                    break\r\n                }\r\n\r\n                minGallop--\r\n            } while (\r\n                count1 >= DEFAULT_MIN_GALLOPING\r\n                || count2 >= DEFAULT_MIN_GALLOPING\r\n                )\r\n\r\n            if (exit) {\r\n                break\r\n            }\r\n\r\n            if (minGallop < 0) {\r\n                minGallop = 0\r\n            }\r\n\r\n            minGallop += 2\r\n        }\r\n\r\n        this.minGallop = minGallop\r\n\r\n        if (minGallop < 1) {\r\n            this.minGallop = 1\r\n        }\r\n\r\n        if (length1 === 1) {\r\n            for (i = 0; i < length2; i++) {\r\n                // array[dest + i] = array[cursor2 + i]\r\n                // results[dest + i] = results[cursor2 + i]\r\n                this.write(dest + i, this.read(cursor2 + i))\r\n            }\r\n            // array[dest + length2] = tmp[cursor1]\r\n            // results[dest + length2] = tmpIndex[cursor1]\r\n            this.write(dest + length2, this.auxRead(cursor1, this.tmp))\r\n        } else if (length1 === 0) {\r\n            throw new Error('mergeLow preconditions were not respected')\r\n        } else {\r\n            for (i = 0; i < length1; i++) {\r\n                // array[dest + i] = tmp[cursor1 + i]\r\n                // results[dest + i] = tmpIndex[cursor1 + i]\r\n                this.write(dest + i, this.auxRead(cursor1 + i, this.tmp))\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Merge two adjacent runs in a stable way. The runs must be such that the\r\n     * first element of run1 is bigger than the first element in run2 and the\r\n     * last element of run1 is greater than all the elements in run2.\r\n     * The method should be called when run1.length > run2.length as it uses\r\n     * TimSort temporary array to store run2. Use mergeLow if run1.length <=\r\n     * run2.length.\r\n     *\r\n     * @param {number} start1 - First element in run1.\r\n     * @param {number} length1 - Length of run1.\r\n     * @param {number} start2 - First element in run2.\r\n     * @param {number} length2 - Length of run2.\r\n     */\r\n    mergeHigh(start1, length1, start2, length2) {\r\n        // const {compare} = this\r\n        // const {array} = this\r\n        // const {tmp} = this\r\n        // const {tmpIndex} = this\r\n        let i = 0\r\n\r\n        for (i = 0; i < length2; i++) {\r\n            // tmp[i] = array[start2 + i]\r\n            this.auxWrite(i, this.read(start2 + i), this.tmp)\r\n        }\r\n\r\n        let cursor1 = start1 + length1 - 1\r\n        let cursor2 = length2 - 1\r\n        let dest = start2 + length2 - 1\r\n        let customCursor = 0\r\n        let customDest = 0\r\n\r\n        // array[dest] = array[cursor1]\r\n        this.write(dest, this.read(cursor1))\r\n\r\n        dest--\r\n        cursor1--\r\n\r\n        if (--length1 === 0) {\r\n            customCursor = dest - (length2 - 1)\r\n\r\n            for (i = 0; i < length2; i++) {\r\n                // array[customCursor + i] = tmp[i]\r\n                this.write(customCursor + i, this.auxRead(i, this.tmp))\r\n            }\r\n\r\n            return\r\n        }\r\n\r\n        if (length2 === 1) {\r\n            dest -= length1\r\n            cursor1 -= length1\r\n            customDest = dest + 1\r\n            customCursor = cursor1 + 1\r\n\r\n            for (i = length1 - 1; i >= 0; i--) {\r\n                // array[customDest + i] = array[customCursor + i]\r\n                this.write(customDest + i, this.read(customCursor + i))\r\n            }\r\n\r\n            // array[dest] = tmp[cursor2]\r\n            this.write(dest, this.auxRead(cursor2, this.tmp))\r\n            return\r\n        }\r\n\r\n        let {minGallop} = this\r\n\r\n        while (true) {\r\n            let count1 = 0\r\n            let count2 = 0\r\n            let exit = false\r\n\r\n            do {\r\n                // if (compare(tmp[cursor2], array[cursor1]) < 0) {\r\n                if (this.auxRead(cursor2, this.tmp) < this.read(cursor1)) {\r\n                    // array[dest] = array[cursor1]\r\n                    this.write(dest, this.read(cursor1))\r\n                    dest--\r\n                    cursor1--\r\n                    count1++\r\n                    count2 = 0\r\n                    if (--length1 === 0) {\r\n                        exit = true\r\n                        break\r\n                    }\r\n                } else {\r\n                    // array[dest] = tmp[cursor2]\r\n                    this.write(dest, this.auxRead(cursor2, this.tmp))\r\n                    dest--\r\n                    cursor2--\r\n                    count2++\r\n                    count1 = 0\r\n                    if (--length2 === 1) {\r\n                        exit = true\r\n                        break\r\n                    }\r\n                }\r\n            } while ((count1 | count2) < minGallop)\r\n\r\n            if (exit) {\r\n                break\r\n            }\r\n\r\n            do {\r\n                // count1 = length1 - gallopRight(\r\n                //     tmp[cursor2],\r\n                //     array,\r\n                //     start1,\r\n                //     length1,\r\n                //     length1 - 1,\r\n                //     compare\r\n                // )\r\n                count1 = length1 - this.gallopRight(\r\n                    this.auxRead(cursor2, this.tmp),\r\n                    false,\r\n                    start1,\r\n                    length1,\r\n                    length1 - 1\r\n                )\r\n\r\n                if (count1 !== 0) {\r\n                    dest -= count1\r\n                    cursor1 -= count1\r\n                    length1 -= count1\r\n                    customDest = dest + 1\r\n                    customCursor = cursor1 + 1\r\n\r\n                    for (i = count1 - 1; i >= 0; i--) {\r\n                        // array[customDest + i] = array[customCursor + i]\r\n                        this.write(customDest + i, this.read(customCursor + i))\r\n                    }\r\n\r\n                    if (length1 === 0) {\r\n                        exit = true\r\n                        break\r\n                    }\r\n                }\r\n\r\n                // array[dest] = tmp[cursor2]\r\n                this.write(dest, this.auxRead(cursor2, this.tmp))\r\n\r\n                dest--\r\n                cursor2--\r\n\r\n                if (--length2 === 1) {\r\n                    exit = true\r\n                    break\r\n                }\r\n\r\n                // count2 = length2 - gallopLeft(\r\n                //     array[cursor1],\r\n                //     tmp,\r\n                //     0,\r\n                //     length2,\r\n                //     length2 - 1,\r\n                //     compare\r\n                // )\r\n\r\n                count2 = length2 - this.gallopLeft(\r\n                    this.read(cursor1),\r\n                    true,\r\n                    0,\r\n                    length2,\r\n                    length2 - 1\r\n                )\r\n\r\n                if (count2 !== 0) {\r\n                    dest -= count2\r\n                    cursor2 -= count2\r\n                    length2 -= count2\r\n                    customDest = dest + 1\r\n                    customCursor = cursor2 + 1\r\n\r\n                    for (i = 0; i < count2; i++) {\r\n                        // array[customDest + i] = tmp[customCursor + i]\r\n                        this.write(customDest + i, this.auxRead(customCursor + i, this.tmp))\r\n                    }\r\n\r\n                    if (length2 <= 1) {\r\n                        exit = true\r\n                        break\r\n                    }\r\n                }\r\n\r\n                // array[dest] = array[cursor1]\r\n                this.write(dest, this.read(cursor1))\r\n\r\n                dest--\r\n                cursor1--\r\n\r\n                if (--length1 === 0) {\r\n                    exit = true\r\n                    break\r\n                }\r\n\r\n                minGallop--\r\n            } while (\r\n                count1 >= DEFAULT_MIN_GALLOPING\r\n                || count2 >= DEFAULT_MIN_GALLOPING\r\n                )\r\n\r\n            if (exit) {\r\n                break\r\n            }\r\n\r\n            if (minGallop < 0) {\r\n                minGallop = 0\r\n            }\r\n\r\n            minGallop += 2\r\n        }\r\n\r\n        this.minGallop = minGallop\r\n\r\n        if (minGallop < 1) {\r\n            this.minGallop = 1\r\n        }\r\n\r\n        if (length2 === 1) {\r\n            dest -= length1\r\n            cursor1 -= length1\r\n            customDest = dest + 1\r\n            customCursor = cursor1 + 1\r\n\r\n            for (i = length1 - 1; i >= 0; i--) {\r\n                // array[customDest + i] = array[customCursor + i]\r\n                this.write(customDest + i, this.read(customCursor + i))\r\n            }\r\n\r\n            // array[dest] = tmp[cursor2]\r\n            // results[dest] = tmpIndex[cursor2]\r\n\r\n            this.write(dest, this.auxRead(cursor2, this.tmp))\r\n\r\n\r\n        } else if (length2 === 0) {\r\n            throw new Error('mergeHigh preconditions were not respected')\r\n        } else {\r\n            customCursor = dest - (length2 - 1)\r\n            for (i = 0; i < length2; i++) {\r\n                // array[customCursor + i] = tmp[i]\r\n                this.write(customCursor + i, this.auxRead(i, this.tmp))\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    /**\r\n     * Sort an array in the range [lo, hi) using TimSort.\r\n     *\r\n     * @param {array} array - The array to sort.\r\n     * @param {function=} compare - Item comparison function. Default is\r\n     *     alphabetical\r\n     * @param {number} lo - First element in the range (inclusive).\r\n     * @param {number} hi - Last element in the range.\r\n     *     comparator.\r\n     */\r\n    runSort(low, high) {\r\n        this.sort(low, high+1)\r\n    }\r\n\r\n    sort(lo, hi) {\r\n\r\n        let i = 0\r\n\r\n        let remaining = hi - lo\r\n\r\n        // The array is already sorted\r\n        if (remaining < 2) {\r\n            return results\r\n        }\r\n\r\n        let runLength = 0\r\n        // On small arrays binary sort can be used directly\r\n        if (remaining < DEFAULT_MIN_MERGE) {\r\n            runLength = this.makeAscendingRun(lo, hi)\r\n            this.binaryInsertionSort(lo, hi, lo + runLength)\r\n        }\r\n\r\n\r\n        const minRun = minRunLength(remaining)\r\n\r\n        do {\r\n            runLength = this.makeAscendingRun(lo, hi)\r\n            if (runLength < minRun) {\r\n                let force = remaining\r\n                if (force > minRun) {\r\n                    force = minRun\r\n                }\r\n\r\n                this.binaryInsertionSort(lo, lo + force, lo + runLength)\r\n                runLength = force\r\n            }\r\n            // Push new run and merge if necessary\r\n            this.pushRun(lo, runLength)\r\n            this.mergeRuns()\r\n\r\n            // Go find next run\r\n            remaining -= runLength\r\n            lo += runLength\r\n        } while (remaining !== 0)\r\n\r\n        // Force merging of remaining runs\r\n        this.forceMergeRuns()\r\n        this.removeAuxArray(this.tmp)\r\n    }\r\n}","const types = {\r\n\r\n}\r\n\r\nconst colors = {\r\n\r\n}\r\n\r\nexport class Element{\r\n\r\n    value;\r\n    color;\r\n    type;\r\n\r\n    // constructor(args){\r\n    //     this.value = args.value;\r\n    //     this.type = args.type;\r\n    //     this.color = args.color || colors[args.type];\r\n    // }\r\n\r\n    constructor(value, type, color) {\r\n            this.value = value;\r\n            this.type = type;\r\n            this.color = color;\r\n    }\r\n\r\n    getValue(){\r\n        return this.value;\r\n    }\r\n    setValue(value){\r\n        this.value = value;\r\n    }\r\n\r\n    getColor(){\r\n        return this.color;\r\n    }\r\n    setColor(color){\r\n        this.color = color;\r\n    }\r\n\r\n    getType(){\r\n        return this.type;\r\n    }\r\n    setType(type){\r\n        this.type = type;\r\n    }\r\n}","import {Element} from \"../classes/Element\";\r\nexport function random(a, b) {\r\n    return Math.random() * (b - a) + a;\r\n}\r\n\r\nexport function randomInt(a, b) {\r\n    return Math.trunc(random(a, b))\r\n}\r\n\r\nexport function swapObj(json) {\r\n    let ret = {};\r\n    for (let key in json) {\r\n        ret[json[key]] = key;\r\n    }\r\n    return ret;\r\n}\r\n\r\nexport function sleep(ms) {\r\n    ms += new Date().getTime();\r\n    while (new Date() < ms) {\r\n    }\r\n}\r\n\r\nexport function getAllMethods(toCheck) {\r\n    const props = [];\r\n    let obj = toCheck;\r\n    do {\r\n        props.push(...Object.getOwnPropertyNames(obj));\r\n    } while (obj = Object.getPrototypeOf(obj));\r\n\r\n    return props.sort().filter((e, i, arr) => {\r\n        if (e!=arr[i+1] && typeof toCheck[e] == 'function') return true;\r\n    });\r\n}\r\n\r\nexport function deepArrayCopy(arr){\r\n    let out = [];\r\n    for(let i of arr){\r\n        let value = i.getValue();\r\n        let type = i.getType();\r\n        let color = i.getColor();\r\n        out.push(new Element(value, type, color))\r\n    }\r\n    return out;\r\n}\r\n\r\nexport function arraysEquals(a, b){\r\n    return a.length === b.length &&\r\n    a.every((v, i) => v === b[i]);\r\n}","import React from 'react';\r\nimport styles from \"./ArrayWindow.module.scss\";\r\n\r\nexport function ArrayWindow(props){\r\n    let array = props.array\r\n    let mainArray = props.mainArray\r\n    let height = props.height\r\n    // let style = props.style\r\n    // console.log(array)\r\n    let arr = []\r\n\r\n    for (let i = 0; i < array.length; ++i) {\r\n        let styleSheet = {\r\n            height: array[i].getValue() / mainArray.length * 100 + \"%\",\r\n            backgroundColor: \"rgb(\" + array[i].getColor() + \")\"\r\n        }\r\n        arr.push(<div key={i} style={styleSheet} className={styles.bar}/>);\r\n    }\r\n    for(let i = array.length;i < mainArray.length;++i){\r\n        let styleSheet = {\r\n            height: \"0%\",\r\n            backgroundColor: \"rgb(255,255,255)\"\r\n        }\r\n        arr.push(<div key={i} style={styleSheet} className={styles.bar}/>);\r\n    }\r\n    if(array.length===0){\r\n        return <div/>\r\n    }\r\n    return (\r\n        <div style={{width: \"100%\", height: height+\"%\"}}>\r\n            <div className={styles.arrayContainer}>\r\n                {arr}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react';\r\nimport styles from \"./Stats.module.scss\";\r\n\r\nexport function Stats(props){\r\n    return(\r\n        <div className={styles.statsContainer}>\r\n            <div><b>Sort: {props.sortName}</b></div>\r\n            <div>Length: {props.arrLength}</div>\r\n            {/*<div>Comparisons: {props.comparisons}</div>*/}\r\n            <div>Writes: {props.writes}</div>\r\n        </div>\r\n    )\r\n}","export let initFunctions = {\r\n    linear: function linear(x, length) {\r\n        return x;\r\n    },\r\n    reverse: function reverse(x, length) {\r\n        return length - x;\r\n    },\r\n    pipeOrgan: function pipeOrgan(x, length) {\r\n        if (x < length / 2) {\r\n            return 2 * x;\r\n        } else {\r\n            return 2 * (length - x) - 1;\r\n        }\r\n    },\r\n    inversedPipeOrgan: function inversedPipeOrgan(x, length){\r\n        if (x < length / 2) {\r\n            return (length - 2*x) - 1;\r\n        } else {\r\n            return x*2-length;\r\n        }\r\n    }\r\n}","import {randomInt} from \"./utils\";\r\n\r\nexport let shuffles = {\r\n    fullShuffle: function (len) {\r\n        let instructions = []\r\n        for (let i = 0; i < len; ++i) {\r\n            let randomIndex = randomInt(i, len)\r\n            instructions.push(\r\n                {\r\n                    cmd: \"swap\",\r\n                    a: i,\r\n                    b:randomIndex\r\n                }\r\n            )\r\n        }\r\n        return instructions\r\n    },\r\n\r\n    almostSorted: function (len) {\r\n        let instructions = []\r\n        const amount = 0.1\r\n        for (let i = 0; i < len * amount; ++i) {\r\n            let randomIndexA = randomInt(i, len)\r\n            let randomIndexB = randomInt(i, len)\r\n            instructions.push(\r\n                {\r\n                    cmd: \"swap\",\r\n                    a: randomIndexA,\r\n                    b:randomIndexB\r\n                }\r\n            )\r\n        }\r\n        return instructions\r\n    }\r\n\r\n\r\n}","import React from 'react';\r\nimport styles from \"./Controls.module.scss\";\r\nimport {initFunctions} from \"../utils/initFunctions\";\r\nimport {getAllMethods} from \"../utils/utils\";\r\nimport {shuffles} from \"../utils/shuffles\";\r\n\r\n\r\nexport class Controls extends React.Component {\r\n    isControlShow\r\n    arrayVisualizer\r\n    sorts\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.isControlShow = true;\r\n        this.arrayVisualizer = props.arrayVisualizer\r\n        this.sorts = props.sorts\r\n        this.arrayVisualizer.updateArrLength(this.arrayVisualizer.DEFAULT_ARR_LEN)\r\n        // this.arrayVisualizer.initArray(initFunctions.linear)\r\n    }\r\n\r\n    updateArrLength() {\r\n        let slider = document.getElementById(styles.slider)\r\n\r\n        if (slider !== null) {\r\n            let len = slider.value\r\n            this.arrayVisualizer.updateArrLength(len)\r\n        }\r\n    }\r\n\r\n    toggleControlShow() {\r\n        // console.log(styles.controls)\r\n        let controlsContainer = document.getElementById(styles.controlsContainer)\r\n        let controls = document.getElementById(styles.controls)\r\n        let btn = document.getElementById(styles.showToggleBtn)\r\n        if (this.isControlShow) {\r\n            controls.style.display = \"none\"\r\n            controlsContainer.style.width = \"0\"\r\n            btn.innerHTML = \"&gt;&gt;\";\r\n        } else {\r\n            controls.style.display = \"block\"\r\n            controlsContainer.style.width = \"20rem\"\r\n            btn.innerHTML = \"&lt;&lt\";\r\n        }\r\n        this.isControlShow = !this.isControlShow\r\n    }\r\n\r\n    initArray(func){\r\n        this.arrayVisualizer.initArray(func, this.arrayVisualizer.getArrLength(), true)\r\n    }\r\n\r\n    shuffleArray(func){\r\n        this.arrayVisualizer.shuffleArray(func)\r\n    }\r\n\r\n    sortArray(sortName){\r\n        this.sorts.runSort(sortName, 0, this.arrayVisualizer.getArrLength()-1, 10)\r\n    }\r\n\r\n    stopSort(){\r\n        this.arrayVisualizer.stopSort()\r\n    }\r\n\r\n    abortSort(){\r\n        this.stopSort()\r\n        this.initArray(initFunctions.linear)\r\n    }\r\n\r\n    genInitFunctions(){\r\n        // console.log(initFunctions)\r\n        let tmp = []\r\n        for (let i in initFunctions) {\r\n            tmp.push(\r\n                <button key={i} onClick={this.initArray.bind(this, initFunctions[i])}>{i}</button>\r\n            )\r\n        }\r\n        return tmp;\r\n    }\r\n\r\n    getSorts(){\r\n        let tmp = []\r\n        let sortsNames = this.sorts.getSortsPaths()\r\n        for (let i of sortsNames) {\r\n                tmp.push(\r\n                    <button key={i} onClick={this.sortArray.bind(this, i)}>{i}</button>)\r\n        }\r\n        return tmp;\r\n    }\r\n\r\n    getShuffles(){\r\n        let tmp = []\r\n        for(let i in shuffles){\r\n            tmp.push(\r\n                <button key={i} onClick={this.shuffleArray.bind(this, shuffles[i])}>{i}</button>\r\n            )\r\n        }\r\n        return tmp;\r\n    }\r\n\r\n    toggleShowAuxArrays(){\r\n        let element = document.getElementById(\"auxArrShowCB\")\r\n        this.arrayVisualizer.setShowAuxArrays(element.checked)\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div id={styles.controlsContainer}>\r\n                {/*<div onClick={this.toggleControlShow.bind(this)} id={styles.showToggleBtn}>&lt;&lt;</div>*/}\r\n                <div id={styles.controls}>\r\n                    <div>\r\n                        <div className={styles.textCenter}>Array Size</div>\r\n                        <input id={styles.slider} type=\"range\" min=\"10\" max=\"300\" defaultValue={this.arrayVisualizer.DEFAULT_ARR_LEN}\r\n                               step=\"10\"\r\n                               onChange={this.updateArrLength.bind(this)}/>\r\n                        <div className={styles.textCenter}>\r\n                            <div>Visuals</div>\r\n                            <div>\r\n                                <input onChange={this.toggleShowAuxArrays.bind(this)} type=\"checkbox\" id=\"auxArrShowCB\" name=\"auxArrShowCB\" defaultChecked={true}/>\r\n                                    <label htmlFor=\"auxArrShowCB\">Show Aux Arrays</label>\r\n                            </div>\r\n                        </div>\r\n                        <div className={styles.textCenter}>\r\n                            <div>Init Array</div>\r\n                            <div>{this.genInitFunctions()}</div>\r\n                        </div>\r\n\r\n                        <div className={styles.textCenter}>\r\n                            <div>Shuffle Array</div>\r\n                            <div>\r\n                                {/*<button onClick={this.shuffleArray.bind(this)}>Random</button>*/}\r\n                                <div>{this.getShuffles()}</div>\r\n                            </div>\r\n                        </div>\r\n                        <div className={styles.textCenter}>\r\n                            <div>Sort control</div>\r\n                            <div>\r\n                                <button onClick={this.abortSort.bind(this)}>Abort Sort(Recommended)</button>\r\n                                <button onClick={this.stopSort.bind(this)}>Stop Sort(Not Recommended)</button>\r\n                            </div>\r\n                        </div>\r\n                        <div className={styles.textCenter}>\r\n                            <div>Sort Array</div>\r\n                            <div>\r\n                                {this.getSorts()}\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}","export class Delays {\r\n    arrayVisualizer\r\n    timeoutArray\r\n    delays\r\n    delayIncFactor\r\n    delayInc\r\n\r\n\r\n    constructor(arrayVisualizer) {\r\n        this.arrayVisualizer = arrayVisualizer\r\n        this.timeoutArray = []\r\n        this.delays = {\r\n            Swap: 0,\r\n            Write: 0,\r\n            Comp: 0,\r\n            Unmark: 0,\r\n            CreateAuxArray: 0,\r\n            RemoveAuxArray: 0\r\n        }\r\n        this.delayIncFactor = 3000\r\n        // console.log(arrayVisualizer.getArrLength())\r\n        this.delayInc = this.delayIncFactor/arrayVisualizer.getArrLength()\r\n    }\r\n\r\n    push(timeout){\r\n        this.timeoutArray.push(timeout)\r\n    }\r\n\r\n    pushFunc(func, obj, delayName, delay, args) {\r\n        this.timeoutArray.push(setTimeout(func.bind(obj), this.delays[delayName] += delay, args))\r\n    }\r\n\r\n    resetDelays() {\r\n        this.delays = {\r\n            Swap: 0,\r\n            Write: 0,\r\n            Comp: 0,\r\n            Unmark: 0,\r\n            CreateAuxArray: 0,\r\n            RemoveAuxArray: 0\r\n        }\r\n        for (let i of this.timeoutArray) {\r\n            clearTimeout(i);\r\n        }\r\n        this.timeoutArray = []\r\n    }\r\n\r\n    setDelay(name, value){\r\n        this.delays[name] = value\r\n    }\r\n\r\n    incDelay(name, inc=this.delayIncFactor){\r\n        return this.delays[name]+=inc\r\n    }\r\n\r\n    getDelayInc(){\r\n        return this.delayInc\r\n    }\r\n}","export class Sounds{\r\n    arrayVisualizer\r\n    ctx\r\n    Delays\r\n    constructor(arrayVisualizer) {\r\n        this.arrayVisualizer = arrayVisualizer\r\n        this.Delays = arrayVisualizer.getDelays()\r\n        this.ctx = new (window.AudioContext || window.webkitAudioContext)();\r\n    }\r\n    playSound(value) {\r\n        let osc = this.ctx.createOscillator();\r\n        osc.type = 'sine';\r\n\r\n        let k = value / this.arrayVisualizer.getArrLength()\r\n        osc.frequency.value = 2000 * k + 200;\r\n\r\n        let addTime = 50\r\n\r\n        let gainNode = this.ctx.createGain()\r\n        gainNode.gain.value = 0;\r\n        osc.connect(gainNode)\r\n        gainNode.connect(this.ctx.destination)\r\n        // console.log(this.Delays.getDelayInc())\r\n        gainNode.gain.linearRampToValueAtTime(0.05, this.ctx.currentTime + (this.Delays.getDelayInc() + addTime) / 1000 / 2)\r\n        gainNode.gain.linearRampToValueAtTime(0, this.ctx.currentTime + (this.Delays.getDelayInc() + addTime) / 1000)\r\n\r\n        osc.start();\r\n        osc.stop(this.ctx.currentTime + (this.Delays.getDelayInc() + addTime) / 1000);\r\n    }\r\n}","import {randomInt} from \"../utils/utils\";\r\n\r\nconst colors = {\r\n    \"Unmarked\": [255, 255, 255],\r\n    \"Default\": [255, 0, 0],\r\n    \"Additional\": [randomInt(0, 256), randomInt(0, 256), randomInt(0, 256)],\r\n    \"Sorted\": [0, 255, 0],\r\n    \"Analysis\": [0, 0, 255]\r\n}\r\nexport class Marks{\r\n    arrayVisualizer\r\n    Delays\r\n\r\n    constructor(arrayVisualizer) {\r\n        this.arrayVisualizer = arrayVisualizer\r\n        this.Delays = arrayVisualizer.getDelays()\r\n    }\r\n\r\n    mark(index, args, saveArr = true) {\r\n        let type = \"Default\"\r\n        let color = colors[\"Default\"]\r\n        let tmpArr = this.arrayVisualizer.getMainArray()\r\n        // Additional\r\n        if (args.type === \"Additional\") {\r\n            type = \"Additional\"\r\n            color = args.color\r\n            // console.log(color)\r\n        }\r\n        //Default\r\n        else if (!args.type || args.type === \"Default\") {\r\n            type = \"Default\"\r\n            color = colors[\"Default\"]\r\n        } else {\r\n            type = args.type\r\n            color = args.color\r\n        }\r\n\r\n        tmpArr[index].setType(type)\r\n        tmpArr[index].setColor(color)\r\n        if (saveArr) {\r\n            this.arrayVisualizer.setState({\r\n                array: tmpArr\r\n            })\r\n        } else {\r\n            return tmpArr\r\n        }\r\n        // console.log(color);\r\n    }\r\n\r\n    markMany(indexes, args, saveArr) {\r\n        let tmpArr = this.arrayVisualizer.getMainArray()\r\n        for (let i of indexes) {\r\n            if (saveArr) {\r\n                this.mark(i, args, saveArr)\r\n            } else {\r\n                tmpArr = this.mark(i, args, saveArr)\r\n            }\r\n        }\r\n        if (!saveArr) {\r\n            return tmpArr\r\n        }\r\n    }\r\n\r\n    unmark(index, saveArr = true) {\r\n        let tmpArr = this.arrayVisualizer.getMainArray()\r\n        tmpArr[index].setColor(colors[\"Unmarked\"])\r\n        tmpArr[index].setType(\"Unmarked\")\r\n        if (saveArr) {\r\n            this.arrayVisualizer.setState({\r\n                array: tmpArr\r\n            })\r\n        } else {\r\n            return tmpArr\r\n        }\r\n    }\r\n\r\n    unmarkMany(indexes, saveArr, saveOnce) {\r\n        let tmpArr = this.arrayVisualizer.getMainArray()\r\n        for (let i of indexes) {\r\n            if (saveArr) {\r\n                this.unmark(i, saveArr)\r\n            } else {\r\n                tmpArr = this.unmark(i, saveArr)\r\n            }\r\n        }\r\n        if (saveOnce) {\r\n            this.arrayVisualizer.setState({\r\n                array: tmpArr\r\n            })\r\n        }\r\n        if (!saveArr) {\r\n            return tmpArr\r\n        }\r\n    }\r\n\r\n\r\n    markUnmarkMany(markIndexes, markArgs) {\r\n        this.markMany(markIndexes, markArgs, true)\r\n        this.Delays.push(setTimeout(this.unmarkMany.bind(this), this.Delays.incDelay(\"Unmark\", this.Delays.getDelayInc() / 100), markIndexes, false, true))\r\n    }\r\n\r\n\r\n\r\n}","export class Reads{\r\n    arrayVisualizer;\r\n    Sounds\r\n    constructor(arrayVisualizer){\r\n        this.arrayVisualizer = arrayVisualizer\r\n        this.Sounds = arrayVisualizer.getSounds()\r\n    }\r\n    read(index, arr = this.arrayVisualizer.getPseudoArray()) {\r\n        return arr[index].getValue()\r\n    }\r\n\r\n    compare(a, b, sign = \"<\", arr = this.arrayVisualizer.getPseudoArray()) {\r\n        if (sign === \"<\") {\r\n            return arr[a].getValue() < arr[b].getValue()\r\n        } else if (sign === \"<=\") {\r\n            return arr[a].getValue() <= arr[b].getValue()\r\n        } else if (sign === \">\") {\r\n            return arr[a].getValue() > arr[b].getValue()\r\n        } else if (sign === \">=\") {\r\n            return arr[a].getValue() >= arr[b].getValue()\r\n        } else {\r\n            return arr[a].getValue() === arr[b].getValue()\r\n        }\r\n    }\r\n\r\n    auxRead(index, arrIndex, isPseudo = true){\r\n        if(isPseudo){\r\n            return this.arrayVisualizer.getPseudoAuxArrays()[arrIndex][index].getValue()\r\n        }else {\r\n            return this.arrayVisualizer.getAuxArrays()[arrIndex][index].getValue()\r\n        }\r\n    }\r\n\r\n}","import {Element} from \"../classes/Element\";\r\n\r\nexport class Writes{\r\n    arrayVisualizer;\r\n    Sounds\r\n    Delays\r\n    Marks\r\n\r\n    constructor(arrayVisualizer){\r\n        this.arrayVisualizer = arrayVisualizer\r\n        this.Sounds = arrayVisualizer.getSounds()\r\n        this.Delays = arrayVisualizer.getDelays()\r\n        this.Marks = arrayVisualizer.getMarks()\r\n    }\r\n\r\n\r\n\r\n    swapWithDelay(a, b, arr = this.arrayVisualizer.getPseudoArray(), mark, delay = this.Delays.getDelayInc(), playSound) {\r\n        this.Delays.push(setTimeout(this.swapInArr.bind(this), this.Delays.incDelay(\"Write\", delay), a, b, arr, mark, playSound))\r\n    }\r\n\r\n\r\n    swapInArr(a, b, arr = this.arrayVisualizer.getPseudoArray(), mark = true, playSound = false) {\r\n        if(playSound) {\r\n            this.Sounds.playSound(arr[b].getValue());\r\n        }\r\n        let tmpArr = arr\r\n        let tmp = tmpArr[a]\r\n        tmpArr[a] = tmpArr[b]\r\n        tmpArr[b] = tmp\r\n        if (mark) {\r\n            this.Marks.markUnmarkMany([a, b], {type: \"Default\"})\r\n        }\r\n        let curWrites = this.arrayVisualizer.getState().writes;\r\n        this.arrayVisualizer.setState({\r\n            writes: curWrites + 2\r\n        })\r\n    }\r\n\r\n    swap(a, b, arr = this.arrayVisualizer.getPseudoArray()) {\r\n        this.swapInArr(a, b, arr, false, false)\r\n        this.swapWithDelay(a, b, this.arrayVisualizer.getMainArray(), true, this.Delays.getDelayInc(), true)\r\n    }\r\n\r\n    writeInArr(index, value, arr = this.arrayVisualizer.getPseudoArray(), mark = true, playSound = false) {\r\n        if(playSound) {\r\n            this.Sounds.playSound(value)\r\n        }\r\n        arr[index].setValue(value)\r\n        if (mark) {\r\n            this.Marks.markUnmarkMany([index], {type: \"Default\"})\r\n        }\r\n        let curWrites = this.arrayVisualizer.getState().writes;\r\n        this.arrayVisualizer.setState({\r\n            writes: curWrites + 1\r\n        })\r\n    }\r\n\r\n    writeWithDelay(index, value, arr = this.arrayVisualizer.getPseudoArray(), mark, delay = this.Delays.getDelayInc(), playSound = true) {\r\n        this.Delays.push(setTimeout(this.writeInArr.bind(this), this.Delays.incDelay(\"Write\", delay), index, value, arr, mark, playSound))\r\n    }\r\n\r\n    write(index, value, arr = this.arrayVisualizer.getPseudoArray()) {\r\n        this.writeInArr(index, value, arr, false, false)\r\n        this.writeWithDelay(index, value, this.arrayVisualizer.getMainArray(), true, this.Delays.getDelayInc(), true)\r\n    }\r\n\r\n    createAuxArray(len, isPseudo = true){\r\n        if(isPseudo) {\r\n            let pseudoAuxArrays = this.arrayVisualizer.getPseudoAuxArrays()\r\n            let auxArrIndex = pseudoAuxArrays.length\r\n            pseudoAuxArrays.push(this.arrayVisualizer.initArray(() => 0, len, false))\r\n            this.createAuxArrayWithDelay(len, this.Delays.getDelayInc(), false)\r\n            return auxArrIndex\r\n        }else{\r\n            let tmpArr = this.arrayVisualizer.getAuxArrays()\r\n            tmpArr.push(this.arrayVisualizer.initArray(() => 0, len, false))\r\n            this.arrayVisualizer.setState({\r\n                    auxArrays: tmpArr\r\n                }\r\n            )\r\n        }\r\n    }\r\n\r\n    createAuxArrayWithDelay(len, delay, isPseudo = false){\r\n        this.Delays.push(setTimeout(this.createAuxArray.bind(this), this.Delays.incDelay(\"Write\", delay), len, isPseudo))\r\n    }\r\n\r\n    removeAuxArray(index, isPseudo = true){\r\n        if(isPseudo) {\r\n            this.arrayVisualizer.getPseudoAuxArrays().splice(index, 1)\r\n            this.removeAuxArrayWithDelay(index, this.Delays.getDelayInc(), false)\r\n        }else{\r\n            let tmp = this.arrayVisualizer.getAuxArrays()\r\n            tmp.splice(index, 1)\r\n            this.arrayVisualizer.setState({\r\n                auxArrays: tmp\r\n            })\r\n        }\r\n    }\r\n\r\n    removeAuxArrayWithDelay(index, delay, isPseudo = false){\r\n        this.Delays.push(setTimeout(this.removeAuxArray.bind(this), this.Delays.incDelay(\"Write\", delay), index, isPseudo))\r\n    }\r\n\r\n\r\n    auxWrite(index, value, arrIndex, isPseudo = true, playSound = false){\r\n        if(playSound){\r\n            this.Sounds.playSound(value)\r\n        }\r\n        if(isPseudo){\r\n            this.arrayVisualizer.getPseudoAuxArrays()[arrIndex][index].setValue(value)\r\n            this.auxWriteWithDelay(index, value, arrIndex, this.Delays.getDelayInc(), false, true)\r\n        }else{\r\n            this.arrayVisualizer.getAuxArrays()[arrIndex][index].setValue(value)\r\n            let tmp = this.arrayVisualizer.getAuxArrays()\r\n            this.arrayVisualizer.setState({\r\n                auxArrays: tmp\r\n            })\r\n        }\r\n    }\r\n\r\n    auxWriteWithDelay(index, value, arrIndex, delay, isPseudo = false, playSound = true, ){\r\n        this.Delays.push(setTimeout(this.auxWrite.bind(this), this.Delays.incDelay(\"Write\", delay), index, value, arrIndex, isPseudo, playSound))\r\n    }\r\n\r\n}","import React from 'react';\r\nimport {arraysEquals, deepArrayCopy, getAllMethods, randomInt} from \"../utils/utils\";\r\nimport {Sorts} from \"../Sorts/Sorts\"\r\nimport {ArrayWindow} from \"../ArrayWindow/ArrayWindow\";\r\nimport {Element} from \"../classes/Element\";\r\nimport {Stats} from \"../Stats/Stats\";\r\nimport {Controls} from \"../Controls/Controls\";\r\nimport {initFunctions} from \"../utils/initFunctions\";\r\nimport {Delays} from \"../ArrayAccess/Delays\";\r\nimport {Sounds} from \"../ArrayAccess/Sounds\";\r\nimport {Marks} from \"../ArrayAccess/Marks\";\r\nimport {Reads} from \"../ArrayAccess/Reads\";\r\nimport {Writes} from \"../ArrayAccess/Writes\";\r\n\r\nconst colors = {\r\n    \"Unmarked\": [255, 255, 255],\r\n    \"Default\": [255, 0, 0],\r\n    \"Additional\": [randomInt(0, 256), randomInt(0, 256), randomInt(0, 256)],\r\n    \"Sorted\": [0, 255, 0],\r\n    \"Analysis\": [0, 0, 255]\r\n}\r\n\r\nexport class ArrayVisualizer extends React.Component {\r\n    delays;\r\n    delayInc;\r\n    pseudoArray;\r\n    pseudoAuxArrays;\r\n\r\n    Sorts\r\n    delayIncConst\r\n    showAuxArrays\r\n\r\n    Delays\r\n    Sounds\r\n    Marks\r\n    Reads\r\n    Writes\r\n\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.DEFAULT_ARR_LEN = 100\r\n        this.state = {\r\n            array: this.initArray(initFunctions.linear, this.DEFAULT_ARR_LEN),\r\n            sortName: \"\",\r\n            comparisons: 0,\r\n            writes: 0,\r\n            auxArrays: []\r\n        }\r\n        this.pseudoArray = deepArrayCopy(this.state.array)\r\n        this.Delays = new Delays(this)\r\n        this.Sounds = new Sounds(this)\r\n        this.Marks = new Marks(this)\r\n        this.Reads = new Reads(this)\r\n\r\n        this.Writes = new Writes(this)\r\n        this.pseudoAuxArrays = []\r\n        this.Sorts = new Sorts(this);\r\n        this.showAuxArrays = true\r\n    }\r\n\r\n    initArray(func, length, setToState=false) {\r\n        console.log(\"INIT ARR\")\r\n        let arr = []\r\n        for (let i = 0; i < length; ++i) {\r\n            let element = new Element(func(i, length), 0, [255, 255, 255])\r\n            arr.push(element)\r\n        }\r\n        if(setToState){\r\n            this.setState({\r\n                array: arr\r\n            })\r\n        }else {\r\n            return arr;\r\n        }\r\n    }\r\n\r\n    nullify() {\r\n        this.Delays.resetDelays()\r\n        this.setState(\r\n            {\r\n                comparisons: 0,\r\n                writes: 0\r\n            }\r\n        )\r\n        // eslint-disable-next-line react/no-direct-mutation-state\r\n        this.state.writes = 0;\r\n        // eslint-disable-next-line react/no-direct-mutation-state\r\n        this.state.comparisons = 0;\r\n    }\r\n\r\n    getArrayVisualizer() {\r\n        return this;\r\n    }\r\n\r\n    getPseudoArray() {\r\n        return this.pseudoArray;\r\n    }\r\n\r\n    getState(){\r\n        return this.state\r\n    }\r\n\r\n    getArrLength(){\r\n        return this.state.array.length;\r\n    }\r\n\r\n    setShowAuxArrays(val){\r\n        this.showAuxArrays = val\r\n    }\r\n\r\n    getMainArray(){\r\n        return this.state.array\r\n    }\r\n\r\n    getPseudoAuxArrays(){\r\n        return this.pseudoAuxArrays\r\n    }\r\n\r\n    getDelays(){\r\n        return this.Delays\r\n    }\r\n\r\n    getSounds(){\r\n        return this.Sounds;\r\n    }\r\n\r\n    getMarks(){\r\n        return this.Marks;\r\n    }\r\n\r\n    getAuxArrays(){\r\n        return this.state.auxArrays\r\n    }\r\n\r\n    getReads(){\r\n        return this.Reads;\r\n    }\r\n\r\n    getWrites(){\r\n        return this.Writes\r\n    }\r\n\r\n\r\n    stopSort(){\r\n        // this.resetDelay()\r\n        this.Delays.resetDelays()\r\n        this.Marks.unmarkMany(Array.from(Array(this.getArrLength()).keys()), false, true)\r\n        this.setState({\r\n                auxArrays: []\r\n            }\r\n        )\r\n    }\r\n\r\n    shuffleArray(func) {\r\n        this.nullify()\r\n        this.setState({\r\n            sortName: \"Shuffle\"\r\n        })\r\n\r\n        let instructions = func(this.getArrLength());\r\n        for(let i of instructions){\r\n            if(i.cmd === \"swap\"){\r\n                this.Writes.swapWithDelay(i.a, i.b, this.state.array, true, this.Delays.getDelayInc()/5, true)\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    setSortName(sortName){\r\n        this.setState({\r\n            sortName: sortName\r\n        })\r\n    }\r\n\r\n    initPseudoArray(){\r\n        this.pseudoArray = deepArrayCopy(this.state.array)\r\n    }\r\n\r\n    sortClickEvent() {\r\n    }\r\n\r\n\r\n    updateDelayInc(val){\r\n        this.delayInc = val/this.getArrLength();\r\n    }\r\n\r\n    updateArrLength(len){\r\n        this.setState({\r\n            array: this.initArray(initFunctions.linear, len)\r\n        })\r\n        this.pseudoArray = deepArrayCopy(this.state.array)\r\n\r\n        this.Sorts.arrLength = this.getArrLength()\r\n        this.updateDelayInc(this.delayIncConst)\r\n    }\r\n\r\n    genArrayWindows(){\r\n        let tmp = []\r\n        if(this.showAuxArrays) {\r\n            for (let i = this.state.auxArrays.length - 1; i >= 0; i--) {\r\n                tmp.push(\r\n                    <ArrayWindow key={this.state.auxArrays.length - i} array={this.state.auxArrays[i]}\r\n                                 mainArray={this.state.array} height={100 / (1 + this.state.auxArrays.length)}/>\r\n                )\r\n            }\r\n        }\r\n        return tmp\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Stats sortName={this.state.sortName} comparisons={this.state.comparisons} writes={this.state.writes} arrLength={this.getArrLength()}/>\r\n                <div style={{height: \"100vh\"}}>\r\n                {/*<div>*/}\r\n                    {this.genArrayWindows()}\r\n                    <ArrayWindow array={this.state.array} mainArray={this.state.array} height={this.showAuxArrays ? 100/(1+this.state.auxArrays.length) : 100}/>\r\n                </div>\r\n                <div>\r\n                    <Controls arrayVisualizer={this} sorts={this.Sorts}/>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport {ArrayVisualizer} from \"./components/ArrayVisualizer/ArrayVisualizer\";\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\n\r\n\r\n\r\n\r\n\r\nReactDOM.render(\r\n    <ArrayVisualizer></ArrayVisualizer>,\r\n  document.getElementById('root')\r\n);\r\n\r\n\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}