{"version":3,"sources":["components/Sorts/Sort.js","components/Controls/Controls.module.scss","components/ArrayWindow/ArrayWindow.module.scss","components/Sorts/Sorts.js","components/Sorts/InsertionSort.js","components/Stats/Stats.module.scss","components/Sorts sync /^/.*/.js$","components/Sorts/BubbleSort.js","components/Sorts/DualPivotQuickSort.js","components/Sorts/HeapSort.js","components/Sorts/LLQuickSort.js","components/Sorts/LRQuickSort.js","components/Sorts/LSDRadixSort.js","components/Sorts/MergeSort.js","components/Sorts/PseudoTimSort.js","components/Sorts/SelectionSort.js","components/Sorts/SlowSort.js","components/Sorts/StoogeSort.js","components/Sorts/TimSort.js","components/classes/Element.js","components/utils/utils.js","components/ArrayWindow/ArrayWindow.js","components/Stats/Stats.js","components/utils/initFunctions.js","components/utils/shuffles.js","components/Controls/Controls.js","components/ArrayAccess/Delays.js","components/ArrayAccess/Sounds.js","components/ArrayAccess/Marks.js","components/ArrayAccess/Reads.js","components/ArrayAccess/Writes.js","components/ArrayVisualizer/ArrayVisualizer.js","reportWebVitals.js","index.js"],"names":["Sort","arrayVisualizer","this","state","getState","Reads","getReads","Writes","getWrites","compare","bind","read","auxRead","swap","write","createAuxArray","removeAuxArray","auxWrite","arrLength","getArrLength","sortName","warnLen","isDisabled","isNeedBucketsNum","low","high","bucketsNum","module","exports","Sorts","sortsPaths","sortPath","require","getDelays","resetDelays","nullify","sort","getSortObject","getWarnLen","parseInt","prompt","isNaN","window","confirm","initPseudoArray","setSortName","getSortName","runSort","sortClickEvent","InsertionSort","length","i","key","j","map","webpackContext","req","id","webpackContextResolve","__webpack_require__","o","e","Error","code","keys","Object","resolve","BubbleSort","len","DualPivotQuickSort","left","right","divisor","third","Math","trunc","med1","med2","pivot1","pivot2","less","great","k","dualPivot","HeapSort","n","largest","l","r","heapify","LLQuickSort","lo","hi","pivot","p","partition","LRQuickSort","x","quickSort","LSDRadixSort","len2","idx1","idx2","idx3","len1","radix","radixKey","curr","currLen","currBucket","radices","buckets","toString","hasOwnProperty","push","MergeSort","mid","leftArrayLen","rightArrayLen","leftArrayIndex","rightArrayIndex","leftIndex","rightIndex","merge","PseudoTimSort","MIN_MERGE","temp","m","minRun","minRunLength","insertionSort","min","size","timSort","SelectionSort","minIndex","SlowSort","floor","StoogeSort","t","TimSort","minGallop","tmpStorageLength","tmp","stackLength","runStart","Array","runLength","stackSize","runHi","reverseRun","start","value","isAux","hint","lastOffset","maxOffset","offset","mergeAt","start1","length1","start2","length2","gallopRight","gallopLeft","mergeLow","mergeHigh","cursor1","cursor2","dest","count1","count2","exit","customCursor","customDest","remaining","makeAscendingRun","binaryInsertionSort","force","pushRun","mergeRuns","forceMergeRuns","Element","type","color","randomInt","a","b","random","deepArrayCopy","arr","out","getValue","getType","getColor","objLength","obj","undefined","ArrayWindow","props","array","mainArray","height","visualProps","borderEnabled","barsStroke","visualStyle","style","border","styleSheet","backgroundColor","className","styles","bar","bottom","dotContainer","dot","width","arrayContainer","Stats","statsContainer","writes","initFunctions","linear","reverse","pipeOrgan","inversedPipeOrgan","shuffles","fullShuffle","instructions","randomIndex","cmd","almostSorted","randomIndexA","randomIndexB","Controls","isControlShow","sorts","updateArrLength","DEFAULT_ARR_LEN","slider","document","getElementById","controlsContainer","controls","btn","showToggleBtn","display","innerHTML","func","initArray","shuffleArray","stopSort","onClick","sortsNames","getSortsPaths","sortArray","element","setShowAuxArrays","checked","setEnableBarsStroke","console","log","setEnableMarks","val","setVisualStyle","sectionHeader","max","defaultValue","step","onChange","justifyContent","textAlign","checkBoxContainer","toggleShowAuxArrays","name","defaultChecked","htmlFor","toggleBarsStroke","toggleEnableMarks","toggleVisualStyle","genInitFunctions","getShuffles","abortSort","getSorts","React","Component","Delays","timeoutArray","delays","Swap","Write","Comp","Unmark","CreateAuxArray","RemoveAuxArray","delayIncFactor","delayInc","timeout","delayName","delay","args","setTimeout","clearTimeout","inc","Sounds","ctx","AudioContext","webkitAudioContext","osc","createOscillator","frequency","gainNode","createGain","gain","connect","destination","linearRampToValueAtTime","currentTime","getDelayInc","stop","colors","Marks","index","saveArr","getEnableMarks","tmpArr","getMainArray","setType","setColor","setState","indexes","mark","saveOnce","unmark","markIndexes","markArgs","markMany","unmarkMany","incDelay","markUnmarkMany","from","getSounds","getPseudoArray","sign","arrIndex","isPseudo","getPseudoAuxArrays","getAuxArrays","getMarks","playSound","swapInArr","curWrites","swapWithDelay","setValue","writeInArr","writeWithDelay","pseudoAuxArrays","auxArrIndex","createAuxArrayWithDelay","auxArrays","removeAuxArrayWithDelay","auxWriteWithDelay","ArrayVisualizer","comparisons","pseudoArray","showAuxArrays","enableBarsStroke","enableMarks","setToState","forceMainArrayUpdate","clearAllMarks","updateDelayInc","delayIncConst","genArrayWindows","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render"],"mappings":"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","file":"static/js/main.157b1f34.chunk.js","sourcesContent":["export class Sort {\r\n    arrayVisualizer;\r\n\r\n    Reads\r\n    Writes\r\n\r\n    compare;\r\n    swap;\r\n    write;\r\n    read;\r\n\r\n    createAuxArray\r\n    removeAuxArray\r\n\r\n    auxRead\r\n    auxWrite\r\n\r\n    arrLength;\r\n\r\n    sortName;\r\n    warnLen;\r\n    isDisabled;\r\n    isNeedBucketsNum;\r\n\r\n\r\n    constructor(arrayVisualizer) {\r\n        this.arrayVisualizer = arrayVisualizer\r\n        this.state = this.arrayVisualizer.getState()\r\n\r\n        this.Reads = this.arrayVisualizer.getReads()\r\n        this.Writes = this.arrayVisualizer.getWrites()\r\n\r\n        this.compare = this.Reads.compare.bind(this.Reads)\r\n        this.read = this.Reads.read.bind(this.Reads)\r\n        this.auxRead = this.Reads.auxRead.bind(this.Reads)\r\n        this.swap = this.Writes.swap.bind(this.Writes)\r\n        this.write = this.Writes.write.bind(this.Writes)\r\n        this.createAuxArray = this.Writes.createAuxArray.bind(this.Writes)\r\n        this.removeAuxArray = this.Writes.removeAuxArray.bind(this.Writes)\r\n        this.auxWrite = this.Writes.auxWrite.bind(this.Writes)\r\n        this.arrLength = this.arrayVisualizer.getArrLength();\r\n        this.sortName = \"\"\r\n        this.warnLen = -1;\r\n        this.isDisabled = false;\r\n        this.isNeedBucketsNum = false;\r\n    }\r\n\r\n    getSortName(){\r\n        return this.sortName\r\n    }\r\n\r\n    getWarnLen(){\r\n        return this.warnLen\r\n    }\r\n\r\n    runSort(low, high, bucketsNum){\r\n    }\r\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"textCenter\":\"Controls_textCenter__3_8jn\",\"controls\":\"Controls_controls__3X5vt\",\"showToggleBtn\":\"Controls_showToggleBtn__2CbSs\",\"slider\":\"Controls_slider__3IxWj\",\"sectionHeader\":\"Controls_sectionHeader__2EvBB\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"arrayContainer\":\"ArrayWindow_arrayContainer__jfaB8\",\"bar\":\"ArrayWindow_bar__30QYB\",\"dotContainer\":\"ArrayWindow_dotContainer__3porX\",\"dot\":\"ArrayWindow_dot__29TqH\"};","export class Sorts {\r\n    arrayVisualizer;\r\n    sortsPaths\r\n\r\n    constructor(arrayVisualizer) {\r\n        this.arrayVisualizer = arrayVisualizer\r\n        this.sortsPaths = [\"BubbleSort\", \"MergeSort\", \"LLQuickSort\", \"LRQuickSort\", \"DualPivotQuickSort\",\"InsertionSort\", \"SelectionSort\", \"TimSort\", \"PseudoTimSort\", \"HeapSort\", \"LSDRadixSort\",\"SlowSort\", \"StoogeSort\"]\r\n    }\r\n\r\n    getSortsPaths() {\r\n        return this.sortsPaths;\r\n    }\r\n\r\n    getSortObject(sortPath) {\r\n        let Sort = require(\"./\" + sortPath + \".js\")[sortPath]\r\n        return new Sort(this.arrayVisualizer)\r\n    }\r\n\r\n    runSort(sortName, low, high) {\r\n        this.arrayVisualizer.getDelays().resetDelays()\r\n        this.arrayVisualizer.nullify()\r\n        let sort = this.getSortObject(sortName)\r\n        let warnLen = sort.getWarnLen()\r\n        let bucketsNum = 10\r\n        if(sort.isNeedBucketsNum){\r\n            bucketsNum = parseInt(prompt(\"Enter the base:\", \"10\"))\r\n            if(isNaN(bucketsNum)){\r\n                return;\r\n            }\r\n        }\r\n        if (warnLen !== -1 && this.arrayVisualizer.getArrLength() > warnLen && !window.confirm(\"WARNING!!!\\nThe array size(\" + this.arrayVisualizer.getArrLength() + \") \" +\r\n            \"more than recommended(\" + warnLen + \")\\nApplication may freeze\\nDo you want continue?\")) {\r\n            return\r\n        }\r\n        this.arrayVisualizer.initPseudoArray()\r\n        this.arrayVisualizer.setSortName(sort.getSortName())\r\n        sort.runSort(low, high, bucketsNum)\r\n        this.arrayVisualizer.sortClickEvent()\r\n    }\r\n}","import {Sort} from \"./Sort\";\r\n\r\nexport class InsertionSort extends Sort{\r\n    constructor(arrayVisualizer) {\r\n        super(arrayVisualizer);\r\n        this.sortName = \"InsertionSort\"\r\n    }\r\n\r\n    InsertionSort(low, high) {\r\n        let length = high+1;\r\n        for (let i = low+1; i < length; i++) {\r\n            let key = this.read(i);\r\n            let j = i - 1;\r\n            while (j >= 0 && this.read(j) > key) {\r\n                this.write(j + 1, this.read(j))\r\n                j = j - 1;\r\n            }\r\n            this.write(j + 1, key)\r\n        }\r\n    }\r\n\r\n    runSort(low, high) {\r\n        this.InsertionSort(low, high)\r\n    }\r\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"statsContainer\":\"Stats_statsContainer__1qOnq\"};","var map = {\n\t\"./BubbleSort.js\": 26,\n\t\"./DualPivotQuickSort.js\": 27,\n\t\"./HeapSort.js\": 28,\n\t\"./InsertionSort.js\": 15,\n\t\"./LLQuickSort.js\": 29,\n\t\"./LRQuickSort.js\": 30,\n\t\"./LSDRadixSort.js\": 31,\n\t\"./MergeSort.js\": 32,\n\t\"./PseudoTimSort.js\": 33,\n\t\"./SelectionSort.js\": 34,\n\t\"./SlowSort.js\": 35,\n\t\"./Sort.js\": 5,\n\t\"./Sorts.js\": 14,\n\t\"./StoogeSort.js\": 36,\n\t\"./TimSort.js\": 37\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 25;","import {Sort} from \"./Sort\";\r\n\r\nexport class BubbleSort extends Sort{\r\n    constructor(arrayVisualizer) {\r\n        super(arrayVisualizer);\r\n        this.sortName = \"BubbleSort\"\r\n    }\r\n    BubbleSort() {\r\n        let len = this.arrLength;\r\n        for (let i = 0; i < len; i++) {\r\n            for (let j = 0; j < len - i - 1; j++) {\r\n                if (this.compare(j, j + 1, \">\")) {\r\n                    this.swap(j, j + 1)\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    runSort(low, high) {\r\n        this.BubbleSort(low, high)\r\n    }\r\n}","import {Sort} from \"./Sort\";\r\nimport {InsertionSort} from \"./InsertionSort\";\r\n\r\nexport class DualPivotQuickSort extends Sort {\r\n    constructor(arrayVisualizer) {\r\n        super(arrayVisualizer);\r\n        this.sortName = \"Dual Pivot QuickSort\"\r\n    }\r\n\r\n    dualPivot(left, right, divisor) {\r\n        let length = right - left;\r\n\r\n        // insertion sort for tiny array\r\n        if (length < 4) {\r\n            let insertSorter = new InsertionSort(this.arrayVisualizer)\r\n            insertSorter.runSort(left, right)\r\n            return;\r\n        }\r\n        // if(length === 1){\r\n        //     return\r\n        // }\r\n\r\n        let third = Math.trunc(length / divisor);\r\n\r\n// \"medians\"\r\n        let med1 = left + third;\r\n        let med2 = right - third;\r\n\r\n        if (med1 <= left) {\r\n            med1 = left + 1;\r\n        }\r\n        if (med2 >= right) {\r\n            med2 = right - 1;\r\n        }\r\n        if (this.compare(med1, med2, \"<\")) {\r\n            this.swap(med1, left);\r\n            this.swap(med2, right);\r\n        } else {\r\n            this.swap(med1, right);\r\n            this.swap(med2, left);\r\n        }\r\n\r\n// pivots\r\n        let pivot1 = this.read(left);\r\n        let pivot2 = this.read(right);\r\n\r\n// pointers\r\n        let less = left + 1;\r\n        let great = right - 1;\r\n\r\n// sorting\r\n        for (let k = less; k <= great; k++) {\r\n            if (this.read(k) < pivot1) {\r\n                this.swap(k, less++);\r\n            } else if (this.read(k) > pivot2) {\r\n                while (k < great && this.read(great) > pivot2) {\r\n                    great--;\r\n                }\r\n                this.swap(k, great--);\r\n\r\n                if (this.read(k) < pivot1) {\r\n                    this.swap(k, less++);\r\n                }\r\n            }\r\n        }\r\n\r\n// swaps\r\n        let dist = great - less;\r\n\r\n        if (dist < 13) {\r\n            divisor++;\r\n        }\r\n        this.swap(less - 1, left);\r\n        this.swap(great + 1, right);\r\n\r\n// subarrays\r\n        this.dualPivot(left, less - 2, divisor);\r\n        if (pivot1 < pivot2) {\r\n            this.dualPivot(less, great, divisor);\r\n        }\r\n        this.dualPivot(great + 2, right, divisor);\r\n    }\r\n\r\n    runSort(low, high) {\r\n        this.dualPivot(low, high, 3)\r\n    }\r\n}","import {Sort} from \"./Sort\";\r\n\r\nexport class HeapSort extends Sort{\r\n    constructor(arrayVisualizer) {\r\n        super(arrayVisualizer);\r\n        this.sortName = \"HeapSort\"\r\n    }\r\n    \r\n    heapify(n, i) {\r\n        let largest = i;\r\n\r\n        let l = 2 * i + 1;\r\n        let r = 2 * i + 2;\r\n\r\n        if (l < n && this.compare(l, largest, \">\")) {\r\n            largest = l;\r\n        }\r\n        if (r < n && this.compare(r, largest, \">\")) {\r\n            largest = r;\r\n        }\r\n\r\n        if (largest !== i) {\r\n            this.swap(i, largest);\r\n            this.heapify(n, largest);\r\n        }\r\n    }\r\n\r\n    HeapSort() {\r\n        let n = this.arrLength;\r\n\r\n\r\n        for (let i = Math.trunc(n / 2) - 1; i >= 0; i--) {\r\n            this.heapify(n, i);\r\n        }\r\n\r\n        for (let i = n - 1; i >= 0; i--) {\r\n            this.swap(0, i);\r\n            this.heapify(i, 0)\r\n        }\r\n    }\r\n\r\n    runSort(low, high) {\r\n        this.HeapSort(low, high)\r\n    }\r\n}","import {Sort} from \"./Sort\";\r\n\r\nexport class LLQuickSort extends Sort{\r\n    constructor(arrayVisualizer) {\r\n        super(arrayVisualizer);\r\n        this.sortName = \"LLQuickSort\"\r\n    }\r\n    partition(lo, hi) {\r\n        let pivot = hi;\r\n        let i = lo;\r\n        for (let j = lo; j < hi; j++) {\r\n            if (this.compare(j, pivot, \"<\")) {\r\n                this.swap(i, j);\r\n                i++;\r\n            }\r\n        }\r\n        this.swap(i, hi);\r\n        return i;\r\n    }\r\n\r\n    LLQuickSort(lo, hi) {\r\n        if (lo < hi) {\r\n            let p = this.partition(lo, hi);\r\n            this.LLQuickSort(lo, p - 1);\r\n            this.LLQuickSort(p + 1, hi);\r\n        }\r\n    }\r\n    runSort(low, high) {\r\n        this.LLQuickSort(low, high)\r\n    }\r\n}","import {Sort} from \"./Sort\";\r\n\r\nexport class LRQuickSort extends Sort{\r\n    constructor(arrayVisualizer) {\r\n        super(arrayVisualizer);\r\n        this.sortName=\"LRQuickSort\"\r\n    }\r\n\r\n    quickSort(p, r){\r\n        let pivot = Math.trunc(p + (r - p + 1) / 2);\r\n        let x = this.read(pivot);\r\n\r\n        let i = p;\r\n        let j = r;\r\n\r\n        while (i <= j) {\r\n            while (this.read(i) < x){\r\n                i++;\r\n            }\r\n            while (this.read(j) > x){\r\n                j--;\r\n            }\r\n\r\n            if (i <= j) {\r\n                this.swap(i, j);\r\n                i++;\r\n                j--;\r\n            }\r\n        }\r\n\r\n        if(p < j) {\r\n            this.quickSort(p, j);\r\n        }\r\n        if(i < r) {\r\n            this.quickSort(i, r);\r\n        }\r\n    }\r\n\r\n    runSort(low, high) {\r\n        this.quickSort(low, high)\r\n    }\r\n}","import {Sort} from \"./Sort\";\r\n\r\nexport class LSDRadixSort extends Sort{\r\n    constructor(arrayVisualizer) {\r\n        super(arrayVisualizer);\r\n        this.sortName = \"LSD RadixSort\"\r\n        this.isNeedBucketsNum = false;\r\n    }\r\n    LSDRadixSort(len2) {\r\n        // let idx1, idx2, idx3, len1, len2, radix, radixKey;\r\n        let idx1, idx2, idx3, len1, radix, radixKey;\r\n        let radices = {}, buckets = {}, num, curr;\r\n        let currLen, radixStr, currBucket;\r\n\r\n        len1 = this.arrLength;\r\n        // len2 = 10;  // radix sort uses ten buckets\r\n\r\n        // find the relevant radices to process for efficiency\r\n        for (idx1 = 0;idx1 < len1;idx1++) {\r\n            // radices[arr[idx1].toString().length] = 0;\r\n            radices[this.read(idx1).toString().length] = 0;\r\n        }\r\n\r\n        // loop for each radix. For each radix we put all the items\r\n        // in buckets, and then pull them out of the buckets.\r\n        for (radix in radices) {\r\n            // put each array item in a bucket based on its radix value\r\n            len1 = this.arrLength;\r\n            for (idx1 = 0;idx1 < len1;idx1++) {\r\n                // curr = arr[idx1];\r\n                curr = this.read(idx1)\r\n                // item length is used to find its current radix value\r\n                currLen = curr.toString().length;\r\n                // only put the item in a radix bucket if the item\r\n                // key is as long as the radix\r\n                if (currLen >= radix) {\r\n                    // radix starts from beginning of key, so need to\r\n                    // adjust to get redix values from start of stringified key\r\n                    radixKey = curr.toString()[currLen - radix];\r\n                    // create the bucket if it does not already exist\r\n                    if (!buckets.hasOwnProperty(radixKey)) {\r\n                        buckets[radixKey] = [];\r\n                    }\r\n                    // put the array value in the bucket\r\n                    buckets[radixKey].push(curr);\r\n                } else {\r\n                    if (!buckets.hasOwnProperty('0')) {\r\n                        buckets['0'] = [];\r\n                    }\r\n                    buckets['0'].push(curr);\r\n                }\r\n            }\r\n            // for current radix, items are in buckets, now put them\r\n            // back in the array based on their buckets\r\n            // this index moves us through the array as we insert items\r\n            idx1 = 0;\r\n            // go through all the buckets\r\n            for (idx2 = 0;idx2 < len2;idx2++) {\r\n                // only process buckets with items\r\n                if (buckets[idx2] != null) {\r\n                    currBucket = buckets[idx2];\r\n                    // insert all bucket items into array\r\n                    len1 = currBucket.length;\r\n                    for (idx3 = 0;idx3 < len1;idx3++) {\r\n                        // arr[idx1++] = currBucket[idx3];\r\n                        this.write(idx1++, currBucket[idx3])\r\n                    }\r\n                }\r\n            }\r\n            buckets = {};\r\n        }\r\n    }\r\n\r\n    runSort(low, high, bucketsNum) {\r\n        this.LSDRadixSort(10)\r\n    }\r\n}","import {Sort} from \"./Sort\";\r\n\r\nexport class MergeSort extends Sort{\r\n    constructor(arrayVisualizer) {\r\n        super(arrayVisualizer);\r\n        this.sortName = \"MergeSort\"\r\n    }\r\n    merge(low, mid, high) {\r\n        // let leftArray = new Array(mid - low + 1);\r\n        // let rightArray = new Array(high - mid);\r\n\r\n        let leftArrayLen = mid - low + 1\r\n        let rightArrayLen = high - mid\r\n\r\n        let leftArrayIndex = this.createAuxArray(leftArrayLen);\r\n        let rightArrayIndex = this.createAuxArray(rightArrayLen);\r\n\r\n        for (let i = 0; i < leftArrayLen; i++) {\r\n            // leftArray[i] = this.read(low + i)\r\n            this.auxWrite(i, this.read(low + i), leftArrayIndex)\r\n        }\r\n        for (let i = 0; i < rightArrayLen; i++) {\r\n            // rightArray[i] = this.read(mid + i + 1);\r\n            this.auxWrite(i, this.read(mid + i + 1), rightArrayIndex)\r\n        }\r\n\r\n        let leftIndex = 0;\r\n        let rightIndex = 0;\r\n\r\n        for (let i = low; i < high + 1; i++) {\r\n            if (leftIndex < leftArrayLen && rightIndex < rightArrayLen) {\r\n                // if (leftArray[leftIndex] < rightArray[rightIndex]) {\r\n                if (this.auxRead(leftIndex, leftArrayIndex) < this.auxRead(rightIndex, rightArrayIndex)) {\r\n                    this.write(i, this.auxRead(leftIndex, leftArrayIndex))\r\n                    leftIndex++;\r\n                } else {\r\n                    this.write(i, this.auxRead(rightIndex, rightArrayIndex))\r\n                    rightIndex++;\r\n                }\r\n            } else if (leftIndex < leftArrayLen) {\r\n                this.write(i, this.auxRead(leftIndex, leftArrayIndex))\r\n                leftIndex++;\r\n            } else if (rightIndex < rightArrayLen) {\r\n                this.write(i, this.auxRead(rightIndex, rightArrayIndex))\r\n                rightIndex++;\r\n            }\r\n        }\r\n        // console.log(leftArray)\r\n        this.removeAuxArray(leftArrayIndex)\r\n        // console.log(rightArray)\r\n        this.removeAuxArray(rightArrayIndex)\r\n    }\r\n\r\n    MergeSort(low, high) {\r\n        if (high <= low) return;\r\n\r\n        let mid = Math.trunc((low + high) / 2)\r\n        this.MergeSort(low, mid);\r\n        this.MergeSort(mid + 1, high);\r\n        this.merge(low, mid, high);\r\n    }\r\n\r\n    runSort(low, high) {\r\n        this.MergeSort(low, high)\r\n    }\r\n}","import {Sort} from \"./Sort\";\r\n\r\nexport class PseudoTimSort extends Sort {\r\n    MIN_MERGE\r\n    constructor(arrayVisualizer) {\r\n        super(arrayVisualizer);\r\n        this.sortName = \"PseudoTimSort\"\r\n        this.MIN_MERGE = 32\r\n    }\r\n\r\n    minRunLength(n) {\r\n        let r = 0;\r\n        while (n >= this.MIN_MERGE)\r\n        {\r\n            r |= (n & 1);\r\n            n >>= 1;\r\n        }\r\n        return n + r;\r\n    }\r\n\r\n    insertionSort(left, right) {\r\n        for (let i = left + 1; i <= right; i++) {\r\n            let temp = this.read(i);\r\n            let j = i - 1;\r\n            while (j >= left && this.read(j) > temp) {\r\n                this.write(j + 1, this.read(j))\r\n                j--;\r\n            }\r\n            this.write(j + 1, temp)\r\n        }\r\n    }\r\n\r\n    merge(l, m, r) {\r\n        let len1 = m - l + 1, len2 = r - m;\r\n        let left = this.createAuxArray(len1);\r\n        let right = this.createAuxArray(len2);\r\n        for(let x = 0; x < len1; x++)\r\n        {\r\n            // left[x] = arr[l + x];\r\n            this.auxWrite(x, this.read(l+x), left)\r\n        }\r\n        for(let x = 0; x < len2; x++)\r\n        {\r\n            // right[x] = arr[m + 1 + x];\r\n            this.auxWrite(x, this.read(m + 1 + x), right)\r\n        }\r\n\r\n        let i = 0;\r\n        let j = 0;\r\n        let k = l;\r\n\r\n        while (i < len1 && j < len2)\r\n        {\r\n            // if (left[i] <= right[j])\r\n            if(this.auxRead(i, left) <= this.auxRead(j, right))\r\n            {\r\n                // arr[k] = left[i];\r\n                this.write(k, this.auxRead(i, left))\r\n                i++;\r\n            }\r\n            else\r\n            {\r\n                // arr[k] = right[j];\r\n                this.write(k, this.auxRead(j, right))\r\n                j++;\r\n            }\r\n            k++;\r\n        }\r\n\r\n        while (i < len1) {\r\n            // arr[k] = left[i];\r\n            this.write(k, this.auxRead(i, left))\r\n            k++;\r\n            i++;\r\n        }\r\n\r\n        while (j < len2) {\r\n            this.write(k, this.auxRead(j, right))\r\n            k++;\r\n            j++;\r\n        }\r\n        this.removeAuxArray(right)\r\n        this.removeAuxArray(left)\r\n    }\r\n\r\n    timSort(n)\r\n    {\r\n        let minRun = this.minRunLength(this.MIN_MERGE);\r\n\r\n        for(let i = 0; i < n; i += minRun)\r\n        {\r\n            this.insertionSort(i, Math.min(\r\n                (i + this.MIN_MERGE - 1), (n - 1)));\r\n        }\r\n\r\n        for(let size = minRun; size < n; size = 2 * size) {\r\n            for(let left = 0; left < n; left += 2 * size) {\r\n                let mid = left + size - 1;\r\n                let right = Math.min((left + 2 * size - 1), (n - 1));\r\n                if(mid < right) {\r\n                    this.merge(left, mid, right);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    runSort(low, high) {\r\n        this.timSort(high+1)\r\n    }\r\n}","import {Sort} from \"./Sort\";\r\n\r\nexport class SelectionSort extends Sort{\r\n    constructor(arrayVisualizer) {\r\n        super(arrayVisualizer);\r\n        this.sortName = \"SelectionSort\"\r\n    }\r\n\r\n    SelectionSort() {\r\n        for (let i=0; i < this.arrLength; i++) {\r\n            let minIndex = i\r\n            for (let j=i; j < this.arrLength; j++) {\r\n                if (this.compare(j, minIndex, \"<\")) {\r\n                    minIndex = j\r\n                }\r\n            }\r\n\r\n            if (this.compare(i, minIndex, \">\")) {\r\n                this.swap(i, minIndex);\r\n            }\r\n        }\r\n    }\r\n\r\n    runSort(low, high) {\r\n        this.SelectionSort(low, high)\r\n    }\r\n}","import {Sort} from \"./Sort\";\r\n\r\nexport class SlowSort extends Sort{\r\n    constructor(arrayVisualizer) {\r\n        super(arrayVisualizer);\r\n        this.sortName = \"SlowSort\"\r\n        this.warnLen = 120\r\n    }\r\n\r\n    SlowSort(i, j) {\r\n        if (i >= j) {\r\n            return;\r\n        }\r\n        let m = Math.floor((i + j) / 2);\r\n        this.SlowSort(i, m);\r\n        this.SlowSort(m + 1, j);\r\n        if (this.compare(j, m, \"<\")) {\r\n            this.swap(j, m)\r\n        }\r\n        this.SlowSort(i, j - 1)\r\n    }\r\n\r\n    runSort(low, high) {\r\n        this.SlowSort(low, high)\r\n    }\r\n}","import {Sort} from \"./Sort\";\r\n\r\nexport class StoogeSort extends Sort{\r\n    constructor(arrayVisualizer) {\r\n        super(arrayVisualizer);\r\n        this.sortName = \"StoogeSort\"\r\n    }\r\n\r\n    StoogeSort(i, j) {\r\n        if (this.compare(i, j, \">\")) {\r\n            this.swap(i, j)\r\n        }\r\n        if (j - i > 1) {\r\n            let t = Math.trunc((j - i + 1) / 3)\r\n            this.StoogeSort(i, j - t)\r\n            this.StoogeSort(i + t, j)\r\n            this.StoogeSort(i, j - t)\r\n        }\r\n    }\r\n\r\n    runSort(low, high) {\r\n        this.StoogeSort(low, high)\r\n    }\r\n}","import {Sort} from \"./Sort\";\r\n\r\n/**\r\n * Default minimum size of a run.\r\n */\r\nconst DEFAULT_MIN_MERGE = 32\r\n\r\n/**\r\n * Minimum ordered subsequece required to do galloping.\r\n */\r\nconst DEFAULT_MIN_GALLOPING = 7\r\n\r\n/**\r\n * Default tmp storage length. Can increase depending on the size of the\r\n * smallest run to merge.\r\n */\r\nconst DEFAULT_TMP_STORAGE_LENGTH = 256\r\n\r\n/**\r\n * Pre-computed powers of 10 for efficient lexicographic comparison of\r\n * small integers.\r\n */\r\nconst POWERS_OF_TEN = [1e0, 1e1, 1e2, 1e3, 1e4, 1e5, 1e6, 1e7, 1e8, 1e9]\r\n\r\nlet results\r\n\r\n/**\r\n * Estimate the logarithm base 10 of a small integer.\r\n *\r\n * @param {number} x - The integer to estimate the logarithm of.\r\n * @return {number} - The estimated logarithm of the integer.\r\n */\r\nconst log10 = x => x < 1e5\r\n    ? x < 1e2\r\n        ? x < 1e1\r\n            ? 0\r\n            : 1\r\n        : x < 1e4\r\n            ? x < 1e3\r\n                ? 2\r\n                : 3\r\n            : 4\r\n    : x < 1e7\r\n        ? x < 1e6\r\n            ? 5\r\n            : 6\r\n        : x < 1e9\r\n            ? x < 1e8\r\n                ? 7\r\n                : 8\r\n            : 9\r\n\r\n/**\r\n * Default alphabetical comparison of items.\r\n *\r\n * @param {string|object|number} a - First element to compare.\r\n * @param {string|object|number} b - Second element to compare.\r\n * @return {number} - A positive number if a.toString() > b.toString(), a\r\n * negative number if .toString() < b.toString(), 0 otherwise.\r\n */\r\nfunction alphabeticalCompare(a, b) {\r\n    if (a === b) {\r\n        return 0\r\n    }\r\n\r\n    if (~~a === a && ~~b === b) {\r\n        if (a === 0 || b === 0) {\r\n            return a < b ? -1 : 1\r\n        }\r\n\r\n        if (a < 0 || b < 0) {\r\n            if (b >= 0) {\r\n                return -1\r\n            }\r\n\r\n            if (a >= 0) {\r\n                return 1\r\n            }\r\n\r\n            a = -a\r\n            b = -b\r\n        }\r\n\r\n        const al = log10(a)\r\n        const bl = log10(b)\r\n\r\n        let t = 0\r\n\r\n        if (al < bl) {\r\n            a *= POWERS_OF_TEN[bl - al - 1]\r\n            b /= 10\r\n            t = -1\r\n        } else if (al > bl) {\r\n            b *= POWERS_OF_TEN[al - bl - 1]\r\n            a /= 10\r\n            t = 1\r\n        }\r\n\r\n        if (a === b) {\r\n            return t\r\n        }\r\n\r\n        return a < b ? -1 : 1\r\n    }\r\n\r\n    const aStr = String(a)\r\n    const bStr = String(b)\r\n\r\n    if (aStr === bStr) {\r\n        return 0\r\n    }\r\n\r\n    return aStr < bStr ? -1 : 1\r\n}\r\n\r\n/**\r\n * Compute minimum run length for TimSort\r\n *\r\n * @param {number} n - The size of the array to sort.\r\n */\r\nfunction minRunLength(n) {\r\n    let r = 0\r\n\r\n    while (n >= DEFAULT_MIN_MERGE) {\r\n        r |= (n & 1)\r\n        n >>= 1\r\n    }\r\n\r\n    return n + r\r\n}\r\n\r\n/**\r\n * Counts the length of a monotonically ascending or strictly monotonically\r\n * descending sequence (run) starting at array[lo] in the range [lo, hi). If\r\n * the run is descending it is made ascending.\r\n *\r\n * @param {array} array - The array to reverse.\r\n * @param {number} lo - First element in the range (inclusive).\r\n * @param {number} hi - Last element in the range.\r\n * @param {function} compare - Item comparison function.\r\n * @return {number} - The length of the run.\r\n */\r\n\r\nexport class TimSort extends Sort {\r\n    constructor(arrayVisualizer) {\r\n        super(arrayVisualizer);\r\n\r\n        this.minGallop = DEFAULT_MIN_GALLOPING\r\n\r\n        this.tmpStorageLength = this.arrLength < 2 * DEFAULT_TMP_STORAGE_LENGTH\r\n            ? this.arrLength >>> 1\r\n            : DEFAULT_TMP_STORAGE_LENGTH\r\n\r\n        // this.tmp = new Array(this.tmpStorageLength)\r\n        this.tmp = this.createAuxArray(this.tmpStorageLength)\r\n\r\n        this.stackLength = this.arrLength < 120\r\n            ? 5\r\n            : this.arrLength < 1542\r\n                ? 10\r\n                : this.arrLength < 119151\r\n                    ? 19\r\n                    : 40\r\n\r\n        this.runStart = new Array(this.stackLength)\r\n        this.runLength = new Array(this.stackLength)\r\n\r\n        this.stackSize = 0\r\n        this.sortName = \"TimSort\"\r\n    }\r\n\r\n    makeAscendingRun(lo, hi) {\r\n        let runHi = lo + 1\r\n\r\n        if (runHi === hi) {\r\n            return 1\r\n        }\r\n\r\n        // Descending\r\n        // if (compare(array[runHi++], array[lo]) < 0) {\r\n        if (this.compare(runHi++, lo, \"<\")) {\r\n            // while (runHi < hi && compare(array[runHi], array[runHi - 1]) < 0) {\r\n            while (runHi < hi && this.compare(runHi, runHi - 1, \"<\")) {\r\n                runHi++\r\n            }\r\n\r\n            // this.reverseRun(array, lo, runHi)\r\n            this.reverseRun(lo, runHi)\r\n            // reverseRun(results, lo, runHi)\r\n            // Ascending\r\n        } else {\r\n            // while (runHi < hi && compare(array[runHi], array[runHi - 1]) >= 0) {\r\n            while (runHi < hi && this.compare(runHi, runHi - 1, \">=\")) {\r\n                runHi++\r\n            }\r\n        }\r\n\r\n        return runHi - lo\r\n    }\r\n\r\n    /**\r\n     * Reverse an array in the range [lo, hi).\r\n     *\r\n     * @param {array} array - The array to reverse.\r\n     * @param {number} lo - First element in the range (inclusive).\r\n     * @param {number} hi - Last element in the range.\r\n     */\r\n\r\n\r\n    reverseRun(lo, hi) {\r\n        hi--\r\n\r\n        while (lo < hi) {\r\n            // const t = array[lo]\r\n            // array[lo++] = array[hi]\r\n            // array[hi--] = t\r\n            const t = this.read(lo)\r\n            this.write(lo++, this.read(hi))\r\n            this.write(hi--, t)\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Perform the binary sort of the array in the range [lo, hi) where start is\r\n     * the first element possibly out of order.\r\n     *\r\n     * @param {array} array - The array to sort.\r\n     * @param {number} lo - First element in the range (inclusive).\r\n     * @param {number} hi - Last element in the range.\r\n     * @param {number} start - First element possibly out of order.\r\n     * @param {} compare - Item comparison function.\r\n     */\r\n\r\n\r\n    binaryInsertionSort(lo, hi, start) {\r\n        if (start === lo) {\r\n            start++\r\n        }\r\n\r\n        for (; start < hi; start++) {\r\n            // const pivot = array[start]\r\n            const pivot = this.read(start)\r\n\r\n            // const pivotIndex = results[start]\r\n\r\n            // Ranges of the array where pivot belongs\r\n            let left = lo\r\n            let right = start\r\n\r\n            /*\r\n             *   pivot >= array[i] for i in [lo, left)\r\n             *   pivot <  array[i] for i in  in [right, start)\r\n             */\r\n            while (left < right) {\r\n                const mid = (left + right) >>> 1\r\n\r\n                // if (compare(pivot, array[mid]) < 0) {\r\n                if (pivot < this.read(mid)) {\r\n                    right = mid\r\n                } else {\r\n                    left = mid + 1\r\n                }\r\n            }\r\n\r\n            /*\r\n             * Move elements right to make room for the pivot. If there are elements\r\n             * equal to pivot, left points to the first slot after them: this is also\r\n             * a reason for which TimSort is stable\r\n             */\r\n            let n = start - left\r\n            // Switch is just an optimization for small arrays\r\n            switch (n) {\r\n                case 3:\r\n                    // array[left + 3] = array[left + 2]\r\n                    this.write(left + 3, this.read(left + 2))\r\n                /* falls through */\r\n                case 2:\r\n                    // array[left + 2] = array[left + 1]\r\n                    this.write(left + 2, this.read(left + 1))\r\n                /* falls through */\r\n                case 1:\r\n                    // array[left + 1] = array[left]\r\n                    this.write(left + 1, this.read(left))\r\n                    break\r\n                default:\r\n                    while (n > 0) {\r\n                        // array[left + n] = array[left + n - 1]\r\n                        this.write(left + n, this.read(left + n - 1))\r\n                        n--\r\n                    }\r\n            }\r\n\r\n            // array[left] = pivot\r\n            this.write(left, pivot)\r\n            // results[left] = pivotIndex\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Find the position at which to insert a value in a sorted range. If the range\r\n     * contains elements equal to the value the leftmost element index is returned\r\n     * (for stability).\r\n     *\r\n     * @param {number} value - Value to insert.\r\n     * @param {array} array - The array in which to insert value.\r\n     * @param {number} start - First element in the range.\r\n     * @param {number} length - Length of the range.\r\n     * @param {number} hint - The index at which to begin the search.\r\n     * @param {function} compare - Item comparison function.\r\n     * @return {number} - The index where to insert value.\r\n     */\r\n\r\n\r\n    gallopLeft(value, isAux, start, length, hint) {\r\n        let lastOffset = 0\r\n        let maxOffset = 0\r\n        let offset = 1\r\n        if (!isAux) {\r\n            // if (compare(value, array[start + hint]) > 0) {\r\n            if (value > this.read(start + hint)) {\r\n                maxOffset = length - hint\r\n\r\n                while (\r\n                    offset < maxOffset\r\n                    // && compare(value, array[start + hint + offset]) > 0\r\n                    && value > this.read(start + hint + offset)\r\n                    ) {\r\n                    lastOffset = offset\r\n                    offset = (offset << 1) + 1\r\n\r\n                    if (offset <= 0) {\r\n                        offset = maxOffset\r\n                    }\r\n                }\r\n\r\n                if (offset > maxOffset) {\r\n                    offset = maxOffset\r\n                }\r\n\r\n                // Make offsets relative to start\r\n                lastOffset += hint\r\n                offset += hint\r\n\r\n                // value <= array[start + hint]\r\n            } else {\r\n                maxOffset = hint + 1\r\n                while (\r\n                    offset < maxOffset\r\n                    // && compare(value, array[start + hint - offset]) <= 0\r\n                    // && value <= this.read(start + hint + offset)\r\n                    && value <= this.read(start + hint - offset)\r\n                    ) {\r\n                    lastOffset = offset\r\n                    offset = (offset << 1) + 1\r\n\r\n                    if (offset <= 0) {\r\n                        offset = maxOffset\r\n                    }\r\n                }\r\n                if (offset > maxOffset) {\r\n                    offset = maxOffset\r\n                }\r\n\r\n                // Make offsets relative to start\r\n                const tmp = lastOffset\r\n                lastOffset = hint - offset\r\n                offset = hint - tmp\r\n            }\r\n\r\n            /*\r\n             * Now array[start+lastOffset] < value <= array[start+offset], so value\r\n             * belongs somewhere in the range (start + lastOffset, start + offset]. Do a\r\n             * binary search, with invariant array[start + lastOffset - 1] < value <=\r\n             * array[start + offset].\r\n             */\r\n            lastOffset++\r\n            while (lastOffset < offset) {\r\n                const m = lastOffset + ((offset - lastOffset) >>> 1)\r\n\r\n                // if (compare(value, array[start + m]) > 0) {\r\n                if (value > this.read(start + m)) {\r\n                    lastOffset = m + 1\r\n                } else {\r\n                    offset = m\r\n                }\r\n            }\r\n        } else {\r\n            // if (compare(value, array[start + hint]) > 0) {\r\n            if (value > this.auxRead(start + hint, this.tmp)) {\r\n                maxOffset = length - hint\r\n\r\n                while (\r\n                    offset < maxOffset\r\n                    // && compare(value, array[start + hint + offset]) > 0\r\n                    && value > this.auxRead(start + hint + offset, this.tmp)\r\n                    ) {\r\n                    lastOffset = offset\r\n                    offset = (offset << 1) + 1\r\n\r\n                    if (offset <= 0) {\r\n                        offset = maxOffset\r\n                    }\r\n                }\r\n\r\n                if (offset > maxOffset) {\r\n                    offset = maxOffset\r\n                }\r\n\r\n                // Make offsets relative to start\r\n                lastOffset += hint\r\n                offset += hint\r\n\r\n                // value <= array[start + hint]\r\n            } else {\r\n                maxOffset = hint + 1\r\n                while (\r\n                    offset < maxOffset\r\n                    // && compare(value, array[start + hint - offset]) <= 0\r\n                    // && value <= this.auxRead(start + hint + offset, this.tmp)\r\n                    && value <= this.auxRead(start + hint - offset, this.tmp)\r\n                    ) {\r\n                    lastOffset = offset\r\n                    offset = (offset << 1) + 1\r\n\r\n                    if (offset <= 0) {\r\n                        offset = maxOffset\r\n                    }\r\n                }\r\n                if (offset > maxOffset) {\r\n                    offset = maxOffset\r\n                }\r\n\r\n                // Make offsets relative to start\r\n                const tmp = lastOffset\r\n                lastOffset = hint - offset\r\n                offset = hint - tmp\r\n            }\r\n\r\n            /*\r\n             * Now array[start+lastOffset] < value <= array[start+offset], so value\r\n             * belongs somewhere in the range (start + lastOffset, start + offset]. Do a\r\n             * binary search, with invariant array[start + lastOffset - 1] < value <=\r\n             * array[start + offset].\r\n             */\r\n            lastOffset++\r\n            while (lastOffset < offset) {\r\n                const m = lastOffset + ((offset - lastOffset) >>> 1)\r\n\r\n                // if (compare(value, array[start + m]) > 0) {\r\n                if (value > this.auxRead(start + m, this.tmp)) {\r\n                    lastOffset = m + 1\r\n                } else {\r\n                    offset = m\r\n                }\r\n            }\r\n        }\r\n        return offset\r\n    }\r\n\r\n    /**\r\n     * Find the position at which to insert a value in a sorted range. If the range\r\n     * contains elements equal to the value the rightmost element index is returned\r\n     * (for stability).\r\n     *\r\n     * @param {number} value - Value to insert.\r\n     * @param {array} array - The array in which to insert value.\r\n     * @param {number} start - First element in the range.\r\n     * @param {number} length - Length of the range.\r\n     * @param {number} hint - The index at which to begin the search.\r\n     * @param {function} compare - Item comparison function.\r\n     * @return {number} - The index where to insert value.\r\n     */\r\n\r\n\r\n    gallopRight(value, isAux, start, length, hint) {\r\n        let lastOffset = 0\r\n        let maxOffset = 0\r\n        let offset = 1\r\n\r\n        if (!isAux) {\r\n            // if (compare(value, array[start + hint]) < 0) {\r\n            if (value < this.read(start + hint)) {\r\n                maxOffset = hint + 1\r\n\r\n                while (\r\n                    offset < maxOffset\r\n                    // && compare(value, array[start + hint - offset]) < 0\r\n                    && value < this.read(start + hint - offset)\r\n                    ) {\r\n                    lastOffset = offset\r\n                    offset = (offset << 1) + 1\r\n\r\n                    if (offset <= 0) {\r\n                        offset = maxOffset\r\n                    }\r\n                }\r\n\r\n                if (offset > maxOffset) {\r\n                    offset = maxOffset\r\n                }\r\n\r\n                // Make offsets relative to start\r\n                const tmp = lastOffset\r\n                lastOffset = hint - offset\r\n                offset = hint - tmp\r\n\r\n                // value >= array[start + hint]\r\n            } else {\r\n                maxOffset = length - hint\r\n\r\n                while (\r\n                    offset < maxOffset\r\n                    // && compare(value, array[start + hint + offset]) >= 0\r\n                    && value >= this.read(start + hint + offset)\r\n                    ) {\r\n                    lastOffset = offset\r\n                    offset = (offset << 1) + 1\r\n\r\n                    if (offset <= 0) {\r\n                        offset = maxOffset\r\n                    }\r\n                }\r\n\r\n                if (offset > maxOffset) {\r\n                    offset = maxOffset\r\n                }\r\n\r\n                // Make offsets relative to start\r\n                lastOffset += hint\r\n                offset += hint\r\n            }\r\n\r\n            /*\r\n             * Now array[start+lastOffset] < value <= array[start+offset], so value\r\n             * belongs somewhere in the range (start + lastOffset, start + offset]. Do a\r\n             * binary search, with invariant array[start + lastOffset - 1] < value <=\r\n             * array[start + offset].\r\n             */\r\n            lastOffset++\r\n\r\n            while (lastOffset < offset) {\r\n                const m = lastOffset + ((offset - lastOffset) >>> 1)\r\n\r\n                // if (compare(value, array[start + m]) < 0) {\r\n                if (value < this.read(start + m)) {\r\n                    offset = m\r\n                } else {\r\n                    lastOffset = m + 1\r\n                }\r\n            }\r\n\r\n        } else {\r\n            //AUX\r\n            // if (compare(value, array[start + hint]) < 0) {\r\n            if (value < this.auxRead(start + hint, this.tmp)) {\r\n                maxOffset = hint + 1\r\n\r\n                while (\r\n                    offset < maxOffset\r\n                    // && compare(value, array[start + hint - offset]) < 0\r\n                    && value < this.auxRead(start + hint - offset, this.tmp)\r\n                    ) {\r\n                    lastOffset = offset\r\n                    offset = (offset << 1) + 1\r\n\r\n                    if (offset <= 0) {\r\n                        offset = maxOffset\r\n                    }\r\n                }\r\n\r\n                if (offset > maxOffset) {\r\n                    offset = maxOffset\r\n                }\r\n\r\n                // Make offsets relative to start\r\n                const tmp = lastOffset\r\n                lastOffset = hint - offset\r\n                offset = hint - tmp\r\n\r\n                // value >= array[start + hint]\r\n            } else {\r\n                maxOffset = length - hint\r\n\r\n                while (\r\n                    offset < maxOffset\r\n                    // && compare(value, array[start + hint + offset]) >= 0\r\n                    && value >= this.auxRead(start + hint + offset, this.tmp)\r\n                    ) {\r\n                    lastOffset = offset\r\n                    offset = (offset << 1) + 1\r\n\r\n                    if (offset <= 0) {\r\n                        offset = maxOffset\r\n                    }\r\n                }\r\n\r\n                if (offset > maxOffset) {\r\n                    offset = maxOffset\r\n                }\r\n\r\n                // Make offsets relative to start\r\n                lastOffset += hint\r\n                offset += hint\r\n            }\r\n\r\n            /*\r\n             * Now array[start+lastOffset] < value <= array[start+offset], so value\r\n             * belongs somewhere in the range (start + lastOffset, start + offset]. Do a\r\n             * binary search, with invariant array[start + lastOffset - 1] < value <=\r\n             * array[start + offset].\r\n             */\r\n            lastOffset++\r\n\r\n            while (lastOffset < offset) {\r\n                const m = lastOffset + ((offset - lastOffset) >>> 1)\r\n\r\n                // if (compare(value, array[start + m]) < 0) {\r\n                if (value < this.auxRead(start + m, this.tmp)) {\r\n                    offset = m\r\n                } else {\r\n                    lastOffset = m + 1\r\n                }\r\n            }\r\n        }\r\n\r\n        return offset\r\n    }\r\n\r\n\r\n    /**\r\n     * Push a new run on TimSort's stack.\r\n     *\r\n     * @param {number} runStart - Start index of the run in the original array.\r\n     * @param {number} runLength - Length of the run;\r\n     */\r\n    pushRun(runStart, runLength) {\r\n        this.runStart[this.stackSize] = runStart\r\n        this.runLength[this.stackSize] = runLength\r\n        this.stackSize += 1\r\n    }\r\n\r\n    /**\r\n     * Merge runs on TimSort's stack so that the following holds for all i:\r\n     * 1) runLength[i - 3] > runLength[i - 2] + runLength[i - 1]\r\n     * 2) runLength[i - 2] > runLength[i - 1]\r\n     */\r\n    mergeRuns() {\r\n        while (this.stackSize > 1) {\r\n            let n = this.stackSize - 2\r\n\r\n            if (\r\n                (\r\n                    n >= 1\r\n                    && this.runLength[n - 1] <= this.runLength[n] + this.runLength[n + 1]\r\n                )\r\n                || (\r\n                    n >= 2\r\n                    && this.runLength[n - 2] <= this.runLength[n] + this.runLength[n - 1]\r\n                )\r\n            ) {\r\n                if (this.runLength[n - 1] < this.runLength[n + 1]) {\r\n                    n--\r\n                }\r\n            } else if (this.runLength[n] > this.runLength[n + 1]) {\r\n                break\r\n            }\r\n            this.mergeAt(n)\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Merge all runs on TimSort's stack until only one remains.\r\n     */\r\n    forceMergeRuns() {\r\n        while (this.stackSize > 1) {\r\n            let n = this.stackSize - 2\r\n\r\n            if (n > 0 && this.runLength[n - 1] < this.runLength[n + 1]) {\r\n                n--\r\n            }\r\n\r\n            this.mergeAt(n)\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Merge the runs on the stack at positions i and i+1. Must be always be called\r\n     * with i=stackSize-2 or i=stackSize-3 (that is, we merge on top of the stack).\r\n     *\r\n     * @param {number} i - Index of the run to merge in TimSort's stack.\r\n     */\r\n    mergeAt(i) {\r\n        let start1 = this.runStart[i]\r\n        let length1 = this.runLength[i]\r\n        const start2 = this.runStart[i + 1]\r\n        let length2 = this.runLength[i + 1]\r\n\r\n        this.runLength[i] = length1 + length2\r\n\r\n        if (i === this.stackSize - 3) {\r\n            this.runStart[i + 1] = this.runStart[i + 2]\r\n            this.runLength[i + 1] = this.runLength[i + 2]\r\n        }\r\n\r\n        this.stackSize--\r\n\r\n        /*\r\n         * Find where the first element in the second run goes in run1. Previous\r\n         * elements in run1 are already in place\r\n         */\r\n        // const k = gallopRight(array[start2], array, start1, length1, 0, compare)\r\n        const k = this.gallopRight(this.read(start2), false, start1, length1, 0)\r\n        start1 += k\r\n        length1 -= k\r\n\r\n        if (length1 === 0) {\r\n            return\r\n        }\r\n\r\n        /*\r\n         * Find where the last element in the first run goes in run2. Next elements\r\n         * in run2 are already in place\r\n         */\r\n        // length2 = gallopLeft(\r\n        //     array[start1 + length1 - 1],\r\n        //     array,\r\n        //     start2,\r\n        //     length2,\r\n        //     length2 - 1,\r\n        //     compare\r\n        // )\r\n        length2 = this.gallopLeft(\r\n            // array[start1 + length1 - 1],\r\n            this.read(start1 + length1 - 1),\r\n            false,\r\n            start2,\r\n            length2,\r\n            length2 - 1,\r\n        )\r\n\r\n        if (length2 === 0) {\r\n            return\r\n        }\r\n\r\n        /*\r\n         * Merge remaining runs. A tmp array with length = min(length1, length2) is\r\n         * used\r\n         */\r\n        if (length1 <= length2) {\r\n            this.mergeLow(start1, length1, start2, length2)\r\n        } else {\r\n            this.mergeHigh(start1, length1, start2, length2)\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Merge two adjacent runs in a stable way. The runs must be such that the\r\n     * first element of run1 is bigger than the first element in run2 and the\r\n     * last element of run1 is greater than all the elements in run2.\r\n     * The method should be called when run1.length <= run2.length as it uses\r\n     * TimSort temporary array to store run1. Use mergeHigh if run1.length >\r\n     * run2.length.\r\n     *\r\n     * @param {number} start1 - First element in run1.\r\n     * @param {number} length1 - Length of run1.\r\n     * @param {number} start2 - First element in run2.\r\n     * @param {number} length2 - Length of run2.\r\n     */\r\n    mergeLow(start1, length1, start2, length2) {\r\n        // const {compare} = this\r\n        // const {array} = this\r\n        // const {tmp} = this\r\n        // const {tmpIndex} = this\r\n        // const {compare} = this\r\n        // const {array} = this\r\n        // const {tmp} = this\r\n        // const {tmpIndex} = this\r\n        let i = 0\r\n\r\n        for (i = 0; i < length1; i++) {\r\n            // tmp[i] = array[start1 + i]\r\n            this.auxWrite(i, this.read(start1 + i), this.tmp)\r\n        }\r\n\r\n        let cursor1 = 0\r\n        let cursor2 = start2\r\n        let dest = start1\r\n\r\n\r\n        // array[dest] = array[cursor2]\r\n        this.write(dest, this.read(cursor2))\r\n\r\n\r\n        dest++\r\n        cursor2++\r\n\r\n        if (--length2 === 0) {\r\n            for (i = 0; i < length1; i++) {\r\n                // array[dest + i] = tmp[cursor1 + i]\r\n                this.write(dest + i, this.auxRead(cursor1 + i, this.tmp))\r\n            }\r\n            return\r\n        }\r\n\r\n        if (length1 === 1) {\r\n            for (i = 0; i < length2; i++) {\r\n                // array[dest + i] = array[cursor2 + i]\r\n\r\n                this.write(dest + i, this.read(cursor2 + i))\r\n            }\r\n            // array[dest + length2] = tmp[cursor1]\r\n            this.write(dest + length2, this.auxRead(cursor1, this.tmp))\r\n            return\r\n        }\r\n\r\n        let {minGallop} = this\r\n\r\n        while (true) {\r\n            let count1 = 0\r\n            let count2 = 0\r\n            let exit = false\r\n\r\n            do {\r\n                // if (compare(array[cursor2], tmp[cursor1]) < 0) {\r\n                if (this.read(cursor2) < this.auxRead(cursor1, this.tmp)) {\r\n                    // array[dest] = array[cursor2]\r\n                    this.write(dest, this.read(cursor2))\r\n                    dest++\r\n                    cursor2++\r\n                    count2++\r\n                    count1 = 0\r\n\r\n                    if (--length2 === 0) {\r\n                        exit = true\r\n                        break\r\n                    }\r\n                } else {\r\n                    // array[dest] = tmp[cursor1]\r\n                    this.write(dest, this.auxRead(cursor1, this.tmp))\r\n\r\n                    dest++\r\n                    cursor1++\r\n                    count1++\r\n                    count2 = 0\r\n                    if (--length1 === 1) {\r\n                        exit = true\r\n                        break\r\n                    }\r\n                }\r\n            } while ((count1 | count2) < minGallop)\r\n\r\n            if (exit) {\r\n                break\r\n            }\r\n\r\n            do {\r\n                // count1 = gallopRight(array[cursor2], tmp, cursor1, length1, 0, compare)\r\n                count1 = this.gallopRight(this.read(cursor2), true, cursor1, length1, 0)\r\n\r\n                if (count1 !== 0) {\r\n                    for (i = 0; i < count1; i++) {\r\n                        // array[dest + i] = tmp[cursor1 + i]\r\n                        // results[dest + i] = tmpIndex[cursor1 + i]\r\n                        this.write(dest + i, this.auxRead(cursor1 + i, this.tmp))\r\n                    }\r\n\r\n                    dest += count1\r\n                    cursor1 += count1\r\n                    length1 -= count1\r\n                    if (length1 <= 1) {\r\n                        exit = true\r\n                        break\r\n                    }\r\n                }\r\n\r\n                // array[dest] = array[cursor2]\r\n                // results[dest] = results[cursor2]\r\n                this.write(dest, this.read(cursor2))\r\n\r\n                dest++\r\n                cursor2++\r\n\r\n                if (--length2 === 0) {\r\n                    exit = true\r\n                    break\r\n                }\r\n\r\n                // count2 = this.gallopLeft(tmp[cursor1], array, cursor2, length2, 0, compare)\r\n                count2 = this.gallopLeft(this.auxRead(cursor1, this.tmp), false, cursor2, length2, 0)\r\n\r\n                if (count2 !== 0) {\r\n                    for (i = 0; i < count2; i++) {\r\n                        // array[dest + i] = array[cursor2 + i]\r\n                        // results[dest + i] = results[cursor2 + i]\r\n                        this.write(dest + i, this.read(cursor2 + i))\r\n                    }\r\n\r\n                    dest += count2\r\n                    cursor2 += count2\r\n                    length2 -= count2\r\n\r\n                    if (length2 === 0) {\r\n                        exit = true\r\n                        break\r\n                    }\r\n                }\r\n                // array[dest] = tmp[cursor1]\r\n                // results[dest] = tmpIndex[cursor1]\r\n\r\n                this.write(dest, this.auxRead(cursor1, this.tmp))\r\n\r\n                dest++\r\n                cursor1++\r\n\r\n                if (--length1 === 1) {\r\n                    exit = true\r\n                    break\r\n                }\r\n\r\n                minGallop--\r\n            } while (\r\n                count1 >= DEFAULT_MIN_GALLOPING\r\n                || count2 >= DEFAULT_MIN_GALLOPING\r\n                )\r\n\r\n            if (exit) {\r\n                break\r\n            }\r\n\r\n            if (minGallop < 0) {\r\n                minGallop = 0\r\n            }\r\n\r\n            minGallop += 2\r\n        }\r\n\r\n        this.minGallop = minGallop\r\n\r\n        if (minGallop < 1) {\r\n            this.minGallop = 1\r\n        }\r\n\r\n        if (length1 === 1) {\r\n            for (i = 0; i < length2; i++) {\r\n                // array[dest + i] = array[cursor2 + i]\r\n                // results[dest + i] = results[cursor2 + i]\r\n                this.write(dest + i, this.read(cursor2 + i))\r\n            }\r\n            // array[dest + length2] = tmp[cursor1]\r\n            // results[dest + length2] = tmpIndex[cursor1]\r\n            this.write(dest + length2, this.auxRead(cursor1, this.tmp))\r\n        } else if (length1 === 0) {\r\n            throw new Error('mergeLow preconditions were not respected')\r\n        } else {\r\n            for (i = 0; i < length1; i++) {\r\n                // array[dest + i] = tmp[cursor1 + i]\r\n                // results[dest + i] = tmpIndex[cursor1 + i]\r\n                this.write(dest + i, this.auxRead(cursor1 + i, this.tmp))\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Merge two adjacent runs in a stable way. The runs must be such that the\r\n     * first element of run1 is bigger than the first element in run2 and the\r\n     * last element of run1 is greater than all the elements in run2.\r\n     * The method should be called when run1.length > run2.length as it uses\r\n     * TimSort temporary array to store run2. Use mergeLow if run1.length <=\r\n     * run2.length.\r\n     *\r\n     * @param {number} start1 - First element in run1.\r\n     * @param {number} length1 - Length of run1.\r\n     * @param {number} start2 - First element in run2.\r\n     * @param {number} length2 - Length of run2.\r\n     */\r\n    mergeHigh(start1, length1, start2, length2) {\r\n        // const {compare} = this\r\n        // const {array} = this\r\n        // const {tmp} = this\r\n        // const {tmpIndex} = this\r\n        let i = 0\r\n\r\n        for (i = 0; i < length2; i++) {\r\n            // tmp[i] = array[start2 + i]\r\n            this.auxWrite(i, this.read(start2 + i), this.tmp)\r\n        }\r\n\r\n        let cursor1 = start1 + length1 - 1\r\n        let cursor2 = length2 - 1\r\n        let dest = start2 + length2 - 1\r\n        let customCursor = 0\r\n        let customDest = 0\r\n\r\n        // array[dest] = array[cursor1]\r\n        this.write(dest, this.read(cursor1))\r\n\r\n        dest--\r\n        cursor1--\r\n\r\n        if (--length1 === 0) {\r\n            customCursor = dest - (length2 - 1)\r\n\r\n            for (i = 0; i < length2; i++) {\r\n                // array[customCursor + i] = tmp[i]\r\n                this.write(customCursor + i, this.auxRead(i, this.tmp))\r\n            }\r\n\r\n            return\r\n        }\r\n\r\n        if (length2 === 1) {\r\n            dest -= length1\r\n            cursor1 -= length1\r\n            customDest = dest + 1\r\n            customCursor = cursor1 + 1\r\n\r\n            for (i = length1 - 1; i >= 0; i--) {\r\n                // array[customDest + i] = array[customCursor + i]\r\n                this.write(customDest + i, this.read(customCursor + i))\r\n            }\r\n\r\n            // array[dest] = tmp[cursor2]\r\n            this.write(dest, this.auxRead(cursor2, this.tmp))\r\n            return\r\n        }\r\n\r\n        let {minGallop} = this\r\n\r\n        while (true) {\r\n            let count1 = 0\r\n            let count2 = 0\r\n            let exit = false\r\n\r\n            do {\r\n                // if (compare(tmp[cursor2], array[cursor1]) < 0) {\r\n                if (this.auxRead(cursor2, this.tmp) < this.read(cursor1)) {\r\n                    // array[dest] = array[cursor1]\r\n                    this.write(dest, this.read(cursor1))\r\n                    dest--\r\n                    cursor1--\r\n                    count1++\r\n                    count2 = 0\r\n                    if (--length1 === 0) {\r\n                        exit = true\r\n                        break\r\n                    }\r\n                } else {\r\n                    // array[dest] = tmp[cursor2]\r\n                    this.write(dest, this.auxRead(cursor2, this.tmp))\r\n                    dest--\r\n                    cursor2--\r\n                    count2++\r\n                    count1 = 0\r\n                    if (--length2 === 1) {\r\n                        exit = true\r\n                        break\r\n                    }\r\n                }\r\n            } while ((count1 | count2) < minGallop)\r\n\r\n            if (exit) {\r\n                break\r\n            }\r\n\r\n            do {\r\n                // count1 = length1 - gallopRight(\r\n                //     tmp[cursor2],\r\n                //     array,\r\n                //     start1,\r\n                //     length1,\r\n                //     length1 - 1,\r\n                //     compare\r\n                // )\r\n                count1 = length1 - this.gallopRight(\r\n                    this.auxRead(cursor2, this.tmp),\r\n                    false,\r\n                    start1,\r\n                    length1,\r\n                    length1 - 1\r\n                )\r\n\r\n                if (count1 !== 0) {\r\n                    dest -= count1\r\n                    cursor1 -= count1\r\n                    length1 -= count1\r\n                    customDest = dest + 1\r\n                    customCursor = cursor1 + 1\r\n\r\n                    for (i = count1 - 1; i >= 0; i--) {\r\n                        // array[customDest + i] = array[customCursor + i]\r\n                        this.write(customDest + i, this.read(customCursor + i))\r\n                    }\r\n\r\n                    if (length1 === 0) {\r\n                        exit = true\r\n                        break\r\n                    }\r\n                }\r\n\r\n                // array[dest] = tmp[cursor2]\r\n                this.write(dest, this.auxRead(cursor2, this.tmp))\r\n\r\n                dest--\r\n                cursor2--\r\n\r\n                if (--length2 === 1) {\r\n                    exit = true\r\n                    break\r\n                }\r\n\r\n                // count2 = length2 - gallopLeft(\r\n                //     array[cursor1],\r\n                //     tmp,\r\n                //     0,\r\n                //     length2,\r\n                //     length2 - 1,\r\n                //     compare\r\n                // )\r\n\r\n                count2 = length2 - this.gallopLeft(\r\n                    this.read(cursor1),\r\n                    true,\r\n                    0,\r\n                    length2,\r\n                    length2 - 1\r\n                )\r\n\r\n                if (count2 !== 0) {\r\n                    dest -= count2\r\n                    cursor2 -= count2\r\n                    length2 -= count2\r\n                    customDest = dest + 1\r\n                    customCursor = cursor2 + 1\r\n\r\n                    for (i = 0; i < count2; i++) {\r\n                        // array[customDest + i] = tmp[customCursor + i]\r\n                        this.write(customDest + i, this.auxRead(customCursor + i, this.tmp))\r\n                    }\r\n\r\n                    if (length2 <= 1) {\r\n                        exit = true\r\n                        break\r\n                    }\r\n                }\r\n\r\n                // array[dest] = array[cursor1]\r\n                this.write(dest, this.read(cursor1))\r\n\r\n                dest--\r\n                cursor1--\r\n\r\n                if (--length1 === 0) {\r\n                    exit = true\r\n                    break\r\n                }\r\n\r\n                minGallop--\r\n            } while (\r\n                count1 >= DEFAULT_MIN_GALLOPING\r\n                || count2 >= DEFAULT_MIN_GALLOPING\r\n                )\r\n\r\n            if (exit) {\r\n                break\r\n            }\r\n\r\n            if (minGallop < 0) {\r\n                minGallop = 0\r\n            }\r\n\r\n            minGallop += 2\r\n        }\r\n\r\n        this.minGallop = minGallop\r\n\r\n        if (minGallop < 1) {\r\n            this.minGallop = 1\r\n        }\r\n\r\n        if (length2 === 1) {\r\n            dest -= length1\r\n            cursor1 -= length1\r\n            customDest = dest + 1\r\n            customCursor = cursor1 + 1\r\n\r\n            for (i = length1 - 1; i >= 0; i--) {\r\n                // array[customDest + i] = array[customCursor + i]\r\n                this.write(customDest + i, this.read(customCursor + i))\r\n            }\r\n\r\n            // array[dest] = tmp[cursor2]\r\n            // results[dest] = tmpIndex[cursor2]\r\n\r\n            this.write(dest, this.auxRead(cursor2, this.tmp))\r\n\r\n\r\n        } else if (length2 === 0) {\r\n            throw new Error('mergeHigh preconditions were not respected')\r\n        } else {\r\n            customCursor = dest - (length2 - 1)\r\n            for (i = 0; i < length2; i++) {\r\n                // array[customCursor + i] = tmp[i]\r\n                this.write(customCursor + i, this.auxRead(i, this.tmp))\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    /**\r\n     * Sort an array in the range [lo, hi) using TimSort.\r\n     *\r\n     * @param {array} array - The array to sort.\r\n     * @param {function=} compare - Item comparison function. Default is\r\n     *     alphabetical\r\n     * @param {number} lo - First element in the range (inclusive).\r\n     * @param {number} hi - Last element in the range.\r\n     *     comparator.\r\n     */\r\n    runSort(low, high) {\r\n        this.sort(low, high+1)\r\n    }\r\n\r\n    sort(lo, hi) {\r\n\r\n        let i = 0\r\n\r\n        let remaining = hi - lo\r\n\r\n        // The array is already sorted\r\n        if (remaining < 2) {\r\n            return results\r\n        }\r\n\r\n        let runLength = 0\r\n        // On small arrays binary sort can be used directly\r\n        if (remaining < DEFAULT_MIN_MERGE) {\r\n            runLength = this.makeAscendingRun(lo, hi)\r\n            this.binaryInsertionSort(lo, hi, lo + runLength)\r\n        }\r\n\r\n\r\n        const minRun = minRunLength(remaining)\r\n\r\n        do {\r\n            runLength = this.makeAscendingRun(lo, hi)\r\n            if (runLength < minRun) {\r\n                let force = remaining\r\n                if (force > minRun) {\r\n                    force = minRun\r\n                }\r\n\r\n                this.binaryInsertionSort(lo, lo + force, lo + runLength)\r\n                runLength = force\r\n            }\r\n            // Push new run and merge if necessary\r\n            this.pushRun(lo, runLength)\r\n            this.mergeRuns()\r\n\r\n            // Go find next run\r\n            remaining -= runLength\r\n            lo += runLength\r\n        } while (remaining !== 0)\r\n\r\n        // Force merging of remaining runs\r\n        this.forceMergeRuns()\r\n        this.removeAuxArray(this.tmp)\r\n    }\r\n}","const types = {\r\n\r\n}\r\n\r\nconst colors = {\r\n\r\n}\r\n\r\nexport class Element{\r\n\r\n    value;\r\n    color;\r\n    type;\r\n\r\n    // constructor(args){\r\n    //     this.value = args.value;\r\n    //     this.type = args.type;\r\n    //     this.color = args.color || colors[args.type];\r\n    // }\r\n\r\n    constructor(value, type, color) {\r\n            this.value = value;\r\n            this.type = type;\r\n            this.color = color;\r\n    }\r\n\r\n    getValue(){\r\n        return this.value;\r\n    }\r\n    setValue(value){\r\n        this.value = value;\r\n    }\r\n\r\n    getColor(){\r\n        return this.color;\r\n    }\r\n    setColor(color){\r\n        this.color = color;\r\n    }\r\n\r\n    getType(){\r\n        return this.type;\r\n    }\r\n    setType(type){\r\n        this.type = type;\r\n    }\r\n}","import {Element} from \"../classes/Element\";\r\nexport function random(a, b) {\r\n    return Math.random() * (b - a) + a;\r\n}\r\n\r\nexport function randomInt(a, b) {\r\n    return Math.trunc(random(a, b))\r\n}\r\n\r\nexport function swapObj(json) {\r\n    let ret = {};\r\n    for (let key in json) {\r\n        ret[json[key]] = key;\r\n    }\r\n    return ret;\r\n}\r\n\r\nexport function sleep(ms) {\r\n    ms += new Date().getTime();\r\n    while (new Date() < ms) {\r\n    }\r\n}\r\n\r\nexport function getAllMethods(toCheck) {\r\n    const props = [];\r\n    let obj = toCheck;\r\n    do {\r\n        props.push(...Object.getOwnPropertyNames(obj));\r\n    } while (obj = Object.getPrototypeOf(obj));\r\n\r\n    return props.sort().filter((e, i, arr) => {\r\n        if (e!=arr[i+1] && typeof toCheck[e] == 'function') return true;\r\n    });\r\n}\r\n\r\nexport function deepArrayCopy(arr){\r\n    let out = [];\r\n    for(let i of arr){\r\n        let value = i.getValue();\r\n        let type = i.getType();\r\n        let color = i.getColor();\r\n        out.push(new Element(value, type, color))\r\n    }\r\n    return out;\r\n}\r\n\r\nexport function arraysEquals(a, b){\r\n    return a.length === b.length &&\r\n    a.every((v, i) => v === b[i]);\r\n}\r\n\r\nexport function objLength(obj){\r\n    return (obj!==undefined) ? Object.keys(obj).length: 0\r\n}","import React from 'react';\r\nimport styles from \"./ArrayWindow.module.scss\";\r\nimport {objLength} from \"../utils/utils\";\r\n\r\nexport function ArrayWindow(props) {\r\n    let array = props.array\r\n    let mainArray = props.mainArray\r\n    let height = props.height\r\n    let visualProps = props.visualProps\r\n    let borderEnabled = visualProps.barsStroke\r\n    let visualStyle = visualProps.style\r\n    // console.log(array)\r\n    let arr = []\r\n\r\n    if (visualStyle === \"bars\") {\r\n        let border = borderEnabled ? {} : {border: \"none\"}\r\n        for (let i = 0; i < objLength(array); ++i) {\r\n            let styleSheet = {\r\n                height: array[i].getValue() / mainArray.length * 100 + \"%\",\r\n                backgroundColor: \"rgb(\" + array[i].getColor() + \")\",\r\n                ...border\r\n            }\r\n            arr.push(<div key={i} style={styleSheet} className={styles.bar}/>);\r\n        }\r\n        for (let i = objLength(array); i < mainArray.length; ++i) {\r\n            let styleSheet = {\r\n                height: \"0%\",\r\n                backgroundColor: \"rgb(255,255,255)\",\r\n            }\r\n            arr.push(<div key={i} style={styleSheet} className={styles.bar}/>);\r\n        }\r\n    } else if (visualStyle === \"dots\") {\r\n        for (let i = 0; i < objLength(array); ++i) {\r\n            let value = array[i].getValue()\r\n            let height = (value===-1) ? {height: 0} : {}\r\n            let styleSheet = {\r\n                bottom: \"calc(\" + value / mainArray.length * 100 + \"% - 0.25rem)\",\r\n                backgroundColor: \"rgb(\" + array[i].getColor() + \")\",\r\n                ...height\r\n            }\r\n            arr.push(<div className={styles.dotContainer}>\r\n                <div key={i} style={styleSheet} className={styles.dot}/>\r\n            </div>);\r\n        }\r\n        for (let i = objLength(array); i < mainArray.length; ++i) {\r\n            let styleSheet = {\r\n                bottom: 0,\r\n                backgroundColor: \"rgb(0, 0, 0)\",\r\n            }\r\n            arr.push(<div className={styles.dotContainer}>\r\n                <div key={i} style={styleSheet} className={styles.dot}/>\r\n            </div>);\r\n        }\r\n    }\r\n    if (objLength(array) === 0) {\r\n        return <div/>\r\n    }\r\n    return (\r\n        <div style={{width: \"100%\", height: height + \"%\"}}>\r\n            <div className={styles.arrayContainer}>\r\n                {arr}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react';\r\nimport styles from \"./Stats.module.scss\";\r\n\r\nexport function Stats(props){\r\n    return(\r\n        <div className={styles.statsContainer}>\r\n            <div><b>Sort: {props.sortName}</b></div>\r\n            <div>Length: {props.arrLength}</div>\r\n            {/*<div>Comparisons: {props.comparisons}</div>*/}\r\n            <div>Writes: {props.writes}</div>\r\n        </div>\r\n    )\r\n}","export let initFunctions = {\r\n    linear: function linear(x, length) {\r\n        return x;\r\n    },\r\n    reverse: function reverse(x, length) {\r\n        return length - x;\r\n    },\r\n    pipeOrgan: function pipeOrgan(x, length) {\r\n        if (x < length / 2) {\r\n            return 2 * x;\r\n        } else {\r\n            return 2 * (length - x) - 1;\r\n        }\r\n    },\r\n    inversedPipeOrgan: function inversedPipeOrgan(x, length){\r\n        if (x < length / 2) {\r\n            return (length - 2*x) - 1;\r\n        } else {\r\n            return x*2-length;\r\n        }\r\n    }\r\n}","import {randomInt} from \"./utils\";\r\n\r\nexport let shuffles = {\r\n    fullShuffle: function (len) {\r\n        let instructions = []\r\n        for (let i = 0; i < len; ++i) {\r\n            let randomIndex = randomInt(i, len)\r\n            instructions.push(\r\n                {\r\n                    cmd: \"swap\",\r\n                    a: i,\r\n                    b:randomIndex\r\n                }\r\n            )\r\n        }\r\n        return instructions\r\n    },\r\n\r\n    almostSorted: function (len) {\r\n        let instructions = []\r\n        const amount = 0.1\r\n        for (let i = 0; i < len * amount; ++i) {\r\n            let randomIndexA = randomInt(i, len)\r\n            let randomIndexB = randomInt(i, len)\r\n            instructions.push(\r\n                {\r\n                    cmd: \"swap\",\r\n                    a: randomIndexA,\r\n                    b:randomIndexB\r\n                }\r\n            )\r\n        }\r\n        return instructions\r\n    }\r\n\r\n\r\n}","import React from 'react';\r\nimport styles from \"./Controls.module.scss\";\r\nimport {initFunctions} from \"../utils/initFunctions\";\r\nimport {getAllMethods} from \"../utils/utils\";\r\nimport {shuffles} from \"../utils/shuffles\";\r\n\r\n\r\nexport class Controls extends React.Component {\r\n    isControlShow\r\n    arrayVisualizer\r\n    sorts\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.isControlShow = true;\r\n        this.arrayVisualizer = props.arrayVisualizer\r\n        this.sorts = props.sorts\r\n        this.arrayVisualizer.updateArrLength(this.arrayVisualizer.DEFAULT_ARR_LEN)\r\n        // this.arrayVisualizer.initArray(initFunctions.linear)\r\n    }\r\n\r\n    updateArrLength() {\r\n        let slider = document.getElementById(styles.slider)\r\n\r\n        if (slider !== null) {\r\n            let len = slider.value\r\n            this.arrayVisualizer.updateArrLength(len)\r\n        }\r\n    }\r\n\r\n    toggleControlShow() {\r\n        // console.log(styles.controls)\r\n        let controlsContainer = document.getElementById(styles.controlsContainer)\r\n        let controls = document.getElementById(styles.controls)\r\n        let btn = document.getElementById(styles.showToggleBtn)\r\n        if (this.isControlShow) {\r\n            controls.style.display = \"none\"\r\n            controlsContainer.style.width = \"0\"\r\n            btn.innerHTML = \"&gt;&gt;\";\r\n        } else {\r\n            controls.style.display = \"block\"\r\n            controlsContainer.style.width = \"20rem\"\r\n            btn.innerHTML = \"&lt;&lt\";\r\n        }\r\n        this.isControlShow = !this.isControlShow\r\n    }\r\n\r\n    initArray(func) {\r\n        this.arrayVisualizer.initArray(func, this.arrayVisualizer.getArrLength(), true)\r\n    }\r\n\r\n    shuffleArray(func) {\r\n        this.arrayVisualizer.shuffleArray(func)\r\n    }\r\n\r\n    sortArray(sortName) {\r\n        this.sorts.runSort(sortName, 0, this.arrayVisualizer.getArrLength() - 1)\r\n    }\r\n\r\n    stopSort() {\r\n        this.arrayVisualizer.stopSort()\r\n    }\r\n\r\n    abortSort() {\r\n        this.stopSort()\r\n        this.initArray(initFunctions.linear)\r\n    }\r\n\r\n    genInitFunctions() {\r\n        // console.log(initFunctions)\r\n        let tmp = []\r\n        for (let i in initFunctions) {\r\n            tmp.push(\r\n                <button key={i} onClick={this.initArray.bind(this, initFunctions[i])}>{i}</button>\r\n            )\r\n        }\r\n        return tmp;\r\n    }\r\n\r\n    getSorts() {\r\n        let tmp = []\r\n        let sortsNames = this.sorts.getSortsPaths()\r\n        for (let i of sortsNames) {\r\n            tmp.push(\r\n                <button key={i} onClick={this.sortArray.bind(this, i)}>{i}</button>)\r\n        }\r\n        return tmp;\r\n    }\r\n\r\n    getShuffles() {\r\n        let tmp = []\r\n        for (let i in shuffles) {\r\n            tmp.push(\r\n                <button key={i} onClick={this.shuffleArray.bind(this, shuffles[i])}>{i}</button>\r\n            )\r\n        }\r\n        return tmp;\r\n    }\r\n\r\n    toggleShowAuxArrays() {\r\n        let element = document.getElementById(\"auxArrShowCB\")\r\n        this.arrayVisualizer.setShowAuxArrays(element.checked)\r\n    }\r\n\r\n    toggleBarsStroke() {\r\n        let element = document.getElementById(\"enableStrokeCB\")\r\n        this.arrayVisualizer.setEnableBarsStroke(element.checked)\r\n    }\r\n\r\n    toggleEnableMarks() {\r\n        let element = document.getElementById(\"enableMarksCB\")\r\n        console.log(element.checked)\r\n        this.arrayVisualizer.setEnableMarks(element.checked)\r\n    }\r\n\r\n    toggleVisualStyle(val) {\r\n        this.arrayVisualizer.setVisualStyle(val)\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div id={styles.controlsContainer}>\r\n                {/*<div onClick={this.toggleControlShow.bind(this)} id={styles.showToggleBtn}>&lt;&lt;</div>*/}\r\n                <div id={styles.controls}>\r\n                    <div>\r\n                        <div>\r\n                            <div className={styles.sectionHeader}>Array Size</div>\r\n                            <input id={styles.slider} type=\"range\" min=\"10\" max=\"500\"\r\n                                   defaultValue={this.arrayVisualizer.DEFAULT_ARR_LEN}\r\n                                   step=\"10\"\r\n                                   onChange={this.updateArrLength.bind(this)}/>\r\n                        </div>\r\n                        <div>\r\n                            <div className={styles.sectionHeader}>Visuals</div>\r\n                            <div style={{display: \"flex\", justifyContent:\"center\"}}>\r\n                                <div style={{textAlign: \"left\"}}>\r\n                                    <div className={styles.checkBoxContainer}>\r\n                                        <input onChange={this.toggleShowAuxArrays.bind(this)} type=\"checkbox\"\r\n                                               id=\"auxArrShowCB\"\r\n                                               name=\"auxArrShowCB\" defaultChecked={true}/>\r\n                                        <label htmlFor=\"auxArrShowCB\">Show Aux Arrays</label>\r\n                                    </div>\r\n                                    <div className={styles.checkBoxContainer}>\r\n                                        <input onChange={this.toggleBarsStroke.bind(this)} type=\"checkbox\"\r\n                                               id=\"enableStrokeCB\"\r\n                                               name=\"enableStrokeCB\" defaultChecked={true}/>\r\n                                        <label htmlFor=\"enableStrokeCB\">Enable Bars Stroke</label>\r\n                                    </div>\r\n                                    <div className={styles.checkBoxContainer}>\r\n                                        <input onChange={this.toggleEnableMarks.bind(this)} type=\"checkbox\"\r\n                                               id=\"enableMarksCB\"\r\n                                               name=\"enableMarksCB\" defaultChecked={true}/>\r\n                                        <label htmlFor=\"enableMarksCB\">Enable Marks</label>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                        <div>\r\n                            <div className={styles.sectionHeader}>Visual Styles</div>\r\n                            <div>\r\n                                <input onChange={this.toggleVisualStyle.bind(this, \"bars\")} type=\"radio\"\r\n                                       id=\"barsRadioBtn\"\r\n                                       name=\"visualStyle\" value=\"bars\" defaultChecked={true}/>\r\n                                <label htmlFor=\"barsRadioBtn\">Bars</label>\r\n\r\n                                <input onChange={this.toggleVisualStyle.bind(this, \"dots\")} type=\"radio\"\r\n                                       id=\"dotsRadioBtn\"\r\n                                       name=\"visualStyle\" value=\"dots\"/>\r\n                                <label htmlFor=\"dotsRadioBtn\">Dots</label>\r\n                            </div>\r\n                        </div>\r\n                        <div>\r\n                            <div className={styles.sectionHeader}>Init Array</div>\r\n                            <div>{this.genInitFunctions()}</div>\r\n                        </div>\r\n\r\n                        <div>\r\n                            <div className={styles.sectionHeader}>Shuffle Array</div>\r\n                            <div>\r\n                                {/*<button onClick={this.shuffleArray.bind(this)}>Random</button>*/}\r\n                                <div>{this.getShuffles()}</div>\r\n                            </div>\r\n                        </div>\r\n                        <div>\r\n                            <div className={styles.sectionHeader}>Sort control</div>\r\n                            <div>\r\n                                <button onClick={this.abortSort.bind(this)}>Abort Sort(Recommended)</button>\r\n                                <button onClick={this.stopSort.bind(this)}>Stop Sort(Not Recommended)</button>\r\n                            </div>\r\n                        </div>\r\n                        <div>\r\n                            <div className={styles.sectionHeader}>Sort Array</div>\r\n                            <div>\r\n                                {this.getSorts()}\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}","export class Delays {\r\n    arrayVisualizer\r\n    timeoutArray\r\n    delays\r\n    delayIncFactor\r\n    delayInc\r\n\r\n\r\n    constructor(arrayVisualizer) {\r\n        this.arrayVisualizer = arrayVisualizer\r\n        this.timeoutArray = []\r\n        this.delays = {\r\n            Swap: 0,\r\n            Write: 0,\r\n            Comp: 0,\r\n            Unmark: 0,\r\n            CreateAuxArray: 0,\r\n            RemoveAuxArray: 0\r\n        }\r\n        this.delayIncFactor = 3000\r\n        // console.log(arrayVisualizer.getArrLength())\r\n        this.delayInc = this.delayIncFactor/arrayVisualizer.getArrLength()\r\n    }\r\n\r\n    push(timeout){\r\n        this.timeoutArray.push(timeout)\r\n    }\r\n\r\n    pushFunc(func, obj, delayName, delay, args) {\r\n        this.timeoutArray.push(setTimeout(func.bind(obj), this.delays[delayName] += delay, args))\r\n    }\r\n\r\n    resetDelays() {\r\n        this.delays = {\r\n            Swap: 0,\r\n            Write: 0,\r\n            Comp: 0,\r\n            Unmark: 0,\r\n            CreateAuxArray: 0,\r\n            RemoveAuxArray: 0\r\n        }\r\n        for (let i of this.timeoutArray) {\r\n            clearTimeout(i);\r\n        }\r\n        this.timeoutArray = []\r\n    }\r\n\r\n    setDelay(name, value){\r\n        this.delays[name] = value\r\n    }\r\n\r\n    incDelay(name, inc=this.delayIncFactor){\r\n        return this.delays[name]+=inc\r\n    }\r\n\r\n    getDelayInc(){\r\n        return this.delayInc\r\n    }\r\n}","export class Sounds{\r\n    arrayVisualizer\r\n    ctx\r\n    Delays\r\n    constructor(arrayVisualizer) {\r\n        this.arrayVisualizer = arrayVisualizer\r\n        this.Delays = arrayVisualizer.getDelays()\r\n        this.ctx = new (window.AudioContext || window.webkitAudioContext)();\r\n    }\r\n    playSound(value) {\r\n        let osc = this.ctx.createOscillator();\r\n        osc.type = 'sine';\r\n\r\n        let k = value / this.arrayVisualizer.getArrLength()\r\n        osc.frequency.value = 2000 * k + 200;\r\n\r\n        let addTime = 50\r\n\r\n        let gainNode = this.ctx.createGain()\r\n        gainNode.gain.value = 0;\r\n        osc.connect(gainNode)\r\n        gainNode.connect(this.ctx.destination)\r\n        // console.log(this.Delays.getDelayInc())\r\n        gainNode.gain.linearRampToValueAtTime(0.05, this.ctx.currentTime + (this.Delays.getDelayInc() + addTime) / 1000 / 2)\r\n        gainNode.gain.linearRampToValueAtTime(0, this.ctx.currentTime + (this.Delays.getDelayInc() + addTime) / 1000)\r\n\r\n        osc.start();\r\n        osc.stop(this.ctx.currentTime + (this.Delays.getDelayInc() + addTime) / 1000);\r\n    }\r\n}","import {randomInt} from \"../utils/utils\";\r\n\r\nconst colors = {\r\n    \"Unmarked\": [255, 255, 255],\r\n    \"Default\": [255, 0, 0],\r\n    \"Additional\": [randomInt(0, 256), randomInt(0, 256), randomInt(0, 256)],\r\n    \"Sorted\": [0, 255, 0],\r\n    \"Analysis\": [0, 0, 255]\r\n}\r\nexport class Marks{\r\n    arrayVisualizer\r\n    Delays\r\n\r\n    constructor(arrayVisualizer) {\r\n        this.arrayVisualizer = arrayVisualizer\r\n        this.Delays = arrayVisualizer.getDelays()\r\n    }\r\n\r\n    mark(index, args, saveArr = true) {\r\n        if(!this.arrayVisualizer.getEnableMarks()){\r\n            return;\r\n        }\r\n        let type = \"Default\"\r\n        let color = colors[\"Default\"]\r\n        let tmpArr = this.arrayVisualizer.getMainArray()\r\n        // Additional\r\n        if (args.type === \"Additional\") {\r\n            type = \"Additional\"\r\n            color = args.color\r\n            // console.log(color)\r\n        }\r\n        //Default\r\n        else if (!args.type || args.type === \"Default\") {\r\n            type = \"Default\"\r\n            color = colors[\"Default\"]\r\n        } else {\r\n            type = args.type\r\n            color = args.color\r\n        }\r\n\r\n        tmpArr[index].setType(type)\r\n        tmpArr[index].setColor(color)\r\n        if (saveArr) {\r\n            this.arrayVisualizer.setState({\r\n                array: tmpArr\r\n            })\r\n        } else {\r\n            return tmpArr\r\n        }\r\n        // console.log(color);\r\n    }\r\n\r\n    markMany(indexes, args, saveArr) {\r\n        let tmpArr = this.arrayVisualizer.getMainArray()\r\n        for (let i of indexes) {\r\n            if (saveArr) {\r\n                this.mark(i, args, saveArr)\r\n            } else {\r\n                tmpArr = this.mark(i, args, saveArr)\r\n            }\r\n        }\r\n        if (!saveArr) {\r\n            return tmpArr\r\n        }\r\n    }\r\n\r\n    unmark(index, saveArr = true) {\r\n        let tmpArr = this.arrayVisualizer.getMainArray()\r\n        tmpArr[index].setColor(colors[\"Unmarked\"])\r\n        tmpArr[index].setType(\"Unmarked\")\r\n        if (saveArr) {\r\n            this.arrayVisualizer.setState({\r\n                array: tmpArr\r\n            })\r\n        } else {\r\n            return tmpArr\r\n        }\r\n    }\r\n\r\n    unmarkMany(indexes, saveArr, saveOnce) {\r\n        let tmpArr = this.arrayVisualizer.getMainArray()\r\n        for (let i of indexes) {\r\n            if (saveArr) {\r\n                this.unmark(i, saveArr)\r\n            } else {\r\n                tmpArr = this.unmark(i, saveArr)\r\n            }\r\n        }\r\n        if (saveOnce) {\r\n            this.arrayVisualizer.setState({\r\n                array: tmpArr\r\n            })\r\n        }\r\n        if (!saveArr) {\r\n            return tmpArr\r\n        }\r\n    }\r\n\r\n\r\n    markUnmarkMany(markIndexes, markArgs) {\r\n        this.markMany(markIndexes, markArgs, true)\r\n        this.Delays.push(setTimeout(this.unmarkMany.bind(this), this.Delays.incDelay(\"Unmark\", this.Delays.getDelayInc() / 100), markIndexes, false, true))\r\n    }\r\n\r\n    clearAllMarks(){\r\n        this.markUnmarkMany(Array.from(Array(this.arrayVisualizer.getArrLength()).keys()), false, true)\r\n    }\r\n\r\n}","export class Reads{\r\n    arrayVisualizer;\r\n    Sounds\r\n    constructor(arrayVisualizer){\r\n        this.arrayVisualizer = arrayVisualizer\r\n        this.Sounds = arrayVisualizer.getSounds()\r\n    }\r\n    read(index, arr = this.arrayVisualizer.getPseudoArray()) {\r\n        return arr[index].getValue()\r\n    }\r\n\r\n    compare(a, b, sign = \"<\", arr = this.arrayVisualizer.getPseudoArray()) {\r\n        if (sign === \"<\") {\r\n            return arr[a].getValue() < arr[b].getValue()\r\n        } else if (sign === \"<=\") {\r\n            return arr[a].getValue() <= arr[b].getValue()\r\n        } else if (sign === \">\") {\r\n            return arr[a].getValue() > arr[b].getValue()\r\n        } else if (sign === \">=\") {\r\n            return arr[a].getValue() >= arr[b].getValue()\r\n        } else {\r\n            return arr[a].getValue() === arr[b].getValue()\r\n        }\r\n    }\r\n\r\n    auxRead(index, arrIndex, isPseudo = true){\r\n        if(isPseudo){\r\n            return this.arrayVisualizer.getPseudoAuxArrays()[arrIndex][index].getValue()\r\n        }else {\r\n            return this.arrayVisualizer.getAuxArrays()[arrIndex][index].getValue()\r\n        }\r\n    }\r\n\r\n}","import {Element} from \"../classes/Element\";\r\nimport {objLength} from \"../utils/utils\";\r\n\r\nexport class Writes{\r\n    arrayVisualizer;\r\n    Sounds\r\n    Delays\r\n    Marks\r\n\r\n    constructor(arrayVisualizer){\r\n        this.arrayVisualizer = arrayVisualizer\r\n        this.Sounds = arrayVisualizer.getSounds()\r\n        this.Delays = arrayVisualizer.getDelays()\r\n        this.Marks = arrayVisualizer.getMarks()\r\n    }\r\n\r\n\r\n\r\n    swapWithDelay(a, b, arr = this.arrayVisualizer.getPseudoArray(), mark, delay = this.Delays.getDelayInc(), playSound) {\r\n        this.Delays.push(setTimeout(this.swapInArr.bind(this), this.Delays.incDelay(\"Write\", delay), a, b, arr, mark, playSound))\r\n    }\r\n\r\n\r\n    swapInArr(a, b, arr = this.arrayVisualizer.getPseudoArray(), mark = true, playSound = false) {\r\n        if(playSound) {\r\n            this.Sounds.playSound(arr[b].getValue());\r\n        }\r\n        let tmpArr = arr\r\n        let tmp = tmpArr[a]\r\n        tmpArr[a] = tmpArr[b]\r\n        tmpArr[b] = tmp\r\n        if (mark) {\r\n            this.Marks.markUnmarkMany([a, b], {type: \"Default\"})\r\n        }\r\n        let curWrites = this.arrayVisualizer.getState().writes;\r\n        this.arrayVisualizer.setState({\r\n            writes: curWrites + 2\r\n        })\r\n    }\r\n\r\n    swap(a, b, arr = this.arrayVisualizer.getPseudoArray()) {\r\n        this.swapInArr(a, b, arr, false, false)\r\n        this.swapWithDelay(a, b, this.arrayVisualizer.getMainArray(), true, this.Delays.getDelayInc(), true)\r\n    }\r\n\r\n    writeInArr(index, value, arr = this.arrayVisualizer.getPseudoArray(), mark = true, playSound = false) {\r\n        if(playSound) {\r\n            this.Sounds.playSound(value)\r\n        }\r\n        arr[index].setValue(value)\r\n        if (mark) {\r\n            this.Marks.markUnmarkMany([index], {type: \"Default\"})\r\n        }\r\n        let curWrites = this.arrayVisualizer.getState().writes;\r\n        this.arrayVisualizer.setState({\r\n            writes: curWrites + 1\r\n        })\r\n    }\r\n\r\n    writeWithDelay(index, value, arr = this.arrayVisualizer.getPseudoArray(), mark, delay = this.Delays.getDelayInc(), playSound = true) {\r\n        this.Delays.push(setTimeout(this.writeInArr.bind(this), this.Delays.incDelay(\"Write\", delay), index, value, arr, mark, playSound))\r\n    }\r\n\r\n    write(index, value, arr = this.arrayVisualizer.getPseudoArray()) {\r\n        this.writeInArr(index, value, arr, false, false)\r\n        this.writeWithDelay(index, value, this.arrayVisualizer.getMainArray(), true, this.Delays.getDelayInc(), true)\r\n    }\r\n\r\n    createAuxArray(len, isPseudo = true){\r\n        if(isPseudo) {\r\n            let pseudoAuxArrays = this.arrayVisualizer.getPseudoAuxArrays()\r\n            let auxArrIndex = objLength(pseudoAuxArrays)\r\n            pseudoAuxArrays[auxArrIndex]=(this.arrayVisualizer.initArray(() => -1, len, false))\r\n            this.createAuxArrayWithDelay(len, this.Delays.getDelayInc(), false)\r\n            return auxArrIndex\r\n        }else{\r\n            let tmpArr = this.arrayVisualizer.getAuxArrays()\r\n            let auxArrIndex = objLength(tmpArr)\r\n\r\n            tmpArr[auxArrIndex]=(this.arrayVisualizer.initArray(() => -1, len, false))\r\n            this.arrayVisualizer.setState({\r\n                    auxArrays: tmpArr\r\n                }\r\n            )\r\n        }\r\n    }\r\n\r\n    createAuxArrayWithDelay(len, delay, isPseudo = false){\r\n        this.Delays.push(setTimeout(this.createAuxArray.bind(this), this.Delays.incDelay(\"Write\", delay), len, isPseudo))\r\n    }\r\n\r\n    removeAuxArray(index, isPseudo = true){\r\n        if(isPseudo) {\r\n            // this.arrayVisualizer.getPseudoAuxArrays().splice(index, 1)\r\n            delete this.arrayVisualizer.getPseudoAuxArrays()[index]\r\n            this.removeAuxArrayWithDelay(index, this.Delays.getDelayInc(), false)\r\n        }else{\r\n            let tmp = this.arrayVisualizer.getAuxArrays()\r\n            // tmp.splice(index, 1)\r\n            delete tmp[index]\r\n            this.arrayVisualizer.setState({\r\n                auxArrays: tmp\r\n            })\r\n        }\r\n    }\r\n\r\n    removeAuxArrayWithDelay(index, delay, isPseudo = false){\r\n        this.Delays.push(setTimeout(this.removeAuxArray.bind(this), this.Delays.incDelay(\"Write\", delay), index, isPseudo))\r\n    }\r\n\r\n\r\n    auxWrite(index, value, arrIndex, isPseudo = true, playSound = false){\r\n        if(playSound){\r\n            this.Sounds.playSound(value)\r\n        }\r\n        if(isPseudo){\r\n            this.arrayVisualizer.getPseudoAuxArrays()[arrIndex][index].setValue(value)\r\n            this.auxWriteWithDelay(index, value, arrIndex, this.Delays.getDelayInc(), false, true)\r\n        }else{\r\n            this.arrayVisualizer.getAuxArrays()[arrIndex][index].setValue(value)\r\n            let tmp = this.arrayVisualizer.getAuxArrays()\r\n            this.arrayVisualizer.setState({\r\n                auxArrays: tmp\r\n            })\r\n        }\r\n    }\r\n\r\n    auxWriteWithDelay(index, value, arrIndex, delay, isPseudo = false, playSound = true, ){\r\n        this.Delays.push(setTimeout(this.auxWrite.bind(this), this.Delays.incDelay(\"Write\", delay), index, value, arrIndex, isPseudo, playSound))\r\n    }\r\n\r\n}","import React from 'react';\r\nimport {arraysEquals, deepArrayCopy, getAllMethods, objLength, randomInt} from \"../utils/utils\";\r\nimport {Sorts} from \"../Sorts/Sorts\"\r\nimport {ArrayWindow} from \"../ArrayWindow/ArrayWindow\";\r\nimport {Element} from \"../classes/Element\";\r\nimport {Stats} from \"../Stats/Stats\";\r\nimport {Controls} from \"../Controls/Controls\";\r\nimport {initFunctions} from \"../utils/initFunctions\";\r\nimport {Delays} from \"../ArrayAccess/Delays\";\r\nimport {Sounds} from \"../ArrayAccess/Sounds\";\r\nimport {Marks} from \"../ArrayAccess/Marks\";\r\nimport {Reads} from \"../ArrayAccess/Reads\";\r\nimport {Writes} from \"../ArrayAccess/Writes\";\r\n\r\nconst colors = {\r\n    \"Unmarked\": [255, 255, 255],\r\n    \"Default\": [255, 0, 0],\r\n    \"Additional\": [randomInt(0, 256), randomInt(0, 256), randomInt(0, 256)],\r\n    \"Sorted\": [0, 255, 0],\r\n    \"Analysis\": [0, 0, 255]\r\n}\r\n\r\nexport class ArrayVisualizer extends React.Component {\r\n    delays;\r\n    delayInc;\r\n    pseudoArray;\r\n    pseudoAuxArrays;\r\n\r\n    Sorts\r\n    delayIncConst\r\n    showAuxArrays\r\n    enableBarsStroke\r\n    visualStyle\r\n    enableMarks\r\n\r\n    Delays\r\n    Sounds\r\n    Marks\r\n    Reads\r\n    Writes\r\n\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.DEFAULT_ARR_LEN = 100\r\n        this.state = {\r\n            array: this.initArray(initFunctions.linear, this.DEFAULT_ARR_LEN),\r\n            sortName: \"\",\r\n            comparisons: 0,\r\n            writes: 0,\r\n            auxArrays: {}\r\n        }\r\n        this.pseudoArray = deepArrayCopy(this.state.array)\r\n        this.Delays = new Delays(this)\r\n        this.Sounds = new Sounds(this)\r\n        this.Marks = new Marks(this)\r\n        this.Reads = new Reads(this)\r\n\r\n        this.Writes = new Writes(this)\r\n        this.pseudoAuxArrays = []\r\n        this.Sorts = new Sorts(this);\r\n        this.showAuxArrays = true\r\n        this.enableBarsStroke = true\r\n        this.enableMarks = true\r\n        this.visualStyle = {\r\n            // style: \"bars\",\r\n            style: \"bars\",\r\n            barsStroke: true,\r\n        }\r\n    }\r\n\r\n    initArray(func, length, setToState=false) {\r\n        let arr = []\r\n        for (let i = 0; i < length; ++i) {\r\n            let element = new Element(func(i, length), 0, [255, 255, 255])\r\n            arr.push(element)\r\n        }\r\n        if(setToState){\r\n            this.setState({\r\n                array: arr\r\n            })\r\n        }else {\r\n            return arr;\r\n        }\r\n    }\r\n\r\n    nullify() {\r\n        this.Delays.resetDelays()\r\n        this.setState(\r\n            {\r\n                comparisons: 0,\r\n                writes: 0\r\n            }\r\n        )\r\n        // eslint-disable-next-line react/no-direct-mutation-state\r\n        this.state.writes = 0;\r\n        // eslint-disable-next-line react/no-direct-mutation-state\r\n        this.state.comparisons = 0;\r\n    }\r\n\r\n    setShowAuxArrays(val){\r\n        this.showAuxArrays = val\r\n    }\r\n\r\n    setEnableBarsStroke(val){\r\n        this.visualStyle.barsStroke = val;\r\n        this.forceMainArrayUpdate()\r\n    }\r\n\r\n    setVisualStyle(val){\r\n        this.visualStyle.style = val;\r\n        this.forceMainArrayUpdate()\r\n    }\r\n\r\n    setEnableMarks(val){\r\n        this.enableMarks = val;\r\n        if(!val){\r\n            this.Marks.clearAllMarks()\r\n        }\r\n    }\r\n\r\n    getEnableMarks(){\r\n        return this.enableMarks;\r\n    }\r\n\r\n    getArrayVisualizer() {\r\n        return this;\r\n    }\r\n\r\n    getPseudoArray() {\r\n        return this.pseudoArray;\r\n    }\r\n\r\n    getState(){\r\n        return this.state\r\n    }\r\n\r\n    getArrLength(){\r\n        return this.state.array.length;\r\n    }\r\n\r\n    getMainArray(){\r\n        return this.state.array\r\n    }\r\n\r\n    getPseudoAuxArrays(){\r\n        return this.pseudoAuxArrays\r\n    }\r\n\r\n    getDelays(){\r\n        return this.Delays\r\n    }\r\n\r\n    getSounds(){\r\n        return this.Sounds;\r\n    }\r\n\r\n    getMarks(){\r\n        return this.Marks;\r\n    }\r\n\r\n    getAuxArrays(){\r\n        return this.state.auxArrays\r\n    }\r\n\r\n    getReads(){\r\n        return this.Reads;\r\n    }\r\n\r\n    getWrites(){\r\n        return this.Writes\r\n    }\r\n\r\n\r\n    stopSort(){\r\n        // this.resetDelay()\r\n        this.Delays.resetDelays()\r\n        this.Marks.clearAllMarks()\r\n        this.setState({\r\n                auxArrays: []\r\n            }\r\n        )\r\n    }\r\n\r\n    shuffleArray(func) {\r\n        this.nullify()\r\n        this.setState({\r\n            sortName: \"Shuffle\"\r\n        })\r\n\r\n        let instructions = func(this.getArrLength());\r\n        for(let i of instructions){\r\n            if(i.cmd === \"swap\"){\r\n                this.Writes.swapWithDelay(i.a, i.b, this.state.array, true, this.Delays.getDelayInc()/5, true)\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    setSortName(sortName){\r\n        this.setState({\r\n            sortName: sortName\r\n        })\r\n    }\r\n\r\n    initPseudoArray(){\r\n        this.pseudoArray = deepArrayCopy(this.state.array)\r\n    }\r\n\r\n    sortClickEvent() {\r\n    }\r\n\r\n    forceMainArrayUpdate(){\r\n        let tmp = this.state.array;\r\n        this.setState({\r\n            array: tmp\r\n        })\r\n    }\r\n\r\n    updateDelayInc(val){\r\n        this.delayInc = val/this.getArrLength();\r\n    }\r\n\r\n    updateArrLength(len){\r\n        this.setState({\r\n            array: this.initArray(initFunctions.linear, len)\r\n        })\r\n        this.pseudoArray = deepArrayCopy(this.state.array)\r\n\r\n        this.Sorts.arrLength = this.getArrLength()\r\n        this.updateDelayInc(this.delayIncConst)\r\n    }\r\n\r\n    genArrayWindows(){\r\n        let tmp = []\r\n        if(this.showAuxArrays) {\r\n            for (let i = objLength(this.state.auxArrays) - 1; i >= 0; i--) {\r\n                tmp.push(\r\n                    <ArrayWindow key={objLength(this.state.auxArrays) - i} array={this.state.auxArrays[i]}\r\n                                 mainArray={this.state.array} height={100 / (1 + objLength(this.state.auxArrays))} visualProps = {this.visualStyle} />\r\n                )\r\n            }\r\n        }\r\n        return tmp\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Stats sortName={this.state.sortName} comparisons={this.state.comparisons} writes={this.state.writes} arrLength={this.getArrLength()}/>\r\n                <div style={{height: \"100vh\"}}>\r\n                {/*<div>*/}\r\n                    {this.genArrayWindows()}\r\n                    <ArrayWindow array={this.state.array} mainArray={this.state.array} height={this.showAuxArrays ? 100/(1+objLength(this.state.auxArrays)) : 100} visualProps={this.visualStyle}/>\r\n                </div>\r\n                <div>\r\n                    <Controls arrayVisualizer={this} sorts={this.Sorts}/>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport {ArrayVisualizer} from \"./components/ArrayVisualizer/ArrayVisualizer\";\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\n\r\n\r\n\r\n\r\n\r\nReactDOM.render(\r\n    <ArrayVisualizer></ArrayVisualizer>,\r\n  document.getElementById('root')\r\n);\r\n\r\n\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}