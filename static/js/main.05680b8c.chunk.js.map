{"version":3,"sources":["components/Sorts/Sort.js","components/utils/utils.js","components/Controls/Controls.module.scss","components/ArrayWindow/ArrayWindow.module.scss","components/classes/Element.js","components/Sorts/InsertionSort.js","components/ArrayAccess/Delays.js","components/ArrayAccess/Writes.js","components/Sorts/Sorts.js","components/Sorts/HeapSort.js","components/Stats/Stats.module.scss","components/Sorts sync /^/.*/.js$","components/Sorts/BitonicSort.js","components/Sorts/BubbleSort.js","components/Sorts/DualPivotQuickSort.js","components/Sorts/GnomeSort.js","components/Sorts/GrailSort.js","components/Sorts/LLQuickSort.js","components/Sorts/LRQuickSort.js","components/Sorts/LSDRadixSort.js","components/Sorts/MergeSort.js","components/Sorts/PseudoTimSort.js","components/Sorts/SelectionSort.js","components/Sorts/SlowSort.js","components/Sorts/StoogeSort.js","components/Sorts/TimSort.js","components/ArrayWindow/ArrayWindow.js","components/Stats/Stats.js","components/utils/initFunctions.js","components/utils/shuffles.js","components/Controls/Controls.js","components/ArrayAccess/Sounds.js","components/ArrayAccess/Marks.js","components/ArrayAccess/Reads.js","components/ArrayVisualizer/ArrayVisualizer.js","reportWebVitals.js","index.js"],"names":["Sort","arrayVisualizer","this","state","getState","Reads","getReads","Writes","getWrites","arrLength","getArrLength","sortName","warnLen","isDisabled","isNeedBucketsNum","low","high","bucketsNum","bufferSize","randomInt","a","b","Math","trunc","random","deepArrayCopy","arr","out","i","value","getValue","type","getType","color","getColor","markColor","getMarkColor","push","Element","objLength","obj","undefined","Object","keys","length","HSL2RGB","h","s","l","r","g","hue2rgb","p","q","t","round","module","exports","unMark","toString","InsertionSort","key","get","j","compareValues","write","Delays","timeoutArray","delays","Swap","Write","Comp","Unmark","CreateAuxArray","RemoveAuxArray","Other","DELAY_INC_CONST","updateDelayInc","delayIncFactor","delayInc","timeout","func","delayName","delay","args","setTimeout","bind","clearTimeout","name","inc","Sounds","getSounds","getDelays","Marks","getMarks","getPseudoArray","mark","getDelayInc","playSound","swapInArr","curWrites","mainWrites","setState","incDelay","tmpArr","tmp","copy","markUnmarkMany","swapWithDelay","getMainArray","index","toWrite","writeInArr","writeWithDelay","len","isPseudo","pseudoAuxArrays","getPseudoAuxArrays","auxArrIndex","initArray","createAuxArrayWithDelay","getAuxArrays","auxArrays","createAuxArray","removeAuxArrayWithDelay","removeAuxArray","arrIndex","auxWriteWithDelay","auxWrites","auxWrite","Sorts","sortsPaths","sortPath","require","resetDelays","nullify","sort","getSortObject","getWarnLen","parseInt","prompt","isNaN","window","confirm","max","isNeedBuffer","initPseudoArray","setSortName","getSortName","backupArray","runSort","console","log","checkSort","isSorted","array","clearAllMarks","forceMainArrayUpdate","HeapSort","n","largest","compareInArr","swap","heapify","map","webpackContext","req","id","webpackContextResolve","__webpack_require__","o","e","Error","code","resolve","BitonicSort","sortLength","k","m","ij","bitonicSort","BubbleSort","DualPivotQuickSort","left","right","divisor","third","med1","med2","pivot1","readValue","pivot2","less","great","dualPivot","GnomeSort","Subarray","GrailSort","blockLen","grailSwap","srcArray","srcPos","destArray","destPos","copyLen","auxGet","start","leftLen","rightLen","grailBlockSwap","item","target","middle","idealKeys","keysFound","firstKey","currentKey","insertPos","grailBinarySearchLeft","grailRotate","bufferOffset","end","buffer","currentMerge","bufferLen","mergeLen","mergeIndex","mergeEnd","grailMergeForwards","leftOver","finalBlock","finalOffset","grailMergeBackwards","externLen","arraycopy","externalBuffer","grailPairwiseWrites","grailMergeOutOfPlace","offset","grailBuildInPlace","externalBufferLen","grailBuildOutOfPlace","grailPairwiseSwaps","medianKey","blockCount","block","compare","resetLen","leftOvers","leftBlocks","firstRightBlock","prevLeftBlock","leftOrigin","currentBlockLen","grailInPlaceBufferRewind","currentBlockOrigin","grailBinarySearchRight","grailOutOfPlaceBufferRewind","finalLeftBlocks","finalLen","currentBlock","blockIndex","grailGetSubarray","keyIndex","grailSmartMerge","grailSmartLazyMerge","grailLazyMerge","grailSmartMergeOutOfPlace","subarrayLen","mergeCount","lastSubarray","grailInsertSort","grailBlockSelectSort","grailMergeBlocks","grailLazyMergeBlocks","rightBlocks","lastFragment","grailCountFinalLeftBlocks","leftLength","grailInPlaceBufferReset","grailMergeBlocksOutOfPlace","grailOutOfPlaceBufferReset","grailCombineOutOfPlace","grailCombineInPlace","leftEnd","extBuf","extBufLen","idealBuffer","keyLen","grailCollectKeys","grailLazyStableSort","bufferEnd","grailBuildBlocks","scrollingBuffer","blockKeysSum","minKeys","calcMinKeys","grailCombineBlocks","grailCommonSort","grailSortInPlace","numKeys","LLQuickSort","lo","hi","pivot","partition","LRQuickSort","x","quickSort","LSDRadixSort","highestPower","registers","Array","stabVal","min","tempArray","tempWrite","radix","total","pos","MergeSort","mid","merge","nxt","PseudoTimSort","MIN_MERGE","len1","len2","minRun","minRunLength","size","pseudoTimSort","SelectionSort","minIndex","SlowSort","floor","StoogeSort","TimSort","minGallop","tmpStorageLength","stackLength","runStart","runLength","stackSize","runHi","reverseRun","isAux","hint","lastOffset","maxOffset","auxReadValue","mergeAt","start1","length1","start2","length2","gallopRight","gallopLeft","mergeLow","mergeHigh","cursor1","cursor2","dest","count1","count2","exit","customCursor","customDest","remaining","makeAscendingRun","binaryInsertionSort","force","pushRun","mergeRuns","forceMergeRuns","ArrayWindow","props","mainArray","height","visualProps","borderEnabled","barsStroke","visualStyle","style","arrayLen","sizeStyle","width","renderedArray","renderArray","setInterval","updateState","nextProps","nextContext","border","styleSheet","backgroundColor","getColorForRender","className","styles","bar","bottom","dotContainer","dot","arrayContainer","React","PureComponent","Stats","statsContainer","comparisons","initFunctions","linear","manySimular","divider","shuffles","FullShuffle","randomIndex","AlmostSorted","randomIndexA","randomIndexB","Reverse","BlockShuffle","gap","GAP_FACTOR","factor","PipeOrgan","temp","InversedPipeOrgan","Heap","heapSort","QuickSortKiller","Controls","isControlShow","sorts","updateArrLength","DEFAULT_ARR_LEN","slider","document","getElementById","controlsContainer","controls","btn","showToggleBtn","display","innerHTML","shuffleArray","stopSort","onClick","sortsNames","getSortsPaths","sortArray","element","setShowAuxArrays","checked","setEnableBarsStroke","setEnableMarks","val","setVisualStyle","setRainbow","restoreArray","sectionHeader","defaultValue","step","onChange","justifyContent","textAlign","checkBoxContainer","toggleShowAuxArrays","defaultChecked","htmlFor","toggleBarsStroke","toggleEnableMarks","toggleRainbow","toggleVisualStyle","genInitFunctions","getShuffles","abortSort","getSorts","ctx","AudioContext","webkitAudioContext","osc","createOscillator","frequency","gainNode","createGain","gain","connect","destination","linearRampToValueAtTime","currentTime","stop","colors","saveArr","getEnableMarks","setType","setMarkColor","indexes","saveOnce","unmark","hsl","rgb","setColor","markIndexes","markArgs","markMany","unmarkMany","from","curComparisons","compareWithDelay","toSound","tmpA","tmpB","toMark","findIndex","compareStub","ArrayVisualizer","maiWrites","pseudoArray","prevArray","showAuxArrays","enableBarsStroke","enableMarks","setToState","writes","genArrayWindows","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render"],"mappings":"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","file":"static/js/main.05680b8c.chunk.js","sourcesContent":["export class Sort {\r\n    arrayVisualizer;\r\n\r\n    Reads\r\n    Writes\r\n\r\n    arrLength;\r\n\r\n    sortName;\r\n    warnLen;\r\n    isDisabled;\r\n    isNeedBucketsNum;\r\n    isNeedBuffer;\r\n\r\n\r\n\r\n\r\n    constructor(arrayVisualizer) {\r\n        this.arrayVisualizer = arrayVisualizer\r\n        this.state = this.arrayVisualizer.getState()\r\n\r\n        this.Reads = this.arrayVisualizer.getReads()\r\n        this.Writes = this.arrayVisualizer.getWrites()\r\n\r\n        \r\n        this.arrLength = this.arrayVisualizer.getArrLength();\r\n        this.sortName = \"\"\r\n        this.warnLen = -1;\r\n        this.isDisabled = false;\r\n        this.isNeedBucketsNum = false;\r\n    }\r\n\r\n    getSortName(){\r\n        return this.sortName\r\n    }\r\n\r\n    getWarnLen(){\r\n        return this.warnLen\r\n    }\r\n\r\n    runSort(low, high, bucketsNum, bufferSize){\r\n    }\r\n}","import {Element} from \"../classes/Element\";\r\nexport function random(a, b) {\r\n    return Math.random() * (b - a) + a;\r\n}\r\n\r\nexport function randomInt(a, b) {\r\n    return Math.trunc(random(a, b))\r\n}\r\n\r\nexport function swapObj(json) {\r\n    let ret = {};\r\n    for (let key in json) {\r\n        ret[json[key]] = key;\r\n    }\r\n    return ret;\r\n}\r\n\r\nexport function sleep(ms) {\r\n    ms += new Date().getTime();\r\n    while (new Date() < ms) {\r\n    }\r\n}\r\n\r\nexport function getAllMethods(toCheck) {\r\n    const props = [];\r\n    let obj = toCheck;\r\n    do {\r\n        props.push(...Object.getOwnPropertyNames(obj));\r\n    } while (obj = Object.getPrototypeOf(obj));\r\n\r\n    return props.sort().filter((e, i, arr) => {\r\n        if (e!=arr[i+1] && typeof toCheck[e] == 'function') return true;\r\n    });\r\n}\r\n\r\nexport function deepArrayCopy(arr){\r\n    let out = [];\r\n    for(let i of arr){\r\n        let value = i.getValue();\r\n        let type = i.getType();\r\n        let color = i.getColor();\r\n        let markColor = i.getMarkColor();\r\n        out.push(new Element(value, type, color, markColor))\r\n    }\r\n    return out;\r\n}\r\n\r\nexport function arraysEquals(a, b){\r\n    return a.length === b.length &&\r\n    a.every((v, i) => v === b[i]);\r\n}\r\n\r\nexport function objLength(obj){\r\n    return (obj!==undefined) ? Object.keys(obj).length: 0\r\n}\r\n\r\nexport function HSL2RGB(h, s, l){\r\n    let r, g, b;\r\n\r\n    if(s === 0){\r\n        r = g = b = l;\r\n    }else{\r\n        let hue2rgb = function hue2rgb(p, q, t){\r\n            if(t < 0) t += 1;\r\n            if(t > 1) t -= 1;\r\n            if(t < 1/6) return p + (q - p) * 6 * t;\r\n            if(t < 1/2) return q;\r\n            if(t < 2/3) return p + (q - p) * (2/3 - t) * 6;\r\n            return p;\r\n        }\r\n\r\n        let q = l < 0.5 ? l * (1 + s) : l + s - l * s;\r\n        let p = 2 * l - q;\r\n        r = hue2rgb(p, q, h + 1/3);\r\n        g = hue2rgb(p, q, h);\r\n        b = hue2rgb(p, q, h - 1/3);\r\n    }\r\n\r\n    return [Math.round(r * 255), Math.round(g * 255), Math.round(b * 255)];\r\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"textCenter\":\"Controls_textCenter__3_8jn\",\"controls\":\"Controls_controls__3X5vt\",\"showToggleBtn\":\"Controls_showToggleBtn__2CbSs\",\"slider\":\"Controls_slider__3IxWj\",\"sectionHeader\":\"Controls_sectionHeader__2EvBB\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"arrayContainer\":\"ArrayWindow_arrayContainer__jfaB8\",\"bar\":\"ArrayWindow_bar__30QYB\",\"dotContainer\":\"ArrayWindow_dotContainer__3porX\",\"dot\":\"ArrayWindow_dot__29TqH\"};","const types = {\r\n\r\n}\r\n\r\nconst colors = {\r\n\r\n}\r\n\r\nexport class Element{\r\n\r\n    value;\r\n    type;\r\n    color;\r\n    markColor;\r\n\r\n    // constructor(args){\r\n    //     this.value = args.value;\r\n    //     this.type = args.type;\r\n    //     this.color = args.color || colors[args.type];\r\n    // }\r\n\r\n    constructor(value, type, color, markColor) {\r\n        this.value = value;\r\n        this.type = type;\r\n        this.color = color;\r\n        this.markColor = markColor;\r\n    }\r\n\r\n\r\n    getValue(){\r\n        return this.value;\r\n    }\r\n    setValue(value){\r\n        this.value = value;\r\n    }\r\n\r\n    getColor(){\r\n        return this.color;\r\n    }\r\n\r\n    setColor(color){\r\n        this.color = color;\r\n    }\r\n\r\n    getMarkColor(){\r\n        return this.markColor;\r\n    }\r\n    setMarkColor(markColor){\r\n        this.markColor = markColor;\r\n    }\r\n\r\n    getColorForRender(){\r\n        // if(this.type === \"Default\"){\r\n        //     return this.markColor\r\n        // }else{\r\n        //     return this.color\r\n        // }\r\n        if(this.type === \"Unmarked\"){\r\n            return this.color\r\n        }else {\r\n            return this.markColor\r\n        }\r\n    }\r\n\r\n    getType(){\r\n        return this.type;\r\n    }\r\n    setType(type){\r\n        this.type = type;\r\n    }\r\n\r\n    copy(unMark = true){\r\n        if(unMark){\r\n            return new Element(this.value, \"Unmarked\", this.color, [0,0,0])\r\n        }else{\r\n            return new Element(this.value, this.type, this.color, this.markColor)\r\n        }\r\n    }\r\n\r\n    toString(){\r\n        return this.value.toString()\r\n    }\r\n}","import {Sort} from \"./Sort\";\r\n\r\nexport class InsertionSort extends Sort{\r\n    constructor(arrayVisualizer) {\r\n        super(arrayVisualizer);\r\n        this.sortName = \"InsertionSort\"\r\n    }\r\n\r\n    InsertionSort(low, high) {\r\n        let length = high+1;\r\n        for (let i = low+1; i < length; i++) {\r\n            let key = this.Reads.get(i);\r\n            let j = i - 1;\r\n            while (j >= 0 && this.Reads.compareValues(this.Reads.get(j), key) > 0) {\r\n                this.Writes.write(j + 1, this.Reads.get(j))\r\n                j = j - 1;\r\n            }\r\n            this.Writes.write(j + 1, key)\r\n        }\r\n    }\r\n\r\n    runSort(low, high) {\r\n        this.InsertionSort(low, high)\r\n    }\r\n}","export class Delays {\r\n    arrayVisualizer\r\n    timeoutArray\r\n    delays\r\n    delayIncFactor\r\n    delayInc\r\n    DELAY_INC_CONST\r\n\r\n    constructor(arrayVisualizer) {\r\n        this.arrayVisualizer = arrayVisualizer\r\n        this.timeoutArray = []\r\n        this.delays = {\r\n            Swap: 0,\r\n            Write: 0,\r\n            Comp: 0,\r\n            Unmark: 0,\r\n            CreateAuxArray: 0,\r\n            RemoveAuxArray: 0,\r\n            Other: 0\r\n        }\r\n        this.DELAY_INC_CONST = 3000\r\n        this.updateDelayInc()\r\n        // this.delayIncFactor = this.DELAY_INC_CONST-arrayVisualizer.getArrLength()*3\r\n        // this.delayInc = this.delayIncFactor/arrayVisualizer.getArrLength()\r\n    }\r\n\r\n    updateDelayInc(){\r\n        this.delayIncFactor = this.DELAY_INC_CONST\r\n        this.delayInc = this.delayIncFactor/this.arrayVisualizer.getArrLength()\r\n    }\r\n\r\n    push(timeout){\r\n        this.timeoutArray.push(timeout)\r\n    }\r\n\r\n    pushFunc(func, obj, delayName, delay, args) {\r\n        this.timeoutArray.push(setTimeout(func.bind(obj), this.delays[delayName] += delay, args))\r\n    }\r\n\r\n    resetDelays() {\r\n        this.delays = {\r\n            Swap: 0,\r\n            Write: 0,\r\n            Comp: 0,\r\n            Unmark: 0,\r\n            CreateAuxArray: 0,\r\n            RemoveAuxArray: 0,\r\n            Other: 0\r\n        }\r\n        for (let i of this.timeoutArray) {\r\n            clearTimeout(i);\r\n        }\r\n        this.timeoutArray = []\r\n    }\r\n\r\n    setDelay(name, value){\r\n        this.delays[name] = value\r\n    }\r\n\r\n    incDelay(name, inc=this.delayInc){\r\n        return this.delays[name]+=inc\r\n    }\r\n\r\n    getDelayInc(){\r\n        return this.delayInc\r\n    }\r\n\r\n    getDelays(){\r\n        return this.delays\r\n    }\r\n}","\r\nimport {objLength} from \"../utils/utils\";\r\n\r\nexport class Writes{\r\n    arrayVisualizer;\r\n    Sounds\r\n    Delays\r\n    Marks\r\n\r\n    constructor(arrayVisualizer){\r\n        this.arrayVisualizer = arrayVisualizer\r\n        this.Sounds = arrayVisualizer.getSounds()\r\n        this.Delays = arrayVisualizer.getDelays()\r\n        this.Marks = arrayVisualizer.getMarks()\r\n    }\r\n\r\n\r\n\r\n    swapWithDelay(a, b, arr = this.arrayVisualizer.getPseudoArray(), mark, delay = this.Delays.getDelayInc(), playSound) {\r\n        // this.Delays.push(setTimeout(this.swapInArr.bind(this), this.Delays.incDelay(\"Write\", delay), a, b, arr, mark, playSound))\r\n        this.Delays.push(setTimeout(()=>{\r\n            this.swapInArr(a, b, arr, mark, playSound)\r\n            let curWrites = this.arrayVisualizer.getState().mainWrites + 2;\r\n            this.arrayVisualizer.setState({\r\n                mainWrites: curWrites\r\n            })\r\n        }, this.Delays.incDelay(\"Write\", delay)))\r\n    }\r\n\r\n\r\n    swapInArr(a, b, arr = this.arrayVisualizer.getPseudoArray(), mark = true, playSound = false) {\r\n        if(playSound) {\r\n            this.Sounds.playSound(arr[b].getValue());\r\n        }\r\n        let tmpArr = arr\r\n        // let tmp = tmpArr[a]\r\n        // tmpArr[a] = tmpArr[b]\r\n        // tmpArr[b] = tmp\r\n        let tmp = tmpArr[a]\r\n        tmpArr[a] = tmpArr[b].copy(true)\r\n        tmpArr[b] = tmp.copy(true)\r\n        if (mark) {\r\n            this.Marks.markUnmarkMany([a, b], {type: \"Default\"})\r\n        }\r\n        // let curWrites = this.arrayVisualizer.getState().writes + 2;\r\n        // this.arrayVisualizer.setState({\r\n        //     writes: curWrites\r\n        // })\r\n    }\r\n\r\n    swap(a, b, arr = this.arrayVisualizer.getPseudoArray()) {\r\n        this.swapInArr(a, b, arr, false, false)\r\n        this.swapWithDelay(a, b, this.arrayVisualizer.getMainArray(), true, this.Delays.getDelayInc(), true)\r\n    }\r\n\r\n    // writeInArr(index, value, arr = this.arrayVisualizer.getPseudoArray(), mark = true, playSound = false) {\r\n    //     if(playSound) {\r\n    //         this.Sounds.playSound(value)\r\n    //     }\r\n    //     arr[index].setValue(value)\r\n    //     if (mark) {\r\n    //         this.Marks.markUnmarkMany([index], {type: \"Default\"})\r\n    //     }\r\n    //     let curWrites = this.arrayVisualizer.getState().writes;\r\n    //     this.arrayVisualizer.setState({\r\n    //         writes: curWrites + 1\r\n    //     })\r\n    // }\r\n\r\n\r\n    writeInArr(index, toWrite, arr = this.arrayVisualizer.getPseudoArray(), mark = true, playSound = false) {\r\n        if(playSound) {\r\n            this.Sounds.playSound(toWrite.getValue())\r\n        }\r\n        arr[index] = toWrite.copy(true)\r\n        if (mark) {\r\n            this.Marks.markUnmarkMany([index], {type: \"Default\"})\r\n        }\r\n        // let curWrites = this.arrayVisualizer.getState().mainWrites + 1;\r\n        // this.arrayVisualizer.setState({\r\n        //     mainWrites: curWrites\r\n        // })\r\n    }\r\n\r\n    writeWithDelay(index, toWrite, arr = this.arrayVisualizer.getPseudoArray(), mark, delay = this.Delays.getDelayInc(), playSound = true) {\r\n        // this.Delays.push(setTimeout(this.writeInArr.bind(this), this.Delays.incDelay(\"Write\", delay), index, toWrite, arr, mark, playSound))\r\n        this.Delays.push(setTimeout(()=>{\r\n            this.writeInArr(index, toWrite, arr, mark, playSound)\r\n            let curWrites = this.arrayVisualizer.getState().mainWrites + 1;\r\n            this.arrayVisualizer.setState({\r\n                mainWrites: curWrites\r\n            })\r\n        }, this.Delays.incDelay(\"Write\", delay)))\r\n    }\r\n\r\n    write(index, toWrite, arr = this.arrayVisualizer.getPseudoArray()) {\r\n        this.writeInArr(index, toWrite, arr, false, false)\r\n        this.writeWithDelay(index, toWrite, this.arrayVisualizer.getMainArray(), true, this.Delays.getDelayInc(), true)\r\n    }\r\n\r\n    createAuxArray(len, isPseudo = true){\r\n        if(isPseudo) {\r\n            let pseudoAuxArrays = this.arrayVisualizer.getPseudoAuxArrays()\r\n            let auxArrIndex = objLength(pseudoAuxArrays)\r\n            pseudoAuxArrays[auxArrIndex]=(this.arrayVisualizer.initArray(() => -1, len, false))\r\n            this.createAuxArrayWithDelay(len, this.Delays.getDelayInc(), false)\r\n            return auxArrIndex\r\n        }else{\r\n            let tmpArr = this.arrayVisualizer.getAuxArrays()\r\n            let auxArrIndex = objLength(tmpArr)\r\n\r\n            tmpArr[auxArrIndex]=(this.arrayVisualizer.initArray(() => -1, len, false))\r\n            this.arrayVisualizer.setState({\r\n                    auxArrays: tmpArr\r\n                }\r\n            )\r\n        }\r\n    }\r\n\r\n    createAuxArrayWithDelay(len, delay, isPseudo = false){\r\n        this.Delays.push(setTimeout(this.createAuxArray.bind(this), this.Delays.incDelay(\"Write\", delay), len, isPseudo))\r\n    }\r\n\r\n    removeAuxArray(index, isPseudo = true){\r\n        if(isPseudo) {\r\n            // this.arrayVisualizer.getPseudoAuxArrays().splice(index, 1)\r\n            delete this.arrayVisualizer.getPseudoAuxArrays()[index]\r\n            this.removeAuxArrayWithDelay(index, this.Delays.getDelayInc(), false)\r\n        }else{\r\n            let tmp = this.arrayVisualizer.getAuxArrays()\r\n            // tmp.splice(index, 1)\r\n            delete tmp[index]\r\n            this.arrayVisualizer.setState({\r\n                auxArrays: tmp\r\n            })\r\n        }\r\n    }\r\n\r\n    removeAuxArrayWithDelay(index, delay, isPseudo = false){\r\n        this.Delays.push(setTimeout(this.removeAuxArray.bind(this), this.Delays.incDelay(\"Write\", delay), index, isPseudo))\r\n    }\r\n\r\n\r\n    auxWrite(index, toWrite, arrIndex, isPseudo = true, playSound = false){\r\n        if(playSound){\r\n            this.Sounds.playSound(toWrite.getValue())\r\n        }\r\n        if(isPseudo){\r\n            this.arrayVisualizer.getPseudoAuxArrays()[arrIndex][index] = toWrite.copy()\r\n            this.auxWriteWithDelay(index, toWrite, arrIndex, this.Delays.getDelayInc(), false, true)\r\n        }else{\r\n            this.arrayVisualizer.getAuxArrays()[arrIndex][index] = toWrite.copy()\r\n            let tmp = this.arrayVisualizer.getAuxArrays()\r\n            let curWrites = this.arrayVisualizer.getState().auxWrites + 1;\r\n            this.arrayVisualizer.setState({\r\n                auxWrites: curWrites\r\n            })\r\n            this.arrayVisualizer.setState({\r\n                auxArrays: tmp\r\n            })\r\n        }\r\n    }\r\n\r\n    auxWriteWithDelay(index, value, arrIndex, delay, isPseudo = false, playSound = true, ){\r\n        this.Delays.push(setTimeout(this.auxWrite.bind(this), this.Delays.incDelay(\"Write\", delay), index, value, arrIndex, isPseudo, playSound))\r\n    }\r\n\r\n}","import {Delays} from \"../ArrayAccess/Delays\";\r\n\r\nexport class Sorts {\r\n    arrayVisualizer;\r\n    sortsPaths\r\n    Delays\r\n    Sounds\r\n    Marks\r\n\r\n\r\n    constructor(arrayVisualizer) {\r\n        this.arrayVisualizer = arrayVisualizer\r\n\r\n        this.Delays = arrayVisualizer.getDelays()\r\n        this.Sounds = arrayVisualizer.getSounds()\r\n        this.Marks = arrayVisualizer.getMarks()\r\n\r\n        this.sortsPaths = [\"BubbleSort\", \"MergeSort\", \"LLQuickSort\", \"LRQuickSort\",\r\n            \"DualPivotQuickSort\", \"InsertionSort\", \"SelectionSort\", \"GnomeSort\", \"TimSort\", \"PseudoTimSort\",\r\n            \"HeapSort\", \"LSDRadixSort\", \"BitonicSort\", \"SlowSort\", \"StoogeSort\", \"GrailSort\"]\r\n    }\r\n\r\n    getSortsPaths() {\r\n        return this.sortsPaths;\r\n    }\r\n\r\n    getSortObject(sortPath) {\r\n        let Sort = require(\"./\" + sortPath + \".js\")[sortPath]\r\n        return new Sort(this.arrayVisualizer)\r\n    }\r\n\r\n    runSort(sortName, low, high) {\r\n        this.arrayVisualizer.getDelays().resetDelays()\r\n        this.arrayVisualizer.nullify()\r\n        let sort = this.getSortObject(sortName)\r\n        let warnLen = sort.getWarnLen()\r\n        let bucketsNum = 4\r\n        if (sort.isNeedBucketsNum) {\r\n            bucketsNum = parseInt(prompt(\"Enter the base:\", \"4\"))\r\n            if (isNaN(bucketsNum)) {\r\n                return;\r\n            }\r\n        }\r\n        if (warnLen !== -1 && this.arrayVisualizer.getArrLength() > warnLen &&\r\n            !window.confirm(\"WARNING!!!\\nThe array size(\" + this.arrayVisualizer.getArrLength() + \") \" +\r\n            \"more than recommended(\" + warnLen + \")\\nApplication may freeze\\nDo you want continue?\")) {\r\n            return\r\n        }\r\n\r\n        bucketsNum = Math.max(4, bucketsNum)\r\n\r\n        let bufferSize = 0\r\n        if (sort.isNeedBuffer) {\r\n            bufferSize = parseInt(prompt(\"Enter the buffer size:\", \"0\"))\r\n            if (isNaN(bufferSize)) {\r\n                return;\r\n            }\r\n        }\r\n        bufferSize = Math.max(0, bufferSize)\r\n\r\n        this.arrayVisualizer.initPseudoArray()\r\n        this.arrayVisualizer.setSortName(sort.getSortName())\r\n        this.arrayVisualizer.backupArray()\r\n        sort.runSort(low, high, bucketsNum, bufferSize)\r\n        // this.arrayVisualizer.sortClickEvent()\r\n        console.log(this.Delays.getDelays().Write)\r\n        setTimeout(()=>(this.checkSort()), this.Delays.getDelays().Write+this.Delays.getDelayInc()*5)\r\n    }\r\n\r\n    checkSort(){\r\n        let isSorted = true\r\n        let array = this.arrayVisualizer.getMainArray()\r\n        for(let i = 1; i < array.length; ++i){\r\n            if(array[i-1].getValue() > array[i].getValue()){\r\n                isSorted=false\r\n                break;\r\n            }\r\n        }\r\n        for (let i = 0; i < array.length; ++i) {\r\n            this.Delays.push(setTimeout(()=>{\r\n                if(isSorted) {\r\n                    this.Sounds.playSound(array[i].getValue())\r\n                    this.Marks.mark(i, {type: \"Sorted\", color: [0, 255, 0]}, true)\r\n                }else {\r\n                    this.Marks.mark(i, {type: \"Default\", color: [255, 0, 0]}, true)\r\n                }\r\n            }, this.Delays.incDelay(\"Other\", this.Delays.getDelayInc()/2)))\r\n        }\r\n        setTimeout(()=>{\r\n            this.Marks.clearAllMarks()\r\n            this.Delays.resetDelays()\r\n            this.arrayVisualizer.forceMainArrayUpdate()\r\n        }, (this.Delays.getDelayInc())*(array.length+2)/2)\r\n\r\n    }\r\n}","import {Sort} from \"./Sort\";\r\n\r\nexport class HeapSort extends Sort{\r\n    constructor(arrayVisualizer) {\r\n        super(arrayVisualizer);\r\n        this.sortName = \"HeapSort\"\r\n    }\r\n\r\n    heapify(n, i) {\r\n        let largest = i;\r\n\r\n        let l = 2 * i + 1;\r\n        let r = 2 * i + 2;\r\n\r\n        if (l < n && this.Reads.compareInArr(l, largest) > 0) {\r\n            largest = l;\r\n        }\r\n        if (r < n && this.Reads.compareInArr(r, largest) > 0) {\r\n            largest = r;\r\n        }\r\n\r\n        if (largest !== i) {\r\n            this.Writes.swap(i, largest);\r\n            this.heapify(n, largest);\r\n        }\r\n    }\r\n\r\n    HeapSort() {\r\n        let n = this.arrLength;\r\n\r\n\r\n        for (let i = Math.trunc(n / 2) - 1; i >= 0; i--) {\r\n            this.heapify(n, i);\r\n        }\r\n\r\n        for (let i = n - 1; i >= 0; i--) {\r\n            this.Writes.swap(0, i);\r\n            this.heapify(i, 0)\r\n        }\r\n    }\r\n\r\n    runSort(low, high) {\r\n        this.HeapSort(low, high)\r\n    }\r\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"statsContainer\":\"Stats_statsContainer__1qOnq\"};","var map = {\n\t\"./BitonicSort.js\": 31,\n\t\"./BubbleSort.js\": 32,\n\t\"./DualPivotQuickSort.js\": 33,\n\t\"./GnomeSort.js\": 34,\n\t\"./GrailSort.js\": 35,\n\t\"./HeapSort.js\": 20,\n\t\"./InsertionSort.js\": 13,\n\t\"./LLQuickSort.js\": 36,\n\t\"./LRQuickSort.js\": 37,\n\t\"./LSDRadixSort.js\": 38,\n\t\"./MergeSort.js\": 39,\n\t\"./PseudoTimSort.js\": 40,\n\t\"./SelectionSort.js\": 41,\n\t\"./SlowSort.js\": 42,\n\t\"./Sort.js\": 5,\n\t\"./Sorts.js\": 19,\n\t\"./StoogeSort.js\": 43,\n\t\"./TimSort.js\": 44\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 30;","import {Sort} from \"./Sort\";\r\n\r\nexport class BitonicSort extends Sort{\r\n    constructor(arrayVisualizer) {\r\n        super(arrayVisualizer);\r\n        this.sortName = \"BitonicSort\"\r\n    }\r\n    // kernel(p, q) {\r\n    //     const d = 1 << (p - q);\r\n    //\r\n    //     for (let i = 0; i < this.arrLength; i++) {\r\n    //         const up = ((i >> p) & 2) === 0;\r\n    //         // if ((i & d) === 0 && (x[i] > x[i | d]) === up) {\r\n    //         if ((i & d) === 0 && ((this.Reads.compare(i, i | d, \">\")) === up)) {\r\n    //             // const tmp = x[i];\r\n    //             // x[i] = x[i | d];\r\n    //             // x[i | d] = tmp;\r\n    //             this.Writes.swap(i, i | d)\r\n    //         }\r\n    //     }\r\n    // }\r\n    //\r\n    // bitonicSort(n) {\r\n    //     for (let i = 0; i < n; i++) {\r\n    //         for(let j = 0; j <= i; j++) {\r\n    //             this.kernel(i, j);\r\n    //         }\r\n    //     }\r\n    // }\r\n    bitonicSort(sortLength){\r\n        let i, j, k;\r\n\r\n        for(k = 2; k < sortLength*2; k = 2 * k) {\r\n            let m = (Math.trunc((sortLength + (k - 1)) / k) % 2) !== 0;\r\n\r\n            for(j = k >> 1; j > 0; j = j >> 1) {\r\n                for(i = 0; i < sortLength; i++) {\r\n                    let ij = i ^ j;\r\n\r\n                    if((ij) > i && ij < sortLength) {\r\n                        if((((i & k) === 0) === m) && this.Reads.compareInArr(i, ij) > 0)\r\n                            this.Writes.swap(i, ij);\r\n                        if((((i & k) !== 0) === m) && this.Reads.compareInArr(i, ij) < 0)\r\n                            this.Writes.swap(i, ij);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n    runSort(low, high, bucketsNum) {\r\n        // this.bitonicSort(Math.trunc(Math.log2(high-1)))\r\n        this.bitonicSort(high+1)\r\n    }\r\n\r\n}\r\n","import {Sort} from \"./Sort\";\r\n\r\nexport class BubbleSort extends Sort{\r\n    constructor(arrayVisualizer) {\r\n        super(arrayVisualizer);\r\n        this.sortName = \"BubbleSort\"\r\n    }\r\n    BubbleSort() {\r\n        let len = this.arrLength;\r\n        for (let i = 0; i < len; i++) {\r\n            for (let j = 0; j < len - i - 1; j++) {\r\n                if (this.Reads.compareInArr(j, j + 1) > 0) {\r\n                    this.Writes.swap(j, j + 1)\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    runSort(low, high) {\r\n        this.BubbleSort(low, high)\r\n    }\r\n}","import {Sort} from \"./Sort\";\r\nimport {InsertionSort} from \"./InsertionSort\";\r\n\r\nexport class DualPivotQuickSort extends Sort {\r\n    constructor(arrayVisualizer) {\r\n        super(arrayVisualizer);\r\n        this.sortName = \"Dual Pivot QuickSort\"\r\n    }\r\n\r\n    dualPivot(left, right, divisor) {\r\n        let length = right - left;\r\n\r\n        // insertion sort for tiny array\r\n        if (length < 4) {\r\n            let insertSorter = new InsertionSort(this.arrayVisualizer)\r\n            insertSorter.runSort(left, right)\r\n            return;\r\n        }\r\n        // if(length === 1){\r\n        //     return\r\n        // }\r\n\r\n        let third = Math.trunc(length / divisor);\r\n\r\n// \"medians\"\r\n        let med1 = left + third;\r\n        let med2 = right - third;\r\n\r\n        if (med1 <= left) {\r\n            med1 = left + 1;\r\n        }\r\n        if (med2 >= right) {\r\n            med2 = right - 1;\r\n        }\r\n\r\n\r\n        // if(Reads.compareValues(array[med1], array[med2]) == -1) {\r\n        if (this.Reads.compareInArr(med1, med2) < 0) {\r\n            this.Writes.swap(med1, left);\r\n            this.Writes.swap(med2, right);\r\n        } else {\r\n            this.Writes.swap(med1, right);\r\n            this.Writes.swap(med2, left);\r\n        }\r\n\r\n// pivots\r\n        let pivot1 = this.Reads.readValue(left);\r\n        let pivot2 = this.Reads.readValue(right);\r\n\r\n// pointers\r\n        let less = left + 1;\r\n        let great = right - 1;\r\n\r\n// sorting\r\n        for (let k = less; k <= great; k++) {\r\n\r\n            // if (this.Reads.read(k) < pivot1) {\r\n            if (this.Reads.compareValues(this.Reads.get(k), pivot1) < 0) {\r\n\r\n                this.Writes.swap(k, less++);\r\n            // } else if (this.Reads.read(k) > pivot2) {\r\n            } else if (this.Reads.compareValues(this.Reads.get(k), pivot2) > 0) {\r\n                // while (k < great && this.Reads.read(great) > pivot2) {\r\n                while (k < great && this.Reads.compareValues(this.Reads.get(great), pivot2) > 0) {\r\n                    great--;\r\n                }\r\n                this.Writes.swap(k, great--);\r\n\r\n                // if (this.Reads.read(k) < pivot1) {\r\n                if (this.Reads.compareValues(this.Reads.get(k), pivot1) < 0) {\r\n                    this.Writes.swap(k, less++);\r\n                }\r\n            }\r\n        }\r\n\r\n// swaps\r\n        let dist = great - less;\r\n\r\n        if (dist < 13) {\r\n            divisor++;\r\n        }\r\n        this.Writes.swap(less - 1, left);\r\n        this.Writes.swap(great + 1, right);\r\n\r\n// subarrays\r\n        this.dualPivot(left, less - 2, divisor);\r\n        if (pivot1 < pivot2) {\r\n            this.dualPivot(less, great, divisor);\r\n        }\r\n        this.dualPivot(great + 2, right, divisor);\r\n    }\r\n\r\n    runSort(low, high) {\r\n        this.dualPivot(low, high, 3)\r\n    }\r\n}","import {Sort} from \"./Sort\";\r\nimport {Writes} from \"../ArrayAccess/Writes\";\r\n\r\nexport class GnomeSort extends Sort {\r\n    constructor(arrayVisualizer) {\r\n        super(arrayVisualizer);\r\n        this.sortName = \"GnomeSort\"\r\n    }\r\n\r\n    GnomeSort() {\r\n        let len = this.arrLength;\r\n        for (let i = 1; i < len;) {\r\n            if (this.Reads.compareInArr(i, i - 1) >= 0) {\r\n                i++\r\n            } else {\r\n                this.Writes.swap(i, i - 1)\r\n                if (i > 1) {\r\n                    i--;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    runSort(low, high) {\r\n        this.GnomeSort(low, high)\r\n    }\r\n}","/*\r\n * MIT License\r\n * \r\n * Copyright (c) 2013 Andrey Astrelin\r\n * Copyright (c) 2020 The Holy Grail Sort Project\r\n * \r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal\r\n * in the Software without restriction, including without limitation the rights\r\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n * copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n * \r\n * The above copyright notice and this permission notice shall be included in all\r\n * copies or substantial portions of the Software.\r\n * \r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n * SOFTWARE.\r\n */\r\n\r\n/*\r\n * The Holy Grail Sort Project\r\n * Project Manager:      Summer Dragonfly\r\n * Project Contributors: 666666t\r\n *                       Anonymous0726\r\n *                       aphitorite\r\n *                       dani_dlg\r\n *                       EilrahcF\r\n *                       Enver\r\n *                       lovebuny\r\n *                       MP\r\n *                       phoenixbound\r\n *                       thatsOven\r\n *                       \r\n * Special thanks to \"The Studio\" Discord community!\r\n */\r\n\r\n// Credit to phoenixbound for this clever idea\r\n\r\nimport {Sort} from \"./Sort\";\r\n\r\nconst Subarray = {\r\n    LEFT: 1,\r\n    RIGHT: 2,\r\n};\r\n\r\n// REWRITTEN GRAILSORT FOR JAVASCRIPT - A heavily refactored C/C++-to-JavaScript version of\r\n//                                      Andrey Astrelin's GrailSort.h, aiming to be as\r\n//                                      readable and intuitive as possible.\r\n//\r\n// ** Written and maintained by The Holy Grail Sort Project\r\n//\r\n// Primary author: Enver\r\n//\r\n// Current status: Finished. Potentially 100% working... Passing most tests, some tests capped by V8 Engine memory allocation limits\r\n\r\nexport class GrailSort extends Sort {\r\n    // static GRAIL_STATIC_EXT_BUF_LEN = 512;\r\n\r\n    externalBuffer\r\n    externalBufferLen\r\n\r\n    constructor(arrayVisualizer) {\r\n        super(arrayVisualizer);\r\n        this.sortName = \"GrailSort\"\r\n        this.isNeedBuffer = true;\r\n    }\r\n\r\n    grailSwap(a, b) {\r\n        // let temp = array[a];\r\n        // array[a] = array[b];\r\n        // array[b] = temp;\r\n        this.Writes.swap(a, b)\r\n    }\r\n\r\n    grailBlockSwap(a, b, blockLen) {\r\n        for (let i = 0; i < blockLen; i++) {\r\n            this.grailSwap(a + i, b + i);\r\n        }\r\n    }\r\n\r\n    // Object src, int srcPos, Object dest, int destPos, int length\r\n    // Custom method for copying parts of the array either:\r\n    //      within itself to a different destination, or\r\n    //      to another array\r\n    arraycopy(srcArray, srcPos, destArray, destPos, copyLen) {\r\n\r\n        if (srcArray === -1 && destArray === -1) {\r\n            for (let i = 0; i < copyLen; i++) {\r\n                this.Writes.write(destPos + i, this.Reads.get(srcPos + i))\r\n            }\r\n        } else if (srcArray !== -1 && destArray !== -1) {\r\n            for (let i = 0; i < copyLen; i++) {\r\n                this.Writes.auxWrite(destPos + i, this.Reads.auxGet(srcPos + i, srcArray), destArray)\r\n            }\r\n        } else if (srcArray === -1 && destArray !== -1) {\r\n            for (let i = 0; i < copyLen; i++) {\r\n                this.Writes.auxWrite(destPos + i, this.Reads.get(srcPos + i), destArray)\r\n            }\r\n        } else if (srcArray !== -1 && destArray === -1) {\r\n            for (let i = 0; i < copyLen; i++) {\r\n                this.Writes.write(destPos + i, this.Reads.auxGet(srcPos + i, srcArray))\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    grailRotate(start, leftLen, rightLen) {\r\n        while (leftLen > 0 && rightLen > 0) {\r\n            if (leftLen <= rightLen) {\r\n                this.grailBlockSwap(start, start + leftLen, leftLen);\r\n                start += leftLen;\r\n                rightLen -= leftLen;\r\n            } else {\r\n                this.grailBlockSwap(start + leftLen - rightLen, start + leftLen, rightLen);\r\n                leftLen -= rightLen;\r\n            }\r\n        }\r\n    }\r\n\r\n    // Variant of Insertion Sort that utilizes swaps instead of overwrites.\r\n    // Also known as \"Optimized Gnomesort\".\r\n    grailInsertSort(start, length) {\r\n        for (let item = 1; item < length; item++) {\r\n            let left = start + item - 1;\r\n            let right = start + item;\r\n\r\n            while (left >= start && this.Reads.compareInArr(left,\r\n                right) > 0) {\r\n                this.grailSwap(left, right);\r\n                left--;\r\n                right--;\r\n            }\r\n        }\r\n    }\r\n\r\n    grailBinarySearchLeft(start, length, target) {\r\n        let left = 0;\r\n        let right = length;\r\n        while (left < right) {\r\n            let middle = left + parseInt((right - left) / 2);\r\n            if (this.Reads.compareValues(this.Reads.readValue(start + middle), target) < 0) {\r\n                left = middle + 1;\r\n            } else {\r\n                right = middle;\r\n            }\r\n        }\r\n        return left;\r\n    }\r\n\r\n    // Credit to Anonymous0726 for debugging\r\n    grailBinarySearchRight(start, length, target) {\r\n        let left = 0;\r\n        let right = length;\r\n        while (left < right) {\r\n            let middle = left + parseInt((right - left) / 2);\r\n            if (this.Reads.compareValues(this.Reads.readValue(start + middle), target) > 0) {\r\n                right = middle;\r\n            } else {\r\n                left = middle + 1;\r\n            }\r\n        }\r\n        // OFF-BY-ONE BUG FIXED: used to be `return right - 1;`\r\n        return right;\r\n    }\r\n\r\n    // cost: 2 * length + idealKeys^2 / 2\r\n    grailCollectKeys(start, length, idealKeys) {\r\n        let keysFound = 1; // by itself, the first item in the array is our first unique key\r\n        let firstKey = 0; // the first item in the array is at the first position in the array\r\n        let currentKey = 1; // the index used for finding potentially unique items (\"keys\") in the array\r\n\r\n        while (currentKey < length && keysFound < idealKeys) {\r\n\r\n            // Find the location in the key-buffer where our current key can be inserted in sorted order.\r\n            // If the key at insertPos is equal to currentKey, then currentKey isn't unique and we move on.\r\n            let insertPos = this.grailBinarySearchLeft(start + firstKey, keysFound, this.Reads.readValue(start + currentKey));\r\n\r\n            // The second part of this conditional does the equal check we were just talking about; however,\r\n            // if currentKey is larger than everything in the key-buffer (meaning insertPos == keysFound),\r\n            // then that also tells us it wasn't *equal* to anything in the key-buffer. Magic! :) \r\n            if (insertPos == keysFound || this.Reads.compareInArr(start + currentKey,\r\n                start + firstKey + insertPos) != 0) {\r\n\r\n                // First, rotate the key-buffer over to currentKey's immediate left...\r\n                // (this helps save a TON of swaps/writes!!!)\r\n                this.grailRotate(start + firstKey, keysFound, currentKey - (firstKey + keysFound));\r\n\r\n                // Update the new position of firstKey...\r\n                firstKey = currentKey - keysFound;\r\n\r\n                // Then, \"insertion sort\" currentKey to its spot in the key-buffer!\r\n                this.grailRotate(start + firstKey + insertPos, keysFound - insertPos, 1);\r\n\r\n                // One step closer to idealKeys.\r\n                keysFound++;\r\n            }\r\n            // Move on and test the next key...\r\n            currentKey++;\r\n        }\r\n\r\n        // Bring however many keys we found back to the beginning of our array,\r\n        // and return the number of keys collected.\r\n        this.grailRotate(start, firstKey, keysFound);\r\n        return keysFound;\r\n    }\r\n\r\n    grailPairwiseSwaps(start, length) {\r\n        let index;\r\n        for (index = 1; index < length; index += 2) {\r\n            let left = start + index - 1;\r\n            let right = start + index;\r\n\r\n            if (this.Reads.compareInArr(left, right) > 0) {\r\n                this.grailSwap(left - 2, right);\r\n                this.grailSwap(right - 2, left);\r\n            } else {\r\n                this.grailSwap(left - 2, left);\r\n                this.grailSwap(right - 2, right);\r\n            }\r\n        }\r\n\r\n        let left = start + index - 1;\r\n        if (left < start + length) {\r\n            this.grailSwap(left - 2, left);\r\n        }\r\n    }\r\n\r\n    grailPairwiseWrites(start, length) {\r\n        let index;\r\n        for (index = 1; index < length; index += 2) {\r\n            let left = start + index - 1;\r\n            let right = start + index;\r\n\r\n            if (this.Reads.compareInArr(left, right) > 0) {\r\n                this.Writes.write(left - 2, this.Reads.get(right))\r\n                this.Writes.write(right - 2, this.Reads.get(left))\r\n            } else {\r\n                this.Writes.write(left - 2, this.Reads.get(left))\r\n                this.Writes.write(right - 2, this.Reads.get(right))\r\n            }\r\n        }\r\n\r\n        let left = start + index - 1;\r\n        if (left < start + length) {\r\n            this.Writes.write(left - 2, this.Reads.get(left))\r\n        }\r\n    }\r\n\r\n    // array[buffer .. start - 1] <=> \"scrolling buffer\"\r\n    // \r\n    // \"scrolling buffer\" + array[start, middle - 1] + array[middle, end - 1]\r\n    // --> array[buffer, buffer + end - 1] + \"scrolling buffer\"\r\n    grailMergeForwards(start, leftLen, rightLen, bufferOffset) {\r\n        let left = start;\r\n        let middle = start + leftLen;\r\n        let right = middle;\r\n        let end = middle + rightLen;\r\n        let buffer = start - bufferOffset;\r\n\r\n        while (right < end) {\r\n            if (left == middle || this.Reads.compareInArr(left,\r\n                right) > 0) {\r\n\r\n                this.grailSwap(buffer, right);\r\n                right++;\r\n            } else {\r\n                this.grailSwap(buffer, left);\r\n                left++;\r\n            }\r\n            buffer++;\r\n        }\r\n\r\n        if (buffer != left) {\r\n            this.grailBlockSwap(buffer, left, middle - left);\r\n        }\r\n    }\r\n\r\n    // credit to 666666t for thorough bug-checking/fixing\r\n    grailMergeBackwards(start, leftLen, rightLen, bufferOffset) {\r\n        let left = start + leftLen - 1;\r\n        let middle = left;\r\n        // OFF-BY-ONE BUG FIXED: used to be `let  right = middle + rightLen - 1;`\r\n        let right = middle + rightLen;\r\n        let end = start;\r\n        // OFF-BY-ONE BUG FIXED: used to be `let buffer = right  + bufferOffset - 1;`\r\n        let buffer = right + bufferOffset;\r\n\r\n        while (left >= end) {\r\n            if (right == middle || this.Reads.compareInArr(left,\r\n                right) > 0) {\r\n\r\n                this.grailSwap(buffer, left);\r\n                left--;\r\n            } else {\r\n                this.grailSwap(buffer, right);\r\n                right--;\r\n            }\r\n            buffer--;\r\n        }\r\n\r\n        if (right != buffer) {\r\n            while (right > middle) {\r\n                this.grailSwap(buffer, right);\r\n                buffer--;\r\n                right--;\r\n            }\r\n        }\r\n    }\r\n\r\n    // array[buffer .. start - 1] <=> \"free space\"    \r\n    //\r\n    // \"free space\" + array[start, middle - 1] + array[middle, end - 1]\r\n    // --> array[buffer, buffer + end - 1] + \"free space\"\r\n    //\r\n    // FUNCTION RENAMED: More consistent with \"out-of-place\" being at the end\r\n    grailMergeOutOfPlace(start, leftLen, rightLen, bufferOffset) {\r\n        let left = start;\r\n        let middle = start + leftLen;\r\n        let right = middle;\r\n        let end = middle + rightLen;\r\n        let buffer = start - bufferOffset;\r\n\r\n        while (right < end) {\r\n            if (left == middle || this.Reads.compareInArr(left,\r\n                right) > 0) {\r\n\r\n                this.Writes.write(buffer, this.Reads.get(right))\r\n                right++;\r\n            } else {\r\n                this.Writes.write(buffer, this.Reads.get(left))\r\n                left++;\r\n            }\r\n            buffer++;\r\n        }\r\n\r\n        if (buffer != left) {\r\n            while (left < middle) {\r\n                this.Writes.write(buffer, this.Reads.get(left))\r\n                buffer++;\r\n                left++;\r\n            }\r\n        }\r\n    }\r\n\r\n    grailBuildInPlace(start, length, currentMerge, bufferLen) {\r\n        for (let mergeLen = currentMerge; mergeLen < bufferLen; mergeLen *= 2) {\r\n            let mergeIndex;\r\n            let mergeEnd = start + length - (2 * mergeLen);\r\n            let bufferOffset = mergeLen;\r\n\r\n            for (mergeIndex = start; mergeIndex <= mergeEnd; mergeIndex += (2 * mergeLen)) {\r\n                this.grailMergeForwards(mergeIndex, mergeLen, mergeLen, bufferOffset);\r\n            }\r\n\r\n            let leftOver = length - (mergeIndex - start);\r\n\r\n            if (leftOver > mergeLen) {\r\n                this.grailMergeForwards(mergeIndex, mergeLen, leftOver - mergeLen, bufferOffset);\r\n            } else {\r\n                this.grailRotate(mergeIndex - mergeLen, mergeLen, leftOver);\r\n            }\r\n\r\n            start -= mergeLen;\r\n        }\r\n\r\n        let finalBlock = length % (2 * bufferLen);\r\n        let finalOffset = start + length - finalBlock;\r\n\r\n        if (finalBlock <= bufferLen) {\r\n            this.grailRotate(finalOffset, finalBlock, bufferLen);\r\n        } else {\r\n            this.grailMergeBackwards(finalOffset, bufferLen, finalBlock - bufferLen, bufferLen);\r\n        }\r\n\r\n        for (let mergeIndex = finalOffset - (2 * bufferLen); mergeIndex >= start; mergeIndex -= (2 * bufferLen)) {\r\n            this.grailMergeBackwards(mergeIndex, bufferLen, bufferLen, bufferLen);\r\n        }\r\n    }\r\n\r\n    grailBuildOutOfPlace(start, length, bufferLen, externLen) {\r\n        this.arraycopy(-1, start - externLen, this.externalBuffer, 0, externLen);\r\n\r\n        this.grailPairwiseWrites(start, length);\r\n        start -= 2;\r\n\r\n        let mergeLen;\r\n        for (mergeLen = 2; mergeLen < externLen; mergeLen *= 2) {\r\n            let mergeIndex;\r\n            let mergeEnd = start + length - (2 * mergeLen);\r\n            let bufferOffset = mergeLen;\r\n\r\n            for (mergeIndex = start; mergeIndex <= mergeEnd; mergeIndex += (2 * mergeLen)) {\r\n                this.grailMergeOutOfPlace(mergeIndex, mergeLen, mergeLen, bufferOffset);\r\n            }\r\n\r\n            let leftOver = length - (mergeIndex - start);\r\n\r\n            if (leftOver > mergeLen) {\r\n                this.grailMergeOutOfPlace(mergeIndex, mergeLen, leftOver - mergeLen, bufferOffset);\r\n            } else {\r\n                // TODO: Is this correct??\r\n                for (let offset = 0; offset < leftOver; offset++) {\r\n                    // array[mergeIndex + offset - mergeLen] = array[mergeIndex + offset];\r\n                    this.Writes.write(mergeIndex + offset - mergeLen, this.Reads.get(mergeIndex + offset))\r\n                }\r\n            }\r\n\r\n            start -= mergeLen;\r\n        }\r\n\r\n        this.arraycopy(this.externalBuffer, 0, -1, start + length, externLen);\r\n        this.grailBuildInPlace(start, length, mergeLen, bufferLen);\r\n    }\r\n\r\n    // build blocks of length 'bufferLen'\r\n    // input: [start - mergeLen, start - 1] elements are buffer\r\n    // output: first 'bufferLen' elements are buffer, blocks (2 * bufferLen) and last subblock sorted\r\n    grailBuildBlocks(start, length, bufferLen) {\r\n        if (this.externalBuffer != null) {\r\n            let externLen;\r\n\r\n            if (bufferLen < this.externalBufferLen) {\r\n                externLen = bufferLen;\r\n            } else {\r\n                // max power of 2 -- just in case\r\n                externLen = 1;\r\n                while ((externLen * 2) <= this.externalBufferLen) {\r\n                    externLen *= 2;\r\n                }\r\n            }\r\n\r\n            this.grailBuildOutOfPlace(start, length, bufferLen, externLen);\r\n        } else {\r\n            this.grailPairwiseSwaps(start, length);\r\n            this.grailBuildInPlace(start - 2, length, 2, bufferLen);\r\n        }\r\n    }\r\n\r\n    // Returns the final position of 'medianKey'.\r\n    grailBlockSelectSort(keys, start, medianKey, blockCount, blockLen) {\r\n        for (let block = 1; block < blockCount; block++) {\r\n            let left = block - 1;\r\n            let right = left;\r\n\r\n            for (let index = block; index < blockCount; index++) {\r\n                let compare = this.Reads.compareInArr(start + (right * blockLen),\r\n                    start + (index * blockLen));\r\n\r\n                if (compare > 0 || (compare == 0 && this.Reads.compareInArr(keys + right,\r\n                    keys + index) > 0)) {\r\n                    right = index;\r\n                }\r\n            }\r\n\r\n            if (right != left) {\r\n                // Swap the left and right selected blocks...\r\n                this.grailBlockSwap(start + (left * blockLen), start + (right * blockLen), blockLen);\r\n\r\n                // Swap the keys...\r\n                this.grailSwap(keys + left, keys + right);\r\n\r\n                // ...and follow the 'medianKey' if it was swapped\r\n\r\n                // ORIGINAL LOC: if(midkey==u-1 || midkey==p) midkey^=(u-1)^p;\r\n                // MASSIVE, MASSIVE credit to lovebuny for figuring this one out!\r\n                if (medianKey == left) {\r\n                    medianKey = right;\r\n                } else if (medianKey == right) {\r\n                    medianKey = left;\r\n                }\r\n            }\r\n        }\r\n\r\n        return medianKey;\r\n    }\r\n\r\n    // Swaps Grailsort's \"scrolling buffer\" from the right side of the array all the way back to 'start'.\r\n    // Costs O(n) operations.\r\n    //\r\n    // OFF-BY-ONE BUG FIXED: used to be `int index = start + resetLen`; credit to 666666t for debugging\r\n    grailInPlaceBufferReset(start, resetLen, bufferLen) {\r\n        for (let index = start + resetLen - 1; index >= start; index--) {\r\n            this.grailSwap(index, index - bufferLen);\r\n        }\r\n    }\r\n\r\n    // Shifts entire array over 'bufferSize' spaces to make room for the out-of-place merging buffer.\r\n    // Costs O(n) operations.\r\n    //\r\n    // OFF-BY-ONE BUG FIXED: used to be `int index = start + resetLen`; credit to 666666t for debugging\r\n    grailOutOfPlaceBufferReset(start, resetLen, bufferLen) {\r\n        for (let index = start + resetLen - 1; index >= start; index--) {\r\n            this.Writes.write(index, this.Reads.get(index - bufferLen))\r\n        }\r\n    }\r\n\r\n    // Rewinds Grailsort's \"scrolling buffer\" such that any items from a left subarray block left over by a \"smart merge\" are moved to\r\n    // the right of the buffer. This is used to maintain stability and to continue an ongoing merge that has run out of buffer space.\r\n    // Costs O(sqrt n) swaps in the *absolute* worst-case. \r\n    //\r\n    // NAMING IMPROVED: the left over items are in the middle of the merge while the buffer is at the end\r\n    grailInPlaceBufferRewind(start, leftOvers, buffer) {\r\n        while (leftOvers > start) {\r\n            leftOvers--;\r\n            buffer--;\r\n            this.grailSwap(buffer, leftOvers);\r\n        }\r\n    }\r\n\r\n    // Rewinds Grailsort's out-of-place buffer such that any items from a left subarray block left over by a \"smart merge\" are moved to\r\n    // the right of the buffer. This is used to maintain stability and to continue an ongoing merge that has run out of buffer space.\r\n    // Costs O(sqrt n) writes in the *absolute* worst-case.\r\n    //\r\n    // INCORRECT ORDER OF PARAMETERS BUG FIXED: `leftOvers` should be the middle, and `buffer` should be the end\r\n    grailOutOfPlaceBufferRewind(start, leftOvers, buffer) {\r\n        while (leftOvers > start) {\r\n            leftOvers--;\r\n            buffer--;\r\n            // array[buffer] = array[leftOvers];\r\n            this.Writes.write(buffer, this.Reads.get(leftOvers))\r\n        }\r\n    }\r\n\r\n    grailGetSubarray(currentKey, medianKey) {\r\n        if (this.Reads.compareInArr(currentKey, medianKey) < 0) {\r\n            return Subarray.LEFT;\r\n        } else {\r\n            return Subarray.RIGHT;\r\n        }\r\n    }\r\n\r\n    // FUNCTION RENAMED: more clear *which* left blocks are being counted\r\n    grailCountFinalLeftBlocks(offset, blockCount, blockLen) {\r\n        let leftBlocks = 0;\r\n\r\n        let firstRightBlock = offset + (blockCount * blockLen);\r\n        let prevLeftBlock = firstRightBlock - blockLen;\r\n\r\n        while (leftBlocks < blockCount && this.Reads.compareInArr(firstRightBlock,\r\n            prevLeftBlock) < 0) {\r\n            leftBlocks++;\r\n            prevLeftBlock -= blockLen;\r\n        }\r\n\r\n        return leftBlocks;\r\n    }\r\n\r\n    grailSmartMerge(start, leftLen, leftOrigin, rightLen, bufferOffset) {\r\n        let left = start;\r\n        let middle = start + leftLen;\r\n        let right = middle;\r\n        let end = middle + rightLen;\r\n        let buffer = start - bufferOffset;\r\n\r\n        if (leftOrigin == Subarray.LEFT) {\r\n            while (left < middle && right < end) {\r\n                if (this.Reads.compareInArr(left, right) <= 0) {\r\n                    this.grailSwap(buffer, left);\r\n                    left++;\r\n                } else {\r\n                    this.grailSwap(buffer, right);\r\n                    right++;\r\n                }\r\n                buffer++;\r\n            }\r\n        } else {\r\n            while (left < middle && right < end) {\r\n                if (this.Reads.compareInArr(left, right) < 0) {\r\n                    this.grailSwap(buffer, left);\r\n                    left++;\r\n                } else {\r\n                    this.grailSwap(buffer, right);\r\n                    right++;\r\n                }\r\n                buffer++;\r\n            }\r\n        }\r\n\r\n        if (left < middle) {\r\n            this.currentBlockLen = middle - left;\r\n            this.grailInPlaceBufferRewind(left, middle, end);\r\n        } else {\r\n            this.currentBlockLen = end - right;\r\n            if (leftOrigin == Subarray.LEFT) {\r\n                this.currentBlockOrigin = Subarray.RIGHT;\r\n            } else {\r\n                this.currentBlockOrigin = Subarray.LEFT;\r\n            }\r\n        }\r\n    }\r\n\r\n    grailSmartLazyMerge(start, leftLen, leftOrigin, rightLen) {\r\n        if (leftOrigin == Subarray.LEFT) {\r\n            if (this.Reads.compareInArr(start + leftLen - 1, start + leftLen) > 0) {\r\n                while (leftLen != 0) {\r\n                    let insertPos = this.grailBinarySearchLeft(start + leftLen, rightLen, this.Reads.readValue(start));\r\n\r\n                    if (insertPos != 0) {\r\n                        this.grailRotate(start, leftLen, insertPos);\r\n                        start += insertPos;\r\n                        rightLen -= insertPos;\r\n                    }\r\n\r\n                    if (rightLen == 0) {\r\n                        this.currentBlockLen = leftLen;\r\n                        return;\r\n                    } else {\r\n                        do {\r\n                            start++;\r\n                            leftLen--;\r\n                        } while (leftLen != 0 && this.Reads.compareInArr(start,\r\n                            start + leftLen) <= 0);\r\n                    }\r\n                }\r\n            }\r\n        } else {\r\n            if (this.Reads.compareInArr(start + leftLen - 1, start + leftLen) >= 0) {\r\n                while (leftLen != 0) {\r\n                    let insertPos = this.grailBinarySearchRight(start + leftLen, rightLen, this.Reads.readValue(start));\r\n\r\n                    if (insertPos != 0) {\r\n                        this.grailRotate(start, leftLen, insertPos);\r\n                        start += insertPos;\r\n                        rightLen -= insertPos;\r\n                    }\r\n\r\n                    if (rightLen == 0) {\r\n                        this.currentBlockLen = leftLen;\r\n                        return;\r\n                    } else {\r\n                        do {\r\n                            start++;\r\n                            leftLen--;\r\n                        } while (leftLen != 0 && this.Reads.compareInArr(start,\r\n                            start + leftLen) < 0);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        this.currentBlockLen = rightLen;\r\n        if (leftOrigin == Subarray.LEFT) {\r\n            this.currentBlockOrigin = Subarray.RIGHT;\r\n        } else {\r\n            this.currentBlockOrigin = Subarray.LEFT;\r\n        }\r\n    }\r\n\r\n    // FUNCTION RENAMED: more consistent with other \"out-of-place\" merges\r\n    grailSmartMergeOutOfPlace(start, leftLen, leftOrigin, rightLen, bufferOffset) {\r\n        let left = start;\r\n        let middle = start + leftLen;\r\n        let right = middle;\r\n        let end = middle + rightLen;\r\n        let buffer = start - bufferOffset;\r\n\r\n        if (leftOrigin == Subarray.LEFT) {\r\n            while (left < middle && right < end) {\r\n                if (this.Reads.compareInArr(left, right) <= 0) {\r\n                    this.Writes.write(buffer, this.Reads.get(left))\r\n                    left++;\r\n                } else {\r\n                    this.Writes.write(buffer, this.Reads.get(right))\r\n                    right++;\r\n                }\r\n                buffer++;\r\n            }\r\n        } else {\r\n            while (left < middle && right < end) {\r\n                if (this.Reads.compareInArr(left, right) < 0) {\r\n                    this.Writes.write(buffer, this.Reads.get(left))\r\n                    left++;\r\n                } else {\r\n                    this.Writes.write(buffer, this.Reads.get(right))\r\n                    right++;\r\n                }\r\n                buffer++;\r\n            }\r\n        }\r\n\r\n        if (left < middle) {\r\n            this.currentBlockLen = middle - left;\r\n            this.grailOutOfPlaceBufferRewind(left, middle, end);\r\n        } else {\r\n            this.currentBlockLen = end - right;\r\n            if (leftOrigin == Subarray.LEFT) {\r\n                this.currentBlockOrigin = Subarray.RIGHT;\r\n            } else {\r\n                this.currentBlockOrigin = Subarray.LEFT;\r\n            }\r\n        }\r\n    }\r\n\r\n    grailMergeBlocks(keys, medianKey, start, blockCount, blockLen, finalLeftBlocks, finalLen) {\r\n        let currentBlock;\r\n        let blockIndex = blockLen;\r\n\r\n        this.currentBlockLen = blockLen;\r\n        this.currentBlockOrigin = this.grailGetSubarray(keys, medianKey);\r\n\r\n        for (let keyIndex = 1; keyIndex < blockCount; keyIndex++, blockIndex += blockLen) {\r\n            currentBlock = blockIndex - this.currentBlockLen;\r\n\r\n            let nextBlockOrigin = this.grailGetSubarray(keys + keyIndex, medianKey);\r\n\r\n            if (nextBlockOrigin == this.currentBlockOrigin) {\r\n                this.grailBlockSwap(start + currentBlock - blockLen, start + currentBlock, this.currentBlockLen);\r\n                currentBlock = blockIndex;\r\n\r\n                this.currentBlockLen = blockLen;\r\n            } else {\r\n                this.grailSmartMerge(start + currentBlock, this.currentBlockLen, this.currentBlockOrigin, blockLen, blockLen);\r\n            }\r\n        }\r\n\r\n        currentBlock = blockIndex - this.currentBlockLen;\r\n\r\n        if (finalLen != 0) {\r\n            if (this.currentBlockOrigin == Subarray.RIGHT) {\r\n                this.grailBlockSwap(start + currentBlock - blockLen, start + currentBlock, this.currentBlockLen);\r\n                currentBlock = blockIndex;\r\n\r\n                this.currentBlockLen = blockLen * finalLeftBlocks;\r\n                this.currentBlockOrigin = Subarray.LEFT;\r\n            } else {\r\n                this.currentBlockLen += blockLen * finalLeftBlocks;\r\n            }\r\n\r\n            this.grailMergeForwards(start + currentBlock, this.currentBlockLen, finalLen, blockLen);\r\n        } else {\r\n            this.grailBlockSwap(start + currentBlock, start + currentBlock - blockLen, this.currentBlockLen);\r\n        }\r\n    }\r\n\r\n    grailLazyMergeBlocks(keys, medianKey, start, blockCount, blockLen, finalLeftBlocks, finalLen) {\r\n        let currentBlock;\r\n        let blockIndex = blockLen;\r\n\r\n        this.currentBlockLen = blockLen;\r\n        this.currentBlockOrigin = this.grailGetSubarray(keys, medianKey);\r\n\r\n        for (let keyIndex = 1; keyIndex < blockCount; keyIndex++, blockIndex += blockLen) {\r\n            currentBlock = blockIndex - this.currentBlockLen;\r\n\r\n            let nextBlockOrigin = this.grailGetSubarray(keys + keyIndex, medianKey);\r\n\r\n            if (nextBlockOrigin == this.currentBlockOrigin) {\r\n                currentBlock = blockIndex;\r\n\r\n                this.currentBlockLen = blockLen;\r\n            } else {\r\n                // These checks were included in the original code... but why???\r\n                if (blockLen != 0 && this.currentBlockLen != 0) {\r\n                    this.grailSmartLazyMerge(start + currentBlock, this.currentBlockLen, this.currentBlockOrigin, blockLen);\r\n                }\r\n            }\r\n        }\r\n\r\n        currentBlock = blockIndex - this.currentBlockLen;\r\n\r\n        if (finalLen != 0) {\r\n            if (this.currentBlockOrigin == Subarray.RIGHT) {\r\n                currentBlock = blockIndex;\r\n\r\n                this.currentBlockLen = blockLen * finalLeftBlocks;\r\n                this.currentBlockOrigin = Subarray.LEFT;\r\n            } else {\r\n                this.currentBlockLen += blockLen * finalLeftBlocks;\r\n            }\r\n\r\n            this.grailLazyMerge(start + currentBlock, this.currentBlockLen, finalLen);\r\n        }\r\n    }\r\n\r\n    grailMergeBlocksOutOfPlace(keys, medianKey, start, blockCount, blockLen, finalLeftBlocks, finalLen) {\r\n        let currentBlock;\r\n        let blockIndex = blockLen;\r\n\r\n        this.currentBlockLen = blockLen;\r\n        this.currentBlockOrigin = this.grailGetSubarray(keys, medianKey);\r\n\r\n        for (let keyIndex = 1; keyIndex < blockCount; keyIndex++, blockIndex += blockLen) {\r\n            currentBlock = blockIndex - this.currentBlockLen;\r\n\r\n            let nextBlockOrigin = this.grailGetSubarray(keys + keyIndex, medianKey);\r\n\r\n            if (nextBlockOrigin == this.currentBlockOrigin) {\r\n                this.arraycopy(-1, start + currentBlock, -1, start + currentBlock - blockLen, this.currentBlockLen);\r\n                currentBlock = blockIndex;\r\n\r\n                this.currentBlockLen = blockLen;\r\n            } else {\r\n                this.grailSmartMergeOutOfPlace(start + currentBlock, this.currentBlockLen, this.currentBlockOrigin, blockLen, blockLen);\r\n            }\r\n        }\r\n\r\n        currentBlock = blockIndex - this.currentBlockLen;\r\n\r\n        if (finalLen != 0) {\r\n            if (this.currentBlockOrigin == Subarray.RIGHT) {\r\n                this.arraycopy(-1, start + currentBlock, -1, start + currentBlock - blockLen, this.currentBlockLen);\r\n                currentBlock = blockIndex;\r\n\r\n                this.currentBlockLen = blockLen * finalLeftBlocks;\r\n                this.currentBlockOrigin = Subarray.LEFT;\r\n            } else {\r\n                this.currentBlockLen += blockLen * finalLeftBlocks;\r\n            }\r\n\r\n            this.grailMergeOutOfPlace(start + currentBlock, this.currentBlockLen, finalLen, blockLen);\r\n        } else {\r\n            this.arraycopy(-1, start + currentBlock, -1, start + currentBlock - blockLen, this.currentBlockLen);\r\n        }\r\n    }\r\n\r\n    //TODO: Double-check \"Merge Blocks\" arguments\r\n    grailCombineInPlace(keys, start, length, subarrayLen, blockLen, mergeCount, lastSubarray, buffer) {\r\n        for (let mergeIndex = 0; mergeIndex < mergeCount; mergeIndex++) {\r\n            let offset = start + (mergeIndex * (2 * subarrayLen));\r\n            let blockCount = parseInt((2 * subarrayLen) / blockLen);\r\n\r\n            this.grailInsertSort(keys, blockCount);\r\n\r\n            // INCORRECT PARAMETER BUG FIXED: `block select sort` should be using `offset`, not `start`\r\n            let medianKey = parseInt(subarrayLen / blockLen);\r\n            medianKey = this.grailBlockSelectSort(keys, offset, medianKey, blockCount, blockLen);\r\n\r\n            if (buffer) {\r\n                this.grailMergeBlocks(keys, keys + medianKey, offset, blockCount, blockLen, 0, 0);\r\n            } else {\r\n                this.grailLazyMergeBlocks(keys, keys + medianKey, offset, blockCount, blockLen, 0, 0);\r\n            }\r\n        }\r\n\r\n        // INCORRECT CONDITIONAL/PARAMETER BUG FIXED: Credit to 666666t for debugging.\r\n        if (lastSubarray != 0) {\r\n            let offset = start + (mergeCount * (2 * subarrayLen));\r\n            let rightBlocks = parseInt(lastSubarray / blockLen);\r\n\r\n            this.grailInsertSort(keys, rightBlocks + 1);\r\n\r\n            // INCORRECT PARAMETER BUG FIXED: `block select sort` should be using `offset`, not `start`\r\n            let medianKey = parseInt(subarrayLen / blockLen);\r\n            medianKey = this.grailBlockSelectSort(keys, offset, medianKey, rightBlocks, blockLen);\r\n\r\n            // MISSING BOUNDS CHECK BUG FIXED: `lastFragment` *can* be 0 if the `lastSubarray` is evenly\r\n            //                                 divided into blocks. This prevents Grailsort from going\r\n            //                                 out of bounds.\r\n            let lastFragment = lastSubarray % blockLen;\r\n            let leftBlocks;\r\n            if (lastFragment != 0) {\r\n                leftBlocks = this.grailCountFinalLeftBlocks(offset, rightBlocks, blockLen);\r\n            } else {\r\n                leftBlocks = 0;\r\n            }\r\n\r\n            let blockCount = rightBlocks - leftBlocks;\r\n\r\n            //TODO: Double-check if this micro-optimization works correctly like the original\r\n            if (blockCount == 0) {\r\n                let leftLength = leftBlocks * blockLen;\r\n\r\n                // INCORRECT PARAMETER BUG FIXED: these merges should be using `offset`, not `start`\r\n                if (buffer) {\r\n                    this.grailMergeForwards(offset, leftLength, lastFragment, blockLen);\r\n                } else {\r\n                    this.grailLazyMerge(offset, leftLength, lastFragment);\r\n                }\r\n            } else {\r\n                if (buffer) {\r\n                    this.grailMergeBlocks(keys, keys + medianKey, offset, blockCount, blockLen, leftBlocks, lastFragment);\r\n                } else {\r\n                    this.grailLazyMergeBlocks(keys, keys + medianKey, offset, blockCount, blockLen, leftBlocks, lastFragment);\r\n                }\r\n            }\r\n        }\r\n\r\n        if (buffer) {\r\n            this.grailInPlaceBufferReset(start, length, blockLen);\r\n        }\r\n    }\r\n\r\n    grailCombineOutOfPlace(keys, start, length, subarrayLen, blockLen, mergeCount, lastSubarray) {\r\n        this.arraycopy(-1, start - blockLen, this.externalBuffer, 0, blockLen);\r\n\r\n        for (let mergeIndex = 0; mergeIndex < mergeCount; mergeIndex++) {\r\n            let offset = start + (mergeIndex * (2 * subarrayLen));\r\n            let blockCount = parseInt((2 * subarrayLen) / blockLen);\r\n\r\n            this.grailInsertSort(keys, blockCount);\r\n\r\n            // INCORRECT PARAMETER BUG FIXED: `block select sort` should be using `offset`, not `start`\r\n            let medianKey = parseInt(subarrayLen / blockLen);\r\n            medianKey = this.grailBlockSelectSort(keys, offset, medianKey, blockCount, blockLen);\r\n\r\n            this.grailMergeBlocksOutOfPlace(keys, keys + medianKey, offset, blockCount, blockLen, 0, 0);\r\n        }\r\n\r\n        // INCORRECT CONDITIONAL/PARAMETER BUG FIXED: Credit to 666666t for debugging.\r\n        if (lastSubarray != 0) {\r\n            let offset = start + (mergeCount * (2 * subarrayLen));\r\n            let rightBlocks = parseInt(lastSubarray / blockLen);\r\n\r\n            this.grailInsertSort(keys, rightBlocks + 1);\r\n\r\n            // INCORRECT PARAMETER BUG FIXED: `block select sort` should be using `offset`, not `start`\r\n            let medianKey = subarrayLen / blockLen;\r\n            medianKey = this.grailBlockSelectSort(keys, offset, medianKey, rightBlocks, blockLen);\r\n\r\n            // MISSING BOUNDS CHECK BUG FIXED: `lastFragment` *can* be 0 if the `lastSubarray` is evenly\r\n            //                                 divided into blocks. This prevents Grailsort from going\r\n            //                                 out of bounds.\r\n            let lastFragment = lastSubarray % blockLen;\r\n            let leftBlocks;\r\n            if (lastFragment != 0) {\r\n                leftBlocks = this.grailCountFinalLeftBlocks(offset, rightBlocks, blockLen);\r\n            } else {\r\n                leftBlocks = 0;\r\n            }\r\n\r\n            let blockCount = rightBlocks - leftBlocks;\r\n\r\n            if (blockCount == 0) {\r\n                // INCORRECT PARAMETER BUG FIXED: this merge should be using `offset`, not `start`\r\n                let leftLength = leftBlocks * blockLen;\r\n                this.grailMergeOutOfPlace(offset, leftLength, lastFragment, blockLen);\r\n            } else {\r\n                this.grailMergeBlocksOutOfPlace(keys, keys + medianKey, offset, blockCount, blockLen, leftBlocks, lastFragment);\r\n            }\r\n        }\r\n\r\n        this.grailOutOfPlaceBufferReset(start, length, blockLen);\r\n        this.arraycopy(this.externalBuffer, 0, -1, start - blockLen, blockLen);\r\n    }\r\n\r\n    // 'keys' are on the left side of array. Blocks of length 'subarrayLen' combined. We'll combine them in pairs\r\n    // 'subarrayLen' is a power of 2. (2 * subarrayLen / blockLen) keys are guaranteed\r\n    grailCombineBlocks(keys, start, length, subarrayLen, blockLen, buffer) {\r\n        let mergeCount = parseInt(length / (2 * subarrayLen));\r\n        let lastSubarray = parseInt(length % (2 * subarrayLen));\r\n\r\n        if (lastSubarray <= subarrayLen) {\r\n            length -= lastSubarray;\r\n            lastSubarray = 0;\r\n        }\r\n\r\n        // INCOMPLETE CONDITIONAL BUG FIXED: In order to combine blocks out-of-place, we must check if a full-sized\r\n        //                                   block fits into our external buffer.\r\n        if (buffer && blockLen <= this.externalBufferLen) {\r\n            this.grailCombineOutOfPlace(keys, start, length, subarrayLen, blockLen, mergeCount, lastSubarray);\r\n        } else {\r\n            this.grailCombineInPlace(keys, start, length, subarrayLen, blockLen, mergeCount, lastSubarray, buffer);\r\n        }\r\n    }\r\n\r\n    // \"Classic\" in-place merge sort using binary searches and rotations\r\n    //\r\n    // cost: min(leftLen, rightLen)^2 + max(leftLen, rightLen)\r\n    grailLazyMerge(start, leftLen, rightLen) {\r\n        if (leftLen < rightLen) {\r\n            while (leftLen != 0) {\r\n                let insertPos = this.grailBinarySearchLeft(start + leftLen, rightLen, this.Reads.readValue(start));\r\n\r\n                if (insertPos != 0) {\r\n                    this.grailRotate(start, leftLen, insertPos);\r\n                    start += insertPos;\r\n                    rightLen -= insertPos;\r\n                }\r\n\r\n                if (rightLen == 0) {\r\n                    break;\r\n                } else {\r\n                    do {\r\n                        start++;\r\n                        leftLen--;\r\n                    } while (leftLen != 0 && this.Reads.compareInArr(start,\r\n                        start + leftLen) <= 0);\r\n                }\r\n            }\r\n        } else {\r\n            let end = start + leftLen + rightLen - 1;\r\n            while (rightLen != 0) {\r\n                let insertPos = this.grailBinarySearchRight(start, leftLen, this.Reads.readValue(end));\r\n\r\n                if (insertPos != leftLen) {\r\n                    this.grailRotate(start + insertPos, leftLen - insertPos, rightLen);\r\n                    end -= leftLen - insertPos;\r\n                    leftLen = insertPos;\r\n                }\r\n\r\n                if (leftLen == 0) {\r\n                    break;\r\n                } else {\r\n                    let leftEnd = start + leftLen - 1;\r\n                    do {\r\n                        rightLen--;\r\n                        end--;\r\n                    } while (rightLen != 0 && this.Reads.compareInArr(leftEnd,\r\n                        end) <= 0);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    grailLazyStableSort(start, length) {\r\n        for (let index = 1; index < length; index += 2) {\r\n            let left = start + index - 1;\r\n            let right = start + index;\r\n\r\n            if (this.Reads.compareInArr(left, right) > 0) {\r\n                this.grailSwap(left, right);\r\n            }\r\n        }\r\n        for (let mergeLen = 2; mergeLen < length; mergeLen *= 2) {\r\n            let mergeIndex;\r\n            let mergeEnd = length - (2 * mergeLen);\r\n\r\n            for (mergeIndex = 0; mergeIndex <= mergeEnd; mergeIndex += (2 * mergeLen)) {\r\n                this.grailLazyMerge(start + mergeIndex, mergeLen, mergeLen);\r\n            }\r\n\r\n            let leftOver = length - mergeIndex;\r\n            if (leftOver > mergeLen) {\r\n                this.grailLazyMerge(start + mergeIndex, mergeLen, leftOver - mergeLen);\r\n            }\r\n        }\r\n    }\r\n\r\n    static calcMinKeys(numKeys, blockKeysSum) {\r\n        let minKeys = 1;\r\n        while (minKeys < numKeys && blockKeysSum != 0) {\r\n            minKeys *= 2;\r\n            blockKeysSum = parseInt(blockKeysSum / 8);\r\n        }\r\n        return minKeys;\r\n    }\r\n\r\n    grailCommonSort(start, length, extBuf, extBufLen) {\r\n        if (length < 16) {\r\n            this.grailInsertSort(start, length);\r\n            return;\r\n        } else {\r\n            let blockLen = 1;\r\n\r\n            // find the smallest power of two greater than or equal to\r\n            // the square root of the input's length\r\n            while ((blockLen * blockLen) < length) {\r\n                blockLen *= 2;\r\n            }\r\n\r\n            // '((a - 1) / b) + 1' is actually a clever and very efficient\r\n            // formula for the ceiling of (a / b)\r\n            //\r\n            // credit to Anonymous0726 for figuring this out!\r\n            let keyLen = parseInt((length - 1) / blockLen) + 1;\r\n\r\n            // Grailsort is hoping to find `2 * sqrt(n)` unique items\r\n            // throughout the array\r\n            let idealKeys = keyLen + blockLen;\r\n\r\n            //TODO: Clean up `start +` offsets\r\n            let keysFound = this.grailCollectKeys(start, length, idealKeys);\r\n\r\n            let idealBuffer;\r\n            if (keysFound < idealKeys) {\r\n                if (keysFound < 4) {\r\n                    // GRAILSORT STRATEGY 3 -- No block swaps or scrolling buffer; resort to Lazy Stable Sort\r\n                    this.grailLazyStableSort(start, length);\r\n                    return;\r\n                } else {\r\n                    // GRAILSORT STRATEGY 2 -- Block swaps with small scrolling buffer and/or lazy merges\r\n                    keyLen = blockLen;\r\n                    blockLen = 0;\r\n                    idealBuffer = false;\r\n\r\n                    while (keyLen > keysFound) {\r\n                        keyLen = parseInt(keyLen / 2);\r\n                    }\r\n                }\r\n            } else {\r\n                // GRAILSORT STRATEGY 1 -- Block swaps with scrolling buffer\r\n                idealBuffer = true;\r\n            }\r\n\r\n            let bufferEnd = blockLen + keyLen;\r\n            let bufferLen;\r\n            if (idealBuffer) {\r\n                bufferLen = blockLen;\r\n            } else {\r\n                bufferLen = keyLen;\r\n            }\r\n\r\n            if (idealBuffer && extBuf != null) {\r\n                // GRAILSORT + EXTRA SPACE\r\n                this.externalBuffer = extBuf;\r\n                this.externalBufferLen = extBufLen;\r\n            }\r\n\r\n            this.grailBuildBlocks(start + bufferEnd, length - bufferEnd, bufferLen);\r\n\r\n            while ((length - bufferEnd) > (2 * bufferLen)) {\r\n                bufferLen *= 2;\r\n\r\n                let currentBlockLen = blockLen;\r\n                let scrollingBuffer = idealBuffer;\r\n\r\n                if (!scrollingBuffer) {\r\n                    if (keyLen > 4 && (parseInt(keyLen / 8) * keyLen) >= bufferLen) {\r\n                        currentBlockLen = parseInt(keyLen / 2);\r\n                        scrollingBuffer = true;\r\n                    } else {\r\n                        let blockKeysSum = parseInt(bufferLen * keysFound) / 2;\r\n                        let minKeys = GrailSort.calcMinKeys(keyLen, blockKeysSum);\r\n\r\n                        currentBlockLen = parseInt(2 * bufferLen) / minKeys;\r\n                    }\r\n                }\r\n\r\n                this.grailCombineBlocks(start, start + bufferEnd, length - bufferEnd, bufferLen, currentBlockLen, scrollingBuffer);\r\n            }\r\n\r\n            this.grailInsertSort(start, bufferEnd);\r\n            this.grailLazyMerge(start, bufferEnd, length - bufferEnd);\r\n        }\r\n    }\r\n\r\n    grailSortInPlace(start, length) {\r\n        this.grailCommonSort(start, length, null, 0);\r\n    }\r\n\r\n    /*\r\n    grailSortStaticOOP(array, start, length) {\r\n        let buffer = Array.newInstance(array[0].getClass(), GRAIL_STATIC_EXT_BUF_LEN);\r\n        this.grailCommonSort(array, start, length, buffer, GRAIL_STATIC_EXT_BUF_LEN);\r\n    }\r\n    \r\n    grailSortDynamicOOP(array, start, length) {\r\n        let bufferLen = 1;\r\n        while((bufferLen * bufferLen) < length) {\r\n            bufferLen *= 2;\r\n        }\r\n\r\n        let buffer = Array.newInstance(array[0].getClass(), bufferLen);\r\n\r\n        this.grailCommonSort(array, start, length, buffer, bufferLen);\r\n    }*/\r\n    runSort(low, high, bucketsNum, bufferSize) {\r\n        // this.grailSortInPlace(low, high + 1)\r\n        if(bufferSize === 0){\r\n            this.grailSortInPlace(low, high + 1)\r\n        }else{\r\n            let buffer = this.Writes.createAuxArray(bufferSize)\r\n            console.log(\"WITH BUFFER!!!\")\r\n            this.grailCommonSort(low, high + 1, buffer, bufferSize)\r\n            this.Writes.removeAuxArray(buffer)\r\n        }\r\n    }\r\n}\r\n\r\n","import {Sort} from \"./Sort\";\r\n\r\nexport class LLQuickSort extends Sort{\r\n    constructor(arrayVisualizer) {\r\n        super(arrayVisualizer);\r\n        this.sortName = \"LLQuickSort\"\r\n    }\r\n    partition(lo, hi) {\r\n        let pivot = hi;\r\n        let i = lo;\r\n        for (let j = lo; j < hi; j++) {\r\n            if (this.Reads.compareInArr(j, pivot) < 0) {\r\n                this.Writes.swap(i, j);\r\n                i++;\r\n            }\r\n        }\r\n        this.Writes.swap(i, hi);\r\n        return i;\r\n    }\r\n\r\n    LLQuickSort(lo, hi) {\r\n        if (lo < hi) {\r\n            let p = this.partition(lo, hi);\r\n            this.LLQuickSort(lo, p - 1);\r\n            this.LLQuickSort(p + 1, hi);\r\n        }\r\n    }\r\n    runSort(low, high) {\r\n        this.LLQuickSort(low, high)\r\n    }\r\n}","import {Sort} from \"./Sort\";\r\n\r\nexport class LRQuickSort extends Sort{\r\n    constructor(arrayVisualizer) {\r\n        super(arrayVisualizer);\r\n        this.sortName=\"LRQuickSort\"\r\n    }\r\n\r\n    quickSort(p, r){\r\n        let pivot = Math.trunc(p + (r - p + 1) / 2);\r\n        let x = this.Reads.readValue(pivot);\r\n\r\n        let i = p;\r\n        let j = r;\r\n\r\n        while (i <= j) {\r\n            // while (this.Reads.readValue(i) < x){\r\n            while (this.Reads.compareValues(this.Reads.get(i), x) < 0){\r\n                i++;\r\n            }\r\n            // while (this.Reads.get(j) > x){\r\n            while (this.Reads.compareValues(this.Reads.get(j), x) > 0){\r\n                j--;\r\n            }\r\n\r\n            if (i <= j) {\r\n                this.Writes.swap(i, j);\r\n                i++;\r\n                j--;\r\n            }\r\n        }\r\n\r\n        if(p < j) {\r\n            this.quickSort(p, j);\r\n        }\r\n        if(i < r) {\r\n            this.quickSort(i, r);\r\n        }\r\n    }\r\n\r\n    runSort(low, high) {\r\n        this.quickSort(low, high)\r\n    }\r\n}","import {Sort} from \"./Sort\";\r\nimport {Element} from \"../classes/Element\";\r\n\r\nexport class LSDRadixSort extends Sort {\r\n    constructor(arrayVisualizer) {\r\n        super(arrayVisualizer);\r\n        this.sortName = \"LSD RadixSort\"\r\n        this.isNeedBucketsNum = true;\r\n    }\r\n\r\n    LSDRadixSort(bucketsNum) {\r\n        let len = this.arrayVisualizer.getArrLength()\r\n        let max = this.Reads.readValue(0);\r\n        for (let i = 1; i < len; ++i) {\r\n            let tmp = this.Reads.readValue(i)\r\n            if (max < tmp) {\r\n                max = tmp\r\n            }\r\n        }\r\n        let highestPower = Math.log(max) / Math.log(bucketsNum);\r\n\r\n        let registers = new Array(bucketsNum)\r\n        for (let i = 0; i < bucketsNum; i++) {\r\n            registers[i] = [];\r\n        }\r\n\r\n        for (let p = 0; p <= highestPower; p++) {\r\n            for (let i = 0; i < len; i++) {\r\n                let stabVal = Math.max(0, Math.min(this.Reads.readValue(i), len - 1))\r\n                let digit = Math.trunc(stabVal / (bucketsNum ** p) % bucketsNum)\r\n                // console.log(digit)\r\n                registers[digit].push(this.Reads.get(i))\r\n                //PseudoWrite\r\n            }\r\n\r\n\r\n            let tempArray = this.Writes.createAuxArray(len)\r\n            let tempWrite = new Array(len)\r\n            let radix = registers.length\r\n\r\n\r\n            let total = 0;\r\n            for (let index = 0; index < registers.length; index++) {\r\n                for (let i = 0; i < registers[index].length; i++) {\r\n                    this.Writes.auxWrite(total++, registers[index][i], tempArray)\r\n                }\r\n                registers[index] = []\r\n            }\r\n\r\n            for (let i = 0; i < len; i++) {\r\n                let register = i % radix\r\n                let pos = (register * Math.trunc(len / radix) + Math.trunc(i / radix))\r\n\r\n                this.Writes.write(pos, this.Reads.auxGet(pos, tempArray))\r\n                tempWrite[pos] = true\r\n            }\r\n            for (let i = 0; i < len; i++) {\r\n                if (!tempWrite[i]) {\r\n                    this.Writes.write(i, this.Reads.auxGet(i, tempArray))\r\n                }\r\n            }\r\n\r\n            this.Writes.removeAuxArray(tempArray)\r\n\r\n        }\r\n\r\n    }\r\n\r\n    runSort(low, high, bucketsNum) {\r\n        this.LSDRadixSort(bucketsNum)\r\n    }\r\n}","import {Sort} from \"./Sort\";\r\nimport {Writes} from \"../ArrayAccess/Writes\";\r\n\r\nexport class MergeSort extends Sort {\r\n    constructor(arrayVisualizer) {\r\n        super(arrayVisualizer);\r\n        this.sortName = \"MergeSort\"\r\n    }\r\n\r\n    merge(tmp, start, mid, end) {\r\n        if (start === mid) {\r\n            return\r\n        }\r\n\r\n        this.merge(tmp, start, Math.trunc((mid + start) / 2), mid);\r\n        this.merge(tmp, mid, Math.trunc((mid + end) / 2), end);\r\n\r\n        let low = start\r\n        let high = mid\r\n\r\n        for (let nxt = 0; nxt < end - start; nxt++) {\r\n            if (low >= mid && high >= end) break;\r\n\r\n            if (low < mid && high >= end) {\r\n                this.Writes.auxWrite(nxt, this.Reads.get(low++), tmp)\r\n            } else if (low >= mid && high < end) {\r\n                this.Writes.auxWrite(nxt, this.Reads.get(high++), tmp)\r\n            } else if (this.Reads.compareInArr(low, high) <= 0) {\r\n                this.Writes.auxWrite(nxt, this.Reads.get(low++), tmp)\r\n            } else {\r\n                this.Writes.auxWrite(nxt, this.Reads.get(high++), tmp)\r\n            }\r\n        }\r\n        for (let i = 0; i < end - start; i++) {\r\n            this.Writes.write(start + i, this.Reads.auxGet(i, tmp))\r\n        }\r\n\r\n    }\r\n\r\n    MergeSort(low, high) {\r\n        let tmp = this.Writes.createAuxArray(low - high)\r\n\r\n        let mid = low + (Math.trunc((high - low) / 2))\r\n\r\n        this.merge(tmp, low, mid, high+1)\r\n\r\n        this.Writes.removeAuxArray(tmp)\r\n    }\r\n\r\n    runSort(low, high) {\r\n        this.MergeSort(low, high)\r\n    }\r\n}","import {Sort} from \"./Sort\";\r\nimport {InsertionSort} from \"./InsertionSort\";\r\n\r\nexport class PseudoTimSort extends Sort {\r\n    MIN_MERGE\r\n    constructor(arrayVisualizer) {\r\n        super(arrayVisualizer);\r\n        this.sortName = \"PseudoTimSort\"\r\n        this.MIN_MERGE = 32\r\n    }\r\n\r\n    minRunLength(n) {\r\n        let r = 0;\r\n        while (n >= this.MIN_MERGE)\r\n        {\r\n            r |= (n & 1);\r\n            n >>= 1;\r\n        }\r\n        return n + r;\r\n    }\r\n    merge(l, m, r) {\r\n        let len1 = m - l + 1, len2 = r - m;\r\n        let left = this.Writes.createAuxArray(len1);\r\n        let right = this.Writes.createAuxArray(len2);\r\n        for(let x = 0; x < len1; x++)\r\n        {\r\n            // left[x] = arr[l + x];\r\n            this.Writes.auxWrite(x, this.Reads.get(l + x), left)\r\n        }\r\n        for(let x = 0; x < len2; x++)\r\n        {\r\n            // right[x] = arr[m + 1 + x];\r\n            this.Writes.auxWrite(x, this.Reads.get(m + 1 + x), right)\r\n        }\r\n\r\n        let i = 0;\r\n        let j = 0;\r\n        let k = l;\r\n\r\n        while (i < len1 && j < len2)\r\n        {\r\n            // if (left[i] <= right[j])\r\n            if(this.Reads.compareValues(this.Reads.auxGet(i, left), this.Reads.auxGet(j, right))<=0)\r\n            {\r\n                // arr[k] = left[i];\r\n                this.Writes.write(k, this.Reads.auxGet(i, left))\r\n                i++;\r\n            }\r\n            else\r\n            {\r\n                // arr[k] = right[j];\r\n                this.Writes.write(k, this.Reads.auxGet(j, right))\r\n                j++;\r\n            }\r\n            k++;\r\n        }\r\n\r\n        while (i < len1) {\r\n            // arr[k] = left[i];\r\n            this.Writes.write(k, this.Reads.auxGet(i, left))\r\n            k++;\r\n            i++;\r\n        }\r\n\r\n        while (j < len2) {\r\n            this.Writes.write(k, this.Reads.auxGet(j, right))\r\n            k++;\r\n            j++;\r\n        }\r\n        this.Writes.removeAuxArray(right)\r\n        this.Writes.removeAuxArray(left)\r\n    }\r\n\r\n    pseudoTimSort(n)\r\n    {\r\n        let minRun = this.minRunLength(this.MIN_MERGE);\r\n\r\n        for(let i = 0; i < n; i += minRun)\r\n        {\r\n            let insertionSort = new InsertionSort(this.arrayVisualizer)\r\n\r\n            insertionSort.runSort(i, Math.min(\r\n                (i + this.MIN_MERGE - 1), (n - 1)));\r\n        }\r\n\r\n        for(let size = minRun; size < n; size = 2 * size) {\r\n            for(let left = 0; left < n; left += 2 * size) {\r\n                let mid = left + size - 1;\r\n                let right = Math.min((left + 2 * size - 1), (n - 1));\r\n                if(mid < right) {\r\n                    this.merge(left, mid, right);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    runSort(low, high) {\r\n        this.pseudoTimSort(high+1)\r\n    }\r\n}","import {Sort} from \"./Sort\";\r\n\r\nexport class SelectionSort extends Sort{\r\n    constructor(arrayVisualizer) {\r\n        super(arrayVisualizer);\r\n        this.sortName = \"SelectionSort\"\r\n    }\r\n\r\n    SelectionSort() {\r\n        for (let i=0; i < this.arrLength; i++) {\r\n            let minIndex = i\r\n            for (let j=i; j < this.arrLength; j++) {\r\n                if (this.Reads.compareInArr(j, minIndex) < 0) {\r\n                    minIndex = j\r\n                }\r\n            }\r\n\r\n            if (this.Reads.compareInArr(i, minIndex) > 0) {\r\n                this.Writes.swap(i, minIndex);\r\n            }\r\n        }\r\n    }\r\n\r\n    runSort(low, high) {\r\n        this.SelectionSort(low, high)\r\n    }\r\n}","import {Sort} from \"./Sort\";\r\n\r\nexport class SlowSort extends Sort{\r\n    constructor(arrayVisualizer) {\r\n        super(arrayVisualizer);\r\n        this.sortName = \"SlowSort\"\r\n        this.warnLen = 120\r\n    }\r\n\r\n    SlowSort(i, j) {\r\n        if (i >= j) {\r\n            return;\r\n        }\r\n        let m = Math.floor((i + j) / 2);\r\n        this.SlowSort(i, m);\r\n        this.SlowSort(m + 1, j);\r\n        if (this.Reads.compareInArr(j, m) < 0) {\r\n            this.Writes.swap(j, m)\r\n        }\r\n        this.SlowSort(i, j - 1)\r\n    }\r\n\r\n    runSort(low, high) {\r\n        this.SlowSort(low, high)\r\n    }\r\n}","import {Sort} from \"./Sort\";\r\n\r\nexport class StoogeSort extends Sort{\r\n    constructor(arrayVisualizer) {\r\n        super(arrayVisualizer);\r\n        this.sortName = \"StoogeSort\"\r\n    }\r\n\r\n    StoogeSort(i, j) {\r\n        if (this.Reads.compareInArr(i, j) > 0) {\r\n            this.Writes.swap(i, j)\r\n        }\r\n        if (j - i > 1) {\r\n            let t = Math.trunc((j - i + 1) / 3)\r\n            this.StoogeSort(i, j - t)\r\n            this.StoogeSort(i + t, j)\r\n            this.StoogeSort(i, j - t)\r\n        }\r\n    }\r\n\r\n    runSort(low, high) {\r\n        this.StoogeSort(low, high)\r\n    }\r\n}","import {Sort} from \"./Sort\";\r\n\r\n/**\r\n * Default minimum size of a run.\r\n */\r\nconst DEFAULT_MIN_MERGE = 32\r\n\r\n/**\r\n * Minimum ordered subsequece required to do galloping.\r\n */\r\nconst DEFAULT_MIN_GALLOPING = 7\r\n\r\n/**\r\n * Default tmp storage length. Can increase depending on the size of the\r\n * smallest run to merge.\r\n */\r\nconst DEFAULT_TMP_STORAGE_LENGTH = 256\r\n\r\n/**\r\n * Pre-computed powers of 10 for efficient lexicographic comparison of\r\n * small integers.\r\n */\r\nconst POWERS_OF_TEN = [1e0, 1e1, 1e2, 1e3, 1e4, 1e5, 1e6, 1e7, 1e8, 1e9]\r\n\r\nlet results\r\n\r\n/**\r\n * Estimate the logarithm base 10 of a small integer.\r\n *\r\n * @param {number} x - The integer to estimate the logarithm of.\r\n * @return {number} - The estimated logarithm of the integer.\r\n */\r\nconst log10 = x => x < 1e5\r\n    ? x < 1e2\r\n        ? x < 1e1\r\n            ? 0\r\n            : 1\r\n        : x < 1e4\r\n            ? x < 1e3\r\n                ? 2\r\n                : 3\r\n            : 4\r\n    : x < 1e7\r\n        ? x < 1e6\r\n            ? 5\r\n            : 6\r\n        : x < 1e9\r\n            ? x < 1e8\r\n                ? 7\r\n                : 8\r\n            : 9\r\n\r\n/**\r\n * Default alphabetical comparison of items.\r\n *\r\n * @param {string|object|number} a - First element to compare.\r\n * @param {string|object|number} b - Second element to compare.\r\n * @return {number} - A positive number if a.toString() > b.toString(), a\r\n * negative number if .toString() < b.toString(), 0 otherwise.\r\n */\r\nfunction alphabeticalCompare(a, b) {\r\n    if (a === b) {\r\n        return 0\r\n    }\r\n\r\n    if (~~a === a && ~~b === b) {\r\n        if (a === 0 || b === 0) {\r\n            return a < b ? -1 : 1\r\n        }\r\n\r\n        if (a < 0 || b < 0) {\r\n            if (b >= 0) {\r\n                return -1\r\n            }\r\n\r\n            if (a >= 0) {\r\n                return 1\r\n            }\r\n\r\n            a = -a\r\n            b = -b\r\n        }\r\n\r\n        const al = log10(a)\r\n        const bl = log10(b)\r\n\r\n        let t = 0\r\n\r\n        if (al < bl) {\r\n            a *= POWERS_OF_TEN[bl - al - 1]\r\n            b /= 10\r\n            t = -1\r\n        } else if (al > bl) {\r\n            b *= POWERS_OF_TEN[al - bl - 1]\r\n            a /= 10\r\n            t = 1\r\n        }\r\n\r\n        if (a === b) {\r\n            return t\r\n        }\r\n\r\n        return a < b ? -1 : 1\r\n    }\r\n\r\n    const aStr = String(a)\r\n    const bStr = String(b)\r\n\r\n    if (aStr === bStr) {\r\n        return 0\r\n    }\r\n\r\n    return aStr < bStr ? -1 : 1\r\n}\r\n\r\n/**\r\n * Compute minimum run length for TimSort\r\n *\r\n * @param {number} n - The size of the array to sort.\r\n */\r\nfunction minRunLength(n) {\r\n    let r = 0\r\n\r\n    while (n >= DEFAULT_MIN_MERGE) {\r\n        r |= (n & 1)\r\n        n >>= 1\r\n    }\r\n\r\n    return n + r\r\n}\r\n\r\n/**\r\n * Counts the length of a monotonically ascending or strictly monotonically\r\n * descending sequence (run) starting at array[lo] in the range [lo, hi). If\r\n * the run is descending it is made ascending.\r\n *\r\n * @param {array} array - The array to reverse.\r\n * @param {number} lo - First element in the range (inclusive).\r\n * @param {number} hi - Last element in the range.\r\n * @param {function} compare - Item comparison function.\r\n * @return {number} - The length of the run.\r\n */\r\n\r\nexport class TimSort extends Sort {\r\n    constructor(arrayVisualizer) {\r\n        super(arrayVisualizer);\r\n\r\n        this.minGallop = DEFAULT_MIN_GALLOPING\r\n\r\n        this.tmpStorageLength = this.arrLength < 2 * DEFAULT_TMP_STORAGE_LENGTH\r\n            ? this.arrLength >>> 1\r\n            : DEFAULT_TMP_STORAGE_LENGTH\r\n\r\n        // this.tmp = new Array(this.tmpStorageLength)\r\n        this.tmp = this.Writes.createAuxArray(this.tmpStorageLength)\r\n\r\n        this.stackLength = this.arrLength < 120\r\n            ? 5\r\n            : this.arrLength < 1542\r\n                ? 10\r\n                : this.arrLength < 119151\r\n                    ? 19\r\n                    : 40\r\n\r\n        this.runStart = new Array(this.stackLength)\r\n        this.runLength = new Array(this.stackLength)\r\n\r\n        this.stackSize = 0\r\n        this.sortName = \"TimSort\"\r\n    }\r\n\r\n    makeAscendingRun(lo, hi) {\r\n        let runHi = lo + 1\r\n\r\n        if (runHi === hi) {\r\n            return 1\r\n        }\r\n\r\n        // Descending\r\n        // if (compare(array[runHi++], array[lo]) < 0) {\r\n        if (this.Reads.compareInArr(runHi++, lo)<0) {\r\n            // while (runHi < hi && compare(array[runHi], array[runHi - 1]) < 0) {\r\n            while (runHi < hi && this.Reads.compareInArr(runHi, runHi - 1)<0) {\r\n                runHi++\r\n            }\r\n\r\n            // this.reverseRun(array, lo, runHi)\r\n            this.reverseRun(lo, runHi)\r\n            // reverseRun(results, lo, runHi)\r\n            // Ascending\r\n        } else {\r\n            // while (runHi < hi && compare(array[runHi], array[runHi - 1]) >= 0) {\r\n            while (runHi < hi && this.Reads.compareInArr(runHi, runHi - 1)>=0) {\r\n                runHi++\r\n            }\r\n        }\r\n\r\n        return runHi - lo\r\n    }\r\n\r\n    /**\r\n     * Reverse an array in the range [lo, hi).\r\n     *\r\n     * @param {array} array - The array to reverse.\r\n     * @param {number} lo - First element in the range (inclusive).\r\n     * @param {number} hi - Last element in the range.\r\n     */\r\n\r\n\r\n    reverseRun(lo, hi) {\r\n        hi--\r\n\r\n        while (lo < hi) {\r\n            // const t = array[lo]\r\n            // array[lo++] = array[hi]\r\n            // array[hi--] = t\r\n            const t = this.Reads.get(lo)\r\n            this.Writes.write(lo++, this.Reads.get(hi))\r\n            this.Writes.write(hi--, t)\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Perform the binary sort of the array in the range [lo, hi) where start is\r\n     * the first element possibly out of order.\r\n     *\r\n     * @param {array} array - The array to sort.\r\n     * @param {number} lo - First element in the range (inclusive).\r\n     * @param {number} hi - Last element in the range.\r\n     * @param {number} start - First element possibly out of order.\r\n     * @param {} compare - Item comparison function.\r\n     */\r\n\r\n\r\n    binaryInsertionSort(lo, hi, start) {\r\n        if (start === lo) {\r\n            start++\r\n        }\r\n\r\n        for (; start < hi; start++) {\r\n            // const pivot = array[start]\r\n            const pivot = this.Reads.get(start)\r\n\r\n            // const pivotIndex = results[start]\r\n\r\n            // Ranges of the array where pivot belongs\r\n            let left = lo\r\n            let right = start\r\n\r\n            /*\r\n             *   pivot >= array[i] for i in [lo, left)\r\n             *   pivot <  array[i] for i in  in [right, start)\r\n             */\r\n            while (left < right) {\r\n                const mid = (left + right) >>> 1\r\n\r\n                // if (compare(pivot, array[mid]) < 0) {\r\n                if (pivot.getValue() < this.Reads.readValue(mid)) {\r\n                    right = mid\r\n                } else {\r\n                    left = mid + 1\r\n                }\r\n            }\r\n\r\n            /*\r\n             * Move elements right to make room for the pivot. If there are elements\r\n             * equal to pivot, left points to the first slot after them: this is also\r\n             * a reason for which TimSort is stable\r\n             */\r\n            let n = start - left\r\n            // Switch is just an optimization for small arrays\r\n            switch (n) {\r\n                case 3:\r\n                    // array[left + 3] = array[left + 2]\r\n                    this.Writes.write(left + 3, this.Reads.get(left + 2))\r\n                /* falls through */\r\n                case 2:\r\n                    // array[left + 2] = array[left + 1]\r\n                    this.Writes.write(left + 2, this.Reads.get(left + 1))\r\n                /* falls through */\r\n                case 1:\r\n                    // array[left + 1] = array[left]\r\n                    this.Writes.write(left + 1, this.Reads.get(left))\r\n                    break\r\n                default:\r\n                    while (n > 0) {\r\n                        // array[left + n] = array[left + n - 1]\r\n                        this.Writes.write(left + n, this.Reads.get(left + n - 1))\r\n                        n--\r\n                    }\r\n            }\r\n\r\n            // array[left] = pivot\r\n            this.Writes.write(left, pivot)\r\n            // results[left] = pivotIndex\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Find the position at which to insert a value in a sorted range. If the range\r\n     * contains elements equal to the value the leftmost element index is returned\r\n     * (for stability).\r\n     *\r\n     * @param {number} value - Value to insert.\r\n     * @param {array} array - The array in which to insert value.\r\n     * @param {number} start - First element in the range.\r\n     * @param {number} length - Length of the range.\r\n     * @param {number} hint - The index at which to begin the search.\r\n     * @param {function} compare - Item comparison function.\r\n     * @return {number} - The index where to insert value.\r\n     */\r\n\r\n\r\n    gallopLeft(value, isAux, start, length, hint) {\r\n        let lastOffset = 0\r\n        let maxOffset = 0\r\n        let offset = 1\r\n        if (!isAux) {\r\n            // if (compare(value, array[start + hint]) > 0) {\r\n            if (value > this.Reads.readValue(start + hint)) {\r\n                maxOffset = length - hint\r\n\r\n                while (\r\n                    offset < maxOffset\r\n                    // && compare(value, array[start + hint + offset]) > 0\r\n                    && value > this.Reads.readValue(start + hint + offset)\r\n                    ) {\r\n                    lastOffset = offset\r\n                    offset = (offset << 1) + 1\r\n\r\n                    if (offset <= 0) {\r\n                        offset = maxOffset\r\n                    }\r\n                }\r\n\r\n                if (offset > maxOffset) {\r\n                    offset = maxOffset\r\n                }\r\n\r\n                // Make offsets relative to start\r\n                lastOffset += hint\r\n                offset += hint\r\n\r\n                // value <= array[start + hint]\r\n            } else {\r\n                maxOffset = hint + 1\r\n                while (\r\n                    offset < maxOffset\r\n                    // && compare(value, array[start + hint - offset]) <= 0\r\n                    // && value <= this.Reads.readValue(start + hint + offset)\r\n                    && value <= this.Reads.readValue(start + hint - offset)\r\n                    ) {\r\n                    lastOffset = offset\r\n                    offset = (offset << 1) + 1\r\n\r\n                    if (offset <= 0) {\r\n                        offset = maxOffset\r\n                    }\r\n                }\r\n                if (offset > maxOffset) {\r\n                    offset = maxOffset\r\n                }\r\n\r\n                // Make offsets relative to start\r\n                const tmp = lastOffset\r\n                lastOffset = hint - offset\r\n                offset = hint - tmp\r\n            }\r\n\r\n            /*\r\n             * Now array[start+lastOffset] < value <= array[start+offset], so value\r\n             * belongs somewhere in the range (start + lastOffset, start + offset]. Do a\r\n             * binary search, with invariant array[start + lastOffset - 1] < value <=\r\n             * array[start + offset].\r\n             */\r\n            lastOffset++\r\n            while (lastOffset < offset) {\r\n                const m = lastOffset + ((offset - lastOffset) >>> 1)\r\n\r\n                // if (compare(value, array[start + m]) > 0) {\r\n                if (value > this.Reads.readValue(start + m)) {\r\n                    lastOffset = m + 1\r\n                } else {\r\n                    offset = m\r\n                }\r\n            }\r\n        } else {\r\n            // if (compare(value, array[start + hint]) > 0) {\r\n            if (value > this.Reads.auxReadValue(start + hint, this.tmp)) {\r\n                maxOffset = length - hint\r\n\r\n                while (\r\n                    offset < maxOffset\r\n                    // && compare(value, array[start + hint + offset]) > 0\r\n                    && value > this.Reads.auxReadValue(start + hint + offset, this.tmp)\r\n                    ) {\r\n                    lastOffset = offset\r\n                    offset = (offset << 1) + 1\r\n\r\n                    if (offset <= 0) {\r\n                        offset = maxOffset\r\n                    }\r\n                }\r\n\r\n                if (offset > maxOffset) {\r\n                    offset = maxOffset\r\n                }\r\n\r\n                // Make offsets relative to start\r\n                lastOffset += hint\r\n                offset += hint\r\n\r\n                // value <= array[start + hint]\r\n            } else {\r\n                maxOffset = hint + 1\r\n                while (\r\n                    offset < maxOffset\r\n                    // && compare(value, array[start + hint - offset]) <= 0\r\n                    // && value <= this.Reads.auxRead(start + hint + offset, this.tmp)\r\n                    && value <= this.Reads.auxReadValue(start + hint - offset, this.tmp)\r\n                    ) {\r\n                    lastOffset = offset\r\n                    offset = (offset << 1) + 1\r\n\r\n                    if (offset <= 0) {\r\n                        offset = maxOffset\r\n                    }\r\n                }\r\n                if (offset > maxOffset) {\r\n                    offset = maxOffset\r\n                }\r\n\r\n                // Make offsets relative to start\r\n                const tmp = lastOffset\r\n                lastOffset = hint - offset\r\n                offset = hint - tmp\r\n            }\r\n\r\n            /*\r\n             * Now array[start+lastOffset] < value <= array[start+offset], so value\r\n             * belongs somewhere in the range (start + lastOffset, start + offset]. Do a\r\n             * binary search, with invariant array[start + lastOffset - 1] < value <=\r\n             * array[start + offset].\r\n             */\r\n            lastOffset++\r\n            while (lastOffset < offset) {\r\n                const m = lastOffset + ((offset - lastOffset) >>> 1)\r\n\r\n                // if (compare(value, array[start + m]) > 0) {\r\n                if (value > this.Reads.auxReadValue(start + m, this.tmp)) {\r\n                    lastOffset = m + 1\r\n                } else {\r\n                    offset = m\r\n                }\r\n            }\r\n        }\r\n        return offset\r\n    }\r\n\r\n    /**\r\n     * Find the position at which to insert a value in a sorted range. If the range\r\n     * contains elements equal to the value the rightmost element index is returned\r\n     * (for stability).\r\n     *\r\n     * @param {number} value - Value to insert.\r\n     * @param {array} array - The array in which to insert value.\r\n     * @param {number} start - First element in the range.\r\n     * @param {number} length - Length of the range.\r\n     * @param {number} hint - The index at which to begin the search.\r\n     * @param {function} compare - Item comparison function.\r\n     * @return {number} - The index where to insert value.\r\n     */\r\n\r\n\r\n    gallopRight(value, isAux, start, length, hint) {\r\n        let lastOffset = 0\r\n        let maxOffset = 0\r\n        let offset = 1\r\n\r\n        if (!isAux) {\r\n            // if (compare(value, array[start + hint]) < 0) {\r\n            if (value < this.Reads.readValue(start + hint)) {\r\n                maxOffset = hint + 1\r\n\r\n                while (\r\n                    offset < maxOffset\r\n                    // && compare(value, array[start + hint - offset]) < 0\r\n                    && value < this.Reads.readValue(start + hint - offset)\r\n                    ) {\r\n                    lastOffset = offset\r\n                    offset = (offset << 1) + 1\r\n\r\n                    if (offset <= 0) {\r\n                        offset = maxOffset\r\n                    }\r\n                }\r\n\r\n                if (offset > maxOffset) {\r\n                    offset = maxOffset\r\n                }\r\n\r\n                // Make offsets relative to start\r\n                const tmp = lastOffset\r\n                lastOffset = hint - offset\r\n                offset = hint - tmp\r\n\r\n                // value >= array[start + hint]\r\n            } else {\r\n                maxOffset = length - hint\r\n\r\n                while (\r\n                    offset < maxOffset\r\n                    // && compare(value, array[start + hint + offset]) >= 0\r\n                    && value >= this.Reads.readValue(start + hint + offset)\r\n                    ) {\r\n                    lastOffset = offset\r\n                    offset = (offset << 1) + 1\r\n\r\n                    if (offset <= 0) {\r\n                        offset = maxOffset\r\n                    }\r\n                }\r\n\r\n                if (offset > maxOffset) {\r\n                    offset = maxOffset\r\n                }\r\n\r\n                // Make offsets relative to start\r\n                lastOffset += hint\r\n                offset += hint\r\n            }\r\n\r\n            /*\r\n             * Now array[start+lastOffset] < value <= array[start+offset], so value\r\n             * belongs somewhere in the range (start + lastOffset, start + offset]. Do a\r\n             * binary search, with invariant array[start + lastOffset - 1] < value <=\r\n             * array[start + offset].\r\n             */\r\n            lastOffset++\r\n\r\n            while (lastOffset < offset) {\r\n                const m = lastOffset + ((offset - lastOffset) >>> 1)\r\n\r\n                // if (compare(value, array[start + m]) < 0) {\r\n                if (value < this.Reads.readValue(start + m)) {\r\n                    offset = m\r\n                } else {\r\n                    lastOffset = m + 1\r\n                }\r\n            }\r\n\r\n        } else {\r\n            //AUX\r\n            // if (compare(value, array[start + hint]) < 0) {\r\n            if (value < this.Reads.auxReadValue(start + hint, this.tmp)) {\r\n                maxOffset = hint + 1\r\n\r\n                while (\r\n                    offset < maxOffset\r\n                    // && compare(value, array[start + hint - offset]) < 0\r\n                    && value < this.Reads.auxReadValue(start + hint - offset, this.tmp)\r\n                    ) {\r\n                    lastOffset = offset\r\n                    offset = (offset << 1) + 1\r\n\r\n                    if (offset <= 0) {\r\n                        offset = maxOffset\r\n                    }\r\n                }\r\n\r\n                if (offset > maxOffset) {\r\n                    offset = maxOffset\r\n                }\r\n\r\n                // Make offsets relative to start\r\n                const tmp = lastOffset\r\n                lastOffset = hint - offset\r\n                offset = hint - tmp\r\n\r\n                // value >= array[start + hint]\r\n            } else {\r\n                maxOffset = length - hint\r\n\r\n                while (\r\n                    offset < maxOffset\r\n                    // && compare(value, array[start + hint + offset]) >= 0\r\n                    && value >= this.Reads.auxReadValue(start + hint + offset, this.tmp)\r\n                    ) {\r\n                    lastOffset = offset\r\n                    offset = (offset << 1) + 1\r\n\r\n                    if (offset <= 0) {\r\n                        offset = maxOffset\r\n                    }\r\n                }\r\n\r\n                if (offset > maxOffset) {\r\n                    offset = maxOffset\r\n                }\r\n\r\n                // Make offsets relative to start\r\n                lastOffset += hint\r\n                offset += hint\r\n            }\r\n\r\n            /*\r\n             * Now array[start+lastOffset] < value <= array[start+offset], so value\r\n             * belongs somewhere in the range (start + lastOffset, start + offset]. Do a\r\n             * binary search, with invariant array[start + lastOffset - 1] < value <=\r\n             * array[start + offset].\r\n             */\r\n            lastOffset++\r\n\r\n            while (lastOffset < offset) {\r\n                const m = lastOffset + ((offset - lastOffset) >>> 1)\r\n\r\n                // if (compare(value, array[start + m]) < 0) {\r\n                if (value < this.Reads.auxReadValue(start + m, this.tmp)) {\r\n                    offset = m\r\n                } else {\r\n                    lastOffset = m + 1\r\n                }\r\n            }\r\n        }\r\n\r\n        return offset\r\n    }\r\n\r\n\r\n    /**\r\n     * Push a new run on TimSort's stack.\r\n     *\r\n     * @param {number} runStart - Start index of the run in the original array.\r\n     * @param {number} runLength - Length of the run;\r\n     */\r\n    pushRun(runStart, runLength) {\r\n        this.runStart[this.stackSize] = runStart\r\n        this.runLength[this.stackSize] = runLength\r\n        this.stackSize += 1\r\n    }\r\n\r\n    /**\r\n     * Merge runs on TimSort's stack so that the following holds for all i:\r\n     * 1) runLength[i - 3] > runLength[i - 2] + runLength[i - 1]\r\n     * 2) runLength[i - 2] > runLength[i - 1]\r\n     */\r\n    mergeRuns() {\r\n        while (this.stackSize > 1) {\r\n            let n = this.stackSize - 2\r\n\r\n            if (\r\n                (\r\n                    n >= 1\r\n                    && this.runLength[n - 1] <= this.runLength[n] + this.runLength[n + 1]\r\n                )\r\n                || (\r\n                    n >= 2\r\n                    && this.runLength[n - 2] <= this.runLength[n] + this.runLength[n - 1]\r\n                )\r\n            ) {\r\n                if (this.runLength[n - 1] < this.runLength[n + 1]) {\r\n                    n--\r\n                }\r\n            } else if (this.runLength[n] > this.runLength[n + 1]) {\r\n                break\r\n            }\r\n            this.mergeAt(n)\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Merge all runs on TimSort's stack until only one remains.\r\n     */\r\n    forceMergeRuns() {\r\n        while (this.stackSize > 1) {\r\n            let n = this.stackSize - 2\r\n\r\n            if (n > 0 && this.runLength[n - 1] < this.runLength[n + 1]) {\r\n                n--\r\n            }\r\n\r\n            this.mergeAt(n)\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Merge the runs on the stack at positions i and i+1. Must be always be called\r\n     * with i=stackSize-2 or i=stackSize-3 (that is, we merge on top of the stack).\r\n     *\r\n     * @param {number} i - Index of the run to merge in TimSort's stack.\r\n     */\r\n    mergeAt(i) {\r\n        let start1 = this.runStart[i]\r\n        let length1 = this.runLength[i]\r\n        const start2 = this.runStart[i + 1]\r\n        let length2 = this.runLength[i + 1]\r\n\r\n        this.runLength[i] = length1 + length2\r\n\r\n        if (i === this.stackSize - 3) {\r\n            this.runStart[i + 1] = this.runStart[i + 2]\r\n            this.runLength[i + 1] = this.runLength[i + 2]\r\n        }\r\n\r\n        this.stackSize--\r\n\r\n        /*\r\n         * Find where the first element in the second run goes in run1. Previous\r\n         * elements in run1 are already in place\r\n         */\r\n        // const k = gallopRight(array[start2], array, start1, length1, 0, compare)\r\n        const k = this.gallopRight(this.Reads.readValue(start2), false, start1, length1, 0)\r\n        start1 += k\r\n        length1 -= k\r\n\r\n        if (length1 === 0) {\r\n            return\r\n        }\r\n\r\n        /*\r\n         * Find where the last element in the first run goes in run2. Next elements\r\n         * in run2 are already in place\r\n         */\r\n        // length2 = gallopLeft(\r\n        //     array[start1 + length1 - 1],\r\n        //     array,\r\n        //     start2,\r\n        //     length2,\r\n        //     length2 - 1,\r\n        //     compare\r\n        // )\r\n        length2 = this.gallopLeft(\r\n            // array[start1 + length1 - 1],\r\n            this.Reads.readValue(start1 + length1 - 1),\r\n            false,\r\n            start2,\r\n            length2,\r\n            length2 - 1,\r\n        )\r\n\r\n        if (length2 === 0) {\r\n            return\r\n        }\r\n\r\n        /*\r\n         * Merge remaining runs. A tmp array with length = min(length1, length2) is\r\n         * used\r\n         */\r\n        if (length1 <= length2) {\r\n            this.mergeLow(start1, length1, start2, length2)\r\n        } else {\r\n            this.mergeHigh(start1, length1, start2, length2)\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Merge two adjacent runs in a stable way. The runs must be such that the\r\n     * first element of run1 is bigger than the first element in run2 and the\r\n     * last element of run1 is greater than all the elements in run2.\r\n     * The method should be called when run1.length <= run2.length as it uses\r\n     * TimSort temporary array to store run1. Use mergeHigh if run1.length >\r\n     * run2.length.\r\n     *\r\n     * @param {number} start1 - First element in run1.\r\n     * @param {number} length1 - Length of run1.\r\n     * @param {number} start2 - First element in run2.\r\n     * @param {number} length2 - Length of run2.\r\n     */\r\n    mergeLow(start1, length1, start2, length2) {\r\n        // const {compare} = this\r\n        // const {array} = this\r\n        // const {tmp} = this\r\n        // const {tmpIndex} = this\r\n        // const {compare} = this\r\n        // const {array} = this\r\n        // const {tmp} = this\r\n        // const {tmpIndex} = this\r\n        let i = 0\r\n\r\n        for (i = 0; i < length1; i++) {\r\n            // tmp[i] = array[start1 + i]\r\n            this.Writes.auxWrite(i, this.Reads.get(start1 + i), this.tmp)\r\n        }\r\n\r\n        let cursor1 = 0\r\n        let cursor2 = start2\r\n        let dest = start1\r\n\r\n\r\n        // array[dest] = array[cursor2]\r\n        this.Writes.write(dest, this.Reads.get(cursor2))\r\n\r\n\r\n        dest++\r\n        cursor2++\r\n\r\n        if (--length2 === 0) {\r\n            for (i = 0; i < length1; i++) {\r\n                // array[dest + i] = tmp[cursor1 + i]\r\n                this.Writes.write(dest + i, this.Reads.auxReadValue(cursor1 + i, this.tmp))\r\n            }\r\n            return\r\n        }\r\n\r\n        if (length1 === 1) {\r\n            for (i = 0; i < length2; i++) {\r\n                // array[dest + i] = array[cursor2 + i]\r\n\r\n                this.Writes.write(dest + i, this.Reads.get(cursor2 + i))\r\n            }\r\n            // array[dest + length2] = tmp[cursor1]\r\n            this.Writes.write(dest + length2, this.Reads.auxReadValue(cursor1, this.tmp))\r\n            return\r\n        }\r\n\r\n        let {minGallop} = this\r\n\r\n        while (true) {\r\n            let count1 = 0\r\n            let count2 = 0\r\n            let exit = false\r\n\r\n            do {\r\n                // if (compare(array[cursor2], tmp[cursor1]) < 0) {\r\n                if (this.Reads.readValue(cursor2) < this.Reads.auxReadValue(cursor1, this.tmp)) {\r\n                    // array[dest] = array[cursor2]\r\n                    this.Writes.write(dest, this.Reads.get(cursor2))\r\n                    dest++\r\n                    cursor2++\r\n                    count2++\r\n                    count1 = 0\r\n\r\n                    if (--length2 === 0) {\r\n                        exit = true\r\n                        break\r\n                    }\r\n                } else {\r\n                    // array[dest] = tmp[cursor1]\r\n                    this.Writes.write(dest, this.Reads.auxGet(cursor1, this.tmp))\r\n\r\n                    dest++\r\n                    cursor1++\r\n                    count1++\r\n                    count2 = 0\r\n                    if (--length1 === 1) {\r\n                        exit = true\r\n                        break\r\n                    }\r\n                }\r\n            } while ((count1 | count2) < minGallop)\r\n\r\n            if (exit) {\r\n                break\r\n            }\r\n\r\n            do {\r\n                // count1 = gallopRight(array[cursor2], tmp, cursor1, length1, 0, compare)\r\n                count1 = this.gallopRight(this.Reads.readValue(cursor2), true, cursor1, length1, 0)\r\n\r\n                if (count1 !== 0) {\r\n                    for (i = 0; i < count1; i++) {\r\n                        // array[dest + i] = tmp[cursor1 + i]\r\n                        // results[dest + i] = tmpIndex[cursor1 + i]\r\n                        this.Writes.write(dest + i, this.Reads.auxGet(cursor1 + i, this.tmp))\r\n                    }\r\n\r\n                    dest += count1\r\n                    cursor1 += count1\r\n                    length1 -= count1\r\n                    if (length1 <= 1) {\r\n                        exit = true\r\n                        break\r\n                    }\r\n                }\r\n\r\n                // array[dest] = array[cursor2]\r\n                // results[dest] = results[cursor2]\r\n                this.Writes.write(dest, this.Reads.get(cursor2))\r\n\r\n                dest++\r\n                cursor2++\r\n\r\n                if (--length2 === 0) {\r\n                    exit = true\r\n                    break\r\n                }\r\n\r\n                // count2 = this.gallopLeft(tmp[cursor1], array, cursor2, length2, 0, compare)\r\n                count2 = this.gallopLeft(this.Reads.auxReadValue(cursor1, this.tmp), false, cursor2, length2, 0)\r\n\r\n                if (count2 !== 0) {\r\n                    for (i = 0; i < count2; i++) {\r\n                        // array[dest + i] = array[cursor2 + i]\r\n                        // results[dest + i] = results[cursor2 + i]\r\n                        this.Writes.write(dest + i, this.Reads.get(cursor2 + i))\r\n                    }\r\n\r\n                    dest += count2\r\n                    cursor2 += count2\r\n                    length2 -= count2\r\n\r\n                    if (length2 === 0) {\r\n                        exit = true\r\n                        break\r\n                    }\r\n                }\r\n                // array[dest] = tmp[cursor1]\r\n                // results[dest] = tmpIndex[cursor1]\r\n\r\n                this.Writes.write(dest, this.Reads.auxGet(cursor1, this.tmp))\r\n\r\n                dest++\r\n                cursor1++\r\n\r\n                if (--length1 === 1) {\r\n                    exit = true\r\n                    break\r\n                }\r\n\r\n                minGallop--\r\n            } while (\r\n                count1 >= DEFAULT_MIN_GALLOPING\r\n                || count2 >= DEFAULT_MIN_GALLOPING\r\n                )\r\n\r\n            if (exit) {\r\n                break\r\n            }\r\n\r\n            if (minGallop < 0) {\r\n                minGallop = 0\r\n            }\r\n\r\n            minGallop += 2\r\n        }\r\n\r\n        this.minGallop = minGallop\r\n\r\n        if (minGallop < 1) {\r\n            this.minGallop = 1\r\n        }\r\n\r\n        if (length1 === 1) {\r\n            for (i = 0; i < length2; i++) {\r\n                // array[dest + i] = array[cursor2 + i]\r\n                // results[dest + i] = results[cursor2 + i]\r\n                this.Writes.write(dest + i, this.Reads.get(cursor2 + i))\r\n            }\r\n            // array[dest + length2] = tmp[cursor1]\r\n            // results[dest + length2] = tmpIndex[cursor1]\r\n            this.Writes.write(dest + length2, this.Reads.auxGet(cursor1, this.tmp))\r\n        } else if (length1 === 0) {\r\n            throw new Error('mergeLow preconditions were not respected')\r\n        } else {\r\n            for (i = 0; i < length1; i++) {\r\n                // array[dest + i] = tmp[cursor1 + i]\r\n                // results[dest + i] = tmpIndex[cursor1 + i]\r\n                this.Writes.write(dest + i, this.Reads.auxGet(cursor1 + i, this.tmp))\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Merge two adjacent runs in a stable way. The runs must be such that the\r\n     * first element of run1 is bigger than the first element in run2 and the\r\n     * last element of run1 is greater than all the elements in run2.\r\n     * The method should be called when run1.length > run2.length as it uses\r\n     * TimSort temporary array to store run2. Use mergeLow if run1.length <=\r\n     * run2.length.\r\n     *\r\n     * @param {number} start1 - First element in run1.\r\n     * @param {number} length1 - Length of run1.\r\n     * @param {number} start2 - First element in run2.\r\n     * @param {number} length2 - Length of run2.\r\n     */\r\n    mergeHigh(start1, length1, start2, length2) {\r\n        // const {compare} = this\r\n        // const {array} = this\r\n        // const {tmp} = this\r\n        // const {tmpIndex} = this\r\n        let i = 0\r\n\r\n        for (i = 0; i < length2; i++) {\r\n            // tmp[i] = array[start2 + i]\r\n            this.Writes.auxWrite(i, this.Reads.get(start2 + i), this.tmp)\r\n        }\r\n\r\n        let cursor1 = start1 + length1 - 1\r\n        let cursor2 = length2 - 1\r\n        let dest = start2 + length2 - 1\r\n        let customCursor = 0\r\n        let customDest = 0\r\n\r\n        // array[dest] = array[cursor1]\r\n        this.Writes.write(dest, this.Reads.get(cursor1))\r\n\r\n        dest--\r\n        cursor1--\r\n\r\n        if (--length1 === 0) {\r\n            customCursor = dest - (length2 - 1)\r\n\r\n            for (i = 0; i < length2; i++) {\r\n                // array[customCursor + i] = tmp[i]\r\n                this.Writes.write(customCursor + i, this.Reads.auxGet(i, this.tmp))\r\n            }\r\n\r\n            return\r\n        }\r\n\r\n        if (length2 === 1) {\r\n            dest -= length1\r\n            cursor1 -= length1\r\n            customDest = dest + 1\r\n            customCursor = cursor1 + 1\r\n\r\n            for (i = length1 - 1; i >= 0; i--) {\r\n                // array[customDest + i] = array[customCursor + i]\r\n                this.Writes.write(customDest + i, this.Reads.get(customCursor + i))\r\n            }\r\n\r\n            // array[dest] = tmp[cursor2]\r\n            this.Writes.write(dest, this.Reads.auxGet(cursor2, this.tmp))\r\n            return\r\n        }\r\n\r\n        let {minGallop} = this\r\n\r\n        while (true) {\r\n            let count1 = 0\r\n            let count2 = 0\r\n            let exit = false\r\n\r\n            do {\r\n                // if (compare(tmp[cursor2], array[cursor1]) < 0) {\r\n                if (this.Reads.auxReadValue(cursor2, this.tmp) < this.Reads.readValue(cursor1)) {\r\n                    // array[dest] = array[cursor1]\r\n                    this.Writes.write(dest, this.Reads.get(cursor1))\r\n                    dest--\r\n                    cursor1--\r\n                    count1++\r\n                    count2 = 0\r\n                    if (--length1 === 0) {\r\n                        exit = true\r\n                        break\r\n                    }\r\n                } else {\r\n                    // array[dest] = tmp[cursor2]\r\n                    this.Writes.write(dest, this.Reads.auxGet(cursor2, this.tmp))\r\n                    dest--\r\n                    cursor2--\r\n                    count2++\r\n                    count1 = 0\r\n                    if (--length2 === 1) {\r\n                        exit = true\r\n                        break\r\n                    }\r\n                }\r\n            } while ((count1 | count2) < minGallop)\r\n\r\n            if (exit) {\r\n                break\r\n            }\r\n\r\n            do {\r\n                // count1 = length1 - gallopRight(\r\n                //     tmp[cursor2],\r\n                //     array,\r\n                //     start1,\r\n                //     length1,\r\n                //     length1 - 1,\r\n                //     compare\r\n                // )\r\n                count1 = length1 - this.gallopRight(\r\n                    this.Reads.auxReadValue(cursor2, this.tmp),\r\n                    false,\r\n                    start1,\r\n                    length1,\r\n                    length1 - 1\r\n                )\r\n\r\n                if (count1 !== 0) {\r\n                    dest -= count1\r\n                    cursor1 -= count1\r\n                    length1 -= count1\r\n                    customDest = dest + 1\r\n                    customCursor = cursor1 + 1\r\n\r\n                    for (i = count1 - 1; i >= 0; i--) {\r\n                        // array[customDest + i] = array[customCursor + i]\r\n                        this.Writes.write(customDest + i, this.Reads.get(customCursor + i))\r\n                    }\r\n\r\n                    if (length1 === 0) {\r\n                        exit = true\r\n                        break\r\n                    }\r\n                }\r\n\r\n                // array[dest] = tmp[cursor2]\r\n                this.Writes.write(dest, this.Reads.auxGet(cursor2, this.tmp))\r\n\r\n                dest--\r\n                cursor2--\r\n\r\n                if (--length2 === 1) {\r\n                    exit = true\r\n                    break\r\n                }\r\n\r\n                // count2 = length2 - gallopLeft(\r\n                //     array[cursor1],\r\n                //     tmp,\r\n                //     0,\r\n                //     length2,\r\n                //     length2 - 1,\r\n                //     compare\r\n                // )\r\n\r\n                count2 = length2 - this.gallopLeft(\r\n                    this.Reads.readValue(cursor1),\r\n                    true,\r\n                    0,\r\n                    length2,\r\n                    length2 - 1\r\n                )\r\n\r\n                if (count2 !== 0) {\r\n                    dest -= count2\r\n                    cursor2 -= count2\r\n                    length2 -= count2\r\n                    customDest = dest + 1\r\n                    customCursor = cursor2 + 1\r\n\r\n                    for (i = 0; i < count2; i++) {\r\n                        // array[customDest + i] = tmp[customCursor + i]\r\n                        this.Writes.write(customDest + i, this.Reads.auxGet(customCursor + i, this.tmp))\r\n                    }\r\n\r\n                    if (length2 <= 1) {\r\n                        exit = true\r\n                        break\r\n                    }\r\n                }\r\n\r\n                // array[dest] = array[cursor1]\r\n                this.Writes.write(dest, this.Reads.get(cursor1))\r\n\r\n                dest--\r\n                cursor1--\r\n\r\n                if (--length1 === 0) {\r\n                    exit = true\r\n                    break\r\n                }\r\n\r\n                minGallop--\r\n            } while (\r\n                count1 >= DEFAULT_MIN_GALLOPING\r\n                || count2 >= DEFAULT_MIN_GALLOPING\r\n                )\r\n\r\n            if (exit) {\r\n                break\r\n            }\r\n\r\n            if (minGallop < 0) {\r\n                minGallop = 0\r\n            }\r\n\r\n            minGallop += 2\r\n        }\r\n\r\n        this.minGallop = minGallop\r\n\r\n        if (minGallop < 1) {\r\n            this.minGallop = 1\r\n        }\r\n\r\n        if (length2 === 1) {\r\n            dest -= length1\r\n            cursor1 -= length1\r\n            customDest = dest + 1\r\n            customCursor = cursor1 + 1\r\n\r\n            for (i = length1 - 1; i >= 0; i--) {\r\n                // array[customDest + i] = array[customCursor + i]\r\n                this.Writes.write(customDest + i, this.Reads.get(customCursor + i))\r\n            }\r\n\r\n            // array[dest] = tmp[cursor2]\r\n            // results[dest] = tmpIndex[cursor2]\r\n\r\n            this.Writes.write(dest, this.Reads.auxGet(cursor2, this.tmp))\r\n\r\n\r\n        } else if (length2 === 0) {\r\n            throw new Error('mergeHigh preconditions were not respected')\r\n        } else {\r\n            customCursor = dest - (length2 - 1)\r\n            for (i = 0; i < length2; i++) {\r\n                // array[customCursor + i] = tmp[i]\r\n                this.Writes.write(customCursor + i, this.Reads.auxGet(i, this.tmp))\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    /**\r\n     * Sort an array in the range [lo, hi) using TimSort.\r\n     *\r\n     * @param {array} array - The array to sort.\r\n     * @param {function=} compare - Item comparison function. Default is\r\n     *     alphabetical\r\n     * @param {number} lo - First element in the range (inclusive).\r\n     * @param {number} hi - Last element in the range.\r\n     *     comparator.\r\n     */\r\n    runSort(low, high) {\r\n        this.sort(low, high+1)\r\n    }\r\n\r\n    sort(lo, hi) {\r\n\r\n        let i = 0\r\n\r\n        let remaining = hi - lo\r\n\r\n        // The array is already sorted\r\n        if (remaining < 2) {\r\n            return results\r\n        }\r\n\r\n        let runLength = 0\r\n        // On small arrays binary sort can be used directly\r\n        if (remaining < DEFAULT_MIN_MERGE) {\r\n            runLength = this.makeAscendingRun(lo, hi)\r\n            this.binaryInsertionSort(lo, hi, lo + runLength)\r\n        }\r\n\r\n\r\n        const minRun = minRunLength(remaining)\r\n\r\n        do {\r\n            runLength = this.makeAscendingRun(lo, hi)\r\n            if (runLength < minRun) {\r\n                let force = remaining\r\n                if (force > minRun) {\r\n                    force = minRun\r\n                }\r\n\r\n                this.binaryInsertionSort(lo, lo + force, lo + runLength)\r\n                runLength = force\r\n            }\r\n            // Push new run and merge if necessary\r\n            this.pushRun(lo, runLength)\r\n            this.mergeRuns()\r\n\r\n            // Go find next run\r\n            remaining -= runLength\r\n            lo += runLength\r\n        } while (remaining !== 0)\r\n\r\n        // Force merging of remaining runs\r\n        this.forceMergeRuns()\r\n        this.Writes.removeAuxArray(this.tmp)\r\n    }\r\n}","import React from \"react\";\r\nimport {objLength} from \"../utils/utils\";\r\nimport styles from \"./ArrayWindow.module.scss\";\r\n\r\nexport class ArrayWindow extends React.PureComponent {\r\n    array\r\n    mainArray\r\n    height\r\n    visualProps\r\n    borderEnabled\r\n    visualStyle\r\n    arrayLen\r\n    sizeStyle\r\n    tmp\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.array = props.array\r\n        this.mainArray = props.mainArray\r\n        this.height = props.height\r\n        this.visualProps = props.visualProps\r\n        this.borderEnabled = this.visualProps.barsStroke\r\n        this.visualStyle = this.visualProps.style\r\n        this.arrayLen = this.array.length\r\n        this.sizeStyle = {width: \"100%\", height: this.height + \"%\"};\r\n        this.state = {\r\n            renderedArray: this.renderArray()\r\n        }\r\n    }\r\n    componentDidMount() {\r\n        //50 FPS\r\n        setInterval(this.updateState.bind(this), 20)\r\n    }\r\n    updateState(){\r\n        this.setState({\r\n            renderedArray: this.renderArray()\r\n        })\r\n    }\r\n    componentWillReceiveProps(nextProps, nextContext){\r\n        this.array = nextProps.array\r\n        this.mainArray = nextProps.mainArray\r\n        this.height = nextProps.height\r\n        this.visualProps = nextProps.visualProps\r\n        this.borderEnabled = this.visualProps.barsStroke\r\n        this.visualStyle = this.visualProps.style\r\n        this.sizeStyle = {width: \"100%\", height: this.height + \"%\"};\r\n        let len = this.array.length\r\n        if(len !== this.arrayLen){\r\n            this.arrayLen = len\r\n            this.updateState()\r\n        }\r\n\r\n\r\n    }\r\n\r\n    renderArray() {\r\n        let tmp = []\r\n        if (this.visualStyle === \"bars\") {\r\n            let border = this.borderEnabled ? {} : {border: \"none\"}\r\n            for (let i = 0; i < this.arrayLen; ++i) {\r\n                let styleSheet = {\r\n                    height: this.array[i].getValue() / this.mainArray.length * 100 + \"%\",\r\n                    backgroundColor: \"rgb(\" + this.array[i].getColorForRender() + \")\",\r\n                    ...border\r\n                }\r\n                tmp.push(<div key={i} style={styleSheet} className={styles.bar}/>);\r\n            }\r\n            let styleSheet = {\r\n                height: \"0%\",\r\n                backgroundColor: \"rgb(255,255,255)\",\r\n            }\r\n            for (let i = this.arrayLen; i < this.mainArray.length; ++i) {\r\n                tmp.push(<div key={i} style={styleSheet} className={styles.bar}/>);\r\n            }\r\n        } else if (this.visualStyle === \"dots\") {\r\n            for (let i = 0; i < this.arrayLen; ++i) {\r\n                let value = this.array[i].getValue()\r\n                let height = (value === -1) ? {height: 0} : {}\r\n                let styleSheet = {\r\n                    bottom: \"calc(\" + value / this.mainArray.length * 100 + \"% - 0.25rem)\",\r\n                    backgroundColor: \"rgb(\" + this.array[i].getColorForRender() + \")\",\r\n                    ...height\r\n                }\r\n                tmp.push(<div className={styles.dotContainer}>\r\n                    <div key={i} style={styleSheet} className={styles.dot}/>\r\n                </div>);\r\n            }\r\n            let styleSheet = {\r\n                bottom: 0,\r\n                backgroundColor: \"rgb(0, 0, 0)\",\r\n            }\r\n            for (let i = this.arrayLen; i < this.mainArray.length; ++i) {\r\n                tmp.push(<div className={styles.dotContainer}>\r\n                    <div key={i} style={styleSheet} className={styles.dot}/>\r\n                </div>);\r\n            }\r\n        }\r\n        return tmp\r\n    }\r\n\r\n    render() {\r\n        if (this.arrayLen === 0) {\r\n            return <div style={this.sizeStyle}/>\r\n        }else{\r\n            return <div style={this.sizeStyle}>\r\n                <div className={styles.arrayContainer}>\r\n                    {this.state.renderedArray}\r\n                </div>\r\n            </div>\r\n        }\r\n    }\r\n}","import React from 'react';\r\nimport styles from \"./Stats.module.scss\";\r\n\r\nexport function Stats(props){\r\n    return(\r\n        <div className={styles.statsContainer}>\r\n            <div><b>Sort: {props.sortName}</b></div>\r\n            <div>Length: {props.arrLength}</div>\r\n            <div>Comparisons: {props.comparisons}</div>\r\n            <div>Writes to main array: {props.mainWrites}</div>\r\n            <div>Writes to auxiliary arrays: {props.auxWrites}</div>\r\n        </div>\r\n    )\r\n}","export let initFunctions = {\r\n    linear: function (x, length) {\r\n        return x;\r\n    },\r\n    // reverse: function (x, length) {\r\n    //     return length - x;\r\n    // },\r\n    // pipeOrgan: function (x, length) {\r\n    //     if (x < length / 2) {\r\n    //         return 2 * x;\r\n    //     } else {\r\n    //         return 2 * (length - x) - 1;\r\n    //     }\r\n    // },\r\n    // inversedPipeOrgan: function (x, length){\r\n    //     if (x < length / 2) {\r\n    //         return (length - 2*x) - 1;\r\n    //     } else {\r\n    //         return x*2-length;\r\n    //     }\r\n    // },\r\n    manySimular: function (x, length){\r\n        const GAP_FACTOR = 5\r\n        let divider = Math.trunc(length/GAP_FACTOR)\r\n        return Math.trunc(x/divider)*divider\r\n    }\r\n}","import {randomInt} from \"./utils\";\r\nimport {HeapSort} from \"../Sorts/HeapSort\";\r\n\r\nexport let shuffles = {\r\n    FullShuffle: function (arrayVisualizer) {\r\n        let len = arrayVisualizer.getArrLength()\r\n        for (let i = 0; i < len; ++i) {\r\n            let randomIndex = randomInt(i, len)\r\n            arrayVisualizer.getWrites().swapWithDelay(i, randomIndex, arrayVisualizer.getMainArray(), true, arrayVisualizer.getDelays().getDelayInc()/5, true)\r\n        }\r\n        // return instructions\r\n    },\r\n\r\n    AlmostSorted: function (arrayVisualizer) {\r\n        let len = arrayVisualizer.getArrLength()\r\n        const AMOUNT = 0.1\r\n        for (let i = 0; i < len * AMOUNT; ++i) {\r\n            let randomIndexA = randomInt(i, len)\r\n            let randomIndexB = randomInt(i, len)\r\n            arrayVisualizer.getWrites().swapWithDelay(randomIndexA, randomIndexB, arrayVisualizer.getMainArray(), true, arrayVisualizer.getDelays().getDelayInc()/5, true)\r\n        }\r\n    },\r\n    Reverse: function (arrayVisualizer){\r\n        let len = arrayVisualizer.getArrLength()\r\n        for (let i = 0; i < Math.trunc(len/2); ++i){\r\n            arrayVisualizer.getWrites().swapWithDelay(i, len-i-1, arrayVisualizer.getMainArray(), true, arrayVisualizer.getDelays().getDelayInc()/5, true)\r\n        }\r\n    },\r\n    BlockShuffle: function (arrayVisualizer) {\r\n        const GAP_FACTOR = 5\r\n        let len = arrayVisualizer.getArrLength()\r\n        let gap = len/GAP_FACTOR\r\n        for (let i = 0; i < GAP_FACTOR-1; ++i) {\r\n            let factor = randomInt(i+1, GAP_FACTOR)\r\n            for(let j = 0; j < gap; ++j){\r\n                arrayVisualizer.getWrites().swapWithDelay(j+i*gap, j+factor*gap, arrayVisualizer.getMainArray(), true, arrayVisualizer.getDelays().getDelayInc()/5, true)\r\n            }\r\n        }\r\n    },\r\n    PipeOrgan: function (arrayVisualizer){\r\n        let len = arrayVisualizer.getArrLength()\r\n        let Reads = arrayVisualizer.getReads()\r\n        let temp = new Array(len);\r\n        for(let i = 0, j = 0; i < len; i+=2){\r\n            temp[j++] = Reads.get(i, arrayVisualizer.getMainArray())\r\n        }\r\n        for(let i = 1, j = len; i < len ;i+=2) {\r\n            temp[--j] = Reads.get(i, arrayVisualizer.getMainArray())\r\n        }\r\n        for(let i = 0; i < len; i++){\r\n            arrayVisualizer.getWrites().writeWithDelay(i, temp[i], arrayVisualizer.getMainArray(), true, arrayVisualizer.getDelays().getDelayInc()/5, true)\r\n        }\r\n    },\r\n    InversedPipeOrgan: function (arrayVisualizer){\r\n        let len = arrayVisualizer.getArrLength()\r\n        let Reads = arrayVisualizer.getReads()\r\n        let temp = new Array(len);\r\n        for(let i = 0, j = 0; i < len; i+=2){\r\n            temp[j++] = Reads.get(len-i-1, arrayVisualizer.getMainArray())\r\n        }\r\n        for(let i = 1, j = len; i < len ;i+=2) {\r\n            temp[--j] = Reads.get(len-i-1, arrayVisualizer.getMainArray())\r\n        }\r\n        for(let i = 0; i < len; i++){\r\n            arrayVisualizer.getWrites().writeWithDelay(i, temp[i], arrayVisualizer.getMainArray(), true, arrayVisualizer.getDelays().getDelayInc()/5, true)\r\n        }\r\n    },\r\n    Heap: function (arrayVisualizer){\r\n        let n = arrayVisualizer.getArrLength()\r\n        arrayVisualizer.initPseudoArray()\r\n        let heapSort = new HeapSort(arrayVisualizer)\r\n        for (let i = Math.trunc(n / 2) - 1; i >= 0; i--) {\r\n            heapSort.heapify(n, i);\r\n        }\r\n    },\r\n    QuickSortKiller: function (arrayVisualizer){\r\n        let len = arrayVisualizer.getArrLength()\r\n        for(let j = len-len%2-2, i = j-1; i >= 0; i-=2, j--) {\r\n            arrayVisualizer.getWrites().swapWithDelay(i, j, arrayVisualizer.getMainArray(), true, arrayVisualizer.getDelays().getDelayInc() / 5, true)\r\n        }\r\n    }\r\n}","import React from 'react';\r\nimport styles from \"./Controls.module.scss\";\r\nimport {initFunctions} from \"../utils/initFunctions\";\r\nimport {shuffles} from \"../utils/shuffles\";\r\n\r\n\r\nexport class Controls extends React.PureComponent {\r\n    isControlShow\r\n    arrayVisualizer\r\n    sorts\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.isControlShow = true;\r\n        this.arrayVisualizer = props.arrayVisualizer\r\n        this.sorts = props.sorts\r\n        this.arrayVisualizer.updateArrLength(this.arrayVisualizer.DEFAULT_ARR_LEN)\r\n        // this.arrayVisualizer.initArray(initFunctions.linear)\r\n    }\r\n\r\n    updateArrLength() {\r\n        let slider = document.getElementById(styles.slider)\r\n\r\n        if (slider !== null) {\r\n            let len = slider.value\r\n            this.arrayVisualizer.updateArrLength(len)\r\n        }\r\n\r\n    }\r\n\r\n    toggleControlShow() {\r\n        // console.log(styles.controls)\r\n        let controlsContainer = document.getElementById(styles.controlsContainer)\r\n        let controls = document.getElementById(styles.controls)\r\n        let btn = document.getElementById(styles.showToggleBtn)\r\n        if (this.isControlShow) {\r\n            controls.style.display = \"none\"\r\n            controlsContainer.style.width = \"0\"\r\n            btn.innerHTML = \"&gt;&gt;\";\r\n        } else {\r\n            controls.style.display = \"block\"\r\n            controlsContainer.style.width = \"20rem\"\r\n            btn.innerHTML = \"&lt;&lt\";\r\n        }\r\n        this.isControlShow = !this.isControlShow\r\n    }\r\n\r\n    initArray(func) {\r\n        this.arrayVisualizer.initArray(func, this.arrayVisualizer.getArrLength(), true)\r\n    }\r\n\r\n    shuffleArray(func) {\r\n        this.arrayVisualizer.shuffleArray(func)\r\n        // func(this.arrayVisualizer)\r\n    }\r\n\r\n    sortArray(sortName) {\r\n        this.sorts.runSort(sortName, 0, this.arrayVisualizer.getArrLength() - 1)\r\n    }\r\n\r\n    stopSort() {\r\n        this.arrayVisualizer.stopSort()\r\n        this.arrayVisualizer.nullify()\r\n    }\r\n\r\n    abortSort() {\r\n        this.stopSort()\r\n        this.initArray(initFunctions.linear)\r\n    }\r\n\r\n    genInitFunctions() {\r\n        // console.log(initFunctions)\r\n        let tmp = []\r\n        for (let i in initFunctions) {\r\n            tmp.push(\r\n                <button key={i} onClick={this.initArray.bind(this, initFunctions[i])}>{i}</button>\r\n            )\r\n        }\r\n        return tmp;\r\n    }\r\n\r\n    getSorts() {\r\n        let tmp = []\r\n        let sortsNames = this.sorts.getSortsPaths()\r\n        for (let i of sortsNames) {\r\n            tmp.push(\r\n                <button key={i} onClick={this.sortArray.bind(this, i)}>{i}</button>)\r\n        }\r\n        return tmp;\r\n    }\r\n\r\n    getShuffles() {\r\n        let tmp = []\r\n        for (let i in shuffles) {\r\n            tmp.push(\r\n                <button key={i} onClick={this.shuffleArray.bind(this, shuffles[i])}>{i}</button>\r\n            )\r\n        }\r\n        return tmp;\r\n    }\r\n\r\n    toggleShowAuxArrays() {\r\n        let element = document.getElementById(\"auxArrShowCB\")\r\n        this.arrayVisualizer.setShowAuxArrays(element.checked)\r\n    }\r\n\r\n    toggleBarsStroke() {\r\n        let element = document.getElementById(\"enableStrokeCB\")\r\n        this.arrayVisualizer.setEnableBarsStroke(element.checked)\r\n    }\r\n\r\n    toggleEnableMarks() {\r\n        let element = document.getElementById(\"enableMarksCB\")\r\n        this.arrayVisualizer.setEnableMarks(element.checked)\r\n    }\r\n\r\n    toggleVisualStyle(val) {\r\n        this.arrayVisualizer.setVisualStyle(val)\r\n    }\r\n\r\n    toggleRainbow(val){\r\n        this.arrayVisualizer.getMarks().setRainbow(val)\r\n    }\r\n\r\n    restoreArray(){\r\n        this.arrayVisualizer.restoreArray()\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div id={styles.controlsContainer}>\r\n                {/*<div onClick={this.toggleControlShow.bind(this)} id={styles.showToggleBtn}>&lt;&lt;</div>*/}\r\n                <div id={styles.controls}>\r\n                    <div>\r\n                        <div>\r\n                            <div className={styles.sectionHeader}>Array Size</div>\r\n                            <input id={styles.slider} type=\"range\" min=\"10\" max=\"500\"\r\n                                   defaultValue={this.arrayVisualizer.DEFAULT_ARR_LEN}\r\n                                   step=\"10\"\r\n                                   onChange={this.updateArrLength.bind(this)}/>\r\n                        </div>\r\n                        <div>\r\n                            <div className={styles.sectionHeader}>Visuals</div>\r\n                            <div style={{display: \"flex\", justifyContent:\"center\"}}>\r\n                                <div style={{textAlign: \"left\"}}>\r\n                                    <div className={styles.checkBoxContainer}>\r\n                                        <input onChange={this.toggleShowAuxArrays.bind(this)} type=\"checkbox\"\r\n                                               id=\"auxArrShowCB\"\r\n                                               name=\"auxArrShowCB\" defaultChecked={true}/>\r\n                                        <label htmlFor=\"auxArrShowCB\">Show Aux Arrays</label>\r\n                                    </div>\r\n                                    <div className={styles.checkBoxContainer}>\r\n                                        <input onChange={this.toggleBarsStroke.bind(this)} type=\"checkbox\"\r\n                                               id=\"enableStrokeCB\"\r\n                                               name=\"enableStrokeCB\" defaultChecked={true}/>\r\n                                        <label htmlFor=\"enableStrokeCB\">Enable Bars Stroke</label>\r\n                                    </div>\r\n                                    <div className={styles.checkBoxContainer}>\r\n                                        <input onChange={this.toggleEnableMarks.bind(this)} type=\"checkbox\"\r\n                                               id=\"enableMarksCB\"\r\n                                               name=\"enableMarksCB\" defaultChecked={true}/>\r\n                                        <label htmlFor=\"enableMarksCB\">Enable Marks(Disable to reduce lags)</label>\r\n                                    </div>\r\n                                    <div className={styles.checkBoxContainer}>\r\n                                        <button onClick={this.toggleRainbow.bind(this, true)}>Paint to Rainbow</button>\r\n                                        <button onClick={this.toggleRainbow.bind(this, false)}>Clear Color</button>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n                        </div>\r\n                        <div>\r\n                            <div className={styles.sectionHeader}>Visual Styles</div>\r\n                            <div>\r\n                                <input onChange={this.toggleVisualStyle.bind(this, \"bars\")} type=\"radio\"\r\n                                       id=\"barsRadioBtn\"\r\n                                       name=\"visualStyle\" value=\"bars\" defaultChecked={true}/>\r\n                                <label htmlFor=\"barsRadioBtn\">Bars</label>\r\n\r\n                                <input onChange={this.toggleVisualStyle.bind(this, \"dots\")} type=\"radio\"\r\n                                       id=\"dotsRadioBtn\"\r\n                                       name=\"visualStyle\" value=\"dots\"/>\r\n                                <label htmlFor=\"dotsRadioBtn\">Dots</label>\r\n                            </div>\r\n                        </div>\r\n                        <div>\r\n                            <div className={styles.sectionHeader}>Init Array</div>\r\n                            <div>{this.genInitFunctions()}</div>\r\n                            <div><button onClick={this.restoreArray.bind(this)}>RESTORE ARRAY</button></div>\r\n                        </div>\r\n\r\n                        <div>\r\n                            <div className={styles.sectionHeader}>Shuffle Array</div>\r\n                            <div>\r\n                                {/*<button onClick={this.shuffleArray.bind(this)}>Random</button>*/}\r\n                                <div>{this.getShuffles()}</div>\r\n                            </div>\r\n                        </div>\r\n                        <div>\r\n                            <div className={styles.sectionHeader}>Sort control</div>\r\n                            <div>\r\n                                <button onClick={this.abortSort.bind(this)}>Abort Sort(Recommended)</button>\r\n                                <button onClick={this.stopSort.bind(this)}>Stop Sort(Not Recommended)</button>\r\n                            </div>\r\n                        </div>\r\n                        <div>\r\n                            <div className={styles.sectionHeader}>Sort Array</div>\r\n                            <div>\r\n                                {this.getSorts()}\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}","export class Sounds{\r\n    arrayVisualizer\r\n    ctx\r\n    Delays\r\n    constructor(arrayVisualizer) {\r\n        this.arrayVisualizer = arrayVisualizer\r\n        this.Delays = arrayVisualizer.getDelays()\r\n        this.ctx = new (window.AudioContext || window.webkitAudioContext)();\r\n    }\r\n    playSound(value) {\r\n        let osc = this.ctx.createOscillator();\r\n        osc.type = 'sine';\r\n\r\n        let k = value / this.arrayVisualizer.getArrLength()\r\n        osc.frequency.value = 2000 * k + 200;\r\n\r\n        let addTime = 50\r\n\r\n        let gainNode = this.ctx.createGain()\r\n        gainNode.gain.value = 0;\r\n        osc.connect(gainNode)\r\n        gainNode.connect(this.ctx.destination)\r\n        // console.log(this.Delays.getDelayInc())\r\n        gainNode.gain.linearRampToValueAtTime(0.05, this.ctx.currentTime + (this.Delays.getDelayInc() + addTime) / 1000 / 2)\r\n        gainNode.gain.linearRampToValueAtTime(0, this.ctx.currentTime + (this.Delays.getDelayInc() + addTime) / 1000)\r\n\r\n        osc.start();\r\n        osc.stop(this.ctx.currentTime + (this.Delays.getDelayInc() + addTime) / 1000);\r\n    }\r\n}","import {HSL2RGB, randomInt} from \"../utils/utils\";\r\n\r\nexport const colors = {\r\n    \"Unmarked\": [255, 255, 255],\r\n    \"Default\": [255, 0, 0],\r\n    \"Additional\": [randomInt(0, 256), randomInt(0, 256), randomInt(0, 256)],\r\n    \"Sorted\": [0, 255, 0],\r\n    \"Analysis\": [0, 0, 255]\r\n}\r\nexport class Marks{\r\n    arrayVisualizer\r\n    Delays\r\n\r\n    constructor(arrayVisualizer) {\r\n        this.arrayVisualizer = arrayVisualizer\r\n        this.Delays = arrayVisualizer.getDelays()\r\n    }\r\n\r\n    mark(index, args, saveArr = true) {\r\n        if(!this.arrayVisualizer.getEnableMarks()){\r\n            return;\r\n        }\r\n        let type = \"Default\"\r\n        let color = colors[\"Default\"]\r\n        let tmpArr = this.arrayVisualizer.getMainArray()\r\n        // Additional\r\n        if (args.type === \"Additional\") {\r\n            type = \"Additional\"\r\n            color = args.color\r\n            // console.log(color)\r\n        }\r\n        //Default\r\n        else if (args.type === \"Default\") {\r\n            type = \"Default\"\r\n            color = colors[\"Default\"]\r\n        } else {\r\n            type = args.type\r\n            color = args.color\r\n            // console.log(color)\r\n        }\r\n\r\n        tmpArr[index].setType(type)\r\n        tmpArr[index].setMarkColor(color)\r\n        if (saveArr) {\r\n            this.arrayVisualizer.setState({\r\n                array: tmpArr\r\n            })\r\n        } else {\r\n            return tmpArr\r\n        }\r\n        // console.log(color);\r\n    }\r\n\r\n    markMany(indexes, args, saveArr) {\r\n        let tmpArr = this.arrayVisualizer.getMainArray()\r\n        for (let i of indexes) {\r\n            if (saveArr) {\r\n                this.mark(i, args, saveArr)\r\n            } else {\r\n                tmpArr = this.mark(i, args, saveArr)\r\n            }\r\n        }\r\n        if (!saveArr) {\r\n            return tmpArr\r\n        }\r\n    }\r\n\r\n    unmark(index, saveArr = true) {\r\n        let tmpArr = this.arrayVisualizer.getMainArray()\r\n        // tmpArr[index].setMarkColor(colors[\"Unmarked\"])\r\n        tmpArr[index].setType(\"Unmarked\")\r\n        if (saveArr) {\r\n            this.arrayVisualizer.setState({\r\n                array: tmpArr\r\n            })\r\n        } else {\r\n            return tmpArr\r\n        }\r\n    }\r\n\r\n    unmarkMany(indexes, saveArr, saveOnce) {\r\n        let tmpArr = this.arrayVisualizer.getMainArray()\r\n        for (let i of indexes) {\r\n            if (saveArr) {\r\n                this.unmark(i, saveArr)\r\n            } else {\r\n                tmpArr = this.unmark(i, saveArr)\r\n            }\r\n        }\r\n        if (saveOnce) {\r\n            this.arrayVisualizer.setState({\r\n                array: tmpArr\r\n            })\r\n        }\r\n        if (!saveArr) {\r\n            return tmpArr\r\n        }\r\n    }\r\n\r\n    setRainbow(val){\r\n        let tmpArr = this.arrayVisualizer.getMainArray()\r\n        if(val){\r\n            for(let i = 0; i < tmpArr.length; ++i){\r\n                let hsl = [i / tmpArr.length, 0.8, 0.5]\r\n                let rgb = HSL2RGB(hsl[0], hsl[1], hsl[2])\r\n                tmpArr[i].setColor(rgb)\r\n            }\r\n        }else{\r\n            for(let i of tmpArr){\r\n                i.setColor([255, 255, 255])\r\n            }\r\n        }\r\n        this.arrayVisualizer.setState({\r\n            array: tmpArr\r\n        })\r\n    }\r\n\r\n    markUnmarkMany(markIndexes, markArgs) {\r\n        this.markMany(markIndexes, markArgs, true)\r\n        this.Delays.push(setTimeout(this.unmarkMany.bind(this), this.Delays.incDelay(\"Unmark\", this.Delays.getDelayInc() / 500), markIndexes, false, true))\r\n    }\r\n\r\n    clearAllMarks(){\r\n        this.unmarkMany(Array.from(Array(this.arrayVisualizer.getArrLength()).keys()), false, true)\r\n    }\r\n\r\n}","import {Delays} from \"./Delays\";\r\nimport {Marks} from \"./Marks\";\r\nimport {Sounds} from \"./Sounds\";\r\n\r\nexport class Reads{\r\n    arrayVisualizer;\r\n    Sounds\r\n    Delays\r\n    Marks\r\n    constructor(arrayVisualizer){\r\n        this.arrayVisualizer = arrayVisualizer\r\n        this.Sounds = arrayVisualizer.getSounds()\r\n        this.Delays = arrayVisualizer.getDelays()\r\n        this.Marks = arrayVisualizer.getMarks()\r\n    }\r\n\r\n    readValue(index, arr = this.arrayVisualizer.getPseudoArray()) {\r\n        return arr[index].getValue()\r\n    }\r\n\r\n    compareInArr(a, b, arr = this.arrayVisualizer.getPseudoArray()) {\r\n        let curComparisons = this.arrayVisualizer.getState().comparisons + 1\r\n        this.arrayVisualizer.setState({\r\n            comparisons: curComparisons\r\n        })\r\n        this.compareWithDelay([a,b], [])\r\n        return this.compareValues(arr[a], arr[b])\r\n    }\r\n\r\n    get(index, arr = this.arrayVisualizer.getPseudoArray()){\r\n        return arr[index];\r\n    }\r\n\r\n    //TODO: add marks\r\n    compareValues(a, b){\r\n        let toMark = []\r\n        let toSound = []\r\n        let tmpA\r\n        let tmpB\r\n        if(typeof a === \"object\"){\r\n            tmpA = a.getValue()\r\n            let index = this.arrayVisualizer.getPseudoArray().findIndex(element => {return element.getValue() === tmpA})\r\n            if(index !== -1){\r\n                toMark.push(index)\r\n            }\r\n        }else{\r\n            tmpA = a\r\n        }\r\n\r\n        if(typeof b === \"object\"){\r\n            tmpB = b.getValue()\r\n            let index = this.arrayVisualizer.getPseudoArray().findIndex(element => {return element.getValue() === tmpB})\r\n            if(index !== -1) {\r\n                toMark.push(index)\r\n            }\r\n        }else{\r\n            tmpB = b\r\n        }\r\n\r\n        toSound = [tmpA, tmpB]\r\n\r\n        // let tmpA = typeof a === \"object\" ? a.getValue() : a\r\n        // let tmpB = typeof b === \"object\" ? b.getValue() : b\r\n\r\n        this.compareWithDelay(toMark, toSound)\r\n        return tmpA - tmpB;\r\n    }\r\n\r\n    compareWithDelay(toMark, toSound, delay = this.Delays.getDelayInc()/5){\r\n        this.Delays.push(setTimeout(this.compareStub.bind(this), this.Delays.incDelay(\"Write\", delay), toMark, toSound))\r\n    }\r\n\r\n    compareStub(toMark = [], toSound = []){\r\n        let curComparisons = this.arrayVisualizer.getState().comparisons + 1\r\n        this.arrayVisualizer.setState({\r\n            comparisons: curComparisons\r\n        })\r\n        for(let i of toSound){\r\n            this.Sounds.playSound(i)\r\n        }\r\n        // console.log(toMark)\r\n        // this.Marks.markUnmarkMany(toMark,{type: \"Additional\", color: [0,255,0]})\r\n        this.Marks.markUnmarkMany(toMark,{type: \"Default\"})\r\n    }\r\n\r\n    auxGet(index, arrIndex, isPseudo = true){\r\n        if(isPseudo){\r\n            return this.arrayVisualizer.getPseudoAuxArrays()[arrIndex][index]\r\n        }else {\r\n            return this.arrayVisualizer.getAuxArrays()[arrIndex][index]\r\n        }\r\n    }\r\n\r\n\r\n    auxReadValue(index, arrIndex, isPseudo = true){\r\n        if(isPseudo){\r\n            return this.arrayVisualizer.getPseudoAuxArrays()[arrIndex][index].getValue()\r\n        }else {\r\n            return this.arrayVisualizer.getAuxArrays()[arrIndex][index].getValue()\r\n        }\r\n    }\r\n}","import React from 'react';\r\nimport {arraysEquals, deepArrayCopy, getAllMethods, objLength, randomInt} from \"../utils/utils\";\r\nimport {Sorts} from \"../Sorts/Sorts\"\r\nimport {ArrayWindow} from \"../ArrayWindow/ArrayWindow\";\r\nimport {Element} from \"../classes/Element\";\r\nimport {Stats} from \"../Stats/Stats\";\r\nimport {Controls} from \"../Controls/Controls\";\r\nimport {initFunctions} from \"../utils/initFunctions\";\r\nimport {Delays} from \"../ArrayAccess/Delays\";\r\nimport {Sounds} from \"../ArrayAccess/Sounds\";\r\nimport {Marks} from \"../ArrayAccess/Marks\";\r\nimport {Reads} from \"../ArrayAccess/Reads\";\r\nimport {Writes} from \"../ArrayAccess/Writes\";\r\n\r\nconst colors = {\r\n    \"Unmarked\": [255, 255, 255],\r\n    \"Default\": [255, 0, 0],\r\n    \"Additional\": [randomInt(0, 256), randomInt(0, 256), randomInt(0, 256)],\r\n    \"Sorted\": [0, 255, 0],\r\n    \"Analysis\": [0, 0, 255]\r\n}\r\n\r\nexport class ArrayVisualizer extends React.Component {\r\n    delays;\r\n    delayInc;\r\n    pseudoArray;\r\n    pseudoAuxArrays;\r\n\r\n    Sorts\r\n    delayIncConst\r\n    showAuxArrays\r\n    enableBarsStroke\r\n    visualStyle\r\n    enableMarks\r\n\r\n    Delays\r\n    Sounds\r\n    Marks\r\n    Reads\r\n    Writes\r\n\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.DEFAULT_ARR_LEN = 100\r\n        this.state = {\r\n            array: this.initArray(initFunctions.linear, this.DEFAULT_ARR_LEN),\r\n            sortName: \"\",\r\n            comparisons: 0,\r\n            maiWrites: 0,\r\n            auxWrites: 0,\r\n            auxArrays: {}\r\n        }\r\n        this.pseudoArray = deepArrayCopy(this.state.array)\r\n        this.Delays = new Delays(this)\r\n        this.Sounds = new Sounds(this)\r\n        this.Marks = new Marks(this)\r\n        this.Reads = new Reads(this)\r\n\r\n        this.prevArray = []\r\n\r\n        this.Writes = new Writes(this)\r\n        this.pseudoAuxArrays = []\r\n        this.Sorts = new Sorts(this);\r\n        this.showAuxArrays = true\r\n        this.enableBarsStroke = true\r\n        this.enableMarks = true\r\n        this.visualStyle = {\r\n            // style: \"bars\",\r\n            style: \"bars\",\r\n            barsStroke: true,\r\n        }\r\n    }\r\n\r\n    initArray(func, length, setToState=false) {\r\n        let arr = []\r\n        for (let i = 0; i < length; ++i) {\r\n            let element = new Element(func(i, length), \"Unmarked\", [255, 255, 255], [0,0,0,0])\r\n            arr.push(element)\r\n        }\r\n        if(setToState){\r\n            this.setState({\r\n                array: arr\r\n            })\r\n        }else {\r\n            return arr;\r\n        }\r\n    }\r\n\r\n    nullify() {\r\n        this.Delays.resetDelays()\r\n        this.setState(\r\n            {\r\n                comparisons: 0,\r\n                mainWrites: 0,\r\n                auxWrites: 0\r\n            }\r\n        )\r\n        // eslint-disable-next-line react/no-direct-mutation-state\r\n        this.state.writes = 0;\r\n        // eslint-disable-next-line react/no-direct-mutation-state\r\n        this.state.comparisons = 0;\r\n    }\r\n\r\n    setShowAuxArrays(val){\r\n        this.showAuxArrays = val\r\n    }\r\n\r\n    setEnableBarsStroke(val){\r\n        this.visualStyle.barsStroke = val;\r\n        this.forceMainArrayUpdate()\r\n    }\r\n\r\n    setVisualStyle(val){\r\n        this.visualStyle.style = val;\r\n        this.forceMainArrayUpdate()\r\n    }\r\n\r\n    setEnableMarks(val){\r\n        this.enableMarks = val;\r\n        if(!val){\r\n            this.Marks.clearAllMarks()\r\n        }\r\n    }\r\n\r\n    getEnableMarks(){\r\n        return this.enableMarks;\r\n    }\r\n\r\n    getArrayVisualizer() {\r\n        return this;\r\n    }\r\n\r\n    getPseudoArray() {\r\n        return this.pseudoArray;\r\n    }\r\n\r\n    getState(){\r\n        return this.state\r\n    }\r\n\r\n    getArrLength(){\r\n        return this.state.array.length;\r\n    }\r\n\r\n    getMainArray(){\r\n        return this.state.array\r\n    }\r\n\r\n    getPseudoAuxArrays(){\r\n        return this.pseudoAuxArrays\r\n    }\r\n\r\n    getDelays(){\r\n        return this.Delays\r\n    }\r\n\r\n    getSounds(){\r\n        return this.Sounds;\r\n    }\r\n\r\n    getMarks(){\r\n        return this.Marks;\r\n    }\r\n\r\n    getAuxArrays(){\r\n        return this.state.auxArrays\r\n    }\r\n\r\n    getReads(){\r\n        return this.Reads;\r\n    }\r\n\r\n    getWrites(){\r\n        return this.Writes\r\n    }\r\n\r\n\r\n    stopSort(){\r\n        // this.resetDelay()\r\n        this.Delays.resetDelays()\r\n        this.Marks.clearAllMarks()\r\n        this.setState({\r\n                auxArrays: []\r\n            }\r\n        )\r\n    }\r\n\r\n    shuffleArray(func) {\r\n        this.nullify()\r\n        this.setState({\r\n            sortName: \"Shuffle\"\r\n        })\r\n        this.backupArray()\r\n        func(this);\r\n        // let instructions = func(this);\r\n        // for(let i of instructions){\r\n        //     if(i.cmd === \"swap\"){\r\n        //         this.Writes.swapWithDelay(i.a, i.b, this.state.array, true, this.Delays.getDelayInc()/5, true)\r\n        //     }\r\n        // }\r\n\r\n    }\r\n\r\n    restoreArray(){\r\n        this.setState({\r\n            array: deepArrayCopy(this.prevArray)\r\n        })\r\n    }\r\n\r\n    backupArray(){\r\n        this.prevArray = deepArrayCopy(this.state.array)\r\n    }\r\n\r\n\r\n    setSortName(sortName){\r\n        this.setState({\r\n            sortName: sortName\r\n        })\r\n    }\r\n\r\n    initPseudoArray(){\r\n        this.pseudoArray = deepArrayCopy(this.state.array)\r\n    }\r\n\r\n    sortClickEvent() {\r\n    }\r\n\r\n    forceMainArrayUpdate(){\r\n        let tmp = this.state.array;\r\n        this.setState({\r\n            array: tmp\r\n        })\r\n    }\r\n\r\n    updateDelayInc(val){\r\n        this.delayInc = val/this.getArrLength();\r\n    }\r\n\r\n    updateArrLength(len){\r\n        this.setState({\r\n            array: this.initArray(initFunctions.linear, len)\r\n        })\r\n        this.pseudoArray = deepArrayCopy(this.state.array)\r\n\r\n        this.Sorts.arrLength = this.getArrLength()\r\n        // this.updateDelayInc(this.delayIncConst)\r\n        this.Delays.updateDelayInc();\r\n    }\r\n\r\n    genArrayWindows(){\r\n        let tmp = []\r\n        if(this.showAuxArrays) {\r\n            for (let i = objLength(this.state.auxArrays) - 1; i >= 0; i--) {\r\n                tmp.push(\r\n                    <ArrayWindow key={objLength(this.state.auxArrays) - i} array={this.state.auxArrays[i]}\r\n                                 mainArray={this.state.array} height={100 / (1 + objLength(this.state.auxArrays))} visualProps = {this.visualStyle} />\r\n                )\r\n            }\r\n        }\r\n        return tmp\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Stats sortName={this.state.sortName} comparisons={this.state.comparisons} mainWrites={this.state.mainWrites} auxWrites={this.state.auxWrites} arrLength={this.getArrLength()}/>\r\n                <div style={{height: \"100vh\"}}>\r\n                {/*<div>*/}\r\n                    {this.genArrayWindows()}\r\n                    <ArrayWindow array={this.state.array} mainArray={this.state.array} height={this.showAuxArrays ? 100/(1+objLength(this.state.auxArrays)) : 100} visualProps={this.visualStyle}/>\r\n                </div>\r\n                <div>\r\n                    <Controls arrayVisualizer={this} sorts={this.Sorts}/>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport {ArrayVisualizer} from \"./components/ArrayVisualizer/ArrayVisualizer\";\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\n\r\n\r\n\r\n\r\n\r\nReactDOM.render(\r\n    <ArrayVisualizer></ArrayVisualizer>,\r\n  document.getElementById('root')\r\n);\r\n\r\n\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}